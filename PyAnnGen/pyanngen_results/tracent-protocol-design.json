{
    "tracent-protocol-design/stubs/__init__.py": {},
    "tracent-protocol-design/stubs/fnvhash/__init__.py": {
        "fnv": {
            "name": "fnv",
            "location": 1,
            "return": [],
            "arguments": {
                "data": [],
                "hval_init": [],
                "fnv_prime": [],
                "fnv_size": []
            }
        },
        "fnva": {
            "name": "fnva",
            "location": 2,
            "return": [],
            "arguments": {
                "data": [],
                "hval_init": [],
                "fnv_prime": [],
                "fnv_size": []
            }
        },
        "fnv0_32": {
            "name": "fnv0_32",
            "location": 4,
            "return": [],
            "arguments": {
                "data": [],
                "hval_init": []
            }
        },
        "fnv1_32": {
            "name": "fnv1_32",
            "location": 6,
            "return": [],
            "arguments": {
                "data": [],
                "hval_init": []
            }
        },
        "fnv1a_32": {
            "name": "fnv1a_32",
            "location": 8,
            "return": [],
            "arguments": {
                "data": [],
                "hval_init": []
            }
        },
        "fnv0_64": {
            "name": "fnv0_64",
            "location": 10,
            "return": [],
            "arguments": {
                "data": [],
                "hval_init": []
            }
        },
        "fnv1_64": {
            "name": "fnv1_64",
            "location": 12,
            "return": [],
            "arguments": {
                "data": [],
                "hval_init": []
            }
        },
        "fnv1a_64": {
            "name": "fnv1a_64",
            "location": 14,
            "return": [],
            "arguments": {
                "data": [],
                "hval_init": []
            }
        }
    },
    "tracent-protocol-design/stubs/google/__init__.py": {},
    "tracent-protocol-design/stubs/google/protobuf/text_format.py": {
        "MessageToString": {
            "name": "MessageToString",
            "location": 5,
            "return": [],
            "arguments": {
                "pdu": []
            }
        }
    },
    "tracent-protocol-design/stubs/google/protobuf/__init__.py": {},
    "tracent-protocol-design/stubs/opentracing/propagation.py": {},
    "tracent-protocol-design/stubs/opentracing/scope.py": {
        "Scope.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "manager": [],
                "span": []
            }
        },
        "Scope.span": {
            "name": "span",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.manager": {
            "name": "manager",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.close": {
            "name": "close",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.__enter__": {
            "name": "__enter__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.__exit__": {
            "name": "__exit__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        }
    },
    "tracent-protocol-design/stubs/opentracing/scope_manager.py": {
        "ScopeManager.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopeManager.activate": {
            "name": "activate",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "span": [],
                "finish_on_close": []
            }
        },
        "ScopeManager.active": {
            "name": "active",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tracent-protocol-design/stubs/opentracing/span.py": {
        "SpanContext.baggage": {
            "name": "baggage",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "opentracing.tracer.Tracer"
                ],
                "context": []
            }
        },
        "Span.context": {
            "name": "context",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.tracer": {
            "name": "tracer",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.set_operation_name": {
            "name": "set_operation_name",
            "location": 41,
            "return": [
                "opentracing.span.Span"
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "str"
                ]
            }
        },
        "Span.finish": {
            "name": "finish",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finish_time": []
            }
        },
        "Span.set_tag": {
            "name": "set_tag",
            "location": 45,
            "return": [
                "opentracing.span.Span"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": []
            }
        },
        "Span.log_kv": {
            "name": "log_kv",
            "location": 47,
            "return": [
                "opentracing.span.Span"
            ],
            "arguments": {
                "self": [],
                "key_values": [
                    "Dict[(str, str)]"
                ],
                "timestamp": []
            }
        },
        "Span.set_baggage_item": {
            "name": "set_baggage_item",
            "location": 51,
            "return": [
                "EventBasedSpan"
            ],
            "arguments": {
                "self": [
                    "_TEventBasedSpan"
                ],
                "key": [],
                "value": []
            }
        },
        "Span.get_baggage_item": {
            "name": "get_baggage_item",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Span.__enter__": {
            "name": "__enter__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.__exit__": {
            "name": "__exit__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "Span.log_event": {
            "name": "log_event",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "payload": []
            }
        },
        "Span.log": {
            "name": "log",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tracent-protocol-design/stubs/opentracing/tracer.py": {
        "child_of": {
            "name": "child_of",
            "location": 60,
            "return": [],
            "arguments": {
                "referenced_context": []
            }
        },
        "follows_from": {
            "name": "follows_from",
            "location": 63,
            "return": [],
            "arguments": {
                "referenced_context": []
            }
        },
        "start_child_span": {
            "name": "start_child_span",
            "location": 66,
            "return": [],
            "arguments": {
                "parent_span": [],
                "operation_name": [],
                "tags": [],
                "start_time": []
            }
        },
        "Tracer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope_manager": [
                    "opentracing.scope_manager.ScopeManager"
                ]
            }
        },
        "Tracer.scope_manager": {
            "name": "scope_manager",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tracer.active_span": {
            "name": "active_span",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tracer.start_active_span": {
            "name": "start_active_span",
            "location": 25,
            "return": [
                "opentracing.scope.Scope"
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "Optional[str]"
                ],
                "child_of": [
                    "Optional[Union[(opentracing.span.Span, tracent.opentracing.context.SpanContext)]]"
                ],
                "references": [
                    "Optional[Iterable[opentracing.tracer.Reference]]"
                ],
                "tags": [],
                "start_time": [
                    "Optional[float]"
                ],
                "ignore_active_span": [
                    "bool"
                ],
                "finish_on_close": [
                    "bool"
                ]
            }
        },
        "Tracer.start_span": {
            "name": "start_span",
            "location": 34,
            "return": [
                "opentracing.span.Span"
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "Optional[str]"
                ],
                "child_of": [
                    "Optional[Union[(opentracing.span.Span, tracent.opentracing.context.SpanContext)]]"
                ],
                "references": [
                    "Optional[Iterable[opentracing.tracer.Reference]]"
                ],
                "tags": [],
                "start_time": [
                    "Optional[float]"
                ],
                "ignore_active_span": [
                    "bool"
                ]
            }
        },
        "Tracer.inject": {
            "name": "inject",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span_context": [],
                "format": [],
                "carrier": []
            }
        },
        "Tracer.extract": {
            "name": "extract",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "format": [],
                "carrier": []
            }
        }
    },
    "tracent-protocol-design/stubs/opentracing/__init__.py": {
        "global_tracer": {
            "name": "global_tracer",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "set_global_tracer": {
            "name": "set_global_tracer",
            "location": 21,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "tracent-protocol-design/test/test_eu.py": {
        "TestTracingDataHeader.testRoutingInfoCanBeExtracted": {
            "name": "testRoutingInfoCanBeExtracted",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryReporter.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryReporter.send": {
            "name": "send",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routing_key": [
                    "bytes"
                ],
                "serialized_tracing_data": [
                    "bytes"
                ]
            }
        },
        "InMemoryReporter.broadcast": {
            "name": "broadcast",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialized_tracing_data": [
                    "bytes"
                ]
            }
        },
        "InMemoryReporter._to_text": {
            "name": "_to_text",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "serialized_tracing_data": [
                    "bytes"
                ]
            }
        },
        "TestEU.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEU.testCreateAndDestroyEU": {
            "name": "testCreateAndDestroyEU",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEU.testCrossEuTrace": {
            "name": "testCrossEuTrace",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracent-protocol-design/test/test_eye.py": {
        "TracentEyeTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TracentEyeTestCase.test_simple_diagram": {
            "name": "test_simple_diagram",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracent-protocol-design/test/__init__.py": {},
    "tracent-protocol-design/tracent/__init__.py": {},
    "tracent-protocol-design/tracent/eventmodel/concurrency_model.py": {
        "ConcurrencyModel.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace_builder": [
                    "str",
                    "Optional[List]",
                    "Callable",
                    "T"
                ]
            }
        },
        "ConcurrencyModel.get_eu": {
            "name": "get_eu",
            "location": 39,
            "return": [
                "tracent.eventmodel.eu.ExecutionUnit"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcurrencyModel.finish": {
            "name": "finish",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonThreads.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace_builder": [
                    "Sequence[str]",
                    "Union[str, int]",
                    "List[str]",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "PythonThreads.get_eu": {
            "name": "get_eu",
            "location": 60,
            "return": [
                "tracent.eventmodel.eu.ExecutionUnit"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonThreads.finish": {
            "name": "finish",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcurrencyModel.Acquirable.release": {
            "name": "release",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcurrencyModel.Acquirable.locked": {
            "name": "locked",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcurrencyModel.Acquirable.acquire": {
            "name": "acquire",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "blocking": [
                    "bool"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent/eventmodel/eu.py": {
        "ExecutionUnit.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace_builder": [
                    "str",
                    "Optional[str]",
                    "float",
                    "None"
                ],
                "eu_type": [
                    "str",
                    "bool",
                    "Optional[Pattern]",
                    "typing.Pattern",
                    "Optional[Dict]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "ExecutionUnit._init_event_numbering": {
            "name": "_init_event_numbering",
            "location": 46,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionUnit.trace_point": {
            "name": "trace_point",
            "location": 63,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "trace_id": [
                    "Optional[uuid.UUID]"
                ],
                "event_type": [
                    "str",
                    "int",
                    "Optional[dict]",
                    "dict[, ]",
                    "None",
                    "UUID"
                ],
                "status": [
                    "str",
                    "int",
                    "Optional[dict]",
                    "dict[, ]",
                    "None",
                    "UUID"
                ],
                "causes": [
                    "Iterable"
                ],
                "tags": [
                    "dict[, ]",
                    "Dict[str, str]",
                    "Iterable[Tuple[str, Any]]",
                    "dict",
                    "TagType",
                    "bool",
                    "List[str]",
                    "type",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "ExecutionUnit._get_event_id": {
            "name": "_get_event_id",
            "location": 96,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "event_sequence_number": [
                    "int"
                ]
            }
        },
        "ExecutionUnit.get_trace_context": {
            "name": "get_trace_context",
            "location": 103,
            "return": [
                "str",
                "int",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionUnit.peek": {
            "name": "peek",
            "location": 106,
            "return": [
                "EventReference",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionUnit.add_tags": {
            "name": "add_tags",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionUnit._flush_tags": {
            "name": "_flush_tags",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionUnit.finish": {
            "name": "finish",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionUnit._init_event_numbering._generate_next_event_id": {
            "name": "_generate_next_event_id",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tracent-protocol-design/tracent/eventmodel/reporter.py": {
        "AbstractReporter.send": {
            "name": "send",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routing_key": [
                    "bytes"
                ],
                "serialized_tracing_data": [
                    "bytes"
                ]
            }
        },
        "AbstractReporter.broadcast": {
            "name": "broadcast",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialized_tracing_data": [
                    "bytes"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent/eventmodel/tracebuilder.py": {
        "AbstractTraceBuilder.start_eu": {
            "name": "start_eu",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ],
                "eu_type": [
                    "bytes",
                    "str",
                    "oob.tracent_pb2.ExecutionUniType",
                    "int",
                    "typing.Any",
                    "Optional[Any]",
                    "None",
                    "Optional[float]",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "tags": [
                    "Dict[(str, Optional[Union[(bytes, float, str)]])]"
                ]
            }
        },
        "AbstractTraceBuilder.finish_eu": {
            "name": "finish_eu",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ]
            }
        },
        "AbstractTraceBuilder.start_trace": {
            "name": "start_trace",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ],
                "trace_id": [
                    "uuid.UUID"
                ]
            }
        },
        "AbstractTraceBuilder.add_event": {
            "name": "add_event",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ],
                "trace_id": [
                    "uuid.UUID"
                ],
                "sequence_number": [
                    "int"
                ],
                "event_type": [
                    "int",
                    "bytes",
                    "dict[str, int]",
                    "oob.tracent_pb2.EvenType",
                    "uuid.UUID",
                    "oob.tracent_pb2.EvenStatus",
                    "Dict[str, int]"
                ],
                "status": [
                    "int",
                    "bytes",
                    "dict[str, int]",
                    "oob.tracent_pb2.EvenType",
                    "uuid.UUID",
                    "oob.tracent_pb2.EvenStatus",
                    "Dict[str, int]"
                ],
                "causes": [
                    "Iterable[EventReference]"
                ]
            }
        },
        "AbstractTraceBuilder.add_tags": {
            "name": "add_tags",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ],
                "event_sequence_number": [
                    "bytes"
                ],
                "tags": [
                    "Dict[(str, Optional[Union[(bytes, float, str)]])]"
                ]
            }
        },
        "AbstractTraceBuilder.finish_trace": {
            "name": "finish_trace",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ],
                "trace_id": [
                    "uuid.UUID"
                ]
            }
        },
        "SimpleTraceBuilder.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reporter": [
                    "tracent.eventmodel.reporter.AbstractReporter"
                ]
            }
        },
        "SimpleTraceBuilder.start_eu": {
            "name": "start_eu",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ],
                "eu_type": [
                    "bool",
                    "oob.tracent_pb2.ExecutionUniType",
                    "typing.Any",
                    "str",
                    "None",
                    "Optional[Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "tags": [
                    "Dict[(str, Optional[Union[(bytes, float, str)]])]"
                ]
            }
        },
        "SimpleTraceBuilder.finish_eu": {
            "name": "finish_eu",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ]
            }
        },
        "SimpleTraceBuilder.start_trace": {
            "name": "start_trace",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ],
                "trace_id": [
                    "uuid.UUID"
                ]
            }
        },
        "SimpleTraceBuilder.finish_trace": {
            "name": "finish_trace",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ],
                "trace_id": [
                    "uuid.UUID"
                ]
            }
        },
        "SimpleTraceBuilder.add_event": {
            "name": "add_event",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ],
                "trace_id": [
                    "uuid.UUID"
                ],
                "sequence_number": [
                    "int"
                ],
                "event_type": [
                    "bool",
                    "oob.tracent_pb2.EvenType",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "int"
                ],
                "status": [
                    "int",
                    "oob.tracent_pb2.EvenStatus",
                    "str",
                    "dict[, ]",
                    "dict"
                ],
                "causes": [
                    "Iterable[EventReference]"
                ]
            }
        },
        "SimpleTraceBuilder.add_tags": {
            "name": "add_tags",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eu_id": [
                    "bytes"
                ],
                "event_sequence_number": [
                    "bytes"
                ],
                "tags": [
                    "Dict[(str, Optional[Union[(bytes, float, str)]])]"
                ]
            }
        },
        "SimpleTraceBuilder._add_tag": {
            "name": "_add_tag",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag_container": [
                    "str",
                    "List[str]",
                    "Union[list, str]"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "Optional[Union[(bytes, float, str)]]"
                ],
                "encode_string_values": [
                    "bool"
                ]
            }
        },
        "SimpleTraceBuilder._send": {
            "name": "_send",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracing_data_pdu": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "StringTable.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringTable.get_alias": {
            "name": "get_alias",
            "location": 267,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "StringTable.save_to": {
            "name": "save_to",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "int",
                    "str",
                    "IO[Any]",
                    "bytes",
                    "float"
                ]
            }
        },
        "SimpleTraceBuilder.EuState.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracent-protocol-design/tracent/eventmodel/__init__.py": {
        "delegate_to": {
            "name": "delegate_to",
            "location": 20,
            "return": [
                "F"
            ],
            "arguments": {
                "f": [
                    "F"
                ]
            }
        },
        "tracent": {
            "name": "tracent",
            "location": 86,
            "return": [
                "Tracent"
            ],
            "arguments": {}
        },
        "delegate_to._delegate_to_eu": {
            "name": "_delegate_to_eu",
            "location": 22,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tracent.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tracent.lock_class": {
            "name": "lock_class",
            "location": 51,
            "return": [
                "Callable[..., T]",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tracent.my_eu_id": {
            "name": "my_eu_id",
            "location": 55,
            "return": [
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tracent.set_threading_model": {
            "name": "set_threading_model",
            "location": 60,
            "return": [
                "racent"
            ],
            "arguments": {
                "self": [
                    "_TTracent"
                ],
                "threading_model_class": [
                    "Type[ConcreteThreadingModel]"
                ]
            }
        },
        "Tracent.set_reporter": {
            "name": "set_reporter",
            "location": 66,
            "return": [
                "racent"
            ],
            "arguments": {
                "self": [
                    "_TTracent"
                ],
                "reporter": [
                    "tracent.eventmodel.reporter.AbstractReporter"
                ]
            }
        },
        "Tracent.start_tracing": {
            "name": "start_tracing",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace_builder_class": [
                    "Type[ConcreteTraceBuilder]"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent/oob/tracent_pb2.py": {},
    "tracent-protocol-design/tracent/oob/__init__.py": {},
    "tracent-protocol-design/tracent/opentracing/binary_propagator.py": {
        "SimpleBinaryPropagator.inject": {
            "name": "inject",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span_context": [
                    "tracent.opentracing.context.SpanContext"
                ],
                "carrier": [
                    "bytearray"
                ]
            }
        },
        "SimpleBinaryPropagator.extract": {
            "name": "extract",
            "location": 35,
            "return": [
                "tracent.opentracing.context.SpanContext"
            ],
            "arguments": {
                "self": [],
                "carrier": [
                    "memoryview"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent/opentracing/context.py": {
        "SpanContext.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_reference": [
                    "str"
                ],
                "baggage": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "SpanContext.baggage": {
            "name": "baggage",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpanContext.with_baggage_item": {
            "name": "with_baggage_item",
            "location": 25,
            "return": [
                "SpanContext"
            ],
            "arguments": {
                "self": [
                    "_TSpanContext"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent/opentracing/propagator.py": {
        "Propagator.inject": {
            "name": "inject",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span_context": [
                    "tracent.opentracing.context.SpanContext"
                ],
                "carrier": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Propagator.extract": {
            "name": "extract",
            "location": 16,
            "return": [
                "tracent.opentracing.context.SpanContext"
            ],
            "arguments": {
                "self": [],
                "carrier": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent/opentracing/span.py": {
        "EventBasedSpan.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "opentracing.tracer.Tracer"
                ],
                "trace_id": [
                    "Optional[uuid.UUID]"
                ],
                "operation_name": [
                    "Optional[str]"
                ],
                "causes": [
                    "Iterable[tracent.opentracing.context.SpanContext]"
                ],
                "tags": [
                    "Optional[int]",
                    "int",
                    "Optional[uuid.UUID]",
                    "List[int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "EventBasedSpan.set_operation_name": {
            "name": "set_operation_name",
            "location": 54,
            "return": [
                "opentracing.span.Span"
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "str"
                ]
            }
        },
        "EventBasedSpan.set_tag": {
            "name": "set_tag",
            "location": 58,
            "return": [
                "opentracing.span.Span"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "EventBasedSpan.log_kv": {
            "name": "log_kv",
            "location": 62,
            "return": [
                "opentracing.span.Span"
            ],
            "arguments": {
                "self": [],
                "key_values": [
                    "Dict[(str, str)]"
                ],
                "timestamp": [
                    "str",
                    "float",
                    "None",
                    "bytes"
                ]
            }
        },
        "EventBasedSpan.finish": {
            "name": "finish",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finish_time": [
                    "int",
                    "None",
                    "float",
                    "Sequence[str]",
                    "str",
                    "typing.Sequence[str]",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ]
            }
        },
        "EventBasedSpan.context": {
            "name": "context",
            "location": 94,
            "return": [
                "bool",
                "SpanContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventBasedSpan.set_baggage_item": {
            "name": "set_baggage_item",
            "location": 108,
            "return": [
                "EventBasedSpan"
            ],
            "arguments": {
                "self": [
                    "_TEventBasedSpan"
                ],
                "key": [
                    "bytes",
                    "int",
                    "Sequence[str]",
                    "float",
                    "typing.Sequence[str]",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]"
                ],
                "value": [
                    "bytes",
                    "int",
                    "Sequence[str]",
                    "float",
                    "typing.Sequence[str]",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]"
                ]
            }
        },
        "EventBasedSpan.get_baggage_item": {
            "name": "get_baggage_item",
            "location": 114,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent/opentracing/text_propagator.py": {
        "TextPropagator.inject": {
            "name": "inject",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span_context": [
                    "tracent.opentracing.context.SpanContext"
                ],
                "carrier": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "TextPropagator.extract": {
            "name": "extract",
            "location": 32,
            "return": [
                "tracent.opentracing.context.SpanContext"
            ],
            "arguments": {
                "self": [],
                "carrier": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent/opentracing/tracer.py": {
        "EventBasedTracer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope_manager": [
                    "opentracing.scope_manager.ScopeManager"
                ]
            }
        },
        "EventBasedTracer.register_propagator": {
            "name": "register_propagator",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format_identifier": [
                    "str"
                ],
                "propagator": [
                    "tracent.opentracing.propagator.Propagator"
                ]
            }
        },
        "EventBasedTracer.register_required_propagators": {
            "name": "register_required_propagators",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventBasedTracer.start_active_span": {
            "name": "start_active_span",
            "location": 48,
            "return": [
                "opentracing.scope.Scope"
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "Optional[str]"
                ],
                "child_of": [
                    "Optional[Union[(opentracing.span.Span, tracent.opentracing.context.SpanContext)]]"
                ],
                "references": [
                    "Optional[Iterable[opentracing.tracer.Reference]]"
                ],
                "tags": [
                    "None",
                    "str",
                    "Format",
                    "bool",
                    "Optional[str]"
                ],
                "start_time": [
                    "Optional[float]"
                ],
                "ignore_active_span": [
                    "bool"
                ],
                "finish_on_close": [
                    "bool"
                ]
            }
        },
        "EventBasedTracer.start_span": {
            "name": "start_span",
            "location": 69,
            "return": [
                "opentracing.span.Span"
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "Optional[str]"
                ],
                "child_of": [
                    "Optional[Union[(opentracing.span.Span, tracent.opentracing.context.SpanContext)]]"
                ],
                "references": [
                    "Optional[Iterable[opentracing.tracer.Reference]]"
                ],
                "tags": [
                    "str",
                    "None"
                ],
                "start_time": [
                    "Optional[float]"
                ],
                "ignore_active_span": [
                    "bool"
                ]
            }
        },
        "EventBasedTracer.inject": {
            "name": "inject",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span_context": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "Union[int, str]"
                ],
                "format": [
                    "str",
                    "int",
                    "float"
                ],
                "carrier": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "Union[int, str]"
                ]
            }
        },
        "EventBasedTracer.extract": {
            "name": "extract",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str"
                ],
                "carrier": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent/opentracing/w3c_propagator.py": {
        "W3CPropagator.inject": {
            "name": "inject",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span_context": [
                    "tracent.opentracing.context.SpanContext"
                ],
                "carrier": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "W3CPropagator.extract": {
            "name": "extract",
            "location": 37,
            "return": [
                "tracent.opentracing.context.SpanContext"
            ],
            "arguments": {
                "self": [],
                "carrier": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent/opentracing/__init__.py": {},
    "tracent-protocol-design/tracent_eye/layout_generator.py": {
        "LayoutGenerator.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayoutGenerator.visit_trace_diagram": {
            "name": "visit_trace_diagram",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.TraceDiagram"
                ]
            }
        },
        "LayoutGenerator.visit_life_line": {
            "name": "visit_life_line",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.LifeLine"
                ]
            }
        },
        "LayoutGenerator.visit_head": {
            "name": "visit_head",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Head"
                ]
            }
        },
        "LayoutGenerator.visit_vertex": {
            "name": "visit_vertex",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Vertex"
                ]
            }
        },
        "LayoutGenerator.visit_destruction": {
            "name": "visit_destruction",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Destruction"
                ]
            }
        },
        "LayoutGenerator.visit_activation": {
            "name": "visit_activation",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Activation"
                ]
            }
        },
        "LayoutGenerator.visit_foot": {
            "name": "visit_foot",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Foot"
                ]
            }
        },
        "LayoutGenerator.visit_spine": {
            "name": "visit_spine",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Spine"
                ]
            }
        },
        "LayoutGenerator.visit_edge": {
            "name": "visit_edge",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Edge"
                ]
            }
        },
        "LayoutGenerator._visit_base_edge": {
            "name": "_visit_base_edge",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "de": [
                    "tracent_eye.trace_diagram._BaseEdge"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent_eye/svg_renderer.py": {
        "MockFont.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row_distance": [
                    "float"
                ],
                "glyph_width": [
                    "float"
                ],
                "horizontal_margin": [
                    "float"
                ],
                "vertical_margin": [
                    "float"
                ],
                "vertical_offset": [
                    "float"
                ]
            }
        },
        "MockFont.get_bounding_box": {
            "name": "get_bounding_box",
            "location": 34,
            "return": [
                "Tuple[(tracent_eye.trace_diagram.Point, Tuple[(int, int)], int)]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]"
                ]
            }
        },
        "Shape.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawing": [
                    "int",
                    "float",
                    "bool"
                ],
                "g": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PrebuiltShape.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawing": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ],
                "g": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "PrebuiltShape._pre_build": {
            "name": "_pre_build",
            "location": 106,
            "return": [
                "svgwrite.base.BaseElement",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotLikeShape.__call__": {
            "name": "__call__",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.DiagramElement"
                ]
            }
        },
        "DotLikeShape._get_text_lines": {
            "name": "_get_text_lines",
            "location": 138,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "de": [
                    "tracent_eye.trace_diagram.DiagramElement"
                ]
            }
        },
        "DotLikeShape._align_bb": {
            "name": "_align_bb",
            "location": 147,
            "return": [
                "tracent_eye.trace_diagram.Point"
            ],
            "arguments": {
                "position": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "DotLikeShape._build_shape": {
            "name": "_build_shape",
            "location": 151,
            "return": [
                "svgwrite.base.BaseElement",
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]"
                ],
                "bb_insert": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "bb_size": [
                    "Tuple[(int, int)]"
                ],
                "text_offset": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "row_distance": [
                    "int"
                ]
            }
        },
        "WithTags._get_text_lines": {
            "name": "_get_text_lines",
            "location": 160,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "de": [
                    "tracent_eye.trace_diagram.DiagramElement"
                ]
            }
        },
        "SymbolBasedShapeBuilder._pre_build": {
            "name": "_pre_build",
            "location": 167,
            "return": [
                "str",
                "bytes",
                "tuple[typing.Union[typing.Type,typing.Type]]",
                "bool",
                "set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolBasedShapeBuilder._build_symbol": {
            "name": "_build_symbol",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolBasedShapeBuilder._build_shape": {
            "name": "_build_shape",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]"
                ],
                "bb_insert": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "bb_size": [
                    "Tuple[(int, int)]"
                ],
                "text_offset": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "row_distance": [
                    "int"
                ]
            }
        },
        "Rectangle.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawing": [
                    "str"
                ],
                "g": [
                    "str"
                ],
                "size": [
                    "Tuple[(float, float)]"
                ]
            }
        },
        "Rectangle._build_symbol": {
            "name": "_build_symbol",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circle.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawing": [
                    "str"
                ],
                "g": [
                    "str"
                ],
                "radius": [
                    "float"
                ]
            }
        },
        "Circle._build_symbol": {
            "name": "_build_symbol",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XCross.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawing": [
                    "str"
                ],
                "g": [
                    "str"
                ],
                "size": [
                    "Tuple[(float, float)]"
                ]
            }
        },
        "XCross._build_symbol": {
            "name": "_build_symbol",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignTopMiddle._align_bb": {
            "name": "_align_bb",
            "location": 244,
            "return": [
                "tracent_eye.trace_diagram.Point"
            ],
            "arguments": {
                "position": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "AlignBottomMiddle._align_bb": {
            "name": "_align_bb",
            "location": 253,
            "return": [
                "tracent_eye.trace_diagram.Point"
            ],
            "arguments": {
                "position": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "AlignCenterMiddle._align_bb": {
            "name": "_align_bb",
            "location": 263,
            "return": [
                "tracent_eye.trace_diagram.Point"
            ],
            "arguments": {
                "position": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "AlignCenterLeft._align_bb": {
            "name": "_align_bb",
            "location": 272,
            "return": [
                "tracent_eye.trace_diagram.Point"
            ],
            "arguments": {
                "position": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "AlignCenterRight._align_bb": {
            "name": "_align_bb",
            "location": 281,
            "return": [
                "tracent_eye.trace_diagram.Point"
            ],
            "arguments": {
                "position": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "LineLikeShape.__call__": {
            "name": "__call__",
            "location": 304,
            "return": [
                "bool",
                "float",
                "int",
                "list[list[float]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "end": [
                    "tracent_eye.trace_diagram.Point"
                ]
            }
        },
        "ArrowLikeShape._pre_build": {
            "name": "_pre_build",
            "location": 332,
            "return": [
                "bool",
                "int",
                "str",
                "float",
                "list[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrowLikeShape._build_arrow": {
            "name": "_build_arrow",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrowLikeShape.__call__": {
            "name": "__call__",
            "location": 349,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "tracent_eye.trace_diagram.Point"
                ],
                "end": [
                    "tracent_eye.trace_diagram.Point"
                ]
            }
        },
        "SymbolSet._make_builder": {
            "name": "_make_builder",
            "location": 391,
            "return": [
                "str",
                "type",
                "Callable",
                "Type[T]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "bases": [
                    "str"
                ],
                "group": [
                    "str"
                ]
            }
        },
        "SymbolSet.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawing": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SymbolSet.head": {
            "name": "head",
            "location": 410,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.foot": {
            "name": "foot",
            "location": 415,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.vertex": {
            "name": "vertex",
            "location": 420,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.destruction": {
            "name": "destruction",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.activation": {
            "name": "activation",
            "location": 430,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.spine": {
            "name": "spine",
            "location": 435,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.edge": {
            "name": "edge",
            "location": 440,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.head_group": {
            "name": "head_group",
            "location": 444,
            "return": [
                "int",
                "str",
                "Callable",
                "set[]",
                "set[str]",
                "list[int]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.foot_group": {
            "name": "foot_group",
            "location": 449,
            "return": [
                "int",
                "str",
                "Callable",
                "set[]",
                "set[str]",
                "list[int]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.vertex_group": {
            "name": "vertex_group",
            "location": 454,
            "return": [
                "int",
                "str",
                "Callable",
                "set[]",
                "set[str]",
                "list[int]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.destruction_group": {
            "name": "destruction_group",
            "location": 459,
            "return": [
                "int",
                "str",
                "Callable",
                "set[]",
                "set[str]",
                "list[int]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.activation_group": {
            "name": "activation_group",
            "location": 464,
            "return": [
                "int",
                "str",
                "Callable",
                "set[]",
                "set[str]",
                "list[int]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.spine_group": {
            "name": "spine_group",
            "location": 469,
            "return": [
                "int",
                "str",
                "Callable",
                "set[]",
                "set[str]",
                "list[int]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolSet.edge_group": {
            "name": "edge_group",
            "location": 474,
            "return": [
                "int",
                "str",
                "Callable",
                "set[]",
                "set[str]",
                "list[int]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticalSymbols.__init__": {
            "name": "__init__",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawing": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "SimpleVerticalSymbols.__init__": {
            "name": "__init__",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawing": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "SVGRenderer.__init__": {
            "name": "__init__",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "symbol_set": [
                    "Type[S]"
                ]
            }
        },
        "SVGRenderer.visit_trace_diagram": {
            "name": "visit_trace_diagram",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.TraceDiagram"
                ]
            }
        },
        "SVGRenderer.visit_life_line": {
            "name": "visit_life_line",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.LifeLine"
                ]
            }
        },
        "SVGRenderer.visit_head": {
            "name": "visit_head",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "head": [
                    "tracent_eye.trace_diagram.Head"
                ]
            }
        },
        "SVGRenderer.visit_vertex": {
            "name": "visit_vertex",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Vertex"
                ]
            }
        },
        "SVGRenderer.visit_destruction": {
            "name": "visit_destruction",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Destruction"
                ]
            }
        },
        "SVGRenderer.visit_activation": {
            "name": "visit_activation",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Activation"
                ]
            }
        },
        "SVGRenderer.visit_foot": {
            "name": "visit_foot",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Foot"
                ]
            }
        },
        "SVGRenderer.visit_spine": {
            "name": "visit_spine",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Spine"
                ]
            }
        },
        "SVGRenderer.visit_edge": {
            "name": "visit_edge",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "tracent_eye.trace_diagram.Edge"
                ]
            }
        },
        "SVGRenderer.drawing": {
            "name": "drawing",
            "location": 557,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracent-protocol-design/tracent_eye/trace_diagram.py": {
        "Point.__add__": {
            "name": "__add__",
            "location": 36,
            "return": [
                "Point"
            ],
            "arguments": {
                "self": [
                    "_TPoint"
                ],
                "other": [
                    "Point"
                ]
            }
        },
        "Point.__sub__": {
            "name": "__sub__",
            "location": 39,
            "return": [
                "Point"
            ],
            "arguments": {
                "self": [
                    "_TPoint"
                ],
                "other": [
                    "Point"
                ]
            }
        },
        "Point.__mul__": {
            "name": "__mul__",
            "location": 42,
            "return": [
                "Point"
            ],
            "arguments": {
                "self": [
                    "_TPoint"
                ],
                "other": [
                    "float"
                ]
            }
        },
        "Point.__abs__": {
            "name": "__abs__",
            "location": 48,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiagramElement.accept": {
            "name": "accept",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "DiagramVisitor"
                ]
            }
        },
        "DiagramVisitor.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "float",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "DiagramVisitor.visit_trace_diagram": {
            "name": "visit_trace_diagram",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "TraceDiagram"
                ]
            }
        },
        "DiagramVisitor.visit_life_line": {
            "name": "visit_life_line",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "LifeLine"
                ]
            }
        },
        "DiagramVisitor.visit_head": {
            "name": "visit_head",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "Head"
                ]
            }
        },
        "DiagramVisitor.visit_foot": {
            "name": "visit_foot",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "Foot"
                ]
            }
        },
        "DiagramVisitor.visit_spine": {
            "name": "visit_spine",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "Spine"
                ]
            }
        },
        "DiagramVisitor.visit_vertex": {
            "name": "visit_vertex",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "Vertex"
                ]
            }
        },
        "DiagramVisitor.visit_destruction": {
            "name": "visit_destruction",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "Destruction"
                ]
            }
        },
        "DiagramVisitor.visit_activation": {
            "name": "visit_activation",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "Activation"
                ]
            }
        },
        "DiagramVisitor.visit_edge": {
            "name": "visit_edge",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "Edge"
                ]
            }
        },
        "DiagramVisitor.visit": {
            "name": "visit",
            "location": 135,
            "return": [
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "de": [
                    "DiagramElement"
                ]
            }
        },
        "TraceDiagram.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_time": [
                    "float"
                ],
                "time_scale": [
                    "float"
                ]
            }
        },
        "TraceDiagram.accept": {
            "name": "accept",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "DiagramVisitor"
                ]
            }
        },
        "LifeLine.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace_diagram": [
                    "TraceDiagram"
                ],
                "tags": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable[str]",
                    "bool",
                    "object"
                ]
            }
        },
        "LifeLine.accept": {
            "name": "accept",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "DiagramVisitor"
                ]
            }
        },
        "Head.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "life_line": [
                    "LifeLine"
                ],
                "tags": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Optional[Exception]",
                    "str",
                    "Exception",
                    "Optional[Callable]",
                    "None",
                    "typing.Callable[, ]",
                    "set",
                    "set[]"
                ]
            }
        },
        "Foot.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "life_line": [
                    "LifeLine"
                ],
                "tags": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Optional[Exception]",
                    "str",
                    "Exception",
                    "Optional[Callable]",
                    "None",
                    "typing.Callable[, ]",
                    "set",
                    "set[]"
                ]
            }
        },
        "Spine.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "life_line": [
                    "LifeLine"
                ]
            }
        },
        "Vertex.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "life_line": [
                    "LifeLine"
                ],
                "time_stamp": [
                    "float"
                ],
                "tags": [
                    "bool",
                    "str"
                ]
            }
        },
        "_BaseEdge.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fro": [
                    "Vertex"
                ],
                "to": [
                    "Vertex"
                ]
            }
        },
        "Activation.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fro": [
                    "Vertex"
                ],
                "to": [
                    "Vertex"
                ]
            }
        },
        "Edge.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fro": [
                    "Vertex"
                ],
                "to": [
                    "Vertex"
                ]
            }
        }
    },
    "tracent-protocol-design/tracent_eye/__init__.py": {}
}
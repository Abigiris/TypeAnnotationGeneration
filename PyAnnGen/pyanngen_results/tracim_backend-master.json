{
    "tracim_backend-master/setup.py": {},
    "tracim_backend-master/tracim/config.py": {
        "CFG.__setattr__": {
            "name": "__setattr__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "CFG.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "CFG.configure_filedepot": {
            "name": "configure_filedepot",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/exceptions.py": {},
    "tracim_backend-master/tracim/extensions.py": {},
    "tracim_backend-master/tracim/__init__.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[float], None]",
                "Dict[int, bool]"
            ],
            "arguments": {
                "global_config": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/command/initializedb.py": {
        "InitializeDBCommand.get_description": {
            "name": "get_description",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitializeDBCommand.get_parser": {
            "name": "get_parser",
            "location": 30,
            "return": [
                "Dict[str,Union[Any,Any]]",
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {
                "self": [],
                "prog_name": [
                    "str",
                    "None",
                    "topicdb.core.models.basename.BaseName",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "InitializeDBCommand.take_action": {
            "name": "take_action",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_args": [
                    "str",
                    "Set"
                ]
            }
        },
        "InitializeDBCommand._create_schema": {
            "name": "_create_schema",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Type[T]",
                    "int",
                    "Dict[str,str]",
                    "Dict[str,bool]",
                    "Type[tuple]",
                    "str"
                ],
                "settings": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "InitializeDBCommand._populate_database": {
            "name": "_populate_database",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "settings": [
                    "str",
                    "Type",
                    "Callable",
                    "BinaryIO",
                    "T",
                    "None",
                    "Optional[str]"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/command/user.py": {
        "UserCommand.get_description": {
            "name": "get_description",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserCommand.get_parser": {
            "name": "get_parser",
            "location": 32,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {
                "self": [],
                "prog_name": [
                    "str",
                    "None",
                    "topicdb.core.models.basename.BaseName",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "UserCommand._user_exist": {
            "name": "_user_exist",
            "location": 83,
            "return": [
                "abilian.core.models.subjects.User",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "Iterable[str]",
                    "core.models.Grouping"
                ]
            }
        },
        "UserCommand._get_group": {
            "name": "_get_group",
            "location": 86,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "UserCommand._add_user_to_named_group": {
            "name": "_add_user_to_named_group",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "group_name": [
                    "str"
                ]
            }
        },
        "UserCommand._remove_user_from_named_group": {
            "name": "_remove_user_from_named_group",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "tracim.models.User",
                    "List[str]",
                    "None",
                    "Optional[List[str]]",
                    "medtagger.database.models.User",
                    "Optional[str]"
                ],
                "group_name": [
                    "str",
                    "Dict"
                ]
            }
        },
        "UserCommand._create_user": {
            "name": "_create_user",
            "location": 109,
            "return": [
                "str",
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "Set",
                "int",
                "user_models.User",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "UserCommand._update_password_for_login": {
            "name": "_update_password_for_login",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "str",
                    "sqlalchemy.orm.session.Session"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "UserCommand.take_app_action": {
            "name": "take_app_action",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_args": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "app_context": [
                    "baseplate.lib.metrics.Client"
                ]
            }
        },
        "UserCommand._proceed_user": {
            "name": "_proceed_user",
            "location": 162,
            "return": [
                "lms.lmsdb.models.User",
                "str",
                "lms.lmsdb.models.Solution",
                "List[dict[str,str]]",
                "discord.User",
                "ChainMap",
                "zam_repondeur.models.Lecture",
                "Dict",
                "asgard.models.user.User",
                "Dict[str,tuple[Union[str,str]]]"
            ],
            "arguments": {
                "self": [],
                "parsed_args": [
                    "bool",
                    "str",
                    "argparse.Namespace",
                    "core_lib.core.parser.ParsingContext"
                ]
            }
        },
        "UserCommand._proceed_groups": {
            "name": "_proceed_groups",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "tracim.models.User",
                    "services.user.transfer.models.User",
                    "User",
                    "server.models.User",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "abilian.services.security.models.Permission",
                    "abilian.services.security.models.Role",
                    "zerver.models.UserProfile"
                ],
                "parsed_args": [
                    "str",
                    "argparse.Namespace",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "UserCommand._password_required": {
            "name": "_password_required",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserCommand._check_context": {
            "name": "_check_context",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_args": [
                    "Tuple[str]",
                    "List[str]",
                    "argparse.Namespace"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/command/__init__.py": {
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "bool",
                "int",
                "Exception",
                "tuple"
            ],
            "arguments": {
                "argv": [
                    "list",
                    "List[str]",
                    "int",
                    "Optional[List[str]]",
                    "bool",
                    "str"
                ]
            }
        },
        "TracimCLI.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TracimCLI.initialize_app": {
            "name": "initialize_app",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "int"
                ]
            }
        },
        "TracimCLI.prepare_to_run_command": {
            "name": "prepare_to_run_command",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "TracimCLI.clean_up": {
            "name": "clean_up",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "bool",
                    "int"
                ],
                "result": [
                    "List[str]",
                    "bool",
                    "None",
                    "Iterable",
                    "Optional[List[str]]"
                ],
                "err": [
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "AppContextCommand.take_action": {
            "name": "take_action",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_args": [
                    "Callable[...,None]",
                    "argparse.Namespace",
                    "Dict",
                    "Tuple",
                    "Exception"
                ]
            }
        },
        "AppContextCommand.get_parser": {
            "name": "get_parser",
            "location": 58,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {
                "self": [],
                "prog_name": [
                    "str"
                ]
            }
        },
        "TestTracimCommand.take_app_action": {
            "name": "take_app_action",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "str",
                    "argparse._SubParsersAction",
                    "Callable[argparse.ArgumentParser,None]",
                    "argparse.ArgumentParser",
                    "Callable[[argparse.ArgumentParser],None]"
                ],
                "app_context": [
                    "bool",
                    "str",
                    "argparse._SubParsersAction",
                    "Callable[argparse.ArgumentParser,None]",
                    "argparse.ArgumentParser",
                    "Callable[[argparse.ArgumentParser],None]"
                ]
            }
        },
        "Extender.__call__": {
            "name": "__call__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.Namespace"
                ],
                "namespace": [
                    "str",
                    "pyramid.config.Configurator",
                    "None",
                    "argparse.Namespace",
                    "Optional[str]"
                ],
                "values": [
                    "List",
                    "Optional[Mapping[str,RuntimeConfig]]",
                    "argparse.ArgumentParser",
                    "Type",
                    "str"
                ],
                "option_strings": [
                    "None",
                    "str",
                    "argparse.ArgumentParser",
                    "Optional[str]"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/fixtures/content.py": {
        "Content.insert": {
            "name": "insert",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/fixtures/ldap.py": {},
    "tracim_backend-master/tracim/fixtures/users_and_groups.py": {
        "Base.insert": {
            "name": "insert",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.insert": {
            "name": "insert",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/fixtures/__init__.py": {
        "Fixture.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Callable"
                ],
                "config": [
                    "Dict"
                ]
            }
        },
        "Fixture.insert": {
            "name": "insert",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixturesLoader.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Step",
                    "bool",
                    "Mapping",
                    "Mapping[str,Any]"
                ],
                "config": [
                    "\"Step\""
                ],
                "loaded": [
                    "Optional[str]",
                    "bool",
                    "None",
                    "Callable",
                    "str"
                ]
            }
        },
        "FixturesLoader.loads": {
            "name": "loads",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fixtures_classes": [
                    "Callable",
                    "ClassVar",
                    "bool"
                ]
            }
        },
        "FixturesLoader._load": {
            "name": "_load",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fixture_class": [
                    "Dict",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None",
                    "Type[BaseConfig]",
                    "Type"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/lib/__init__.py": {},
    "tracim_backend-master/tracim/lib/core/content.py": {
        "compare_content_for_sorting_by_type_and_name": {
            "name": "compare_content_for_sorting_by_type_and_name",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "content1": [],
                "content2": []
            }
        },
        "compare_tree_items_for_sorting_by_type_and_name": {
            "name": "compare_tree_items_for_sorting_by_type_and_name",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "item1": [],
                "item2": []
            }
        },
        "ContentApi.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "current_user": [],
                "config": [],
                "show_archived": [],
                "show_deleted": [],
                "show_temporary": [],
                "all_content_in_treeview": [],
                "force_show_all_types": [],
                "disable_user_workspaces_filter": []
            }
        },
        "ContentApi.show": {
            "name": "show",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "show_archived": [],
                "show_deleted": [],
                "show_temporary": []
            }
        },
        "ContentApi.get_revision_join": {
            "name": "get_revision_join",
            "location": 159,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentApi.get_canonical_query": {
            "name": "get_canonical_query",
            "location": 172,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentApi.sort_tree_items": {
            "name": "sort_tree_items",
            "location": 181,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "cls": [],
                "content_list": [
                    "_T0@@"
                ]
            }
        },
        "ContentApi.sort_content": {
            "name": "sort_content",
            "location": 196,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "cls": [],
                "content_list": [
                    "_T0@@"
                ]
            }
        },
        "ContentApi.__real_base_query": {
            "name": "__real_base_query",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "workspace": []
            }
        },
        "ContentApi._base_query": {
            "name": "_base_query",
            "location": 234,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "workspace": []
            }
        },
        "ContentApi.__revisions_real_base_query": {
            "name": "__revisions_real_base_query",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "workspace": []
            }
        },
        "ContentApi._revisions_base_query": {
            "name": "_revisions_base_query",
            "location": 270,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "workspace": []
            }
        },
        "ContentApi._hard_filtered_base_query": {
            "name": "_hard_filtered_base_query",
            "location": 287,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "workspace": []
            }
        },
        "ContentApi.get_base_query": {
            "name": "get_base_query",
            "location": 322,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "workspace": []
            }
        },
        "ContentApi.get_child_folders": {
            "name": "get_child_folders",
            "location": 328,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "workspace": [],
                "filter_by_allowed_content_types": [],
                "removed_item_ids": [],
                "allowed_node_types": []
            }
        },
        "ContentApi.create": {
            "name": "create",
            "location": 379,
            "return": [
                "tracim.models.data.Content"
            ],
            "arguments": {
                "self": [],
                "content_type": [],
                "workspace": [],
                "parent": [],
                "label": [],
                "do_save": [],
                "is_temporary": []
            }
        },
        "ContentApi.create_comment": {
            "name": "create_comment",
            "location": 406,
            "return": [
                "tracim.models.data.Content"
            ],
            "arguments": {
                "self": [],
                "workspace": [],
                "parent": [],
                "content": [],
                "do_save": []
            }
        },
        "ContentApi.get_one_from_revision": {
            "name": "get_one_from_revision",
            "location": 422,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "content_id": [],
                "content_type": [],
                "workspace": [],
                "revision_id": []
            }
        },
        "ContentApi.get_one": {
            "name": "get_one",
            "location": 442,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "content_id": [],
                "content_type": [],
                "workspace": []
            }
        },
        "ContentApi.get_one_revision": {
            "name": "get_one_revision",
            "location": 452,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "revision_id": []
            }
        },
        "ContentApi.get_one_revision_filepath": {
            "name": "get_one_revision_filepath",
            "location": 477,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "revision_id": []
            }
        },
        "ContentApi.get_one_by_label_and_parent": {
            "name": "get_one_by_label_and_parent",
            "location": 490,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "content_label": [],
                "content_parent": []
            }
        },
        "ContentApi.get_one_by_label_and_parent_labels": {
            "name": "get_one_by_label_and_parent_labels",
            "location": 531,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "content_label": [],
                "workspace": [],
                "content_parent_labels": []
            }
        },
        "ContentApi.get_folder_with_workspace_path_labels": {
            "name": "get_folder_with_workspace_path_labels",
            "location": 584,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "path_labels": [],
                "workspace": []
            }
        },
        "ContentApi.filter_query_for_content_label_as_path": {
            "name": "filter_query_for_content_label_as_path",
            "location": 627,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "content_label_as_file": [],
                "is_case_sensitive": []
            }
        },
        "ContentApi.get_all": {
            "name": "get_all",
            "location": 677,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "parent_id": [],
                "content_type": [],
                "workspace": []
            }
        },
        "ContentApi.get_children": {
            "name": "get_children",
            "location": 694,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "parent_id": [],
                "content_types": [],
                "workspace": []
            }
        },
        "ContentApi.get_all_with_filter": {
            "name": "get_all_with_filter",
            "location": 713,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "parent_id": [],
                "content_type": [],
                "workspace": []
            }
        },
        "ContentApi.get_all_without_exception": {
            "name": "get_all_without_exception",
            "location": 731,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "content_type": [],
                "workspace": []
            }
        },
        "ContentApi.get_last_active": {
            "name": "get_last_active",
            "location": 741,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "parent_id": [],
                "content_type": [],
                "workspace": [],
                "limit": []
            }
        },
        "ContentApi.get_last_unread": {
            "name": "get_last_unread",
            "location": 776,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "parent_id": [],
                "content_type": [],
                "workspace": [],
                "limit": []
            }
        },
        "ContentApi.set_allowed_content": {
            "name": "set_allowed_content",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [],
                "allowed_content_dict": []
            }
        },
        "ContentApi.set_status": {
            "name": "set_status",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [],
                "new_status": []
            }
        },
        "ContentApi.move": {
            "name": "move",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [],
                "new_parent": [],
                "must_stay_in_same_workspace": [],
                "new_workspace": []
            }
        },
        "ContentApi.copy": {
            "name": "copy",
            "location": 871,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": [],
                "new_parent": [],
                "new_label": [],
                "do_save": [],
                "do_notify": []
            }
        },
        "ContentApi.copy_children": {
            "name": "copy_children",
            "location": 919,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin_content": [],
                "new_content": []
            }
        },
        "ContentApi.move_recursively": {
            "name": "move_recursively",
            "location": 923,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [],
                "new_parent": [],
                "new_workspace": []
            }
        },
        "ContentApi.update_content": {
            "name": "update_content",
            "location": 933,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "_T0@@"
                ],
                "new_label": [],
                "new_content": []
            }
        },
        "ContentApi.update_file_data": {
            "name": "update_file_data",
            "location": 944,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "_T0@@"
                ],
                "new_filename": [],
                "new_mimetype": [],
                "new_content": []
            }
        },
        "ContentApi.archive": {
            "name": "archive",
            "location": 959,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ContentApi.unarchive": {
            "name": "unarchive",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ContentApi.delete": {
            "name": "delete",
            "location": 977,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ContentApi.undelete": {
            "name": "undelete",
            "location": 990,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ContentApi.mark_read__all": {
            "name": "mark_read__all",
            "location": 995,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "read_datetime": [],
                "do_flush": [],
                "recursive": []
            }
        },
        "ContentApi.mark_read__workspace": {
            "name": "mark_read__workspace",
            "location": 1006,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace": [],
                "read_datetime": [],
                "do_flush": [],
                "recursive": []
            }
        },
        "ContentApi.mark_read": {
            "name": "mark_read",
            "location": 1018,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "_T0@@"
                ],
                "read_datetime": [],
                "do_flush": [],
                "recursive": []
            }
        },
        "ContentApi.mark_unread": {
            "name": "mark_unread",
            "location": 1063,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "_T0@@"
                ],
                "do_flush": []
            }
        },
        "ContentApi.flush": {
            "name": "flush",
            "location": 1081,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentApi.save": {
            "name": "save",
            "location": 1084,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [],
                "action_description": [],
                "do_flush": [],
                "do_notify": []
            }
        },
        "ContentApi.do_notify": {
            "name": "do_notify",
            "location": 1122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ContentApi.get_keywords": {
            "name": "get_keywords",
            "location": 1134,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "search_string": [],
                "search_string_separators": []
            }
        },
        "ContentApi.search": {
            "name": "search",
            "location": 1148,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "keywords": []
            }
        },
        "ContentApi.get_all_types": {
            "name": "get_all_types",
            "location": 1165,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentApi.exclude_unavailable": {
            "name": "exclude_unavailable",
            "location": 1173,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "_T0@@"
                ]
            }
        },
        "ContentApi.content_under_deleted": {
            "name": "content_under_deleted",
            "location": 1186,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ContentApi.content_under_archived": {
            "name": "content_under_archived",
            "location": 1194,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ContentApi.find_one_by_unique_property": {
            "name": "find_one_by_unique_property",
            "location": 1202,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "property_name": [],
                "property_value": [],
                "workspace": []
            }
        },
        "ContentApi.generate_folder_label": {
            "name": "generate_folder_label",
            "location": 1230,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "workspace": [],
                "parent": []
            }
        }
    },
    "tracim_backend-master/tracim/lib/core/group.py": {
        "GroupApi.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "Dict",
                    "bool",
                    "str",
                    "None",
                    "reader_server.types.User",
                    "Optional[str]",
                    "asgard.models.agenAgent"
                ],
                "current_user": [
                    "str",
                    "bool"
                ]
            }
        },
        "GroupApi._base_query": {
            "name": "_base_query",
            "location": 21,
            "return": [
                "Dict[str, Dict[str, str]]",
                "dict",
                "Dict[str, str]",
                "List[str]",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupApi.get_one": {
            "name": "get_one",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "int",
                    "transfer.models.BoardID",
                    "transfer.models.OrgaTeamID"
                ]
            }
        },
        "GroupApi.get_one_with_name": {
            "name": "get_one_with_name",
            "location": 27,
            "return": [
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "str",
                    "Callable[str,str]",
                    "bool",
                    "Callable[[str],str]",
                    "teams.models.Team",
                    "None",
                    "Optional[bool]"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/lib/core/notifications.py": {
        "INotifier.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "None"
                ],
                "current_user": [
                    "Dict",
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[int]"
                ]
            }
        },
        "INotifier.notify_content_update": {
            "name": "notify_content_update",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "List[str]",
                    "Dict[str,Any]",
                    "tracim.models.data.Content",
                    "str",
                    "List",
                    "app.models.TweetContent"
                ]
            }
        },
        "NotifierFactory.create": {
            "name": "create",
            "location": 22,
            "return": [
                "Union[(DummyNotifier, EmailNotifier)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "float",
                    "Type[T]",
                    "Type"
                ],
                "config": [
                    "str"
                ],
                "current_user": [
                    "tracim.CFG",
                    "Dict[str,Any]",
                    "None",
                    "Dict"
                ]
            }
        },
        "DummyNotifier.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,str]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "current_user": [
                    "Dict",
                    "None",
                    "Dict[str,str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DummyNotifier.notify_content_update": {
            "name": "notify_content_update",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/lib/core/user.py": {
        "UserApi.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_user": [
                    "str",
                    "TextIO",
                    "Mapping",
                    "Mapping[str,Any]",
                    "app.models.dto.ClientInfo"
                ],
                "session": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,Any]",
                    "None",
                    "Optional[int]",
                    "Step",
                    "bool"
                ],
                "config": [
                    "str",
                    "Dict"
                ]
            }
        },
        "UserApi.get_all": {
            "name": "get_all",
            "location": 17,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserApi._base_query": {
            "name": "_base_query",
            "location": 20,
            "return": [
                "Dict[str, Dict[str, str]]",
                "List[str]",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserApi.get_one": {
            "name": "get_one",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "UserApi.get_one_by_email": {
            "name": "get_one_by_email",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "Dict[str,LabwareDefinition]",
                    "Callable[str,str]",
                    "Type",
                    "Callable[[str],str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "UserApi.get_one_by_id": {
            "name": "get_one_by_id",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "UserApi.update": {
            "name": "update",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "bool"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Sequence[str]",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "email": [
                    "Optional[bool]",
                    "None",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "do_save": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str,str]",
                    "List[Dict[str,Any]]",
                    "Tuple",
                    "List[str]"
                ],
                "timezone": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "UserApi.user_with_email_exists": {
            "name": "user_with_email_exists",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "bool"
                ]
            }
        },
        "UserApi.create_user": {
            "name": "create_user",
            "location": 59,
            "return": [
                "tracim.models.auth.User"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "groups": [
                    "List",
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "int",
                    "Iterable[str]",
                    "Dict[str,str]",
                    "walledomain.User",
                    "Callable[,Any]"
                ],
                "save_now": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[Union[str,Any]]",
                    "Optional[str]"
                ]
            }
        },
        "UserApi.save": {
            "name": "save",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "None",
                    "tracim.models.auth.User",
                    "Dict[str,str]",
                    "List[int]",
                    "models.characters.character_base.Character",
                    "asgard.models.user.User",
                    "Optional[zerver.models.UserProfile]",
                    "excars.models.user.User",
                    "Optional[Dict[str,str]]",
                    "core.models.User"
                ]
            }
        },
        "UserApi.execute_created_user_actions": {
            "name": "execute_created_user_actions",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "created_user": [
                    "str",
                    "tracim.models.auth.User",
                    "daylighdb.models.User"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/lib/core/userworkspace.py": {
        "RoleApi.role_can_read_member_role": {
            "name": "role_can_read_member_role",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int,float]",
                    "int",
                    "Optional[List[float]]",
                    "float",
                    "bool",
                    "List[float]",
                    "None"
                ],
                "reader_role": [
                    "str",
                    "Union[int,float]",
                    "int",
                    "Optional[List[float]]",
                    "float",
                    "bool",
                    "List[float]",
                    "None"
                ],
                "tested_role": [
                    "bool",
                    "Type",
                    "Task",
                    "Dict[str,Any]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Type[T]"
                ]
            }
        },
        "RoleApi.create_role": {
            "name": "create_role",
            "location": 54,
            "return": [
                "tracim.models.data.UserRoleInWorkspace"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Type[T]",
                    "int",
                    "Dict[str,str]",
                    "Dict[str,bool]",
                    "Type[tuple]",
                    "str"
                ]
            }
        },
        "RoleApi.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "Dict",
                    "bool",
                    "str",
                    "None",
                    "reader_server.types.User",
                    "Optional[str]",
                    "asgard.models.agenAgent"
                ],
                "current_user": [
                    "str",
                    "bool"
                ]
            }
        },
        "RoleApi._get_one_rsc": {
            "name": "_get_one_rsc",
            "location": 63,
            "return": [
                "Dict[str, str]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "workspace_id": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "RoleApi.get_one": {
            "name": "get_one",
            "location": 73,
            "return": [
                "str",
                "zerver.models.Realm",
                "bool",
                "bytes",
                "int",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "transfer.models.SubjectID"
                ],
                "workspace_id": [
                    "str",
                    "int",
                    "transfer.models.SubjectID"
                ]
            }
        },
        "RoleApi.create_one": {
            "name": "create_one",
            "location": 76,
            "return": [
                "tracim.models.data.UserRoleInWorkspace"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "tracim.models.auth.User",
                    "zerver.models.UserProfile",
                    "models.Course",
                    "grouper.models.permission.Permission"
                ],
                "workspace": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "tracim.models.data.Workspace",
                    "server.models.User",
                    "asgard.models.agenAgent"
                ],
                "role_level": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "tracim.models.data.Workspace",
                    "server.models.User",
                    "asgard.models.agenAgent"
                ],
                "with_notif": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "tracim.models.data.Workspace",
                    "server.models.User",
                    "asgard.models.agenAgent"
                ],
                "flush": [
                    "bool",
                    "int",
                    "tracim.models.data.Workspace",
                    "str",
                    "bytes",
                    "server.models.User",
                    "asgard.models.agenAgent"
                ]
            }
        },
        "RoleApi.delete_one": {
            "name": "delete_one",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "transfer.models.SubjectID"
                ],
                "workspace_id": [
                    "str",
                    "int",
                    "transfer.models.SubjectID"
                ],
                "flush": [
                    "bool",
                    "str",
                    "zerver.models.Realm",
                    "int"
                ]
            }
        },
        "RoleApi._get_all_for_user": {
            "name": "_get_all_for_user",
            "location": 98,
            "return": [
                "str",
                "dict",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "transfer.models.ListID"
                ]
            }
        },
        "RoleApi.get_all_for_user": {
            "name": "get_all_for_user",
            "location": 102,
            "return": [
                "Dict[str, Any]",
                "Tuple[List[Any], int]",
                "bool",
                "Iterable[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "Union[str,int]"
                ]
            }
        },
        "RoleApi.get_all_for_user_order_by_workspace": {
            "name": "get_all_for_user_order_by_workspace",
            "location": 105,
            "return": [
                "Tuple[List[Any], int]",
                "bool",
                "Iterable[Tuple[str, Any]]",
                "Optional['User']",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        },
        "RoleApi.get_all_for_workspace": {
            "name": "get_all_for_workspace",
            "location": 112,
            "return": [
                "Dict[str, Any]",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "workspace_id": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "RoleApi.save": {
            "name": "save",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "bool",
                    "Dict",
                    "str",
                    "Tuple[Tuple[str,...]]",
                    "Tuple[tuple[Union[str,...]]]"
                ]
            }
        },
        "RoleApi.get_roles_for_select_field": {
            "name": "get_roles_for_select_field",
            "location": 120,
            "return": [
                "List[tracim.models.data.RoleType]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/lib/core/workspace.py": {
        "WorkspaceApi.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "Dict",
                    "bool",
                    "str",
                    "None",
                    "reader_server.types.User",
                    "Optional[str]",
                    "asgard.models.agenAgent"
                ],
                "current_user": [
                    "str",
                    "bool"
                ],
                "force_role": [
                    "bool",
                    "int",
                    "reader_server.types.User",
                    "Dict",
                    "Optional[str]",
                    "asgard.models.agenAgent"
                ]
            }
        },
        "WorkspaceApi._base_query_without_roles": {
            "name": "_base_query_without_roles",
            "location": 33,
            "return": [
                "dict",
                "str",
                "Dict[str, Dict[str, str]]",
                "List[str]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkspaceApi._base_query": {
            "name": "_base_query",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkspaceApi.create_workspace": {
            "name": "create_workspace",
            "location": 45,
            "return": [
                "tracim.models.data.Workspace"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Text",
                    "str",
                    "List[List[int]]",
                    "Union[int,argonautica.utils.Void]",
                    "lib.model.category.category.AlbumCategory",
                    "Optional[Mapping[str,str]]"
                ],
                "description": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "calendar_enabled": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[int]",
                    "bytes",
                    "int"
                ],
                "save_now": [
                    "bool",
                    "List[Dict[str,Any]]",
                    "str",
                    "List"
                ]
            }
        },
        "WorkspaceApi.get_one": {
            "name": "get_one",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "WorkspaceApi.get_one_by_label": {
            "name": "get_one_by_label",
            "location": 91,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Dict",
                    "data.ServiceMethod[Any,Any]",
                    "sqlalchemy.Table",
                    "sqlalchemy.orm.Session",
                    "Optional[dict]"
                ]
            }
        },
        "WorkspaceApi.get_all": {
            "name": "get_all",
            "location": 101,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkspaceApi.get_all_for_user": {
            "name": "get_all_for_user",
            "location": 104,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "str",
                    "float",
                    "List[float]",
                    "lib.model.user.user.User"
                ],
                "ignored_ids": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "WorkspaceApi.get_all_manageable": {
            "name": "get_all_manageable",
            "location": 119,
            "return": [
                "str",
                "List",
                "int",
                "float",
                "Tuple[bytes]",
                "List[list[None]]",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkspaceApi.disable_notifications": {
            "name": "disable_notifications",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "float",
                    "None",
                    "bytes",
                    "models.user.UserModel",
                    "bool",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "int"
                ],
                "workspace": [
                    "str",
                    "float",
                    "None",
                    "bytes",
                    "models.user.UserModel",
                    "bool",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "int"
                ]
            }
        },
        "WorkspaceApi.enable_notifications": {
            "name": "enable_notifications",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "float",
                    "None",
                    "bytes",
                    "models.user.UserModel",
                    "bool",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "int"
                ],
                "workspace": [
                    "str",
                    "float",
                    "None",
                    "bytes",
                    "models.user.UserModel",
                    "bool",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "int"
                ]
            }
        },
        "WorkspaceApi.get_notifiable_roles": {
            "name": "get_notifiable_roles",
            "location": 144,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "str",
                    "bool"
                ]
            }
        },
        "WorkspaceApi.save": {
            "name": "save",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "bool",
                    "Dict",
                    "str",
                    "Tuple[Tuple[str,...]]",
                    "Tuple[tuple[Union[str,...]]]"
                ]
            }
        },
        "WorkspaceApi.delete_one": {
            "name": "delete_one",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace_id": [
                    "str",
                    "transfer.models.TopicID",
                    "transfer.models.MatchCommentID"
                ],
                "flush": [
                    "bool",
                    "int",
                    "zerver.models.Realm",
                    "Set[str]"
                ]
            }
        },
        "WorkspaceApi.restore_one": {
            "name": "restore_one",
            "location": 163,
            "return": [
                "str",
                "int",
                "Callable",
                "models.Question"
            ],
            "arguments": {
                "self": [],
                "workspace_id": [
                    "int",
                    "Iterable[int]"
                ],
                "flush": [
                    "bool",
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "WorkspaceApi.execute_created_workspace_actions": {
            "name": "execute_created_workspace_actions",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "int",
                    "float"
                ]
            }
        },
        "WorkspaceApi.get_base_query": {
            "name": "get_base_query",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkspaceApi.generate_label": {
            "name": "generate_label",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsafeWorkspaceApi._base_query": {
            "name": "_base_query",
            "location": 236,
            "return": [
                "dict",
                "str",
                "Dict[str, Dict[str, str]]",
                "List[str]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/lib/core/__init__.py": {},
    "tracim_backend-master/tracim/lib/utils/auth.py": {
        "get_safe_user": {
            "name": "get_safe_user",
            "location": 27,
            "return": [
                "tracim.models.auth.User",
                "Iterable[str]",
                "zerver.models.UserProfile",
                "zam_repondeur.models.Lecture",
                "\"User\"",
                "metaswitch_tinder.database.models.User",
                "Optional[\"Period\"]",
                "str"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "get_workspace": {
            "name": "get_workspace",
            "location": 49,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "user": [
                    "dict",
                    "pyramid.requesRequest",
                    "str",
                    "zerver.models.UserProfile",
                    "aiohttp.web.Request"
                ],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "dict"
                ]
            }
        },
        "basic_auth_check_credentials": {
            "name": "basic_auth_check_credentials",
            "location": 77,
            "return": [
                "Optional[List[nothing]]"
            ],
            "arguments": {
                "login": [
                    "str",
                    "Union[Optional[str], Literal[Literal]]",
                    "bool",
                    "int"
                ],
                "cleartext_password": [
                    "str",
                    "Union[Optional[str], Literal[Literal]]",
                    "bool",
                    "int"
                ],
                "request": [
                    "tracim.TracimRequest",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "_get_basic_auth_unsafe_user": {
            "name": "_get_basic_auth_unsafe_user",
            "location": 99,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "Optional[float]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "require_workspace_role": {
            "name": "require_workspace_role",
            "location": 120,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "minimal_required_role": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "require_workspace_role.decorator": {
            "name": "decorator",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "AcceptAllAuthorizationPolicy.permits": {
            "name": "permits",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "principals": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "permision": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AcceptAllAuthorizationPolicy.principals_allowed_by_permission": {
            "name": "principals_allowed_by_permission",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "Sequence[str]",
                    "List[str]",
                    "str",
                    "bool",
                    "List[AnyStr]"
                ],
                "permission": [
                    "Sequence[str]",
                    "List[str]",
                    "str",
                    "bool",
                    "List[AnyStr]"
                ]
            }
        },
        "require_workspace_role.decorator.wrapper": {
            "name": "wrapper",
            "location": 123,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/lib/utils/logger.py": {
        "Logger.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "Collection[str]",
                    "Collection"
                ]
            }
        },
        "Logger._txt": {
            "name": "_txt",
            "location": 16,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict",
                    "Callable",
                    "Dict[str,Any]",
                    "None",
                    "logging.Logger",
                    "Optional[Callable]"
                ],
                "instance_or_class": [
                    "Dict[str,dict]",
                    "bool",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Logger.debug": {
            "name": "debug",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_or_class": [
                    "Optional[Exception]",
                    "Exception",
                    "str",
                    "int",
                    "None",
                    "logging.Logger",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ],
                "message": [
                    "Optional[Exception]",
                    "Exception",
                    "str",
                    "int",
                    "None",
                    "logging.Logger",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "Logger.error": {
            "name": "error",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_or_class": [
                    "bool",
                    "Set",
                    "str"
                ],
                "message": [
                    "bool",
                    "Set",
                    "str"
                ],
                "exc_info": [
                    "int",
                    "bool",
                    "Set",
                    "str"
                ]
            }
        },
        "Logger.info": {
            "name": "info",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_or_class": [
                    "str",
                    "List[str]",
                    "logging.Logger"
                ],
                "message": [
                    "str",
                    "List[str]",
                    "logging.Logger"
                ]
            }
        },
        "Logger.warning": {
            "name": "warning",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_or_class": [
                    "str",
                    "Dict",
                    "None",
                    "logging.Logger",
                    "Sequence[str]",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[Sequence[str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "message": [
                    "str",
                    "Dict",
                    "None",
                    "logging.Logger",
                    "Sequence[str]",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[Sequence[str]]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/lib/utils/request.py": {
        "TracimRequest.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "charset": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str"
                ],
                "unicode_errors": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str"
                ],
                "decode_param_names": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "TracimRequest.current_workspace": {
            "name": "current_workspace",
            "location": 38,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "TracimRequest.current_user": {
            "name": "current_user",
            "location": 49,
            "return": [
                "None",
                "str",
                "Hashable",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User",
                    "asgard.models.user.User",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/lib/utils/translation.py": {
        "fake_translator": {
            "name": "fake_translator",
            "location": 5,
            "return": [
                "str",
                "Set[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "get_locale": {
            "name": "get_locale",
            "location": 10,
            "return": [
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int"
            ],
            "arguments": {}
        }
    },
    "tracim_backend-master/tracim/lib/utils/utils.py": {
        "cmp_to_key": {
            "name": "cmp_to_key",
            "location": 5,
            "return": [
                "type"
            ],
            "arguments": {
                "mycmp": [
                    "str",
                    "Dict[str,BinaryIO]",
                    "bool",
                    "float"
                ]
            }
        },
        "current_date_for_filename": {
            "name": "current_date_for_filename",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "cmp_to_key.K.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "cmp_to_key.K.__lt__": {
            "name": "__lt__",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "cmp_to_key.K.__gt__": {
            "name": "__gt__",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "cmp_to_key.K.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "cmp_to_key.K.__le__": {
            "name": "__le__",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "cmp_to_key.K.__ge__": {
            "name": "__ge__",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "cmp_to_key.K.__ne__": {
            "name": "__ne__",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/lib/utils/__init__.py": {},
    "tracim_backend-master/tracim/migration/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tracim_backend-master/tracim/migration/versions/2b4043fa2502_remove_webdav_right_digest_response_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tracim_backend-master/tracim/migration/versions/ad79f58ec2bf_tracim_v2.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tracim_backend-master/tracim/models/auth.py": {
        "Group.__repr__": {
            "name": "__repr__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__unicode__": {
            "name": "__unicode__",
            "location": 82,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.by_group_name": {
            "name": "by_group_name",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "bool"
                ],
                "group_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "dbsession": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "Profile.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile_id": [
                    "int"
                ]
            }
        },
        "User.email_address": {
            "name": "email_address",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__unicode__": {
            "name": "__unicode__",
            "location": 144,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.permissions": {
            "name": "permissions",
            "location": 148,
            "return": [
                "set[]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.profile": {
            "name": "profile",
            "location": 156,
            "return": [
                "Profile"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.by_email_address": {
            "name": "by_email_address",
            "location": 172,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None"
                ],
                "email": [
                    "str",
                    "None"
                ],
                "dbsession": [
                    "str",
                    "None"
                ]
            }
        },
        "User.by_user_name": {
            "name": "by_user_name",
            "location": 177,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "dict[str, str]",
                    "str"
                ],
                "username": [
                    "dict[str, str]",
                    "str"
                ],
                "dbsession": [
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "User._hash_password": {
            "name": "_hash_password",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "tuple[str]"
                ],
                "cleartext_password": [
                    "str",
                    "bytes",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "User._set_password": {
            "name": "_set_password",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cleartext_password": [
                    "str",
                    "list[str]",
                    "typing.Iterator"
                ]
            }
        },
        "User._get_password": {
            "name": "_get_password",
            "location": 210,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.validate_password": {
            "name": "validate_password",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cleartext_password": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "User.get_display_name": {
            "name": "get_display_name",
            "location": 236,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "remove_email_part": [
                    "bool"
                ]
            }
        },
        "User.get_role": {
            "name": "get_role",
            "location": 252,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "str",
                    "bool"
                ]
            }
        },
        "User.get_active_roles": {
            "name": "get_active_roles",
            "location": 259,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.ensure_auth_token": {
            "name": "ensure_auth_token",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validity_seconds": [],
                "session": []
            }
        },
        "Permission.__repr__": {
            "name": "__repr__",
            "location": 317,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.__unicode__": {
            "name": "__unicode__",
            "location": 320,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/models/data.py": {
        "Workspace.contents": {
            "name": "contents",
            "location": 66,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_user_role": {
            "name": "get_user_role",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Workspace.get_label": {
            "name": "get_label",
            "location": 92,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_allowed_content_types": {
            "name": "get_allowed_content_types",
            "location": 96,
            "return": [
                "List[ContentType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_valid_children": {
            "name": "get_valid_children",
            "location": 100,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "content_types": [
                    "None"
                ],
                "show_deleted": [
                    "bool"
                ],
                "show_archived": [
                    "bool"
                ]
            }
        },
        "UserRoleInWorkspace.get_all_role_values": {
            "name": "get_all_role_values",
            "location": 168,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [
                    "Type[UserRoleInWorkspace]"
                ]
            }
        },
        "RoleType.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "role_id": []
            }
        },
        "ActionDescription.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "ActionDescription.allowed_values": {
            "name": "allowed_values",
            "location": 251,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ContentStatus.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "ContentStatus.all": {
            "name": "all",
            "location": 329,
            "return": [
                "List[ContentStatus]"
            ],
            "arguments": {
                "cls": [],
                "type": [
                    "typing.Text"
                ]
            }
        },
        "ContentStatus.allowed_values": {
            "name": "allowed_values",
            "location": 343,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ContentType.all": {
            "name": "all",
            "location": 439,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[ContentType]"
                ]
            }
        },
        "ContentType.allowed_types": {
            "name": "allowed_types",
            "location": 443,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[ContentType]"
                ]
            }
        },
        "ContentType.allowed_types_for_folding": {
            "name": "allowed_types_for_folding",
            "location": 448,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[ContentType]"
                ]
            }
        },
        "ContentType.sorted": {
            "name": "sorted",
            "location": 484,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[ContentType]"
                ],
                "types": [
                    "typing.Any"
                ]
            }
        },
        "ContentType.type": {
            "name": "type",
            "location": 488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentType.__init__": {
            "name": "__init__",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "typing.Any"
                ]
            }
        },
        "ContentType.toDict": {
            "name": "toDict",
            "location": 500,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentChecker.check_properties": {
            "name": "check_properties",
            "location": 513,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "ContentChecker.reset_properties": {
            "name": "reset_properties",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "ContentRevisionRO.file_name": {
            "name": "file_name",
            "location": 637,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentRevisionRO.new_from": {
            "name": "new_from",
            "location": 644,
            "return": [
                "ContentRevisionRO"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TContentRevisionRO]"
                ],
                "revision": []
            }
        },
        "ContentRevisionRO.copy": {
            "name": "copy",
            "location": 672,
            "return": [
                "ContentRevisionRO"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TContentRevisionRO]"
                ],
                "revision": [],
                "parent": []
            }
        },
        "ContentRevisionRO.__setattr__": {
            "name": "__setattr__",
            "location": 700,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ContentRevisionRO.get_status": {
            "name": "get_status",
            "location": 721,
            "return": [
                "ContentStatus"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentRevisionRO.get_label": {
            "name": "get_label",
            "location": 724,
            "return": [
                "Union[(str, sqlalchemy.sql.schema.Column)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentRevisionRO.get_last_action": {
            "name": "get_last_action",
            "location": 727,
            "return": [
                "ActionDescription"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentRevisionRO.has_new_information_for": {
            "name": "has_new_information_for",
            "location": 730,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ContentRevisionRO.get_label_as_file": {
            "name": "get_label_as_file",
            "location": 744,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.content_id": {
            "name": "content_id",
            "location": 821,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.revision_id": {
            "name": "revision_id",
            "location": 833,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.owner_id": {
            "name": "owner_id",
            "location": 845,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.label": {
            "name": "label",
            "location": 857,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.description": {
            "name": "description",
            "location": 869,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.file_name": {
            "name": "file_name",
            "location": 887,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Content.file_extension": {
            "name": "file_extension",
            "location": 899,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.file_mimetype": {
            "name": "file_mimetype",
            "location": 911,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content._properties": {
            "name": "_properties",
            "location": 923,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.type": {
            "name": "type",
            "location": 935,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.status": {
            "name": "status",
            "location": 947,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.created": {
            "name": "created",
            "location": 959,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.updated": {
            "name": "updated",
            "location": 971,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.is_deleted": {
            "name": "is_deleted",
            "location": 983,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.is_archived": {
            "name": "is_archived",
            "location": 995,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.is_temporary": {
            "name": "is_temporary",
            "location": 1007,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.revision_type": {
            "name": "revision_type",
            "location": 1019,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.workspace_id": {
            "name": "workspace_id",
            "location": 1031,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.workspace": {
            "name": "workspace",
            "location": 1043,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.parent_id": {
            "name": "parent_id",
            "location": 1055,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.parent": {
            "name": "parent",
            "location": 1067,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.node": {
            "name": "node",
            "location": 1079,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.owner": {
            "name": "owner",
            "location": 1091,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Content.children": {
            "name": "children",
            "location": 1095,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.revision": {
            "name": "revision",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.first_revision": {
            "name": "first_revision",
            "location": 1108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.last_revision": {
            "name": "last_revision",
            "location": 1112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Content.is_editable": {
            "name": "is_editable",
            "location": 1116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.depot_file": {
            "name": "depot_file",
            "location": 1124,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Content.get_current_revision": {
            "name": "get_current_revision",
            "location": 1127,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.new_revision": {
            "name": "new_revision",
            "location": 1139,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.get_valid_children": {
            "name": "get_valid_children",
            "location": 1154,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "content_types": [
                    "None"
                ]
            }
        },
        "Content.properties": {
            "name": "properties",
            "location": 1168,
            "return": [],
            "arguments": {
                "self": [],
                "properties_struct": []
            }
        },
        "Content.created_as_delta": {
            "name": "created_as_delta",
            "location": 1173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "delta_from_datetime": [
                    "None"
                ]
            }
        },
        "Content.datetime_as_delta": {
            "name": "datetime_as_delta",
            "location": 1180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "datetime_object": [],
                "delta_from_datetime": [
                    "None"
                ]
            }
        },
        "Content.get_child_nb": {
            "name": "get_child_nb",
            "location": 1187,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "content_type": [],
                "content_status": [
                    "typing.Text"
                ]
            }
        },
        "Content.get_label": {
            "name": "get_label",
            "location": 1197,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.get_label_as_file": {
            "name": "get_label_as_file",
            "location": 1200,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.get_status": {
            "name": "get_status",
            "location": 1206,
            "return": [
                "ContentStatus"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.get_last_action": {
            "name": "get_last_action",
            "location": 1213,
            "return": [
                "ActionDescription"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.get_last_activity_date": {
            "name": "get_last_activity_date",
            "location": 1216,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.has_new_information_for": {
            "name": "has_new_information_for",
            "location": 1227,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Content.get_comments": {
            "name": "get_comments",
            "location": 1248,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.get_last_comment_from": {
            "name": "get_last_comment_from",
            "location": 1255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Content.get_previous_revision": {
            "name": "get_previous_revision",
            "location": 1268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.description_as_raw_text": {
            "name": "description_as_raw_text",
            "location": 1281,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.get_allowed_content_types": {
            "name": "get_allowed_content_types",
            "location": 1286,
            "return": [
                "List[ContentType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Content.get_history": {
            "name": "get_history",
            "location": 1300,
            "return": [
                "List[VirtualEvent]"
            ],
            "arguments": {
                "self": [],
                "drop_empty_revision": [
                    "bool"
                ]
            }
        },
        "Content.format_path": {
            "name": "format_path",
            "location": 1325,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[Content]"
                ],
                "url_template": [],
                "content": []
            }
        },
        "Content.copy": {
            "name": "copy",
            "location": 1332,
            "return": [
                "Content"
            ],
            "arguments": {
                "self": [
                    "_TContent@@Content@@"
                ],
                "parent": []
            }
        },
        "NodeTreeItem.__init__": {
            "name": "__init__",
            "location": 1370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "children": [],
                "is_selected": [
                    "bool"
                ]
            }
        },
        "VirtualEvent.create_from": {
            "name": "create_from",
            "location": 1383,
            "return": [
                "Optional[VirtualEvent]"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[VirtualEvent]"
                ],
                "object": []
            }
        },
        "VirtualEvent.create_from_content": {
            "name": "create_from_content",
            "location": 1390,
            "return": [
                "VirtualEvent"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TVirtualEvent]"
                ],
                "content": []
            }
        },
        "VirtualEvent.create_from_content_revision": {
            "name": "create_from_content_revision",
            "location": 1408,
            "return": [
                "VirtualEvent"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TVirtualEvent]"
                ],
                "revision": []
            }
        },
        "VirtualEvent.__init__": {
            "name": "__init__",
            "location": 1419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "created": [],
                "owner": [],
                "type": [],
                "label": [],
                "content": [],
                "ref_object": []
            }
        },
        "VirtualEvent.created_as_delta": {
            "name": "created_as_delta",
            "location": 1434,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "delta_from_datetime": [
                    "None"
                ]
            }
        },
        "VirtualEvent.create_readable_date": {
            "name": "create_readable_date",
            "location": 1440,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "delta_from_datetime": [
                    "None"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/models/meta.py": {},
    "tracim_backend-master/tracim/models/organisational.py": {
        "Calendar.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "related_object": [
                    "float",
                    "str",
                    "Optional[int]",
                    "bytes",
                    "int",
                    "Iterable[T]",
                    "None"
                ],
                "path": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "Calendar.related_object": {
            "name": "related_object",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calendar.user_can_read": {
            "name": "user_can_read",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "List",
                    "tracim.models.User",
                    "User",
                    "app.models.user.User.InDB"
                ]
            }
        },
        "Calendar.user_can_write": {
            "name": "user_can_write",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "List",
                    "tracim.models.User",
                    "User",
                    "app.models.user.User.InDB"
                ]
            }
        },
        "UserCalendar.user_can_write": {
            "name": "user_can_write",
            "location": 27,
            "return": [
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "tracim.models.User",
                    "app.models.user.User.InDB",
                    "User",
                    "django.contrib.auth.models.User",
                    "tracim.models.auth.User",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "UserCalendar.user_can_read": {
            "name": "user_can_read",
            "location": 30,
            "return": [
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "tracim.models.User",
                    "app.models.user.User.InDB",
                    "User",
                    "django.contrib.auth.models.User",
                    "tracim.models.auth.User",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "WorkspaceCalendar.user_can_write": {
            "name": "user_can_write",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Iterable[zerver.models.Stream]",
                    "str",
                    "zerver.models.UserProfile",
                    "users.models.JustfixUser"
                ]
            }
        },
        "WorkspaceCalendar.user_can_read": {
            "name": "user_can_read",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Iterable[zerver.models.Stream]",
                    "str",
                    "zerver.models.UserProfile",
                    "users.models.JustfixUser"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/models/revision_protection.py": {
        "prevent_content_revision_delete": {
            "name": "prevent_content_revision_delete",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool",
                    "Dict[str,Any]",
                    "sqlalchemy.orm.Session",
                    "str",
                    "None",
                    "Optional[str]",
                    "sqlalchemy.orm.scoped_session"
                ],
                "flush_context": [
                    "str",
                    "bool",
                    "sqlalchemy.orm.unitofwork.UOWTransaction"
                ],
                "instances": [
                    "str",
                    "bool",
                    "sqlalchemy.orm.unitofwork.UOWTransaction"
                ]
            }
        },
        "new_revision": {
            "name": "new_revision",
            "location": 66,
            "return": [
                "tracim.models.data.Content",
                "Generator"
            ],
            "arguments": {
                "session": [
                    "bool",
                    "List[str]",
                    "transaction.TransactionManager",
                    "Callable[S,bool]",
                    "sqlalchemy.orm.Session",
                    "int",
                    "Callable[[recidiviz.persistence.database.session.Session],bool]"
                ],
                "tm": [
                    "transaction.TransactionManager",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "List[str]",
                    "int",
                    "Callable[[recidiviz.persistence.database.session.Session], bool]"
                ],
                "content": [
                    "tracim.models.data.Content",
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "force_create_new_revision": [
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "RevisionsIntegrity.add_to_updatable": {
            "name": "add_to_updatable",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "List",
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "revision": [
                    "Iterable[allennlp.data.instance.Instance]",
                    "ContentRevisionRO",
                    "Dict[str,Any]"
                ]
            }
        },
        "RevisionsIntegrity.remove_from_updatable": {
            "name": "remove_from_updatable",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict",
                    "ContentRevisionRO"
                ],
                "revision": [
                    "bool",
                    "Dict",
                    "ContentRevisionRO"
                ]
            }
        },
        "RevisionsIntegrity.is_updatable": {
            "name": "is_updatable",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "ContentRevisionRO",
                    "str",
                    "Type[T]"
                ],
                "revision": [
                    "Type",
                    "bool",
                    "ContentRevisionRO",
                    "str",
                    "Type[T]"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/models/__init__.py": {
        "get_engine": {
            "name": "get_engine",
            "location": 19,
            "return": [
                "sqlalchemy.engine.base.Engine"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Dict",
                    "bool",
                    "IO"
                ],
                "prefix": [
                    "Text",
                    "str",
                    "Dict",
                    "bool",
                    "IO"
                ]
            }
        },
        "get_session_factory": {
            "name": "get_session_factory",
            "location": 23,
            "return": [
                "sqlalchemy.orm.session.sessionmaker"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "float",
                    "sqlalchemy.engine.Engine",
                    "bool",
                    "List[db.models.Name]",
                    "db.models.Article"
                ]
            }
        },
        "get_tm_session": {
            "name": "get_tm_session",
            "location": 29,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "session_factory": [
                    "str",
                    "float"
                ],
                "transaction_manager": []
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/tests/__init__.py": {
        "eq_": {
            "name": "eq_",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ],
                "msg": [
                    "int",
                    "None"
                ]
            }
        },
        "BaseTest.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.init_database": {
            "name": "init_database",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.tearDown": {
            "name": "tearDown",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardTest.init_database": {
            "name": "init_database",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultTest._create_workspace_and_test": {
            "name": "_create_workspace_and_test",
            "location": 86,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Exception",
                "tartare.core.models.Job",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "grouper.models.base.session.Session"
                ],
                "user": [
                    "None",
                    "str",
                    "Optional[multinedb.models.user.User]",
                    "grouper.models.base.session.Session",
                    "users.models.User"
                ]
            }
        },
        "DefaultTest._create_content_and_test": {
            "name": "_create_content_and_test",
            "location": 106,
            "return": [
                "models.UserAuth",
                "socialhome.activities.models.Activity",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "workspace": [
                    "str",
                    "int"
                ]
            }
        },
        "DefaultTest._create_thread_and_test": {
            "name": "_create_thread_and_test",
            "location": 138,
            "return": [
                "bool",
                "List[str]",
                "allennlp.data.dataseDataset"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "workspace_name": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "folder_name": [
                    "str",
                    "Text"
                ],
                "thread_name": [
                    "Text",
                    "str",
                    "salon.models.Stylist",
                    "models.evenUserEventData"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/tests/commands/test_commands.py": {
        "TestCommands.test_commands": {
            "name": "test_commands",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/tests/commands/__init__.py": {},
    "tracim_backend-master/tracim/tests/library/test_content_api.py": {
        "TestContentApi.test_compare_content_for_sorting_by_type": {
            "name": "test_compare_content_for_sorting_by_type",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_compare_content_for_sorting_by_label": {
            "name": "test_compare_content_for_sorting_by_label",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_sort_by_label_or_filename": {
            "name": "test_sort_by_label_or_filename",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_sort_by_content_type": {
            "name": "test_sort_by_content_type",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_delete": {
            "name": "test_delete",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_archive": {
            "name": "test_archive",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_get_all_with_filter": {
            "name": "test_get_all_with_filter",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_get_all_with_parent_id": {
            "name": "test_get_all_with_parent_id",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_set_status_unknown_status": {
            "name": "test_set_status_unknown_status",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_set_status_ok": {
            "name": "test_set_status_ok",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_create_comment_ok": {
            "name": "test_create_comment_ok",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_unit_copy_file_different_label_different_parent_ok": {
            "name": "test_unit_copy_file_different_label_different_parent_ok",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_unit_copy_file__same_label_different_parent_ok": {
            "name": "test_unit_copy_file__same_label_different_parent_ok",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_unit_copy_file_different_label_same_parent_ok": {
            "name": "test_unit_copy_file_different_label_same_parent_ok",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_mark_read__workspace": {
            "name": "test_mark_read__workspace",
            "location": 832,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_mark_read": {
            "name": "test_mark_read",
            "location": 935,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_mark_read__all": {
            "name": "test_mark_read__all",
            "location": 1001,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_update": {
            "name": "test_update",
            "location": 1094,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_update_no_change": {
            "name": "test_update_no_change",
            "location": 1404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_update_file_data": {
            "name": "test_update_file_data",
            "location": 1290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_archive_unarchive": {
            "name": "test_archive_unarchive",
            "location": 1486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_delete_undelete": {
            "name": "test_delete_undelete",
            "location": 1632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_search_in_label": {
            "name": "test_search_in_label",
            "location": 1779,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_search_in_description": {
            "name": "test_search_in_description",
            "location": 1833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_search_in_label_or_description": {
            "name": "test_search_in_label_or_description",
            "location": 1887,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApi.test_unit__search_exclude_content_under_deleted_or_archived_parents__ok": {
            "name": "test_unit__search_exclude_content_under_deleted_or_archived_parents__ok",
            "location": 1954,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentApiSecurity.test_unit__cant_get_non_access_content__ok__nominal_case": {
            "name": "test_unit__cant_get_non_access_content__ok__nominal_case",
            "location": 2032,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/tests/library/test_notification.py": {
        "TestDummyNotifier.test_dummy_notifier__notify_content_update": {
            "name": "test_dummy_notifier__notify_content_update",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotifierFactory.test_notifier_factory_method": {
            "name": "test_notifier_factory_method",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/tests/library/test_user_api.py": {
        "TestUserApi.test_create_and_update_user": {
            "name": "test_create_and_update_user",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserApi.test_user_with_email_exists": {
            "name": "test_user_with_email_exists",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserApi.test_get_one_by_email": {
            "name": "test_get_one_by_email",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserApi.test_get_one_by_email_exception": {
            "name": "test_get_one_by_email_exception",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserApi.test_get_all": {
            "name": "test_get_all",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserApi.test_get_one": {
            "name": "test_get_one",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/tests/library/test_workspace.py": {
        "TestThread.test_children": {
            "name": "test_children",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThread.test_get_notifiable_roles": {
            "name": "test_get_notifiable_roles",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThread.test_unit__get_all_manageable": {
            "name": "test_unit__get_all_manageable",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/tests/library/__init__.py": {},
    "tracim_backend-master/tracim/tests/models/test_content.py": {
        "TestContent.test_update_without_prepare": {
            "name": "test_update_without_prepare",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContent.test_query": {
            "name": "test_query",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContent.test_update": {
            "name": "test_update",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContent.test_creates": {
            "name": "test_creates",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContent.test_create": {
            "name": "test_create",
            "location": 243,
            "return": [
                "tracim.models.data.Content"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "typing.Text"
                ]
            }
        },
        "TestContent._get_user": {
            "name": "_get_user",
            "location": 292,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContent._create_content": {
            "name": "_create_content",
            "location": 299,
            "return": [
                "tracim.models.data.Content"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContent._create_content_from_nothing": {
            "name": "_create_content_from_nothing",
            "location": 305,
            "return": [
                "tracim.models.data.Content"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContent.test_unit__content_depot_file": {
            "name": "test_unit__content_depot_file",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/tests/models/test_content_revision.py": {
        "TestContentRevision._new_from": {
            "name": "_new_from",
            "location": 14,
            "return": [
                "tracim.models.data.ContentRevisionRO"
            ],
            "arguments": {
                "self": [],
                "revision": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "TestContentRevision._get_dict_representation": {
            "name": "_get_dict_representation",
            "location": 32,
            "return": [
                "collections.OrderedDict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "revision": [
                    "str",
                    "Dict"
                ]
            }
        },
        "TestContentRevision.test_new_revision": {
            "name": "test_new_revision",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/tests/models/test_user.py": {
        "TestUserModel.test_create": {
            "name": "test_create",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserModel.test_null_password": {
            "name": "test_null_password",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tracim_backend-master/tracim/tests/models/__init__.py": {},
    "tracim_backend-master/tracim/tests/views/test_example.py": {},
    "tracim_backend-master/tracim/tests/views/__init__.py": {},
    "tracim_backend-master/tracim/views/controllers.py": {
        "Controller.bind": {
            "name": "bind",
            "location": 6,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "configurator": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/views/__init__.py": {},
    "tracim_backend-master/tracim/views/default/default_controller.py": {
        "DefaultController.notfound_view": {
            "name": "notfound_view",
            "location": 18,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "DefaultController.forbidden_view": {
            "name": "forbidden_view",
            "location": 22,
            "return": [
                "HTTPForbidden",
                "bytes",
                "HTTPUnauthorized",
                "Dict",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "pyramid.requesRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "DefaultController.test_config": {
            "name": "test_config",
            "location": 34,
            "return": [
                "Dict[str,str]",
                "Response",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest"
                ]
            }
        },
        "DefaultController.test_contributor_page": {
            "name": "test_contributor_page",
            "location": 44,
            "return": [
                "int",
                "Response",
                "Dict[Text,Text]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest"
                ]
            }
        },
        "DefaultController.test_admin_page": {
            "name": "test_admin_page",
            "location": 53,
            "return": [
                "int",
                "Response",
                "Dict[Text,Text]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest"
                ]
            }
        },
        "DefaultController.test_manager_page": {
            "name": "test_manager_page",
            "location": 62,
            "return": [
                "int",
                "Response",
                "Dict[Text,Text]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest"
                ]
            }
        },
        "DefaultController.test_user_page": {
            "name": "test_user_page",
            "location": 71,
            "return": [
                "Response",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest"
                ]
            }
        },
        "DefaultController.bind": {
            "name": "bind",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configurator": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "gensim.models.KeyedVectors"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/views/default/__init__.py": {},
    "tracim_backend-master/tracim/views/example_api/example_api_controller.py": {
        "ExampleApiController.about": {
            "name": "about",
            "location": 18,
            "return": [
                "Dict[Text,Text]",
                "str",
                "datetime.datetime",
                "bool",
                "Dict[str,Any]",
                "int",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "pyramid.requesRequest"
                ],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "ExampleApiController.get_users": {
            "name": "get_users",
            "location": 29,
            "return": [
                "Dict[Text,Union[int,list[dict[Text,Union[int,Text]]],dict[Text,int]]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int"
                ],
                "request": [
                    "int"
                ]
            }
        },
        "ExampleApiController.get_user": {
            "name": "get_user",
            "location": 53,
            "return": [
                "Dict[Text,Union[int,Text]]",
                "Dict[str,Any]",
                "Dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "Dict[str,str]"
                ],
                "request": [
                    "int",
                    "Dict[str,str]"
                ],
                "hapic_data": [
                    "int",
                    "Dict[str,str]"
                ]
            }
        },
        "ExampleApiController.add_user": {
            "name": "add_user",
            "location": 72,
            "return": [
                "Dict[Text,Union[int,Text]]",
                "Dict",
                "Mapping[str,Any]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "request": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "hapic_data": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "ExampleApiController.del_user": {
            "name": "del_user",
            "location": 90,
            "return": [
                "NoContentSchema",
                "str",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "request": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "hapic_data": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "ExampleApiController.bind": {
            "name": "bind",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configurator": [
                    "pyramid.config.Configurator",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "tracim_backend-master/tracim/views/example_api/schema.py": {},
    "tracim_backend-master/tracim/views/example_api/__init__.py": {}
}
{
    "tractor-master/setup.py": {},
    "tractor-master/docs/conf.py": {},
    "tractor-master/docs/github_readme/conf.py": {},
    "tractor-master/examples/actor_spawning_and_causality.py": {},
    "tractor-master/examples/actor_spawning_and_causality_with_daemon.py": {},
    "tractor-master/examples/asynchronous_generators.py": {},
    "tractor-master/examples/a_trynamic_first_scene.py": {},
    "tractor-master/examples/full_fledged_streaming_service.py": {},
    "tractor-master/examples/infected_asyncio_echo_server.py": {},
    "tractor-master/examples/multiple_streams_one_portal.py": {},
    "tractor-master/examples/quick_cluster.py": {},
    "tractor-master/examples/remote_error_propagation.py": {},
    "tractor-master/examples/rpc_bidir_streaming.py": {},
    "tractor-master/examples/service_discovery.py": {},
    "tractor-master/examples/__main__.py": {},
    "tractor-master/examples/debugging/fast_error_in_root_after_spawn.py": {},
    "tractor-master/examples/debugging/multi_daemon_subactors.py": {},
    "tractor-master/examples/debugging/multi_nested_subactors_error_up_through_nurseries.py": {},
    "tractor-master/examples/debugging/multi_subactors.py": {},
    "tractor-master/examples/debugging/multi_subactor_root_errors.py": {},
    "tractor-master/examples/debugging/per_actor_debug.py": {},
    "tractor-master/examples/debugging/root_actor_breakpoint.py": {},
    "tractor-master/examples/debugging/root_actor_breakpoint_forever.py": {},
    "tractor-master/examples/debugging/root_actor_error.py": {},
    "tractor-master/examples/debugging/root_cancelled_but_child_is_in_tty_lock.py": {},
    "tractor-master/examples/debugging/root_timeout_while_child_crashed.py": {},
    "tractor-master/examples/debugging/subactor_breakpoint.py": {},
    "tractor-master/examples/debugging/subactor_error.py": {},
    "tractor-master/examples/parallelism/concurrent_actors_primes.py": {},
    "tractor-master/examples/parallelism/single_func.py": {},
    "tractor-master/examples/parallelism/we_are_processes.py": {},
    "tractor-master/examples/parallelism/_concurrent_futures_primes.py": {
        "is_prime": {
            "name": "is_prime",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tractor-master/tests/conftest.py": {
        "repodir": {
            "name": "repodir",
            "location": 42,
            "return": [
                "str",
                "int",
                "float",
                "Callable"
            ],
            "arguments": {}
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]",
                    "str"
                ]
            }
        },
        "loglevel": {
            "name": "loglevel",
            "location": 75,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "Exception"
                ]
            }
        },
        "spawn_backend": {
            "name": "spawn_backend",
            "location": 84,
            "return": [
                "dict",
                "bool",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "Optional[dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "ci_env": {
            "name": "ci_env",
            "location": 89,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "arb_addr": {
            "name": "arb_addr",
            "location": 96,
            "return": [
                "Tuple[Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "metafunc": [
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "sig_prog": {
            "name": "sig_prog",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "proc": [
                    "bool",
                    "str"
                ],
                "sig": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "daemon": {
            "name": "daemon",
            "location": 135,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "loglevel": [
                    "str",
                    "int"
                ],
                "testdir": [
                    "str",
                    "List[int]"
                ],
                "arb_addr": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "tractor-master/tests/test_2way.py": {
        "test_simple_rpc": {
            "name": "test_simple_rpc",
            "location": 77,
            "return": [],
            "arguments": {
                "server_func": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "use_async_for": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "tractor-master/tests/test_advanced_streaming.py": {},
    "tractor-master/tests/test_cancellation.py": {
        "is_win": {
            "name": "is_win",
            "location": 18,
            "return": [
                "Union[int,float]",
                "bool"
            ],
            "arguments": {}
        },
        "test_remote_error": {
            "name": "test_remote_error",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": [
                    "str"
                ],
                "args_err": [
                    "str"
                ]
            }
        },
        "test_multierror": {
            "name": "test_multierror",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_multierror_fast_nursery": {
            "name": "test_multierror_fast_nursery",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": [
                    "List[str]",
                    "bool",
                    "Callable[,None]",
                    "Exception"
                ],
                "start_method": [
                    "List[str]",
                    "bool",
                    "Callable[,None]",
                    "Exception"
                ],
                "num_subactors": [
                    "int",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "delay": [
                    "List[str]",
                    "bool",
                    "Callable[,None]",
                    "Exception"
                ]
            }
        },
        "test_cancel_single_subactor": {
            "name": "test_cancel_single_subactor",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "mechanism": [
                    "str",
                    "float"
                ]
            }
        },
        "test_cancel_via_SIGINT": {
            "name": "test_cancel_via_SIGINT",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "loglevel": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "int"
                ],
                "start_method": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "int"
                ],
                "spawn_backend": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "int"
                ]
            }
        },
        "test_cancel_via_SIGINT_other_task": {
            "name": "test_cancel_via_SIGINT_other_task",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "loglevel": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "int"
                ],
                "start_method": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "int"
                ],
                "spawn_backend": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "int"
                ]
            }
        },
        "test_cancel_while_childs_child_in_sync_sleep": {
            "name": "test_cancel_while_childs_child_in_sync_sleep",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "loglevel": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "int"
                ],
                "start_method": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "int"
                ],
                "spawn_backend": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "int"
                ]
            }
        },
        "test_fast_graceful_cancel_when_spawn_task_in_soft_proc_wait_for_daemon": {
            "name": "test_fast_graceful_cancel_when_spawn_task_in_soft_proc_wait_for_daemon",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "start_method": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "tractor-master/tests/test_child_manages_service_nursery.py": {},
    "tractor-master/tests/test_clustering.py": {},
    "tractor-master/tests/test_context_stream_semantics.py": {},
    "tractor-master/tests/test_debugger.py": {
        "examples_dir": {
            "name": "examples_dir",
            "location": 40,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "mk_cmd": {
            "name": "mk_cmd",
            "location": 46,
            "return": [
                "str",
                "os.PathLike",
                "List[int]",
                "TextIO"
            ],
            "arguments": {
                "ex_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "spawn": {
            "name": "spawn",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "start_method": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "Callable"
                ],
                "testdir": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "Callable"
                ],
                "arb_addr": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "Callable"
                ]
            }
        },
        "test_root_actor_error": {
            "name": "test_root_actor_error",
            "location": 84,
            "return": [],
            "arguments": {
                "spawn": [],
                "user_in_out": []
            }
        },
        "test_root_actor_bp": {
            "name": "test_root_actor_bp",
            "location": 116,
            "return": [],
            "arguments": {
                "spawn": [],
                "user_in_out": [
                    "str"
                ]
            }
        },
        "test_root_actor_bp_forever": {
            "name": "test_root_actor_bp_forever",
            "location": 140,
            "return": [],
            "arguments": {
                "spawn": [
                    "str"
                ]
            }
        },
        "test_subactor_error": {
            "name": "test_subactor_error",
            "location": 162,
            "return": [],
            "arguments": {
                "spawn": [
                    "Type"
                ]
            }
        },
        "test_subactor_breakpoint": {
            "name": "test_subactor_breakpoint",
            "location": 197,
            "return": [],
            "arguments": {
                "spawn": [
                    "str",
                    "float"
                ]
            }
        },
        "test_multi_subactors": {
            "name": "test_multi_subactors",
            "location": 242,
            "return": [],
            "arguments": {
                "spawn": [
                    "str",
                    "float"
                ]
            }
        },
        "test_multi_daemon_subactors": {
            "name": "test_multi_daemon_subactors",
            "location": 330,
            "return": [],
            "arguments": {
                "spawn": [
                    "str",
                    "float"
                ],
                "loglevel": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_multi_subactors_root_errors": {
            "name": "test_multi_subactors_root_errors",
            "location": 407,
            "return": [],
            "arguments": {
                "spawn": [
                    "str",
                    "int"
                ]
            }
        },
        "test_multi_nested_subactors_error_through_nurseries": {
            "name": "test_multi_nested_subactors_error_through_nurseries",
            "location": 458,
            "return": [],
            "arguments": {
                "spawn": []
            }
        },
        "test_root_nursery_cancels_before_child_releases_tty_lock": {
            "name": "test_root_nursery_cancels_before_child_releases_tty_lock",
            "location": 493,
            "return": [],
            "arguments": {
                "spawn": [
                    "bool"
                ],
                "start_method": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Tuple[str, Any]]",
                    "int"
                ]
            }
        },
        "test_root_cancels_child_context_during_startup": {
            "name": "test_root_cancels_child_context_during_startup",
            "location": 554,
            "return": [],
            "arguments": {
                "spawn": [
                    "str"
                ]
            }
        },
        "test_different_debug_mode_per_actor": {
            "name": "test_different_debug_mode_per_actor",
            "location": 572,
            "return": [],
            "arguments": {
                "spawn": []
            }
        },
        "spawn._spawn": {
            "name": "_spawn",
            "location": 67,
            "return": [
                "bytearray",
                "str",
                "float"
            ],
            "arguments": {
                "cmd": [
                    "Optional[bool]",
                    "str"
                ]
            }
        }
    },
    "tractor-master/tests/test_discovery.py": {
        "test_subactors_unregister_on_cancel": {
            "name": "test_subactors_unregister_on_cancel",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "start_method": [
                    "int",
                    "bool"
                ],
                "use_signal": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ],
                "arb_addr": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ],
                "with_streaming": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "test_subactors_unregister_on_cancel_remote_daemon": {
            "name": "test_subactors_unregister_on_cancel_remote_daemon",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "daemon": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "start_method": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "use_signal": [
                    "bool",
                    "Iterable[str]",
                    "Optional[int]",
                    "None"
                ],
                "arb_addr": [
                    "bool",
                    "Iterable[str]",
                    "Optional[int]",
                    "None"
                ],
                "with_streaming": [
                    "bool",
                    "Iterable[str]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_close_channel_explicit": {
            "name": "test_close_channel_explicit",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "start_method": [
                    "int"
                ],
                "use_signal": [
                    "int",
                    "str",
                    "Tuple",
                    "bool"
                ],
                "arb_addr": [
                    "int",
                    "str",
                    "Tuple",
                    "bool"
                ]
            }
        },
        "test_close_channel_explicit_remote_arbiter": {
            "name": "test_close_channel_explicit_remote_arbiter",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "daemon": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "start_method": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "use_signal": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None",
                    "Optional[int]"
                ],
                "arb_addr": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None",
                    "Optional[int]"
                ]
            }
        }
    },
    "tractor-master/tests/test_docs_examples.py": {
        "examples_dir": {
            "name": "examples_dir",
            "location": 18,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "run_example_in_subproc": {
            "name": "run_example_in_subproc",
            "location": 25,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "loglevel": [
                    "int",
                    "Mapping",
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Mapping[str,Any]",
                    "Tuple[int,int]"
                ],
                "testdir": [
                    "int",
                    "Mapping",
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Mapping[str,Any]",
                    "Tuple[int,int]"
                ],
                "arb_addr": [
                    "int",
                    "Mapping",
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Mapping[str,Any]",
                    "Tuple[int,int]"
                ]
            }
        },
        "test_example": {
            "name": "test_example",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "run_example_in_subproc": [
                    "str"
                ],
                "example_script": [
                    "str"
                ]
            }
        },
        "run_example_in_subproc.run": {
            "name": "run",
            "location": 28,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "script_code": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "tractor-master/tests/test_infected_asyncio.py": {},
    "tractor-master/tests/test_local.py": {
        "test_no_main": {
            "name": "test_no_main",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_local_actor_async_func": {
            "name": "test_local_actor_async_func",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": []
            }
        }
    },
    "tractor-master/tests/test_multi_program.py": {
        "test_abort_on_sigint": {
            "name": "test_abort_on_sigint",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "daemon": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "test_register_duplicate_name": {
            "name": "test_register_duplicate_name",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "daemon": [],
                "arb_addr": []
            }
        }
    },
    "tractor-master/tests/test_pubsub.py": {
        "test_type_checks": {
            "name": "test_type_checks",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_even": {
            "name": "is_even",
            "location": 28,
            "return": [
                "bool",
                "int",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice"
                ]
            }
        },
        "test_multi_actor_subs_arbiter_pub": {
            "name": "test_multi_actor_subs_arbiter_pub",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "loglevel": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "arb_addr": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "pub_actor": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_single_subactor_pub_multitask_subs": {
            "name": "test_single_subactor_pub_multitask_subs",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "loglevel": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "arb_addr": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_type_checks.not_async_gen": {
            "name": "not_async_gen",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "yo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "subs.pred": {
            "name": "pred",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "i": []
            }
        }
    },
    "tractor-master/tests/test_resource_cache.py": {},
    "tractor-master/tests/test_rpc.py": {
        "test_rpc_errors": {
            "name": "test_rpc_errors",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": [
                    "Dict[str,Tuple[str,str]]",
                    "Dict[str,tuple[Union[str,str]]]"
                ],
                "to_call": [
                    "Dict[str,Tuple[str,str]]",
                    "Dict[str,tuple[Union[str,str]]]"
                ],
                "testdir": [
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "test_rpc_errors.run": {
            "name": "run",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tractor-master/tests/test_spawning.py": {
        "test_local_arbiter_subactor_global_state": {
            "name": "test_local_arbiter_subactor_global_state",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": []
            }
        },
        "test_loglevel_propagated_to_subactor": {
            "name": "test_loglevel_propagated_to_subactor",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "start_method": [
                    "List[int]",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ],
                "capfd": [
                    "int",
                    "str",
                    "tuple"
                ],
                "arb_addr": [
                    "List[int]",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "tractor-master/tests/test_streaming.py": {
        "test_must_define_ctx": {
            "name": "test_must_define_ctx",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stream_from_single_subactor": {
            "name": "test_stream_from_single_subactor",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": [
                    "str"
                ],
                "start_method": [
                    "str"
                ],
                "stream_func": [
                    "str"
                ]
            }
        },
        "time_quad_ex": {
            "name": "time_quad_ex",
            "location": 234,
            "return": [
                "Tuple",
                "int",
                "Match",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "arb_addr": [
                    "bool",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "ci_env": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Iterable[str]"
                ],
                "spawn_backend": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "test_a_quadruple_example": {
            "name": "test_a_quadruple_example",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "time_quad_ex": [
                    "Callable[[list],None]",
                    "Dict",
                    "Callable[list,None]"
                ],
                "ci_env": [
                    "Callable[,None]",
                    "bool",
                    "Exception",
                    "Callable",
                    "Callable[...,None]"
                ],
                "spawn_backend": [
                    "Callable[,None]",
                    "bool",
                    "Exception",
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "test_not_fast_enough_quad": {
            "name": "test_not_fast_enough_quad",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": [
                    "str"
                ],
                "time_quad_ex": [
                    "Union[int,slice]",
                    "int"
                ],
                "cancel_delay": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "ci_env": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[tuple[Union[str,Any]]]",
                    "int",
                    "List[Tuple[str,Any]]"
                ],
                "spawn_backend": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[tuple[Union[str,Any]]]",
                    "int",
                    "List[Tuple[str,Any]]"
                ]
            }
        }
    },
    "tractor-master/tests/test_task_broadcasting.py": {
        "test_stream_fan_out_to_local_subscriptions": {
            "name": "test_stream_fan_out_to_local_subscriptions",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": [],
                "start_method": []
            }
        },
        "test_consumer_and_parent_maybe_lag": {
            "name": "test_consumer_and_parent_maybe_lag",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": [
                    "Dict[str,Any]"
                ],
                "start_method": [
                    "Dict[str,Any]"
                ],
                "task_delays": [
                    "Dict[str,Any]"
                ]
            }
        },
        "test_faster_task_to_recv_is_cancelled_by_slower": {
            "name": "test_faster_task_to_recv_is_cancelled_by_slower",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": [],
                "start_method": []
            }
        },
        "test_subscribe_errors_after_close": {
            "name": "test_subscribe_errors_after_close",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ensure_slow_consumers_lag_out": {
            "name": "test_ensure_slow_consumers_lag_out",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "arb_addr": [],
                "start_method": []
            }
        },
        "test_first_recver_is_cancelled": {
            "name": "test_first_recver_is_cancelled",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tractor-master/tests/test_trioisms.py": {},
    "tractor-master/tractor/log.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 139,
            "return": [
                "StackLevelAdapter",
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "_root_name": [
                    "str",
                    "Text"
                ]
            }
        },
        "get_console_log": {
            "name": "get_console_log",
            "location": 175,
            "return": [
                "dict",
                "Dict[str, str]",
                "int",
                "str"
            ],
            "arguments": {
                "level": [
                    "int",
                    "Tuple[int]",
                    "None"
                ]
            }
        },
        "get_loglevel": {
            "name": "get_loglevel",
            "location": 209,
            "return": [
                "Text",
                "str",
                "List"
            ],
            "arguments": {}
        },
        "StackLevelAdapter.transport": {
            "name": "transport",
            "location": 77,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "StackLevelAdapter.runtime": {
            "name": "runtime",
            "location": 84,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "StackLevelAdapter.cancel": {
            "name": "cancel",
            "location": 90,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "StackLevelAdapter.pdb": {
            "name": "pdb",
            "location": 96,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "StackLevelAdapter.log": {
            "name": "log",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str"
                ],
                "msg": [
                    "int",
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "StackLevelAdapter._log": {
            "name": "_log",
            "location": 112,
            "return": [
                "OrderedDict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "Dict[str,Any]",
                    "List[int]",
                    "logging.Logger",
                    "None",
                    "logging.LogRecord",
                    "Optional[List[int]]"
                ],
                "msg": [
                    "str",
                    "Dict[str,Any]",
                    "List[int]",
                    "logging.Logger",
                    "None",
                    "logging.LogRecord",
                    "Optional[List[int]]"
                ],
                "args": [],
                "exc_info": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "logging.Logger",
                    "List[int]",
                    "logging.LogRecord",
                    "Optional[List[int]]"
                ],
                "extra": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "logging.Logger",
                    "List[int]",
                    "logging.LogRecord",
                    "Optional[List[int]]"
                ],
                "stack_info": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[List[int]]"
                ],
                "stacklevel": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[List[int]]"
                ]
            }
        }
    },
    "tractor-master/tractor/msg.py": {
        "NamespacePath.load_ref": {
            "name": "load_ref",
            "location": 59,
            "return": [
                "str",
                "List[str]",
                "Dict[int,Any]",
                "Iterable[str]",
                "List[Any]",
                "Dict[str,str]",
                "Dict",
                "Dict[str,list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespacePath.to_tuple": {
            "name": "to_tuple",
            "location": 64,
            "return": [
                "Tuple",
                "str",
                "Optional[Iterable[Any]]",
                "bool",
                "List[str]",
                "Optional[str]",
                "int",
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespacePath.from_ref": {
            "name": "from_ref",
            "location": 72,
            "return": [
                "bool",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "ref": [
                    "str"
                ]
            }
        }
    },
    "tractor-master/tractor/to_asyncio.py": {
        "_run_asyncio_task": {
            "name": "_run_asyncio_task",
            "location": 140,
            "return": [
                "LinkedTaskChannel",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "int"
                ]
            }
        },
        "run_as_asyncio_guest": {
            "name": "run_as_asyncio_guest",
            "location": 438,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[Tuple[float, str]]"
            ],
            "arguments": {
                "trio_main": [
                    "str"
                ]
            }
        },
        "LinkedTaskChannel.closed": {
            "name": "closed",
            "location": 102,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[float]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_run_asyncio_task.cancel_trio": {
            "name": "cancel_trio",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "task": []
            }
        },
        "translate_aio_errors.maybe_raise_aio_err": {
            "name": "maybe_raise_aio_err",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "err": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "run_as_asyncio_guest.aio_main.trio_done_callback": {
            "name": "trio_done_callback",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "main_outcome": [
                    "str",
                    "IO"
                ]
            }
        }
    },
    "tractor-master/tractor/_actor.py": {
        "_get_mod_abspath": {
            "name": "_get_mod_abspath",
            "location": 298,
            "return": [
                "str"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Actor.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Actor.load_modules": {
            "name": "load_modules",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Actor._get_rpc_func": {
            "name": "_get_rpc_func",
            "location": 487,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "int",
                    "bool"
                ],
                "funcname": [
                    "int",
                    "bool"
                ]
            }
        },
        "Actor.get_context": {
            "name": "get_context",
            "location": 731,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "chan": [
                    "int",
                    "bool",
                    "str"
                ],
                "cid": [
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "msg_buffer_size": [
                    "int",
                    "float"
                ]
            }
        },
        "Actor.cancel_soon": {
            "name": "cancel_soon",
            "location": 1298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Actor.cancel_server": {
            "name": "cancel_server",
            "location": 1423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Actor.accept_addr": {
            "name": "accept_addr",
            "location": 1432,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Actor.get_parent": {
            "name": "get_parent",
            "location": 1438,
            "return": [
                "str",
                "Optional[BaseException]",
                "int",
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Actor.get_chans": {
            "name": "get_chans",
            "location": 1443,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str",
                    "bytes",
                    "Union[int, float, complex]",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Actor.is_infected_aio": {
            "name": "is_infected_aio",
            "location": 1468,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arbiter.__init__": {
            "name": "__init__",
            "location": 1485,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tractor-master/tractor/_child.py": {
        "parse_uid": {
            "name": "parse_uid",
            "location": 31,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "float"
                ]
            }
        },
        "parse_ipaddr": {
            "name": "parse_ipaddr",
            "location": 35,
            "return": [
                "Tuple[Union[str,int]]",
                "str",
                "argparse.Namespace"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "str",
                    "IO[bytes]",
                    "IO",
                    "Union[int,float]",
                    "float"
                ]
            }
        }
    },
    "tractor-master/tractor/_clustering.py": {},
    "tractor-master/tractor/_debug.py": {
        "handler": {
            "name": "handler",
            "location": 222,
            "return": [],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_mk_pdb": {
            "name": "_mk_pdb",
            "location": 480,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_set_trace": {
            "name": "_set_trace",
            "location": 495,
            "return": [],
            "arguments": {
                "actor": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_post_mortem": {
            "name": "_post_mortem",
            "location": 528,
            "return": [],
            "arguments": {
                "actor": [
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "PdbwTeardown.set_continue": {
            "name": "set_continue",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PdbwTeardown.set_quit": {
            "name": "set_quit",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_set_trace.nuttin": {
            "name": "nuttin",
            "location": 511,
            "return": [],
            "arguments": {}
        },
        "_breakpoint.teardown": {
            "name": "teardown",
            "location": 463,
            "return": [],
            "arguments": {}
        }
    },
    "tractor-master/tractor/_discovery.py": {},
    "tractor-master/tractor/_entry.py": {
        "_mp_main": {
            "name": "_mp_main",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "actor": [
                    "bool",
                    "Callable",
                    "Union[int,float]",
                    "float"
                ],
                "accept_addr": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "None"
                ],
                "forkserver_info": [
                    "Tuple[Any,Any,Any,Any,Any]",
                    "str",
                    "Tuple[Union[Any,Any,Any,Any,Any]]",
                    "bool",
                    "BinaryIO",
                    "Optional[AbstractPurpose]",
                    "None"
                ],
                "start_method": [
                    "str"
                ],
                "parent_addr": [
                    "str",
                    "Callable",
                    "None",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ],
                "infect_asyncio": [
                    "bool",
                    "Optional[int]",
                    "float",
                    "int"
                ]
            }
        },
        "_trio_main": {
            "name": "_trio_main",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "actor": [
                    "str"
                ]
            }
        }
    },
    "tractor-master/tractor/_exceptions.py": {
        "pack_error": {
            "name": "pack_error",
            "location": 94,
            "return": [
                "Dict[Text,dict[Text,str]]",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Union[type,Tuple[type,...]]",
                "Optional[str]"
            ],
            "arguments": {
                "exc": [],
                "tb": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "Callable",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "unpack_error": {
            "name": "unpack_error",
            "location": 115,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Type",
                    "Optional[BaseException]"
                ],
                "chan": [
                    "bool",
                    "None",
                    "Callable",
                    "Optional[bool]"
                ],
                "err_type": [
                    "RemoteActorError",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "is_multi_cancelled": {
            "name": "is_multi_cancelled",
            "location": 156,
            "return": [
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "exc": [
                    "float",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "RemoteActorError.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ],
                "suberror_type": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "Union[str,List[str]]"
                ]
            }
        }
    },
    "tractor-master/tractor/_forkserver_override.py": {
        "main": {
            "name": "main",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "listener_fd": [
                    "int",
                    "TextIO",
                    "bytes"
                ],
                "alive_r": [
                    "str",
                    "int",
                    "Union[int,float]",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "preload": [
                    "str",
                    "bool"
                ],
                "main_path": [
                    "str",
                    "bool",
                    "None"
                ],
                "sys_path": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "_serve_one": {
            "name": "_serve_one",
            "location": 312,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "child_r": [
                    "str",
                    "List[str]"
                ],
                "fds": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "unused_fds": [
                    "List",
                    "str",
                    "bool",
                    "List[tuple[Union[str,Any]]]",
                    "float",
                    "List[Tuple[str,Any]]"
                ],
                "handlers": [
                    "Dict",
                    "Dict[str,set[str]]",
                    "Dict[str,Set[str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "write_signed": {
            "name": "write_signed",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [
                    "int",
                    "str",
                    "bytes",
                    "List[int]"
                ],
                "n": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str,int]"
                ]
            }
        },
        "override_stdlib": {
            "name": "override_stdlib",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PatchedForkServer.connect_to_new_process": {
            "name": "connect_to_new_process",
            "location": 62,
            "return": [
                "Tuple",
                "bool",
                "Optional[str]",
                "Taxon",
                "Optional[Callable]",
                "Optional[Iterable]",
                "Callable[[Type,str],bool]"
            ],
            "arguments": {
                "self": [],
                "fds": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "PatchedForkServer.ensure_running": {
            "name": "ensure_running",
            "location": 106,
            "return": [
                "None",
                "str",
                "Iterable[Hashable]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.sigchld_handler": {
            "name": "sigchld_handler",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PatchedResourceTracker.getfd": {
            "name": "getfd",
            "location": 350,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tractor-master/tractor/_ipc.py": {
        "get_stream_addrs": {
            "name": "get_stream_addrs",
            "location": 45,
            "return": [
                "Tuple[tuple[Union[bytes,str]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "stream": [
                    "int",
                    "str"
                ]
            }
        },
        "get_msg_transport": {
            "name": "get_msg_transport",
            "location": 291,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "float",
                    "bool",
                    "Type"
                ]
            }
        },
        "MsgTransport.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "MsgTransport.__aiter__": {
            "name": "__aiter__",
            "location": 78,
            "return": [
                "MsgType",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsgTransport.connected": {
            "name": "connected",
            "location": 81,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsgTransport.drain": {
            "name": "drain",
            "location": 86,
            "return": [
                "collections.abc.AsyncIterator[dict]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsgTransport.laddr": {
            "name": "laddr",
            "location": 90,
            "return": [
                "Tuple[str,int]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsgTransport.raddr": {
            "name": "raddr",
            "location": 94,
            "return": [
                "Tuple[str,int]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsgpackTCPStream.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "TextIO",
                    "int",
                    "trio.SocketStream"
                ]
            }
        },
        "MsgpackTCPStream.laddr": {
            "name": "laddr",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsgpackTCPStream.raddr": {
            "name": "raddr",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsgpackTCPStream.__aiter__": {
            "name": "__aiter__",
            "location": 200,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsgpackTCPStream.connected": {
            "name": "connected",
            "location": 203,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsgspecTCPStream.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "bool"
                ],
                "prefix_size": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "Channel.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destaddr": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "msg_transport_type_key": [
                    "Tuple[Text]",
                    "bool",
                    "Dict",
                    "str"
                ]
            }
        },
        "Channel.from_stream": {
            "name": "from_stream",
            "location": 355,
            "return": [
                "Channel",
                "str",
                "Callable",
                "Callable[[None,None],bool]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "stream": [
                    "bytes",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "Channel.set_msg_transport": {
            "name": "set_msg_transport",
            "location": 370,
            "return": [
                "bool",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "int"
                ],
                "type_key": [
                    "str",
                    "None",
                    "int",
                    "bytes",
                    "List",
                    "Optional[str]",
                    "Union[bytes,str,None]"
                ]
            }
        },
        "Channel.__repr__": {
            "name": "__repr__",
            "location": 380,
            "return": [
                "str",
                "List[cirq.Qid]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.laddr": {
            "name": "laddr",
            "location": 388,
            "return": [
                "None",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.raddr": {
            "name": "raddr",
            "location": 392,
            "return": [
                "None",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.__aiter__": {
            "name": "__aiter__",
            "location": 455,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.connected": {
            "name": "connected",
            "location": 517,
            "return": [
                "bool",
                "Tuple[Any,Any,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tractor-master/tractor/_mp_fixup_main.py": {
        "_mp_figure_out_main": {
            "name": "_mp_figure_out_main",
            "location": 36,
            "return": [
                "Dict[Text,Union[str,list[str],Final,set[str]]]",
                "str",
                "Dict[str,bool]",
                "apistar.types.WSGIEnviron",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "_fixup_main_from_name": {
            "name": "_fixup_main_from_name",
            "location": 66,
            "return": [
                "None",
                "Set[str]",
                "str",
                "Dict",
                "Set",
                "Callable[...,None]"
            ],
            "arguments": {
                "mod_name": [
                    "str"
                ]
            }
        },
        "_fixup_main_from_path": {
            "name": "_fixup_main_from_path",
            "location": 91,
            "return": [
                "None",
                "Set",
                "Dict[str,Any]",
                "Tuple",
                "str"
            ],
            "arguments": {
                "main_path": [
                    "str"
                ]
            }
        }
    },
    "tractor-master/tractor/_portal.py": {
        "_unwrap_msg": {
            "name": "_unwrap_msg",
            "location": 71,
            "return": [
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "set"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Dict[str, Any]"
                ],
                "channel": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "Portal.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "tractor-master/tractor/_root.py": {
        "run": {
            "name": "run",
            "location": 232,
            "return": [
                "List[str]",
                "Awaitable"
            ],
            "arguments": {
                "async_fn": [
                    "bool",
                    "str",
                    "Iterable[int]",
                    "float"
                ]
            }
        },
        "run_daemon": {
            "name": "run_daemon",
            "location": 277,
            "return": [
                "bool",
                "Awaitable",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "enable_modules": [
                    "List[Union[Type,str,str,str,str,str,str,str]]",
                    "str",
                    "List[Type]",
                    "Sequence[str]",
                    "int",
                    "Iterable[str]"
                ]
            }
        }
    },
    "tractor-master/tractor/_spawn.py": {
        "try_set_start_method": {
            "name": "try_set_start_method",
            "location": 75,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        }
    },
    "tractor-master/tractor/_state.py": {
        "current_actor": {
            "name": "current_actor",
            "location": 37,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "err_on_no_runtime": [
                    "bool",
                    "str",
                    "Optional[float]",
                    "Optional[AnyStr]",
                    "Optional[dict]"
                ]
            }
        },
        "is_main_process": {
            "name": "is_main_process",
            "location": 70,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "debug_mode": {
            "name": "debug_mode",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_root_process": {
            "name": "is_root_process",
            "location": 84,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "ActorContextInfo.__len__": {
            "name": "__len__",
            "location": 56,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextInfo.__iter__": {
            "name": "__iter__",
            "location": 59,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActorContextInfo.__getitem__": {
            "name": "__getitem__",
            "location": 62,
            "return": [
                "Text",
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "tractor-master/tractor/_streaming.py": {
        "stream": {
            "name": "stream",
            "location": 677,
            "return": [
                "Callable",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "T"
                ]
            }
        },
        "context": {
            "name": "context",
            "location": 709,
            "return": [
                "Callable",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "T"
                ]
            }
        },
        "ReceiveMsgStream.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "rx_chan": [
                    "bool"
                ],
                "_broadcaster": [
                    "bool",
                    "None"
                ]
            }
        },
        "ReceiveMsgStream.receive_nowait": {
            "name": "receive_nowait",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tractor-master/tractor/_supervise.py": {
        "ActorNursery.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actor": [
                    "Union[float,Tuple[float,float]]",
                    "float",
                    "Callable",
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Optional[Callable[[Any],None]]",
                    "None"
                ],
                "ria_nursery": [
                    "Union[float,Tuple[float,float]]",
                    "float",
                    "Callable",
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Optional[Callable[[Any],None]]",
                    "None"
                ],
                "da_nursery": [
                    "Union[float,Tuple[float,float]]",
                    "float",
                    "Callable",
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Optional[Callable[[Any],None]]",
                    "None"
                ],
                "errors": [
                    "Union[float,Tuple[float,float]]",
                    "float",
                    "Callable",
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Optional[Callable[[Any],None]]",
                    "None"
                ]
            }
        }
    },
    "tractor-master/tractor/__init__.py": {},
    "tractor-master/tractor/experimental/_pubsub.py": {
        "modify_subs": {
            "name": "modify_subs",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "topics2ctxs": [
                    "bool",
                    "Callable"
                ],
                "topics": [
                    "Dict[str,Any]",
                    "discord.excommands.Context",
                    "trezor.wire.Context",
                    "int"
                ],
                "ctx": [
                    "Type",
                    "List[str]",
                    "discord.excommands.Context",
                    "trezor.wire.Context"
                ]
            }
        },
        "pub": {
            "name": "pub",
            "location": 143,
            "return": [
                "int"
            ],
            "arguments": {
                "wrapped": [
                    "Dict",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "Mapping[Tuple[str,str],Any]",
                    "Mapping"
                ]
            }
        },
        "fan_out_to_ctxs.get_topics": {
            "name": "get_topics",
            "location": 55,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {}
        }
    },
    "tractor-master/tractor/experimental/__init__.py": {},
    "tractor-master/tractor/testing/_tractor_test.py": {
        "tractor_test": {
            "name": "tractor_test",
            "location": 28,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "fn": [
                    "bool",
                    "Callable[,bytes]",
                    "BaseException"
                ]
            }
        },
        "tractor_test.wrapper": {
            "name": "wrapper",
            "location": 46,
            "return": [
                "List[str]",
                "Sequence['cirq.Qid']",
                "str",
                "Callable",
                "Callable[[], Any]"
            ],
            "arguments": {}
        }
    },
    "tractor-master/tractor/testing/__init__.py": {},
    "tractor-master/tractor/trionics/_broadcast.py": {
        "broadcast_receiver": {
            "name": "broadcast_receiver",
            "location": 351,
            "return": [
                "Dict",
                "BroadcastReceiver"
            ],
            "arguments": {
                "recv_chan": [
                    "int",
                    "float"
                ],
                "max_buffer_size": [
                    "int",
                    "float"
                ]
            }
        },
        "AsyncReceiver.__aiter__": {
            "name": "__aiter__",
            "location": 60,
            "return": [
                "AsyncIterator[ReceiveType]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastReceiver.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rx_chan": [
                    "Sequence",
                    "bool",
                    "str"
                ],
                "state": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Callable",
                    "str",
                    "int"
                ],
                "receive_afunc": [
                    "Sequence",
                    "bool",
                    "None",
                    "str"
                ]
            }
        }
    },
    "tractor-master/tractor/trionics/_mngrs.py": {},
    "tractor-master/tractor/trionics/__init__.py": {}
}
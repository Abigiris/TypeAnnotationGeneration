{
    "tradebot-master/trade/arguments.py": {
        "Arguments.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "List[str]"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "Arguments._load_args": {
            "name": "_load_args",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.get_parsed_arg": {
            "name": "get_parsed_arg",
            "location": 35,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.parse_args": {
            "name": "parse_args",
            "location": 46,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.common_args_parser": {
            "name": "common_args_parser",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.backtesting_options": {
            "name": "backtesting_options",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "Arguments.edge_options": {
            "name": "edge_options",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "Arguments.optimizer_shared_options": {
            "name": "optimizer_shared_options",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "Arguments.hyperopt_options": {
            "name": "hyperopt_options",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "Arguments._build_subcommands": {
            "name": "_build_subcommands",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.parse_timerange": {
            "name": "parse_timerange",
            "location": 293,
            "return": [
                "TimeRange"
            ],
            "arguments": {
                "text": [
                    "Optional[str]"
                ]
            }
        },
        "Arguments.scripts_options": {
            "name": "scripts_options",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.testdata_dl_options": {
            "name": "testdata_dl_options",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradebot-master/trade/configuration.py": {
        "set_loggers": {
            "name": "set_loggers",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "log_level": [
                    "int"
                ]
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "argparse.Namespace"
                ],
                "runmode": [
                    "trade.state.RunMode"
                ]
            }
        },
        "Configuration.load_config": {
            "name": "load_config",
            "location": 41,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration._load_config_file": {
            "name": "_load_config_file",
            "location": 84,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Configuration._load_common_config": {
            "name": "_load_common_config",
            "location": 100,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Configuration._create_datadir": {
            "name": "_create_datadir",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ],
                "datadir": [
                    "Optional[str]"
                ]
            }
        },
        "Configuration._load_backtesting_config": {
            "name": "_load_backtesting_config",
            "location": 168,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Configuration._load_edge_config": {
            "name": "_load_edge_config",
            "location": 236,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Configuration._load_hyperopt_config": {
            "name": "_load_hyperopt_config",
            "location": 262,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Configuration._validate_config": {
            "name": "_validate_config",
            "location": 285,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Configuration.get_config": {
            "name": "get_config",
            "location": 303,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.check_exchange": {
            "name": "check_exchange",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "tradebot-master/trade/constant.py": {},
    "tradebot-master/trade/indicator_helpers.py": {
        "went_up": {
            "name": "went_up",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "series": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "went_down": {
            "name": "went_down",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "series": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ehlers_super_smoother": {
            "name": "ehlers_super_smoother",
            "location": 16,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str"
                ],
                "smoothing": [
                    "float"
                ]
            }
        },
        "fishers_inverse": {
            "name": "fishers_inverse",
            "location": 31,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "series": [
                    "int",
                    "Callable",
                    "str"
                ],
                "smoothing": [
                    "float"
                ]
            }
        }
    },
    "tradebot-master/trade/main.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "sysargv": [
                    "List[str]"
                ]
            }
        }
    },
    "tradebot-master/trade/misc.py": {
        "shorten_date": {
            "name": "shorten_date",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "_date": [
                    "str"
                ]
            }
        },
        "datesarray_to_datetimearray": {
            "name": "datesarray_to_datetimearray",
            "location": 30,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "dates": [
                    "np.ndarray"
                ]
            }
        },
        "common_datearray": {
            "name": "common_datearray",
            "location": 38,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "dfs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "file_dump_json": {
            "name": "file_dump_json",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "data": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "MutableMapping",
                    "typing.MutableMapping",
                    "dict",
                    "dict[, ]",
                    "Type['Declared']",
                    "typing.Type"
                ],
                "is_zip": [
                    "bool",
                    "Optional[bytes]",
                    "str",
                    "list"
                ]
            }
        },
        "json_load": {
            "name": "json_load",
            "location": 76,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "Optional[Callable]",
                "Optional[int]",
                "numpy.array"
            ],
            "arguments": {
                "datafile": [
                    "bool",
                    "str",
                    "int",
                    "list[str]",
                    "datetime.datetime",
                    "tuple[typing.Union[str,...]]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ]
            }
        },
        "file_load_json": {
            "name": "file_load_json",
            "location": 85,
            "return": [
                "Optional[str]",
                "None",
                "Optional[int]",
                "str",
                "int",
                "bool",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "file": [
                    "IO[str]",
                    "str",
                    "TextIO"
                ]
            }
        },
        "format_ms_time": {
            "name": "format_ms_time",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "date": [
                    "int"
                ]
            }
        },
        "deep_merge_dicts": {
            "name": "deep_merge_dicts",
            "location": 111,
            "return": [
                "_T1"
            ],
            "arguments": {
                "source": [
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "str",
                    "dict"
                ],
                "destination": [
                    "_T1"
                ]
            }
        }
    },
    "tradebot-master/trade/persistence.py": {
        "init": {
            "name": "init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "has_column": {
            "name": "has_column",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "columns": [
                    "List[str]",
                    "list[str]",
                    "list",
                    "int",
                    "list[]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "dict",
                    "dict[, ]"
                ],
                "searchname": [
                    "str"
                ]
            }
        },
        "get_column_def": {
            "name": "get_column_def",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "columns": [
                    "bool",
                    "str",
                    "Optional[list]",
                    "list[]",
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ],
                "column": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        },
        "check_migrate": {
            "name": "check_migrate",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clean_dry_run_db": {
            "name": "clean_dry_run_db",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Trade.__repr__": {
            "name": "__repr__",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.adjust_stop_loss": {
            "name": "adjust_stop_loss",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_price": [
                    "float"
                ],
                "stoploss": [
                    "float"
                ],
                "initial": [
                    "bool"
                ]
            }
        },
        "Trade.update": {
            "name": "update",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "dict"
                ]
            }
        },
        "Trade.close": {
            "name": "close",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "float"
                ]
            }
        },
        "Trade.calc_open_trade_price": {
            "name": "calc_open_trade_price",
            "location": 284,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "fee": [
                    "Optional[float]"
                ]
            }
        },
        "Trade.calc_close_trade_price": {
            "name": "calc_close_trade_price",
            "location": 295,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "Optional[float]"
                ],
                "fee": [
                    "Optional[float]"
                ]
            }
        },
        "Trade.calc_profit": {
            "name": "calc_profit",
            "location": 312,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "Optional[float]"
                ],
                "fee": [
                    "Optional[float]"
                ]
            }
        },
        "Trade.calc_profit_percent": {
            "name": "calc_profit_percent",
            "location": 329,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "Optional[float]"
                ],
                "fee": [
                    "Optional[float]"
                ]
            }
        },
        "Trade.total_open_trades_stakes": {
            "name": "total_open_trades_stakes",
            "location": 346,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "Trade.get_open_trades": {
            "name": "get_open_trades",
            "location": 357,
            "return": [
                "list"
            ],
            "arguments": {}
        }
    },
    "tradebot-master/trade/state.py": {},
    "tradebot-master/trade/tradebot.py": {},
    "tradebot-master/trade/wallets.py": {
        "Wallets.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Wallets.get_free": {
            "name": "get_free",
            "location": 25,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "int",
                    "djmoney.contrib.exchange.models.Rate",
                    "str",
                    "dict[str, bool]",
                    "Dict[str, bool]"
                ]
            }
        },
        "Wallets.get_used": {
            "name": "get_used",
            "location": 35,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "Dict[str, str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, str]"
                ]
            }
        },
        "Wallets.get_total": {
            "name": "get_total",
            "location": 46,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "int",
                    "djmoney.contrib.exchange.models.Rate",
                    "str",
                    "dict[str, bool]",
                    "Dict[str, bool]"
                ]
            }
        },
        "Wallets.update": {
            "name": "update",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradebot-master/trade/__init__.py": {},
    "tradebot-master/trade/__main__.py": {},
    "tradebot-master/trade/data/converter.py": {
        "parse_ticker_dataframe": {
            "name": "parse_ticker_dataframe",
            "location": 14,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "ticker": [
                    "list"
                ],
                "ticker_interval": [
                    "str"
                ],
                "fill_missing": [
                    "bool"
                ]
            }
        },
        "ohlcv_fill_up_missing_data": {
            "name": "ohlcv_fill_up_missing_data",
            "location": 52,
            "return": [
                "str",
                "int",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "dataframe": [
                    "str",
                    "bytes",
                    "Sequence[T]",
                    "list",
                    "Set[str]"
                ],
                "ticker_interval": [
                    "str"
                ]
            }
        },
        "order_book_to_dataframe": {
            "name": "order_book_to_dataframe",
            "location": 80,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "bids": [
                    "list"
                ],
                "asks": [
                    "list"
                ]
            }
        }
    },
    "tradebot-master/trade/data/dataprovider.py": {
        "DataProvider.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ],
                "exchange": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "DataProvider.refresh": {
            "name": "refresh",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "List[Tuple[(str, str)]]"
                ],
                "helping_pairs": [
                    "List[Tuple[(str, str)]]"
                ]
            }
        },
        "DataProvider.available_pairs": {
            "name": "available_pairs",
            "location": 41,
            "return": [
                "list[]",
                "List[str]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.ohlcv": {
            "name": "ohlcv",
            "location": 50,
            "return": [
                "DataFrame",
                "str",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ],
                "tick_interval": [
                    "str"
                ],
                "copy": [
                    "bool"
                ]
            }
        },
        "DataProvider.historic_ohlcv": {
            "name": "historic_ohlcv",
            "location": 70,
            "return": [
                "int",
                "List[List[int]]",
                "List[str]",
                "pandas.DataFrame",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ],
                "ticker_interval": [
                    "str"
                ]
            }
        },
        "DataProvider.ticker": {
            "name": "ticker",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ]
            }
        },
        "DataProvider.orderbook": {
            "name": "orderbook",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ],
                "max": [
                    "int"
                ]
            }
        },
        "DataProvider.runmode": {
            "name": "runmode",
            "location": 100,
            "return": [
                "RunMode",
                "bool",
                "Optional[str]",
                "Mapping[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradebot-master/trade/data/history.py": {
        "trim_tickerlist": {
            "name": "trim_tickerlist",
            "location": 22,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "tickerlist": [
                    "List[dict]"
                ],
                "timerange": [
                    "trade.arguments.TimeRange"
                ]
            }
        },
        "load_tickerdata_file": {
            "name": "load_tickerdata_file",
            "location": 46,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "datadir": [
                    "Optional[pathlib.Path]"
                ],
                "pair": [
                    "str"
                ],
                "ticker_interval": [
                    "str"
                ],
                "timerange": [
                    "Optional[trade.arguments.TimeRange]"
                ]
            }
        },
        "load_pair_history": {
            "name": "load_pair_history",
            "location": 64,
            "return": [
                "None",
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "pair": [
                    "str"
                ],
                "ticker_interval": [
                    "str"
                ],
                "datadir": [
                    "Optional[pathlib.Path]"
                ],
                "timerange": [
                    "trade.arguments.TimeRange"
                ],
                "refresh_pairs": [
                    "bool"
                ],
                "exchange": [
                    "str",
                    "None",
                    "bool",
                    "Optional[freqtrade.exchange.Exchange]",
                    "pandas._FilePathOrBuffer"
                ],
                "fill_up_missing": [
                    "bool"
                ]
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "datadir": [
                    "Optional[pathlib.Path]"
                ],
                "ticker_interval": [
                    "str"
                ],
                "pairs": [
                    "List[str]"
                ],
                "refresh_pairs": [
                    "bool"
                ],
                "exchange": [
                    "bool",
                    "None",
                    "str",
                    "list[str]",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "typing.Generator[]",
                    "freqtrade.arguments.TimeRange",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "Generator"
                ],
                "timerange": [
                    "trade.arguments.TimeRange"
                ],
                "fill_up_missing": [
                    "bool"
                ]
            }
        },
        "make_testdata_path": {
            "name": "make_testdata_path",
            "location": 122,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "datadir": [
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "load_cached_data_for_updating": {
            "name": "load_cached_data_for_updating",
            "location": 127,
            "return": [
                "Tuple[(list, Optional[int])]"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path"
                ],
                "tick_interval": [
                    "str"
                ],
                "timerage": [
                    "Optional[trade.arguments.TimeRange]"
                ]
            }
        },
        "download_pair_history": {
            "name": "download_pair_history",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "datadir": [
                    "Optional[pathlib.Path]"
                ],
                "exchange": [
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "databricks.koalas.frame.DataFrame",
                    "float"
                ],
                "pair": [
                    "str"
                ],
                "tick_interval": [
                    "str"
                ],
                "timerange": [
                    "Optional[trade.arguments.TimeRange]"
                ]
            }
        }
    },
    "tradebot-master/trade/data/__init__.py": {},
    "tradebot-master/trade/edge/__init__.py": {},
    "tradebot-master/trade/exchange/binance.py": {
        "Binance.get_order_book": {
            "name": "get_order_book",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ],
                "limit": [
                    "int"
                ]
            }
        }
    },
    "tradebot-master/trade/exchange/exchange.py": {
        "retrier_aync": {
            "name": "retrier_aync",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "retrier": {
            "name": "retrier",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "retrier.wrapper": {
            "name": "wrapper",
            "location": 49,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "Exchange.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Type['BaseConfig']"
                ]
            }
        },
        "Exchange.__del__": {
            "name": "__del__",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange._init_ccxt": {
            "name": "_init_ccxt",
            "location": 123,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "exchange_config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "ccxt_module": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "ccxt_kwargs": [
                    "dict"
                ]
            }
        },
        "Exchange.name": {
            "name": "name",
            "location": 156,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.id": {
            "name": "id",
            "location": 161,
            "return": [
                "str",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.klines": {
            "name": "klines",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair_interval": [
                    "str",
                    "bytes"
                ],
                "copy": [
                    "pandas.DataFrame",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Exchange.set_sandbox": {
            "name": "set_sandbox",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "exchange_config": [
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict]"
                ],
                "name": [
                    "str",
                    "logging.Logger",
                    "bytes"
                ]
            }
        },
        "Exchange._load_async_markets": {
            "name": "_load_async_markets",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange._load_markets": {
            "name": "_load_markets",
            "location": 190,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.validate_pairs": {
            "name": "validate_pairs",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Exchange.validate_timeframes": {
            "name": "validate_timeframes",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeframe": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "Exchange.validate_ordertypes": {
            "name": "validate_ordertypes",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_types": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Exchange.validate_order_time_in_force": {
            "name": "validate_order_time_in_force",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_time_in_force": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Union[str, List[str]]",
                    "Tuple[object]"
                ]
            }
        },
        "Exchange.exchange_has": {
            "name": "exchange_has",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Exchange.symbol_amount_prec": {
            "name": "symbol_amount_prec",
            "location": 266,
            "return": [
                "str",
                "type",
                "int",
                "bool",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "Mapping[str, str]",
                    "dict",
                    "bool"
                ],
                "amount": [
                    "int"
                ]
            }
        },
        "Exchange.symbol_price_prec": {
            "name": "symbol_price_prec",
            "location": 277,
            "return": [
                "Callable",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "price": [
                    "float",
                    "str"
                ]
            }
        },
        "Exchange.dry_run_order": {
            "name": "dry_run_order",
            "location": 288,
            "return": [
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "str",
                    "float",
                    "set"
                ],
                "ordertype": [
                    "int",
                    "str",
                    "float",
                    "set"
                ],
                "side": [
                    "Optional[int]"
                ],
                "amount": [
                    "int",
                    "str",
                    "float",
                    "set"
                ],
                "rate": [
                    "int",
                    "str",
                    "float",
                    "set"
                ],
                "params": [
                    "dict",
                    "int",
                    "str",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Exchange._store_dry_order": {
            "name": "_store_dry_order",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dry_order": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Tuple[str, int]",
                    "bytearray"
                ]
            }
        },
        "Exchange.create_order": {
            "name": "create_order",
            "location": 318,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "ordertype": [
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "side": [
                    "str",
                    "datetime.datetime"
                ],
                "amount": [
                    "int",
                    "str"
                ],
                "rate": [
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "params": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "Exchange.buy": {
            "name": "buy",
            "location": 344,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "ordertype": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "amount": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "rate": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "time_in_force": [
                    "bool",
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Exchange.sell": {
            "name": "sell",
            "location": 357,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "ordertype": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "amount": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "rate": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "time_in_force": [
                    "bool",
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Exchange.stoploss_limit": {
            "name": "stoploss_limit",
            "location": 370,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Tuple[float, float, float, float]",
                    "str",
                    "Union[int, float]"
                ],
                "amount": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "int"
                ],
                "stop_price": [
                    "str",
                    "Union[int, float]",
                    "bool",
                    "databricks.koalas.frame.DataFrame"
                ],
                "rate": [
                    "str",
                    "Callable[..., Awaitable]",
                    "bool",
                    "bytes",
                    "float",
                    "int",
                    "dict"
                ]
            }
        },
        "Exchange.get_balance": {
            "name": "get_balance",
            "location": 399,
            "return": [
                "str",
                "int",
                "List[allennlp.data.tokenizers.Token]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "str"
                ]
            }
        },
        "Exchange.get_balances": {
            "name": "get_balances",
            "location": 412,
            "return": [
                "str",
                "int",
                "List[allennlp.data.tokenizers.Token]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.get_tickers": {
            "name": "get_tickers",
            "location": 432,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.get_ticker": {
            "name": "get_ticker",
            "location": 446,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bool"
                ],
                "refresh": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Exchange.get_history": {
            "name": "get_history",
            "location": 469,
            "return": [
                "str",
                "Union[str, Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "bool",
                    "pandas._AnyArrayLike",
                    "Optional[str]"
                ],
                "tick_interval": [
                    "int",
                    "bool",
                    "pandas._AnyArrayLike",
                    "Optional[str]"
                ],
                "since_ms": [
                    "int",
                    "bool",
                    "pandas._AnyArrayLike",
                    "Optional[str]"
                ]
            }
        },
        "Exchange.refresh_latest_ohlcv": {
            "name": "refresh_latest_ohlcv",
            "location": 503,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair_list": [
                    "List[Tuple[str, str]]",
                    "str",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "Exchange._now_is_time_to_refresh": {
            "name": "_now_is_time_to_refresh",
            "location": 538,
            "return": [
                "Tuple[float, float]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Dict[str, bool]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "ticker_interval": [
                    "int",
                    "str",
                    "Callable[[None, None], bool]"
                ]
            }
        },
        "Exchange.cancel_order": {
            "name": "cancel_order",
            "location": 583,
            "return": [
                "pandas.DataFrame",
                "bytes",
                "dict",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "pair": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Exchange.get_order": {
            "name": "get_order",
            "location": 599,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "str",
                    "int"
                ],
                "pair": [
                    "int",
                    "str"
                ]
            }
        },
        "Exchange.get_order_book": {
            "name": "get_order_book",
            "location": 615,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Iterable[int]"
                ],
                "limit": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "Exchange.get_trades_for_order": {
            "name": "get_trades_for_order",
            "location": 636,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[int, str]",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "str",
                    "int",
                    "Optional[float]",
                    "list"
                ],
                "pair": [
                    "str",
                    "int"
                ],
                "since": [
                    "str",
                    "int"
                ]
            }
        },
        "Exchange.get_markets": {
            "name": "get_markets",
            "location": 655,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.get_fee": {
            "name": "get_fee",
            "location": 665,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Mapping"
                ],
                "type": [
                    "str",
                    "Mapping"
                ],
                "side": [
                    "str",
                    "Mapping"
                ],
                "amount": [
                    "str",
                    "Mapping"
                ],
                "price": [
                    "str",
                    "Mapping"
                ],
                "taker_or_maker": [
                    "str",
                    "Mapping"
                ]
            }
        }
    },
    "tradebot-master/trade/exchange/kraken.py": {},
    "tradebot-master/trade/exchange/__init__.py": {},
    "tradebot-master/trade/optimize/backtesting.py": {},
    "tradebot-master/trade/optimize/default_hyperopt.py": {},
    "tradebot-master/trade/optimize/edge_cli.py": {},
    "tradebot-master/trade/optimize/hyperopt.py": {},
    "tradebot-master/trade/optimize/hyperopt_interface.py": {},
    "tradebot-master/trade/optimize/__init__.py": {},
    "tradebot-master/trade/pairlist/__init__.py": {}
}
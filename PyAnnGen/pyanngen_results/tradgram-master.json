{
    "tradgram-master/manage.py": {},
    "tradgram-master/config/urls.py": {},
    "tradgram-master/config/wsgi.py": {},
    "tradgram-master/config/__init__.py": {},
    "tradgram-master/config/settings/base.py": {},
    "tradgram-master/config/settings/local.py": {},
    "tradgram-master/config/settings/production.py": {},
    "tradgram-master/config/settings/test.py": {},
    "tradgram-master/config/settings/__init__.py": {},
    "tradgram-master/tradgram/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "tradgram-master/tradgram/__init__.py": {},
    "tradgram-master/tradgram/applicants/admin.py": {},
    "tradgram-master/tradgram/applicants/apps.py": {},
    "tradgram-master/tradgram/applicants/models.py": {},
    "tradgram-master/tradgram/applicants/serializers.py": {},
    "tradgram-master/tradgram/applicants/tests.py": {},
    "tradgram-master/tradgram/applicants/urls.py": {},
    "tradgram-master/tradgram/applicants/views.py": {
        "ApplicantCheck.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict",
                    "None",
                    "Optional[int]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "django.http.HttpRequest"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "UploadApplicants.post": {
            "name": "post",
            "location": 25,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "Optional[str]"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "tradgram-master/tradgram/applicants/__init__.py": {},
    "tradgram-master/tradgram/applicants/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/applicants/migrations/__init__.py": {},
    "tradgram-master/tradgram/caseFiles/admin.py": {},
    "tradgram-master/tradgram/caseFiles/apps.py": {},
    "tradgram-master/tradgram/caseFiles/models.py": {
        "CaseFile.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradgram-master/tradgram/caseFiles/serializers.py": {},
    "tradgram-master/tradgram/caseFiles/tests.py": {},
    "tradgram-master/tradgram/caseFiles/urls.py": {},
    "tradgram-master/tradgram/caseFiles/views.py": {
        "ListAllCaseFiles.get": {
            "name": "get",
            "location": 8,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]",
                    "Callable",
                    "rest_framework.requesRequest"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "UploadCaseFiles.post": {
            "name": "post",
            "location": 23,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None",
                    "zerver.models.UserProfile",
                    "dict[, ]",
                    "Optional[str]",
                    "dict"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "tradgram-master/tradgram/caseFiles/__init__.py": {},
    "tradgram-master/tradgram/caseFiles/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/caseFiles/migrations/0002_auto_20181201_2020.py": {},
    "tradgram-master/tradgram/caseFiles/migrations/0003_auto_20181201_2241.py": {},
    "tradgram-master/tradgram/caseFiles/migrations/0004_auto_20181201_2245.py": {},
    "tradgram-master/tradgram/caseFiles/migrations/0005_auto_20181201_2249.py": {},
    "tradgram-master/tradgram/caseFiles/migrations/0006_casefile_file_pdf.py": {},
    "tradgram-master/tradgram/caseFiles/migrations/0007_auto_20190320_0114.py": {},
    "tradgram-master/tradgram/caseFiles/migrations/0008_casefile_isreportexist.py": {},
    "tradgram-master/tradgram/caseFiles/migrations/0009_casefile_expiredate.py": {},
    "tradgram-master/tradgram/caseFiles/migrations/0010_auto_20190323_1410.py": {},
    "tradgram-master/tradgram/caseFiles/migrations/__init__.py": {},
    "tradgram-master/tradgram/cases/admin.py": {},
    "tradgram-master/tradgram/cases/apps.py": {},
    "tradgram-master/tradgram/cases/models.py": {
        "Case.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradgram-master/tradgram/cases/serializers.py": {},
    "tradgram-master/tradgram/cases/tests.py": {},
    "tradgram-master/tradgram/cases/urls.py": {},
    "tradgram-master/tradgram/cases/views.py": {
        "ListAllCases.get": {
            "name": "get",
            "location": 9,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "UploadCases.post": {
            "name": "post",
            "location": 32,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "UploadsCases.post": {
            "name": "post",
            "location": 51,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        }
    },
    "tradgram-master/tradgram/cases/__init__.py": {},
    "tradgram-master/tradgram/cases/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/cases/migrations/0002_auto_20180923_1920.py": {},
    "tradgram-master/tradgram/cases/migrations/0003_auto_20181031_0052.py": {},
    "tradgram-master/tradgram/cases/migrations/0004_auto_20181105_0211.py": {},
    "tradgram-master/tradgram/cases/migrations/0005_auto_20181105_0212.py": {},
    "tradgram-master/tradgram/cases/migrations/0006_auto_20181105_0419.py": {},
    "tradgram-master/tradgram/cases/migrations/0007_case_identification_number.py": {},
    "tradgram-master/tradgram/cases/migrations/0008_auto_20181202_2134.py": {},
    "tradgram-master/tradgram/cases/migrations/0009_auto_20190318_1434.py": {},
    "tradgram-master/tradgram/cases/migrations/0010_auto_20190318_1446.py": {},
    "tradgram-master/tradgram/cases/migrations/0011_auto_20190319_1610.py": {},
    "tradgram-master/tradgram/cases/migrations/0012_case_waiting_total.py": {},
    "tradgram-master/tradgram/cases/migrations/0013_auto_20190325_2155.py": {},
    "tradgram-master/tradgram/cases/migrations/__init__.py": {},
    "tradgram-master/tradgram/chatrooms/admin.py": {},
    "tradgram-master/tradgram/chatrooms/apps.py": {},
    "tradgram-master/tradgram/chatrooms/models.py": {},
    "tradgram-master/tradgram/chatrooms/serializers.py": {},
    "tradgram-master/tradgram/chatrooms/tests.py": {},
    "tradgram-master/tradgram/chatrooms/urls.py": {},
    "tradgram-master/tradgram/chatrooms/views.py": {
        "ListAllChatRooms.get": {
            "name": "get",
            "location": 9,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "UploadChatRooms.post": {
            "name": "post",
            "location": 21,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        }
    },
    "tradgram-master/tradgram/chatrooms/__init__.py": {},
    "tradgram-master/tradgram/chatrooms/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/chatrooms/migrations/0002_auto_20181129_2131.py": {},
    "tradgram-master/tradgram/chatrooms/migrations/0003_auto_20181129_2148.py": {},
    "tradgram-master/tradgram/chatrooms/migrations/__init__.py": {},
    "tradgram-master/tradgram/chats/admin.py": {},
    "tradgram-master/tradgram/chats/apps.py": {},
    "tradgram-master/tradgram/chats/models.py": {},
    "tradgram-master/tradgram/chats/serializers.py": {},
    "tradgram-master/tradgram/chats/tests.py": {},
    "tradgram-master/tradgram/chats/urls.py": {},
    "tradgram-master/tradgram/chats/views.py": {
        "ListAllChats.get": {
            "name": "get",
            "location": 9,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "UploadChats.post": {
            "name": "post",
            "location": 28,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        }
    },
    "tradgram-master/tradgram/chats/__init__.py": {},
    "tradgram-master/tradgram/chats/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/chats/migrations/0002_auto_20181129_2227.py": {},
    "tradgram-master/tradgram/chats/migrations/0003_auto_20181129_2307.py": {},
    "tradgram-master/tradgram/chats/migrations/0004_auto_20181129_2308.py": {},
    "tradgram-master/tradgram/chats/migrations/__init__.py": {},
    "tradgram-master/tradgram/contrib/__init__.py": {},
    "tradgram-master/tradgram/contrib/sites/__init__.py": {},
    "tradgram-master/tradgram/contrib/sites/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "tradgram-master/tradgram/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "tradgram-master/tradgram/contrib/sites/migrations/__init__.py": {},
    "tradgram-master/tradgram/coupons/admin.py": {},
    "tradgram-master/tradgram/coupons/apps.py": {},
    "tradgram-master/tradgram/coupons/models.py": {},
    "tradgram-master/tradgram/coupons/serializers.py": {},
    "tradgram-master/tradgram/coupons/tests.py": {},
    "tradgram-master/tradgram/coupons/urls.py": {},
    "tradgram-master/tradgram/coupons/views.py": {
        "CouponCheck.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        }
    },
    "tradgram-master/tradgram/coupons/__init__.py": {},
    "tradgram-master/tradgram/coupons/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/coupons/migrations/0002_auto_20190327_0115.py": {},
    "tradgram-master/tradgram/coupons/migrations/__init__.py": {},
    "tradgram-master/tradgram/kakao/admin.py": {},
    "tradgram-master/tradgram/kakao/apps.py": {},
    "tradgram-master/tradgram/kakao/forms.py": {},
    "tradgram-master/tradgram/kakao/models.py": {},
    "tradgram-master/tradgram/kakao/provider.py": {
        "KakaoAccount.properties": {
            "name": "properties",
            "location": 16,
            "return": [
                "str",
                "Dict[str, Any]",
                "Tuple[str, int, int]",
                "\"TransactionModel\"",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KakaoAccount.get_avatar_url": {
            "name": "get_avatar_url",
            "location": 19,
            "return": [
                "str",
                "Callable[[Any], bool]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KakaoAccount.to_str": {
            "name": "to_str",
            "location": 22,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytearray",
                "set",
                "tuple[typing.Union[int,int]]",
                "dict",
                "dict[, ]",
                "Mapping[str, str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KakaoProvider.sociallogin_from_response": {
            "name": "sociallogin_from_response",
            "location": 33,
            "return": [
                "str",
                "bytes",
                "float",
                "None",
                "Sequence[float]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpResponse"
                ],
                "response": [
                    "django.http.HttpResponse"
                ]
            }
        },
        "KakaoProvider.extract_uid": {
            "name": "extract_uid",
            "location": 39,
            "return": [
                "str",
                "bytes",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "bool",
                    "list[str]",
                    "list[dict[str, typing.Any]]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "tradgram-master/tradgram/kakao/tests.py": {
        "KakaoTests.get_mocked_response": {
            "name": "get_mocked_response",
            "location": 40,
            "return": [
                "MockedResponse",
                "Dict[str, Any]",
                "bool",
                "Dict[str, str]",
                "purplship.core.utils.Element"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "str",
                    "List[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "Union[List, Dict]",
                    "Optional[\"TrackingData\"]",
                    "list[]"
                ]
            }
        },
        "KakaoTests.test_username_conflict": {
            "name": "test_username_conflict",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KakaoTests.test_username_based_on_provider": {
            "name": "test_username_based_on_provider",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradgram-master/tradgram/kakao/urls.py": {},
    "tradgram-master/tradgram/kakao/views.py": {
        "kakao_complete_login": {
            "name": "kakao_complete_login",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "dict",
                    "bytes",
                    "requests.Request"
                ],
                "app": [
                    "str"
                ],
                "token": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "get_access_token": {
            "name": "get_access_token",
            "location": 37,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "login_by_token": {
            "name": "login_by_token",
            "location": 84,
            "return": [
                "str",
                "int",
                "salon.models.Stylist",
                "List[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "KakaoOAuth2Adapter.complete_login": {
            "name": "complete_login",
            "location": 33,
            "return": [
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "starlette.requests.Request",
                    "zerver.models.UserProfile",
                    "Union[int,str]",
                    "str",
                    "bool"
                ],
                "app": [
                    "starlette.requests.Request",
                    "zerver.models.UserProfile",
                    "Union[int,str]",
                    "str",
                    "bool"
                ],
                "access_token": [
                    "starlette.requests.Request",
                    "zerver.models.UserProfile",
                    "Union[int,str]",
                    "str",
                    "bool"
                ]
            }
        },
        "KakaoOAuth2CallbackView.get_client": {
            "name": "get_client",
            "location": 74,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "zerver.models.UserProfile"
                ],
                "app": [
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "tradgram-master/tradgram/kakao/__init__.py": {},
    "tradgram-master/tradgram/kakao/migrations/__init__.py": {},
    "tradgram-master/tradgram/naver/admin.py": {},
    "tradgram-master/tradgram/naver/apps.py": {},
    "tradgram-master/tradgram/naver/forms.py": {},
    "tradgram-master/tradgram/naver/models.py": {},
    "tradgram-master/tradgram/naver/provider.py": {
        "NaverAccount.get_avatar_url": {
            "name": "get_avatar_url",
            "location": 15,
            "return": [
                "str",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaverAccount.to_str": {
            "name": "to_str",
            "location": 18,
            "return": [
                "bool",
                "Optional[Dict[str, Any]]",
                "int",
                "Optional[str]",
                "Callable[[], T]",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaverProvider.sociallogin_from_response": {
            "name": "sociallogin_from_response",
            "location": 29,
            "return": [
                "str",
                "bytes",
                "float",
                "None",
                "Sequence[float]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpResponse"
                ],
                "response": [
                    "django.http.HttpResponse"
                ]
            }
        },
        "NaverProvider.extract_uid": {
            "name": "extract_uid",
            "location": 35,
            "return": [
                "str",
                "bytes",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "bool",
                    "list[str]",
                    "list[dict[str, typing.Any]]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "tradgram-master/tradgram/naver/tests.py": {
        "NaverTests.get_mocked_response": {
            "name": "get_mocked_response",
            "location": 34,
            "return": [
                "MockedResponse",
                "Dict[str, Any]",
                "bool",
                "Dict[str, str]",
                "purplship.core.utils.Element"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "str",
                    "List[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "Union[List, Dict]",
                    "Optional[\"TrackingData\"]",
                    "list[]"
                ]
            }
        },
        "NaverTests.test_username_conflict": {
            "name": "test_username_conflict",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaverTests.test_username_based_on_provider": {
            "name": "test_username_based_on_provider",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradgram-master/tradgram/naver/urls.py": {},
    "tradgram-master/tradgram/naver/views.py": {
        "naver_complete_login": {
            "name": "naver_complete_login",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "requests.Request"
                ],
                "app": [
                    "str"
                ],
                "token": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "login_by_token": {
            "name": "login_by_token",
            "location": 52,
            "return": [
                "None",
                "str",
                "int",
                "salon.models.Stylist",
                "List[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "NaverOAuth2Adapter.complete_login": {
            "name": "complete_login",
            "location": 44,
            "return": [
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str",
                    "starlette.requests.Request",
                    "zerver.models.UserProfile",
                    "Union[int,str]",
                    "bool"
                ],
                "app": [
                    "int",
                    "str",
                    "starlette.requests.Request",
                    "zerver.models.UserProfile",
                    "Union[int,str]",
                    "bool"
                ],
                "access_token": [
                    "int",
                    "str",
                    "starlette.requests.Request",
                    "zerver.models.UserProfile",
                    "Union[int,str]",
                    "bool"
                ]
            }
        }
    },
    "tradgram-master/tradgram/naver/__init__.py": {},
    "tradgram-master/tradgram/naver/migrations/__init__.py": {},
    "tradgram-master/tradgram/OAreports/admin.py": {},
    "tradgram-master/tradgram/OAreports/apps.py": {},
    "tradgram-master/tradgram/OAreports/models.py": {},
    "tradgram-master/tradgram/OAreports/serializers.py": {},
    "tradgram-master/tradgram/OAreports/tests.py": {},
    "tradgram-master/tradgram/OAreports/urls.py": {},
    "tradgram-master/tradgram/OAreports/views.py": {
        "OAreportCheck.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict",
                    "None",
                    "Optional[int]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "django.http.HttpRequest"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "OAreportNotifyCheck.get": {
            "name": "get",
            "location": 25,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict",
                    "None",
                    "Optional[int]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "django.http.HttpRequest"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "OAreportNotifyCheck.put": {
            "name": "put",
            "location": 37,
            "return": [
                "Response",
                "bool",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "dict",
                "Dict[str, str]",
                "asgard.models.user.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "models.Tag"
                ],
                "format": [
                    "str",
                    "None",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "bool",
                    "list[]",
                    "rest_framework.requesRequest",
                    "Optional[str]",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "tradgram-master/tradgram/OAreports/__init__.py": {},
    "tradgram-master/tradgram/OAreports/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/OAreports/migrations/0002_auto_20190323_1533.py": {},
    "tradgram-master/tradgram/OAreports/migrations/0003_auto_20190323_1535.py": {},
    "tradgram-master/tradgram/OAreports/migrations/0004_auto_20190323_1645.py": {},
    "tradgram-master/tradgram/OAreports/migrations/0005_oareport_is_notified.py": {},
    "tradgram-master/tradgram/OAreports/migrations/__init__.py": {},
    "tradgram-master/tradgram/point_histories/admin.py": {},
    "tradgram-master/tradgram/point_histories/apps.py": {},
    "tradgram-master/tradgram/point_histories/models.py": {
        "Point_history.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradgram-master/tradgram/point_histories/serializers.py": {},
    "tradgram-master/tradgram/point_histories/tests.py": {},
    "tradgram-master/tradgram/point_histories/urls.py": {},
    "tradgram-master/tradgram/point_histories/views.py": {
        "Point_HistoryCheck.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "None"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "UploadPoint_Histories.post": {
            "name": "post",
            "location": 26,
            "return": [
                "Response",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "Optional[str]"
                ],
                "format": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "tradgram-master/tradgram/point_histories/__init__.py": {},
    "tradgram-master/tradgram/point_histories/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/point_histories/migrations/__init__.py": {},
    "tradgram-master/tradgram/products/admin.py": {},
    "tradgram-master/tradgram/products/apps.py": {},
    "tradgram-master/tradgram/products/jsons.py": {},
    "tradgram-master/tradgram/products/models.py": {
        "Product.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradgram-master/tradgram/products/serializers.py": {},
    "tradgram-master/tradgram/products/tests.py": {},
    "tradgram-master/tradgram/products/urls.py": {},
    "tradgram-master/tradgram/products/views.py": {
        "UploadProducts.get": {
            "name": "get",
            "location": 10,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "django.http.HttpRequest",
                    "None",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 22,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "models.Tag"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        }
    },
    "tradgram-master/tradgram/products/__init__.py": {},
    "tradgram-master/tradgram/products/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/products/migrations/__init__.py": {},
    "tradgram-master/tradgram/questions/admin.py": {},
    "tradgram-master/tradgram/questions/apps.py": {},
    "tradgram-master/tradgram/questions/models.py": {},
    "tradgram-master/tradgram/questions/serializers.py": {},
    "tradgram-master/tradgram/questions/tests.py": {},
    "tradgram-master/tradgram/questions/urls.py": {},
    "tradgram-master/tradgram/questions/views.py": {
        "GetAllQuestion.get": {
            "name": "get",
            "location": 10,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        }
    },
    "tradgram-master/tradgram/questions/__init__.py": {},
    "tradgram-master/tradgram/questions/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/questions/migrations/__init__.py": {},
    "tradgram-master/tradgram/relations/admin.py": {},
    "tradgram-master/tradgram/relations/apps.py": {},
    "tradgram-master/tradgram/relations/models.py": {
        "Relation.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradgram-master/tradgram/relations/serializers.py": {},
    "tradgram-master/tradgram/relations/tests.py": {},
    "tradgram-master/tradgram/relations/urls.py": {},
    "tradgram-master/tradgram/relations/views.py": {
        "SaveRelations.post": {
            "name": "post",
            "location": 10,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 46,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        }
    },
    "tradgram-master/tradgram/relations/__init__.py": {},
    "tradgram-master/tradgram/relations/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/relations/migrations/__init__.py": {},
    "tradgram-master/tradgram/searchreports/admin.py": {},
    "tradgram-master/tradgram/searchreports/apps.py": {},
    "tradgram-master/tradgram/searchreports/models.py": {},
    "tradgram-master/tradgram/searchreports/serializers.py": {},
    "tradgram-master/tradgram/searchreports/tests.py": {},
    "tradgram-master/tradgram/searchreports/urls.py": {},
    "tradgram-master/tradgram/searchreports/views.py": {
        "searchreportCheck.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict",
                    "None",
                    "Optional[int]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "django.http.HttpRequest"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "searchreportNotifyCheck.get": {
            "name": "get",
            "location": 27,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict",
                    "None",
                    "Optional[int]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "django.http.HttpRequest"
                ],
                "format": [
                    "None",
                    "bool",
                    "django.http.HttpRequest",
                    "str",
                    "float",
                    "rest_framework.requesRequest",
                    "list[]",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "searchreportNotifyCheck.put": {
            "name": "put",
            "location": 39,
            "return": [
                "Response",
                "bool",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "dict",
                "Dict[str, str]",
                "asgard.models.user.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "models.Tag"
                ],
                "format": [
                    "str",
                    "None",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "bool",
                    "list[]",
                    "rest_framework.requesRequest",
                    "Optional[str]",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "tradgram-master/tradgram/searchreports/__init__.py": {},
    "tradgram-master/tradgram/searchreports/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/searchreports/migrations/0002_auto_20190324_1421.py": {},
    "tradgram-master/tradgram/searchreports/migrations/__init__.py": {},
    "tradgram-master/tradgram/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 11,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "AccountAdapter.save_user": {
            "name": "save_user",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "user": [
                    "django.contrib.auth.models.User"
                ],
                "form": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 37,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "tradgram-master/tradgram/users/admin.py": {},
    "tradgram-master/tradgram/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradgram-master/tradgram/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradgram-master/tradgram/users/models.py": {
        "User.count_cases": {
            "name": "count_cases",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tradgram-master/tradgram/users/serializers.py": {
        "SignUpSerializer.get_cleaned_data": {
            "name": "get_cleaned_data",
            "location": 46,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpSerializer.save": {
            "name": "save",
            "location": 58,
            "return": [
                "set",
                "bool",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "tradgram-master/tradgram/users/signals.py": {
        "user_signed_up": {
            "name": "user_signed_up",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Iterable[str]"
                ],
                "user": [
                    "List[int]",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "tradgram-master/tradgram/users/urls.py": {},
    "tradgram-master/tradgram/users/views.py": {
        "UserProfile.get": {
            "name": "get",
            "location": 10,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "dict[, ]",
                    "zerver.models.UserProfile",
                    "dict"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "UpdateUserPoint.post": {
            "name": "post",
            "location": 21,
            "return": [
                "Response",
                "str",
                "List[str]",
                "List[Dict[str, Any]]",
                "Dict[int, dict]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "DuplicateCheck.get": {
            "name": "get",
            "location": 46,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bytes"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "DuplicateEmailCheck.get": {
            "name": "get",
            "location": 60,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bytes"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "DuplicateIdCheck.get": {
            "name": "get",
            "location": 74,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bytes"
                ],
                "format": [
                    "None",
                    "bool",
                    "rest_framework.requesRequest",
                    "str",
                    "float",
                    "Optional[int]",
                    "list[]",
                    "list"
                ]
            }
        },
        "ChangePassword.put": {
            "name": "put",
            "location": 88,
            "return": [
                "Response",
                "bool",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "dict",
                "Dict[str, str]",
                "asgard.models.user.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "rest_framework.requesRequest"
                ],
                "username": [
                    "str",
                    "int",
                    "rest_framework.requesRequest",
                    "bool"
                ],
                "format": [
                    "List[str]",
                    "None",
                    "Dict[str, Any]",
                    "list[str]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Iterable",
                    "dict[, ]"
                ]
            }
        }
    },
    "tradgram-master/tradgram/users/__init__.py": {},
    "tradgram-master/tradgram/users/migrations/0001_initial.py": {},
    "tradgram-master/tradgram/users/migrations/0002_auto_20180910_2354.py": {},
    "tradgram-master/tradgram/users/migrations/0003_auto_20190317_1344.py": {},
    "tradgram-master/tradgram/users/migrations/0004_user_fcm_pushtoken.py": {},
    "tradgram-master/tradgram/users/migrations/0005_auto_20190321_1455.py": {},
    "tradgram-master/tradgram/users/migrations/0006_auto_20190321_2032.py": {},
    "tradgram-master/tradgram/users/migrations/0007_user_point.py": {},
    "tradgram-master/tradgram/users/migrations/0008_user_coupon_history.py": {},
    "tradgram-master/tradgram/users/migrations/0009_user_push_token.py": {},
    "tradgram-master/tradgram/users/migrations/0010_remove_user_push_token.py": {},
    "tradgram-master/tradgram/users/migrations/__init__.py": {},
    "tradgram-master/tradgram/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "tradgram-master/tradgram/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradgram-master/tradgram/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "tradgram-master/tradgram/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tradgram-master/tradgram/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "tradgram-master/tradgram/users/tests/__init__.py": {}
}
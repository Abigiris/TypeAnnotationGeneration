{
    "transports-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "transports-master/adbts/ctxlib.py": {
        "close_on_error": {
            "name": "close_on_error",
            "location": 13,
            "return": [
                "hints.Iterator[hints.Closeable]",
                "typing.Generator[]"
            ],
            "arguments": {
                "obj": [
                    "bool"
                ]
            }
        }
    },
    "transports-master/adbts/exceptions.py": {
        "reraise": {
            "name": "reraise",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "exc_to_catch": [
                    "List[str]",
                    "float",
                    "list[str]",
                    "Type['Signature']",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "reraise_timeout_errors": {
            "name": "reraise_timeout_errors",
            "location": 65,
            "return": [
                "int",
                "str",
                "Iterator"
            ],
            "arguments": {
                "exc_to_catch": [
                    "float",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "reraise.decorator": {
            "name": "decorator",
            "location": 54,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "reraise_timeout_errors.decorator": {
            "name": "decorator",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]",
                    "hints.DecoratorFunc"
                ]
            }
        },
        "reraise.decorator.wrapper": {
            "name": "wrapper",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "reraise_timeout_errors.decorator.wrapper": {
            "name": "wrapper",
            "location": 74,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "transports-master/adbts/hints.py": {
        "HasClose.close": {
            "name": "close",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transports-master/adbts/timeouts.py": {
        "timeout": {
            "name": "timeout",
            "location": 16,
            "return": [
                "int",
                "str",
                "Type[T]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "hints.Bool",
                    "float",
                    "None",
                    "Optional[int]"
                ],
                "sentinel": [
                    "int",
                    "float",
                    "T"
                ],
                "default": [
                    "int",
                    "None",
                    "float",
                    "T"
                ],
                "seconds": [
                    "bool",
                    "hints.Bool",
                    "int",
                    "Optional[float]"
                ]
            }
        }
    },
    "transports-master/adbts/transport.py": {
        "ensure_opened": {
            "name": "ensure_opened",
            "location": 31,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "func": [
                    "hints.DecoratorFunc",
                    "Callable",
                    "Callable[[None], \"Expr\"]"
                ]
            }
        },
        "ensure_num_bytes": {
            "name": "ensure_num_bytes",
            "location": 48,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "func": [
                    "hints.DecoratorFunc",
                    "str",
                    "bool"
                ]
            }
        },
        "ensure_data": {
            "name": "ensure_data",
            "location": 68,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "func": [
                    "hints.DecoratorFunc",
                    "Callable",
                    "List[str]",
                    "int",
                    "list"
                ]
            }
        },
        "ensure_opened.decorator": {
            "name": "decorator",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ensure_num_bytes.decorator": {
            "name": "decorator",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "num_bytes": []
            }
        },
        "ensure_data.decorator": {
            "name": "decorator",
            "location": 74,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Callable[..., str]",
                    "dict",
                    "List[str]",
                    "tuple",
                    "Iterable[Any]",
                    "Callable[..., None]"
                ]
            }
        },
        "Transport.__enter__": {
            "name": "__enter__",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.__exit__": {
            "name": "__exit__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "Transport.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.closed": {
            "name": "closed",
            "location": 106,
            "return": [
                "hints.Bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.read": {
            "name": "read",
            "location": 115,
            "return": [
                "TransportReadResult"
            ],
            "arguments": {
                "self": [],
                "num_bytes": [
                    "hints.Timeout",
                    "hints.Int",
                    "Optional[int]",
                    "int",
                    "List[float]"
                ],
                "timeout": [
                    "hints.Timeout",
                    "hints.Int",
                    "Optional[int]",
                    "int",
                    "List[float]"
                ]
            }
        },
        "Transport.write": {
            "name": "write",
            "location": 132,
            "return": [
                "TransportWriteResult"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "hints.Timeout",
                    "hints.Buffer",
                    "bool",
                    "dict",
                    "AnyStr",
                    "str",
                    "bytes"
                ],
                "timeout": [
                    "hints.Timeout",
                    "hints.Buffer",
                    "bool",
                    "dict",
                    "AnyStr",
                    "str",
                    "bytes"
                ]
            }
        },
        "Transport.close": {
            "name": "close",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transports-master/adbts/__init__.py": {},
    "transports-master/adbts/tcp/asynchronous.py": {
        "open": {
            "name": "open",
            "location": 118,
            "return": [
                "Transport",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "host": [
                    "int",
                    "hints.Str",
                    "hints.Int",
                    "hints.Timeout",
                    "bool"
                ],
                "port": [
                    "int",
                    "hints.Str",
                    "hints.Int",
                    "hints.Timeout",
                    "bool"
                ],
                "timeout": [
                    "hints.Timeout",
                    "hints.Str",
                    "hints.Int",
                    "int",
                    "Optional[asyncio.AbstractEventLoop]",
                    "bool"
                ],
                "loop": [
                    "None",
                    "int",
                    "hints.Str",
                    "hints.Int",
                    "hints.Timeout",
                    "bool"
                ]
            }
        },
        "Transport.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "float",
                    "bool"
                ],
                "port": [
                    "int",
                    "float",
                    "bool"
                ],
                "reader": [
                    "int",
                    "float",
                    "bool"
                ],
                "writer": [
                    "int",
                    "float",
                    "bool"
                ],
                "loop": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Transport.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.closed": {
            "name": "closed",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.read": {
            "name": "read",
            "location": 59,
            "return": [
                "typing.Generator[]",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "num_bytes": [
                    "int",
                    "str",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "None",
                    "Union[str, int]",
                    "Optional[int]"
                ],
                "timeout": [
                    "int",
                    "Sequence[str]",
                    "str",
                    "Union[str, int]",
                    "Optional[int]"
                ]
            }
        },
        "Transport.write": {
            "name": "write",
            "location": 84,
            "return": [
                "transport.TransportWriteResult",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "bytearray"
                ],
                "timeout": [
                    "bool",
                    "Tuple[Set[Any], Dict[int, int]]",
                    "int"
                ]
            }
        },
        "Transport.close": {
            "name": "close",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transports-master/adbts/tcp/synchronous.py": {
        "socket_timeout_scope": {
            "name": "socket_timeout_scope",
            "location": 17,
            "return": [
                "hints.Iterator[None]",
                "typing.Generator[]"
            ],
            "arguments": {
                "sock": [
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "open": {
            "name": "open",
            "location": 125,
            "return": [
                "Transport",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "host": [
                    "bool",
                    "int"
                ],
                "port": [
                    "bool",
                    "int"
                ],
                "timeout": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Transport.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "float",
                    "bool"
                ],
                "port": [
                    "int",
                    "float",
                    "bool"
                ],
                "sock": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Transport.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.closed": {
            "name": "closed",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.read": {
            "name": "read",
            "location": 70,
            "return": [
                "List[int]",
                "List[dict]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "num_bytes": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "timeout": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Transport.write": {
            "name": "write",
            "location": 91,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ],
                "timeout": [
                    "str",
                    "\"NAryMatrixRelation\"",
                    "bytes",
                    "int",
                    "Union[str, bytes]"
                ]
            }
        },
        "Transport.close": {
            "name": "close",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transports-master/adbts/tcp/timeouts.py": {
        "timeout": {
            "name": "timeout",
            "location": 15,
            "return": [
                "str",
                "None",
                "int",
                "Tuple[str, str]",
                "float"
            ],
            "arguments": {
                "value": [
                    "str",
                    "hints.Timeout",
                    "None",
                    "Optional[str]",
                    "typing.Hashable",
                    "Hashable",
                    "float",
                    "typing.Sequence[int]",
                    "T",
                    "list[typing.Any]",
                    "Optional[Sequence[int]]",
                    "Optional[List[Any]]",
                    "int",
                    "Union[int, None]"
                ]
            }
        }
    },
    "transports-master/adbts/tcp/__init__.py": {},
    "transports-master/adbts/usb/asynchronous.py": {},
    "transports-master/adbts/usb/libusb.py": {
        "reraise_libusb_errors": {
            "name": "reraise_libusb_errors",
            "location": 117,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "func": [
                    "Callable[[], Any]",
                    "Callable"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 145,
            "return": [
                "Optional[int]",
                "str",
                "dict",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "handle": [
                    "adbts.hints.Int",
                    "int",
                    "Union[Tuple[int, int], int]",
                    "tests.hints.Strategy[lz.hints.Domain]"
                ],
                "endpoint": [
                    "adbts.hints.Int",
                    "int",
                    "Union[Tuple[int, int], int]",
                    "tests.hints.Strategy[lz.hints.Domain]"
                ],
                "num_bytes": [
                    "adbts.hints.Int",
                    "int",
                    "Union[Tuple[int, int], int]",
                    "tests.hints.Strategy[lz.hints.Domain]"
                ],
                "timeout": [
                    "adbts.hints.Int",
                    "int",
                    "Union[Tuple[int, int], int]",
                    "tests.hints.Strategy[lz.hints.Domain]"
                ]
            }
        },
        "write": {
            "name": "write",
            "location": 170,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "handle": [
                    "int"
                ],
                "endpoint": [
                    "int"
                ],
                "data": [
                    "int",
                    "Tuple[int, int, bytearray]"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "close": {
            "name": "close",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "Iterable[str]"
                ],
                "handle": [
                    "str",
                    "int"
                ],
                "interface_settings": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "open_context": {
            "name": "open_context",
            "location": 220,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "open_device_handle": {
            "name": "open_device_handle",
            "location": 230,
            "return": [
                "float",
                "str",
                "Optional[BaseException]"
            ],
            "arguments": {
                "device": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "claim_interface": {
            "name": "claim_interface",
            "location": 242,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "handle": [
                    "bool",
                    "slice",
                    "Iterable[hints.Domain]",
                    "float",
                    "Dict[str, Any]"
                ],
                "interface_settings": [
                    "TextIO",
                    "List[List[int]]"
                ]
            }
        },
        "find_device": {
            "name": "find_device",
            "location": 266,
            "return": [
                "int",
                "Union[str, int]",
                "bool",
                "float"
            ],
            "arguments": {
                "serial": [
                    "adbts.hints.Bool",
                    "Optional[List[str]]",
                    "bool"
                ],
                "vid": [
                    "adbts.hints.Bool",
                    "Optional[List[str]]",
                    "bool"
                ],
                "pid": [
                    "adbts.hints.Bool",
                    "Optional[List[str]]",
                    "bool"
                ],
                "context": [
                    "adbts.hints.Bool",
                    "Optional[List[str]]",
                    "bool"
                ],
                "skip_on_error": [
                    "adbts.hints.Bool",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "find_devices_generator": {
            "name": "find_devices_generator",
            "location": 290,
            "return": [
                "DeviceAndInterfaceSettingsGenerator"
            ],
            "arguments": {
                "serial": [
                    "adbts.hints.Bool"
                ],
                "vid": [
                    "adbts.hints.Bool"
                ],
                "pid": [
                    "adbts.hints.Bool"
                ],
                "context": [
                    "adbts.hints.Bool"
                ],
                "skip_on_error": [
                    "adbts.hints.Bool"
                ]
            }
        },
        "find_devices_interfaces_generator": {
            "name": "find_devices_interfaces_generator",
            "location": 316,
            "return": [
                "DeviceAndInterfaceSettingsGenerator"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "str",
                    "float"
                ],
                "skip_on_error": [
                    "adbts.hints.Bool",
                    "str",
                    "Union[None, str, int]",
                    "Optional[str]",
                    "Literal"
                ]
            }
        },
        "device_matches": {
            "name": "device_matches",
            "location": 335,
            "return": [
                "list",
                "int",
                "Sequence",
                "bool",
                "str"
            ],
            "arguments": {
                "device": [
                    "Any"
                ],
                "settings": [
                    "Any"
                ],
                "serial": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "vid": [
                    "int",
                    "dict",
                    "float",
                    "bool"
                ],
                "pid": []
            }
        },
        "optional_usb_context": {
            "name": "optional_usb_context",
            "location": 366,
            "return": [
                "typing.Generator[Context, None, None]"
            ],
            "arguments": {
                "context": [
                    "BaseException"
                ]
            }
        },
        "find_read_endpoint": {
            "name": "find_read_endpoint",
            "location": 383,
            "return": [
                "type",
                "str"
            ],
            "arguments": {
                "settings": [
                    "Union[str, IO[bytes]]",
                    "str"
                ]
            }
        },
        "find_write_endpoint": {
            "name": "find_write_endpoint",
            "location": 395,
            "return": [
                "type",
                "str"
            ],
            "arguments": {
                "settings": []
            }
        },
        "read_endpoints_generator": {
            "name": "read_endpoints_generator",
            "location": 407,
            "return": [
                "EndpointGenerator"
            ],
            "arguments": {
                "settings": [
                    "bytes",
                    "str",
                    "Iterable[Any]",
                    "Optional[bool]"
                ]
            }
        },
        "write_endpoints_generator": {
            "name": "write_endpoints_generator",
            "location": 421,
            "return": [
                "EndpointGenerator"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "tuple",
                    "float",
                    "dict"
                ]
            }
        },
        "is_read_endpoint": {
            "name": "is_read_endpoint",
            "location": 435,
            "return": [
                "str",
                "Optional[Union[Any, Any]]",
                "Iterable[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "int"
                ]
            }
        },
        "is_write_endpoint": {
            "name": "is_write_endpoint",
            "location": 447,
            "return": [
                "bool"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "int"
                ]
            }
        },
        "reraise_libusb_errors.decorator": {
            "name": "decorator",
            "location": 123,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "transports-master/adbts/usb/synchronous.py": {
        "open": {
            "name": "open",
            "location": 115,
            "return": [
                "Transport",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "serial": [
                    "None"
                ],
                "vid": [
                    "None"
                ],
                "pid": [
                    "None"
                ]
            }
        },
        "Transport.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serial": [
                    "int",
                    "float",
                    "bool"
                ],
                "vid": [
                    "int",
                    "float",
                    "bool"
                ],
                "pid": [
                    "int",
                    "float",
                    "bool"
                ],
                "context": [
                    "int",
                    "float",
                    "bool"
                ],
                "device": [
                    "int",
                    "float",
                    "bool"
                ],
                "handle": [
                    "int",
                    "float",
                    "bool"
                ],
                "interface_settings": [
                    "int",
                    "float",
                    "bool"
                ],
                "read_endpoint": [
                    "str",
                    "int",
                    "bytes"
                ],
                "write_endpoint": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Transport.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.closed": {
            "name": "closed",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.read": {
            "name": "read",
            "location": 62,
            "return": [
                "Tuple[Any, Any, Any]",
                "int",
                "float",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "num_bytes": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "timeout": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Transport.write": {
            "name": "write",
            "location": 82,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "MutableMapping",
                    "typing.MutableMapping",
                    "List[AnyStr]",
                    "list[typing.AnyStr]"
                ],
                "timeout": [
                    "int",
                    "str",
                    "Optional[int]",
                    "MutableMapping",
                    "List[AnyStr]"
                ]
            }
        },
        "Transport.close": {
            "name": "close",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transports-master/adbts/usb/timeouts.py": {
        "timeout": {
            "name": "timeout",
            "location": 13,
            "return": [
                "int",
                "str",
                "tuple",
                "dict",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "hints.Timeout",
                    "Hashable",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "T"
                ]
            }
        }
    },
    "transports-master/adbts/usb/__init__.py": {},
    "transports-master/tests/conftest.py": {
        "valid_timeout_ms": {
            "name": "valid_timeout_ms",
            "location": 20,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[Exception]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "valid_num_bytes": {
            "name": "valid_num_bytes",
            "location": 34,
            "return": [
                "str",
                "int",
                "Optional[Exception]",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "valid_bytes": {
            "name": "valid_bytes",
            "location": 42,
            "return": [
                "str",
                "Optional[str]",
                "Sequence[str]"
            ],
            "arguments": {}
        }
    },
    "transports-master/tests/test_ctxlib.py": {
        "test_close_on_error_closes_on_exception": {
            "name": "test_close_on_error_closes_on_exception",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_close_on_error_does_not_close_without_exception": {
            "name": "test_close_on_error_does_not_close_without_exception",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "transports-master/tests/test_exceptions.py": {
        "exc_to_catch": {
            "name": "exc_to_catch",
            "location": 20,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "str",
                    "set[str]"
                ]
            }
        },
        "test_reraise_converts_exception_to_transport_error": {
            "name": "test_reraise_converts_exception_to_transport_error",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "exc_to_catch": [
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "int",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_reraise_timeout_errors_converts_exception_to_transport_timeout_error": {
            "name": "test_reraise_timeout_errors_converts_exception_to_transport_timeout_error",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "exc_to_catch": [
                    "List[str]",
                    "list[str]",
                    "Optional[BinaryIO]",
                    "str",
                    "typing.BinaryIO",
                    "BinaryIO",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_reraise_converts_exception_to_transport_error.func": {
            "name": "func",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reraise_timeout_errors_converts_exception_to_transport_timeout_error.func": {
            "name": "func",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "transports-master/tests/test_timeouts.py": {
        "default": {
            "name": "default",
            "location": 20,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "sentinel": {
            "name": "sentinel",
            "location": 31,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_transport_timeout_returns_default_on_sentinel": {
            "name": "test_transport_timeout_returns_default_on_sentinel",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sentinel": [
                    "bool",
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "default": [
                    "bool",
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_transport_timeout_converts_milliseconds_to_seconds_when_flag_set": {
            "name": "test_transport_timeout_converts_milliseconds_to_seconds_when_flag_set",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "valid_timeout_ms": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_transport_timeout_returns_none_when_none_and_seconds_set": {
            "name": "test_transport_timeout_returns_none_when_none_and_seconds_set",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "transports-master/tests/test_transport.py": {
        "test_transport_is_abstract": {
            "name": "test_transport_is_abstract",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "transports-master/tests/tcp/test_tcp_asynchronous.py": {
        "test_stub": {
            "name": "test_stub",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "transports-master/tests/tcp/test_tcp_synchronous.py": {
        "test_stub": {
            "name": "test_stub",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "transports-master/tests/usb/conftest.py": {
        "error_code_to_exception": {
            "name": "error_code_to_exception",
            "location": 29,
            "return": [
                "int",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "valid_endpoint_address": {
            "name": "valid_endpoint_address",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "valid_read_endpoint_address": {
            "name": "valid_read_endpoint_address",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "valid_write_endpoint_address": {
            "name": "valid_write_endpoint_address",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "valid_interface_number": {
            "name": "valid_interface_number",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "valid_usb_device_class": {
            "name": "valid_usb_device_class",
            "location": 91,
            "return": [
                "str",
                "Type",
                "Callable[..., T]"
            ],
            "arguments": {}
        },
        "invalid_usb_device_class": {
            "name": "invalid_usb_device_class",
            "location": 121,
            "return": [
                "int",
                "T",
                "str",
                "Optional[Type[BaseException]]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "set[str]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "valid_usb_device_subclass": {
            "name": "valid_usb_device_subclass",
            "location": 129,
            "return": [
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "invalid_usb_device_subclass": {
            "name": "invalid_usb_device_subclass",
            "location": 143,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "valid_usb_device_protocol": {
            "name": "valid_usb_device_protocol",
            "location": 151,
            "return": [
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "invalid_usb_device_protocol": {
            "name": "invalid_usb_device_protocol",
            "location": 165,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "valid_serial_number": {
            "name": "valid_serial_number",
            "location": 175,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "valid_vendor_id": {
            "name": "valid_vendor_id",
            "location": 188,
            "return": [
                "int",
                "Optional[int]",
                "float",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "valid_product_id": {
            "name": "valid_product_id",
            "location": 201,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "request": [
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "mock_context": {
            "name": "mock_context",
            "location": 209,
            "return": [
                "List[str]",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "mock_context_class": {
            "name": "mock_context_class",
            "location": 217,
            "return": [
                "str",
                "list[dict[str, typing.Any]]",
                "bool"
            ],
            "arguments": {
                "mocker": [
                    "List[List[Any]]",
                    "str",
                    "list[list[typing.Any]]",
                    "int"
                ],
                "mock_context": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "mock_context_no_devices": {
            "name": "mock_context_no_devices",
            "location": 228,
            "return": [
                "str",
                "list[str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "mock_context_class": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "mock_context_one_device_match": {
            "name": "mock_context_one_device_match",
            "location": 237,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "mock_context_class": [],
                "mock_device": [
                    "bool",
                    "str"
                ],
                "mock_interface_settings_match": []
            }
        },
        "mock_context_one_device_match_serial": {
            "name": "mock_context_one_device_match_serial",
            "location": 248,
            "return": [
                "str",
                "typing.Callable[, ]",
                "bool"
            ],
            "arguments": {
                "mock_context": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "mock_device_with_serial_factory": [],
                "mock_interface_settings_match": [
                    "int"
                ],
                "valid_serial_number": []
            }
        },
        "mock_context_one_device_match_vid": {
            "name": "mock_context_one_device_match_vid",
            "location": 261,
            "return": [
                "str",
                "typing.Callable[, ]",
                "bool"
            ],
            "arguments": {
                "mock_context": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "mock_device_with_vid_factory": [],
                "mock_interface_settings_match": [
                    "int"
                ],
                "valid_vendor_id": []
            }
        },
        "mock_context_one_device_match_pid": {
            "name": "mock_context_one_device_match_pid",
            "location": 274,
            "return": [
                "str",
                "typing.Callable[, ]",
                "bool"
            ],
            "arguments": {
                "mock_context": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "mock_device_with_pid_factory": [
                    "bool",
                    "str"
                ],
                "mock_interface_settings_match": [
                    "int"
                ],
                "valid_product_id": [
                    "bool",
                    "str"
                ]
            }
        },
        "mock_context_one_device_no_match": {
            "name": "mock_context_one_device_no_match",
            "location": 287,
            "return": [
                "List[str]",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_context": [],
                "mock_device": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "str"
                ],
                "mock_interface_settings_mismatch_class": []
            }
        },
        "mock_context_one_device_read_endpoint_no_write": {
            "name": "mock_context_one_device_read_endpoint_no_write",
            "location": 298,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "mock_context_class": [],
                "mock_device": [],
                "mock_interface_settings_endpoint_factory": [],
                "valid_read_endpoint_address": []
            }
        },
        "mock_context_one_device_valid_endpoints": {
            "name": "mock_context_one_device_valid_endpoints",
            "location": 312,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "mock_context_class": [],
                "mock_device": [],
                "mock_endpoint_factory": [
                    "str"
                ],
                "mock_endpoint_valid_read_address": [],
                "mock_endpoint_valid_write_address": [],
                "mock_interface_settings_factory": []
            }
        },
        "mock_device": {
            "name": "mock_device",
            "location": 326,
            "return": [
                "List[str]",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "mock_device_with_serial_factory": {
            "name": "mock_device_with_serial_factory",
            "location": 334,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mock_device": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "List[str]",
                    "list[str]",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "mock_device_with_vid_factory": {
            "name": "mock_device_with_vid_factory",
            "location": 346,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mock_device": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "List[str]",
                    "list[str]",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "mock_device_with_pid_factory": {
            "name": "mock_device_with_pid_factory",
            "location": 358,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mock_device": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "List[str]",
                    "list[str]",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "mock_device_with_handle": {
            "name": "mock_device_with_handle",
            "location": 370,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_device": [],
                "mock_handle": []
            }
        },
        "mock_handle": {
            "name": "mock_handle",
            "location": 379,
            "return": [
                "List[str]",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "mock_read_handle": {
            "name": "mock_read_handle",
            "location": 387,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_handle": []
            }
        },
        "mock_write_handle": {
            "name": "mock_write_handle",
            "location": 396,
            "return": [
                "str",
                "Dict[str, Sequence[str]]",
                "bool"
            ],
            "arguments": {
                "mock_handle": [
                    "str",
                    "bool"
                ]
            }
        },
        "mock_write_handle_incorrect_return_value": {
            "name": "mock_write_handle_incorrect_return_value",
            "location": 405,
            "return": [
                "Dict[str, Sequence[str]]",
                "str",
                "List[str]",
                "list[str]",
                "None"
            ],
            "arguments": {
                "mock_handle": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "mock_handle_active_kernel_driver": {
            "name": "mock_handle_active_kernel_driver",
            "location": 415,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_handle": [
                    "str"
                ]
            }
        },
        "mock_handle_inactive_kernel_driver": {
            "name": "mock_handle_inactive_kernel_driver",
            "location": 424,
            "return": [
                "str",
                "Dict[str, Sequence[str]]",
                "list[str]",
                "int",
                "None"
            ],
            "arguments": {
                "mock_handle": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "mock_endpoint": {
            "name": "mock_endpoint",
            "location": 433,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [],
                "valid_endpoint_address": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "mock_endpoint_valid_read_address": {
            "name": "mock_endpoint_valid_read_address",
            "location": 443,
            "return": [],
            "arguments": {
                "mocker": [],
                "valid_read_endpoint_address": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "mock_endpoint_valid_write_address": {
            "name": "mock_endpoint_valid_write_address",
            "location": 453,
            "return": [],
            "arguments": {
                "mocker": [],
                "valid_write_endpoint_address": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "mock_endpoint_factory": {
            "name": "mock_endpoint_factory",
            "location": 463,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mock_endpoint": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "List[str]",
                    "list[str]",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "mock_interface_settings": {
            "name": "mock_interface_settings",
            "location": 475,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [],
                "valid_interface_number": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "mock_interface_settings_factory": {
            "name": "mock_interface_settings_factory",
            "location": 485,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mock_interface_settings_match": [
                    "str",
                    "bool",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "mock_interface_settings_match": {
            "name": "mock_interface_settings_match",
            "location": 498,
            "return": [
                "str",
                "list[str]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "mock_interface_settings": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "mock_interface_settings_mismatch_class": {
            "name": "mock_interface_settings_mismatch_class",
            "location": 509,
            "return": [
                "bool",
                "None",
                "dict[, ]",
                "tuple[typing.Union[dict[, ],bool]]"
            ],
            "arguments": {
                "mock_interface_settings": [
                    "bool",
                    "Optional['SparkSession']",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Tuple[dict, bool]",
                    "tuple[typing.Union[dict[, ],bool]]"
                ],
                "invalid_usb_device_class": [
                    "bool",
                    "Optional['SparkSession']",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Tuple[dict, bool]",
                    "tuple[typing.Union[dict[, ],bool]]"
                ]
            }
        },
        "mock_interface_settings_mismatch_subclass": {
            "name": "mock_interface_settings_mismatch_subclass",
            "location": 518,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_interface_settings": [],
                "invalid_usb_device_subclass": []
            }
        },
        "mock_interface_settings_mismatch_protocol": {
            "name": "mock_interface_settings_mismatch_protocol",
            "location": 527,
            "return": [
                "str",
                "Dict[str, Sequence[str]]",
                "bytes"
            ],
            "arguments": {
                "mock_interface_settings": [
                    "str",
                    "bytes"
                ],
                "invalid_usb_device_protocol": [
                    "str",
                    "bytes"
                ]
            }
        },
        "mock_interface_settings_endpoint_factory": {
            "name": "mock_interface_settings_endpoint_factory",
            "location": 536,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "mock_interface_settings_match": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "mock_endpoint": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "BinaryIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "mock_device_with_serial_factory.factory": {
            "name": "factory",
            "location": 338,
            "return": [],
            "arguments": {
                "serial": []
            }
        },
        "mock_device_with_vid_factory.factory": {
            "name": "factory",
            "location": 350,
            "return": [],
            "arguments": {
                "vendor_id": []
            }
        },
        "mock_device_with_pid_factory.factory": {
            "name": "factory",
            "location": 362,
            "return": [],
            "arguments": {
                "product_id": []
            }
        },
        "mock_endpoint_factory.factory": {
            "name": "factory",
            "location": 467,
            "return": [],
            "arguments": {
                "address": []
            }
        },
        "mock_interface_settings_factory.factory": {
            "name": "factory",
            "location": 490,
            "return": [],
            "arguments": {}
        },
        "mock_interface_settings_endpoint_factory.factory": {
            "name": "factory",
            "location": 541,
            "return": [
                "str",
                "bool",
                "int",
                "bytes"
            ],
            "arguments": {
                "address": [
                    "Iterable[str]",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "transports-master/tests/usb/test_usb_libusb.py": {
        "test_reraise_libusb_errors_handles_no_device": {
            "name": "test_reraise_libusb_errors_handles_no_device",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "error_code_to_exception": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None",
                    "Callable",
                    "list",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "test_read_performs_bulk_read_on_handle": {
            "name": "test_read_performs_bulk_read_on_handle",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_read_handle": [],
                "mock_endpoint": [],
                "valid_endpoint_address": [],
                "valid_num_bytes": [],
                "valid_timeout_ms": []
            }
        },
        "test_read_performs_bulk_read_against_endpoint_address": {
            "name": "test_read_performs_bulk_read_against_endpoint_address",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_read_handle": [],
                "mock_endpoint": [],
                "valid_num_bytes": [],
                "valid_timeout_ms": []
            }
        },
        "test_write_performs_bulk_write_on_handle": {
            "name": "test_write_performs_bulk_write_on_handle",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_write_handle": [],
                "mock_endpoint": [],
                "valid_endpoint_address": [],
                "valid_bytes": [],
                "valid_timeout_ms": []
            }
        },
        "test_write_performs_bulk_write_against_endpoint_address": {
            "name": "test_write_performs_bulk_write_against_endpoint_address",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_write_handle": [],
                "mock_endpoint": [],
                "valid_bytes": [],
                "valid_timeout_ms": []
            }
        },
        "test_write_throws_error_when_not_all_bytes_written": {
            "name": "test_write_throws_error_when_not_all_bytes_written",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_write_handle_incorrect_return_value": [],
                "mock_endpoint": [],
                "valid_bytes": [],
                "valid_timeout_ms": []
            }
        },
        "test_close_releases_handle_interface": {
            "name": "test_close_releases_handle_interface",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context": [],
                "mock_handle": [],
                "mock_interface_settings": [],
                "valid_interface_number": []
            }
        },
        "test_close_closes_handle": {
            "name": "test_close_closes_handle",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context": [],
                "mock_handle": [],
                "mock_interface_settings": []
            }
        },
        "test_close_closes_context": {
            "name": "test_close_closes_context",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context": [],
                "mock_handle": [],
                "mock_interface_settings": []
            }
        },
        "test_open_context_returns_new_context": {
            "name": "test_open_context_returns_new_context",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_class": []
            }
        },
        "test_open_device_handle_calls_open_on_device": {
            "name": "test_open_device_handle_calls_open_on_device",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_device": []
            }
        },
        "test_claim_interface_claims_interface_settings_number": {
            "name": "test_claim_interface_claims_interface_settings_number",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_handle": [],
                "mock_interface_settings": [],
                "valid_interface_number": []
            }
        },
        "test_claim_interface_detaches_kernel_driver_when_active": {
            "name": "test_claim_interface_detaches_kernel_driver_when_active",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_handle_active_kernel_driver": [],
                "mock_interface_settings": [],
                "valid_interface_number": []
            }
        },
        "test_claim_interface_does_not_detach_kernel_driver_when_inactive": {
            "name": "test_claim_interface_does_not_detach_kernel_driver_when_inactive",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_handle_inactive_kernel_driver": [],
                "mock_interface_settings": [],
                "valid_interface_number": []
            }
        },
        "test_find_device_uses_match_on_class_subclass_protocol": {
            "name": "test_find_device_uses_match_on_class_subclass_protocol",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_one_device_match": []
            }
        },
        "test_find_device_ignores_mismatch_on_class_subclass_protocol": {
            "name": "test_find_device_ignores_mismatch_on_class_subclass_protocol",
            "location": 161,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_one_device_no_match": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_find_device_uses_match_on_serial": {
            "name": "test_find_device_uses_match_on_serial",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_one_device_match_serial": [],
                "valid_serial_number": [
                    "bool"
                ]
            }
        },
        "test_find_device_uses_match_on_vid": {
            "name": "test_find_device_uses_match_on_vid",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_one_device_match_vid": [
                    "int",
                    "bool",
                    "Literal"
                ],
                "valid_vendor_id": [
                    "str"
                ]
            }
        },
        "test_find_device_uses_match_on_pid": {
            "name": "test_find_device_uses_match_on_pid",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_one_device_match_pid": [
                    "int",
                    "str",
                    "float",
                    "Type[Any]",
                    "typing.Type"
                ],
                "valid_product_id": [
                    "int",
                    "str",
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "test_device_matches_with_no_filter_on_class_subclass_and_protocol": {
            "name": "test_device_matches_with_no_filter_on_class_subclass_and_protocol",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_device": [],
                "mock_interface_settings_match": []
            }
        },
        "test_device_mismatches_on_invalid_usb_class": {
            "name": "test_device_mismatches_on_invalid_usb_class",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_device": [],
                "mock_interface_settings_mismatch_class": []
            }
        },
        "test_device_mismatches_on_invalid_usb_subclass": {
            "name": "test_device_mismatches_on_invalid_usb_subclass",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_device": [],
                "mock_interface_settings_mismatch_subclass": []
            }
        },
        "test_device_mismatches_on_invalid_usb_protocol": {
            "name": "test_device_mismatches_on_invalid_usb_protocol",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_device": [],
                "mock_interface_settings_mismatch_protocol": []
            }
        },
        "test_device_matches_on_settings_and_serial": {
            "name": "test_device_matches_on_settings_and_serial",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_device_with_serial_factory": [],
                "mock_interface_settings_match": [],
                "valid_serial_number": []
            }
        },
        "test_device_matches_on_settings_and_vendor_id": {
            "name": "test_device_matches_on_settings_and_vendor_id",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_device_with_vid_factory": [],
                "mock_interface_settings_match": [],
                "valid_vendor_id": []
            }
        },
        "test_device_matches_on_settings_and_product_id": {
            "name": "test_device_matches_on_settings_and_product_id",
            "location": 248,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_device_with_pid_factory": [],
                "mock_interface_settings_match": [],
                "valid_product_id": []
            }
        },
        "test_optional_usb_context_yields_context_when_given": {
            "name": "test_optional_usb_context_yields_context_when_given",
            "location": 258,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context": []
            }
        },
        "test_optional_usb_context_doesnt_close_context_when_given": {
            "name": "test_optional_usb_context_doesnt_close_context_when_given",
            "location": 267,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context": []
            }
        },
        "test_optional_usb_context_creates_new_one_when_not_given": {
            "name": "test_optional_usb_context_creates_new_one_when_not_given",
            "location": 277,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_class": [
                    "list",
                    "list[]"
                ]
            }
        },
        "test_optional_usb_context_closes_context_when_not_given": {
            "name": "test_optional_usb_context_closes_context_when_not_given",
            "location": 287,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_class": []
            }
        },
        "test_find_read_endpoint_returns_read_endpoint_on_match": {
            "name": "test_find_read_endpoint_returns_read_endpoint_on_match",
            "location": 297,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_interface_settings_endpoint_factory": [],
                "valid_read_endpoint_address": []
            }
        },
        "test_find_read_endpoint_returns_none_on_mismatch": {
            "name": "test_find_read_endpoint_returns_none_on_mismatch",
            "location": 309,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_interface_settings_endpoint_factory": [],
                "valid_write_endpoint_address": []
            }
        },
        "test_find_write_endpoint_returns_read_endpoint_on_match": {
            "name": "test_find_write_endpoint_returns_read_endpoint_on_match",
            "location": 320,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_interface_settings_endpoint_factory": [],
                "valid_write_endpoint_address": []
            }
        },
        "test_find_write_endpoint_returns_none_on_mismatch": {
            "name": "test_find_write_endpoint_returns_none_on_mismatch",
            "location": 332,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_interface_settings_endpoint_factory": [],
                "valid_read_endpoint_address": []
            }
        },
        "test_reraise_libusb_errors_handles_no_device.func": {
            "name": "func",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "transports-master/tests/usb/test_usb_synchronous.py": {
        "test_open_raises_when_no_device_found": {
            "name": "test_open_raises_when_no_device_found",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_no_devices": []
            }
        },
        "test_open_closes_context_when_no_device_found": {
            "name": "test_open_closes_context_when_no_device_found",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_no_devices": []
            }
        },
        "test_open_raises_when_no_read_endpoint_found": {
            "name": "test_open_raises_when_no_read_endpoint_found",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_one_device_match": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_open_closes_context_when_no_read_endpoint_found": {
            "name": "test_open_closes_context_when_no_read_endpoint_found",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_one_device_match": []
            }
        },
        "test_open_raises_when_no_write_endpoint_found": {
            "name": "test_open_raises_when_no_write_endpoint_found",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_one_device_read_endpoint_no_write": []
            }
        },
        "test_open_closes_context_when_no_write_endpoint_found": {
            "name": "test_open_closes_context_when_no_write_endpoint_found",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_one_device_read_endpoint_no_write": []
            }
        },
        "test_open_opens_device_handle": {
            "name": "test_open_opens_device_handle",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_context_one_device_valid_endpoints": [],
                "mock_device": []
            }
        },
        "test_open_claims_device_handle": {
            "name": "test_open_claims_device_handle",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_device_with_handle": [],
                "mock_context_one_device_valid_endpoints": [],
                "mock_handle": []
            }
        }
    }
}
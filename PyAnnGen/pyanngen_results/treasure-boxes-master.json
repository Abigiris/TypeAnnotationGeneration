{
    "treasure-boxes-master/integration-box/auth0_batch/scripts/main.py": {
        "load": {
            "name": "load",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "table": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "td_endpoint": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "auth0_endpoint": [
                    "str",
                    "int"
                ],
                "auth0_token": [
                    "str",
                    "int"
                ],
                "connection_id": [
                    "str"
                ]
            }
        },
        "create_export_job": {
            "name": "create_export_job",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "int"
                ],
                "token": [
                    "str"
                ],
                "connection_id": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_export_result": {
            "name": "get_export_result",
            "location": 89,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "List[str]",
                "str",
                "TextIO",
                "int"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "bool"
                ],
                "token": [
                    "str",
                    "List[int]",
                    "list[int]",
                    "Set[str]",
                    "set[str]",
                    "List[str]",
                    "list[str]"
                ],
                "jobid": [
                    "str",
                    "bool"
                ]
            }
        },
        "load_into_td": {
            "name": "load_into_td",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "database": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "table": [
                    "str",
                    "int"
                ],
                "endpoint": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/csv_import_via_http/csv_import_td.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "None",
                    "Optional[str]",
                    "pandas._StorageOptions"
                ],
                "database": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "table": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "bool",
                    "list[str]",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "csv_setting_file": [
                    "str",
                    "Dict[str, str]",
                    "Union[str, Dict[str, Any]]",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/cuenote-import/JSON-API/cuenote.py": {
        "call_api": {
            "name": "call_api",
            "location": 12,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "command": [
                    "Type[Any]",
                    "typing.Type"
                ],
                "params": [
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "format_value": {
            "name": "format_value",
            "location": 27,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "col": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "None",
                    "Iterable[Dict[str, Any]]",
                    "Optional[bool]",
                    "Iterable[Tuple[str, str, str]]"
                ],
                "val": [
                    "int",
                    "str",
                    "datetime.datetime"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/cuenote-import/JSON-API/get_jobs.py": {
        "main": {
            "name": "main",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/integration-box/cuenote-import/JSON-API/get_logs.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/integration-box/cuenote-import/XML-API/cuenote.py": {
        "call_api": {
            "name": "call_api",
            "location": 13,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "command": [
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ],
                "params": [
                    "tuple[]",
                    "str",
                    "list[]",
                    "bytes",
                    "Dict[str, Any]",
                    "bool",
                    "Union[tuple, list]",
                    "Union[str, bytes]"
                ]
            }
        },
        "download_log": {
            "name": "download_log",
            "location": 57,
            "return": [
                "str",
                "Dict[str, List[int]]",
                "bytes",
                "None",
                "Optional[float]",
                "dict[str, dict[str, typing.Any]]",
                "int",
                "list[str]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "format_value": {
            "name": "format_value",
            "location": 74,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "col": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "None",
                    "Iterable[Dict[str, Any]]",
                    "Optional[bool]",
                    "Iterable[Tuple[str, str, str]]"
                ],
                "val": [
                    "int",
                    "str",
                    "datetime.datetime"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/cuenote-import/XML-API/get_jobs.py": {
        "main": {
            "name": "main",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/integration-box/cuenote-import/XML-API/get_logs.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/integration-box/datarobot/scripts/datarobot.py": {
        "make_datarobot_deployment_predictions": {
            "name": "make_datarobot_deployment_predictions",
            "location": 13,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "int",
                    "None",
                    "Optional[int]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[str]",
                    "List[Tuple[str, str]]"
                ],
                "deployment_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_raise_dataroboterror_for_status": {
            "name": "_raise_dataroboterror_for_status",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "requests.Response"
                ]
            }
        },
        "td_query": {
            "name": "td_query",
            "location": 63,
            "return": [
                "list[]",
                "dict",
                "pandas.DataFrame",
                "str",
                "Optional[float]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "sql": [
                    "int",
                    "float",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "connection": [
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "bool",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "int"
                ],
                "database": [
                    "str"
                ],
                "table": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "target": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]",
                    "Optional[bool]",
                    "None"
                ],
                "deployment_id": [
                    "int",
                    "str",
                    "dict[str, bool]",
                    "Dict[str, bool]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "list[dict[str, str]]",
                    "List[Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/dialogone/post_userlist_to_done.py": {
        "upload_user_list": {
            "name": "upload_user_list",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ],
                "table": [
                    "bool",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "list[I]",
                    "str",
                    "int",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "user_id_column": [
                    "bool",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "list[I]",
                    "str",
                    "int",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "filename": [
                    "str"
                ],
                "sa_email": [
                    "str",
                    "int",
                    "float",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "acid": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "dict[str, 'LabwareDefinition']",
                    "Dict[str, 'LabwareDefinition']",
                    "int"
                ]
            }
        },
        "retrive_user_id_sql": {
            "name": "retrive_user_id_sql",
            "location": 107,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "table": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "list[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "column": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "list[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "generate_jwt": {
            "name": "generate_jwt",
            "location": 118,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "sa_email": [
                    "tuple[typing.Union[int,int]]",
                    "float",
                    "Tuple[int, int]",
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "list",
                    "list[\"Outcome\"]",
                    "List[\"Outcome\"]",
                    "T"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/elastic-map-reduce/load.py": {},
    "treasure-boxes-master/integration-box/Kinesis/lambda_function.py": {
        "publish": {
            "name": "publish",
            "location": 15,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "records": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "str"
                ],
                "retry_count": [
                    "int",
                    "str",
                    "List[List[T]]"
                ]
            }
        },
        "failures": {
            "name": "failures",
            "location": 39,
            "return": [
                "list[]",
                "Dict[int, int]",
                "Tuple[int, int]",
                "Dict[str, float]",
                "Dict[str, Tuple[float, float]]",
                "List[str]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "dict[, ]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "records": [
                    "str",
                    "bytes",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "transform": {
            "name": "transform",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "record": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "lambda_handler": {
            "name": "lambda_handler",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "Mapping",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[dict]",
                    "list[dict[, ]]",
                    "Type[T]",
                    "typing.Type"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/kintone/python_args.py": {
        "column_encode": {
            "name": "column_encode",
            "location": 22,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "column_decode": {
            "name": "column_decode",
            "location": 36,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "get_records": {
            "name": "get_records",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [],
                "basic": [],
                "org": [],
                "app_id": [],
                "database": [],
                "table": [],
                "fields": [],
                "query": [],
                "id_field_code": []
            }
        },
        "delete_records": {
            "name": "delete_records",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [],
                "basic": [],
                "org": [],
                "app_id": [],
                "ids": [],
                "content_type": []
            }
        },
        "put_records": {
            "name": "put_records",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [],
                "basic": [],
                "org": [],
                "app_id": [],
                "c": [],
                "content_type": [],
                "database": [],
                "query": []
            }
        },
        "post_records": {
            "name": "post_records",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [],
                "basic": [],
                "org": [],
                "app_id": [],
                "c": [],
                "content_type": [],
                "database": [],
                "query": []
            }
        }
    },
    "treasure-boxes-master/integration-box/mqtt/python/mqtt.py": {
        "on_log": {
            "name": "on_log",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "int",
                    "bool"
                ],
                "userdata": [
                    "str",
                    "int",
                    "bool"
                ],
                "level": [
                    "str",
                    "int",
                    "bool"
                ],
                "buf": [
                    "int",
                    "float"
                ]
            }
        },
        "on_disconnect": {
            "name": "on_disconnect",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "float",
                    "str"
                ],
                "userdata": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "rc": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/onetrust/scripts/onetrustintegration.py": {},
    "treasure-boxes-master/integration-box/pandas/py_scripts/examples.py": {
        "read_td_table": {
            "name": "read_td_table",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "table_name": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "None"
                ],
                "engine_name": [
                    "typing.Text",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "limit": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "write_td_table": {
            "name": "write_td_table",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database_name": [
                    "str",
                    "List[str]",
                    "int",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "table_name": [
                    "str"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/pelion-device-management/pelion_device.py": {
        "_cast": {
            "name": "_cast",
            "location": 7,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "Union[str, 'Type']",
                    "Optional[bool]",
                    "Iterable[object]",
                    "int",
                    "float"
                ]
            }
        },
        "pull_resource_values": {
            "name": "pull_resource_values",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "device_id": [
                    "str",
                    "int"
                ],
                "database": [
                    "str"
                ],
                "table": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/pyspark/py_scripts/td-spark.py": {
        "_prepare_td_spark": {
            "name": "_prepare_td_spark",
            "location": 9,
            "return": [
                "str",
                "int",
                "typing.Pattern",
                "Callable"
            ],
            "arguments": {}
        },
        "process_data": {
            "name": "process_data",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "database_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "table_name": [
                    "str"
                ],
                "td_spark": [
                    "Optional[str]",
                    "None",
                    "Optional[td_pyspark.TDSparkContext]",
                    "str",
                    "Optional[IO[bytes]]",
                    "typing.IO",
                    "Optional[Dict[str, dict]]",
                    "dict[str, dict[, ]]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "execute_sql": {
            "name": "execute_sql",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "database_name": [
                    "str"
                ],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "td_spark": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "upload_dataframe": {
            "name": "upload_dataframe",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "database_name": [
                    "str"
                ],
                "table_name": [
                    "str"
                ],
                "td_spark": [
                    "None",
                    "Optional[td_pyspark.TDSparkContext]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "typing.Any",
                    "Optional[Union[Any, Any]]",
                    "list[str]",
                    "list[dict[str, typing.Any]]",
                    "Optional[List[str]]",
                    "List[Dict[str, Any]]",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/python/other_scripts/__init__.py": {
        "print_path": {
            "name": "print_path",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/integration-box/python/py_scripts/examples.py": {
        "print_arg": {
            "name": "print_arg",
            "location": 3,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "print_env": {
            "name": "print_env",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "import_another_file": {
            "name": "import_another_file",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "store_workflow_env": {
            "name": "store_workflow_env",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "IO",
                    "typing.IO",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/Qualtrics/workflows/qualtrics_export/pyscripts/export.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "extract_data": {
            "name": "extract_data",
            "location": 65,
            "return": [
                "Dict[str, List[int]]",
                "IO[bytes]",
                "dict",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "table": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "cols": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "apikey": [
                    "str"
                ],
                "endpoint": [
                    "str"
                ]
            }
        },
        "save_list_as_file": {
            "name": "save_list_as_file",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "list": [
                    "str",
                    "bool"
                ],
                "header": [
                    "str",
                    "IO[Any]"
                ],
                "delimiter": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "send_to_qualtrics": {
            "name": "send_to_qualtrics",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qualtrics_apikey": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "qualtrics_endpoint": [
                    "str",
                    "bool"
                ],
                "qualtrics_aid": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "file_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/Qualtrics/workflows/qualtrics_import/pyscripts/import.py": {
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/integration-box/rss/py_scripts/tasks.py": {
        "rss_import": {
            "name": "rss_import",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dest_db": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "dest_table": [
                    "str",
                    "bool",
                    "typing.Iterable[\"Entity\"]",
                    "Iterable[\"Entity\"]",
                    "int"
                ],
                "rss_url_list": [
                    "bool",
                    "AbstractSet[\"TemplateObjectVariable\"]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "AbstractSet[\"TemplateActionTypeVariable\"]"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/s3/py_scripts/s3_example.py": {
        "upload_data": {
            "name": "upload_data",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "region_name": [
                    "str"
                ],
                "file_name": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "download_data": {
            "name": "download_data",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "region_name": [
                    "str"
                ],
                "object_name": [
                    "str",
                    "typing.Text"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/scorer-cloud/scorer.py": {
        "tsv_files": {
            "name": "tsv_files",
            "location": 24,
            "return": [
                "",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "members": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "list[str]",
                    "Optional[str]",
                    "list[]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "load_sense_video": {
            "name": "load_sense_video",
            "location": 30,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "table": [
                    "str",
                    "bool",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Optional[str]",
                    "None"
                ],
                "bucket": [
                    "str",
                    "None",
                    "Optional[str]",
                    "list[str]",
                    "List[str]",
                    "Optional[\"LocalizedString\"]"
                ],
                "device_id": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "date": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/scorer-edge/pedestrian-count/pedestrian_count.py": {},
    "treasure-boxes-master/integration-box/scorer-edge/pedestrian-count/pedestrian_detector.py": {
        "PedestrianDetector.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PedestrianDetector.detect": {
            "name": "detect",
            "location": 17,
            "return": [
                "tuple[int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "treasure-boxes-master/integration-box/twitter-search/mapping.py": {},
    "treasure-boxes-master/integration-box/twitter-search/twitter-archiver.py": {
        "get_since_id": {
            "name": "get_since_id",
            "location": 24,
            "return": [
                "int",
                "bool",
                "dict",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {}
        },
        "format_timestamp": {
            "name": "format_timestamp",
            "location": 37,
            "return": [
                "bool",
                "typing.Text",
                "int"
            ],
            "arguments": {
                "val": [
                    "str",
                    "int",
                    "float",
                    "Match",
                    "typing.Match"
                ]
            }
        },
        "make_array": {
            "name": "make_array",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "data": [
                    "bytes",
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "nest_get": {
            "name": "nest_get",
            "location": 48,
            "return": [
                "typing.Text",
                "str",
                "dict[, ]",
                "dict",
                "dict[str, list[typing.Any]]",
                "set",
                "dict[str, str]",
                "List[str]",
                "dict[int, typing.Any]",
                "List[Dict[str, str]]",
                "list"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ],
                "data": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "pick_primary_url": {
            "name": "pick_primary_url",
            "location": 65,
            "return": [
                "typing.Text",
                "bool",
                "Dict[str, Tuple[int, int]]",
                "pandas.Series",
                "str",
                "pandas.DataFrame",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "urls": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict",
                    "bool",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "bulk_load": {
            "name": "bulk_load",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "list[str]",
                    "str",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "search_and_archive": {
            "name": "search_and_archive",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/integration-box/yahoo-dmp/scripts/get_presigned_url.py": {
        "generate": {
            "name": "generate",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "yahoo_api_url": [
                    "str",
                    "bool"
                ],
                "tag_definition_guid": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Mapping[Any, str]",
                    "typing.Mapping"
                ],
                "vendor_guid": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Mapping[Any, str]",
                    "typing.Mapping"
                ],
                "entity_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Mapping[Any, str]",
                    "typing.Mapping"
                ],
                "uid_key": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Mapping[Any, str]",
                    "typing.Mapping"
                ],
                "brand_guid": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Mapping[Any, str]",
                    "typing.Mapping"
                ],
                "tag_fields": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Mapping[Any, str]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/yahoo-dmp/scripts/put_userlist.py": {
        "upload": {
            "name": "upload",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sqlfile": [
                    "str",
                    "Tuple[str]",
                    "int"
                ],
                "database": [
                    "str",
                    "float"
                ],
                "presigned_url": [
                    "str",
                    "int",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "treasure-boxes-master/integration-box/yappli/scripts/post_segment_user_to_api.py": {
        "fetch_user_data": {
            "name": "fetch_user_data",
            "location": 20,
            "return": [
                "List[str]",
                "dict"
            ],
            "arguments": {
                "sql": [
                    "Mapping[str, Any]",
                    "str",
                    "typing.Mapping"
                ],
                "td_db": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "None",
                    "requests.Session",
                    "list[str]"
                ],
                "td_engine": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "None",
                    "requests.Session",
                    "list[str]"
                ]
            }
        },
        "csv_out": {
            "name": "csv_out",
            "location": 33,
            "return": [
                "list[]",
                "str",
                "Iterable[Any]",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "td_job": [
                    "str",
                    "int",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "Dict[str, bool]"
                ]
            }
        },
        "api_call": {
            "name": "api_call",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "target_url": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool",
                    "dict[str, str]",
                    "Optional[MutableMapping[Any, Any]]",
                    "None",
                    "typing.MutableMapping"
                ],
                "headers": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool",
                    "dict[str, str]",
                    "Optional[MutableMapping[Any, Any]]",
                    "None",
                    "typing.MutableMapping"
                ],
                "files": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool",
                    "dict[str, str]",
                    "Optional[MutableMapping[Any, Any]]",
                    "None",
                    "typing.MutableMapping"
                ]
            }
        },
        "exec_main": {
            "name": "exec_main",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sql": [
                    "List[Callable]",
                    "list[typing.Callable[, ]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "typing.Mapping"
                ],
                "td_db": [
                    "List[Callable]",
                    "list[typing.Callable[, ]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "typing.Mapping"
                ],
                "td_engine": [
                    "List[Callable]",
                    "list[typing.Callable[, ]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "typing.Mapping"
                ],
                "target_url": [
                    "str",
                    "bool",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "filename": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "List[str]",
                    "None"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/customer-lifetime-value/data.py": {
        "import_table": {
            "name": "import_table",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "table": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Dict]",
                    "dict[str, dict[, ]]"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/house-price-prediction/py_scripts/data.py": {
        "upload_dataset": {
            "name": "upload_dataset",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "database": [
                    "str",
                    "bool"
                ],
                "table": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/house-price-prediction/tasks/__init__.py": {
        "FeatureSelector.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureSelector.run": {
            "name": "run",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dbname": [
                    "str",
                    "typing.Text"
                ],
                "source_table": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FeatureSelector._create_vectorize_table": {
            "name": "_create_vectorize_table",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "dbname": [
                    "str",
                    "bool",
                    "int"
                ],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "source_table": [
                    "str",
                    "None",
                    "Optional[str]",
                    "pandas.DataFrame"
                ],
                "feature_query": [
                    "str",
                    "None",
                    "Optional[str]",
                    "pandas.DataFrame"
                ]
            }
        },
        "FeatureSelector._feature_column_query": {
            "name": "_feature_column_query",
            "location": 124,
            "return": [
                "typing.Text",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "candidate_columns": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, str]"
                ],
                "feature_types": [
                    "str",
                    "list[str]",
                    "Optional[List[str]]",
                    "Dict[str, str]"
                ],
                "normalize": [
                    "List[Dict[str, Any]]",
                    "None",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "tuple",
                    "Callable",
                    "tuple[]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FeatureSelector._feature_column_query.build_feature_array": {
            "name": "build_feature_array",
            "location": 130,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "columns": [
                    "list",
                    "int",
                    "Sequence[str]",
                    "Optional[str]",
                    "dict",
                    "Dict[str, list]"
                ],
                "normalize": [
                    "None",
                    "List[str]",
                    "List[dict]",
                    "str",
                    "List[Optional['Cell']]",
                    "Iterable[Dict]",
                    "Optional[List[str]]",
                    "int"
                ],
                "ctype": [
                    "typing.Text",
                    "int",
                    "str"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/py_scripts/data.py": {
        "import_sample": {
            "name": "import_sample",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "database": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "table": [
                    "str",
                    "bool",
                    "Exception",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/py_scripts/main.py": {
        "run": {
            "name": "run",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "db": [
                    "str",
                    "int"
                ],
                "table": [
                    "str",
                    "int"
                ],
                "user_column": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Set[int]]",
                    "set[int]"
                ],
                "user_rnd_column": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Set[int]]",
                    "set[int]"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/config.py": {
        "Config.__post_init__": {
            "name": "__post_init__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/dataset_from_tfrecords.py": {
        "dataset_from_tfrecords": {
            "name": "dataset_from_tfrecords",
            "location": 7,
            "return": [
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "tfrecords_directory": [
                    "int",
                    "typing.Iterable[]",
                    "str",
                    "bool",
                    "None",
                    "tensorflow.keras.optimizers.Optimizer",
                    "Iterable",
                    "Optional[str]"
                ],
                "dense_shape": [
                    "int",
                    "typing.Iterable[]",
                    "str",
                    "bool",
                    "None",
                    "tensorflow.keras.optimizers.Optimizer",
                    "Iterable",
                    "Optional[str]"
                ],
                "leave_as_sparse": [
                    "bool",
                    "int",
                    "tensorflow.keras.optimizers.Optimizer",
                    "Iterable",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "dataset_from_tfrecords.listdir": {
            "name": "listdir",
            "location": 11,
            "return": [
                "list[]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "bool"
                ]
            }
        },
        "dataset_from_tfrecords.make_parse_function": {
            "name": "make_parse_function",
            "location": 16,
            "return": [
                "tensorflow.Tensor",
                "Iterable[T]",
                "bytes",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "dataset_from_tfrecords.deserialize_sparse_function": {
            "name": "deserialize_sparse_function",
            "location": 21,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Sequence['cirq.Qid']",
                    "Iterable[Any]",
                    "Iterable[str]",
                    "int",
                    "type"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/example_extractor.py": {
        "ExampleExtractor.extract_positive": {
            "name": "extract_positive",
            "location": 15,
            "return": [
                "typing.Generator[typing.Union[ExampleIndices, None], None, None]",
                "typing.Generator[list[]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "journey": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ExampleExtractor.extract_negative": {
            "name": "extract_negative",
            "location": 32,
            "return": [
                "typing.Generator[typing.Union[ExampleIndices, None], None, None]",
                "typing.Generator[]",
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "self": [],
                "journey": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ExampleExtractor.extract_positive.in_window": {
            "name": "in_window",
            "location": 22,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "session": [
                    "Optional[mwapi.Session]",
                    "sqlalchemy.orm.Session",
                    "recidiviz.persistence.database.session.Session"
                ]
            }
        },
        "ExampleExtractor.extract_positive.date_action": {
            "name": "date_action",
            "location": 25,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "session": []
            }
        },
        "ExampleExtractor.extract_negative.date_action": {
            "name": "date_action",
            "location": 43,
            "return": [
                "tuple[int]",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "arxiv.users.domain.Session",
                    "str"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/main.py": {
        "run": {
            "name": "run",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "units": [
                    "tuple",
                    "int",
                    "tuple[]",
                    "float",
                    "str",
                    "Callable[[tensorflow.Tensor], tensorflow.Tensor]",
                    "typing.Callable[tensorflow.Tensor, tensorflow.Tensor]"
                ],
                "dropout_rate": [
                    "tuple",
                    "int",
                    "tuple[]",
                    "float",
                    "str",
                    "Callable[[tensorflow.Tensor], tensorflow.Tensor]",
                    "typing.Callable[tensorflow.Tensor, tensorflow.Tensor]"
                ],
                "mask_value": [
                    "int",
                    "Union[int, Tuple[int, ...]]",
                    "str",
                    "tuple[typing.Union[int,...]]",
                    "bool"
                ]
            }
        },
        "Model.call": {
            "name": "call",
            "location": 29,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "float"
                ],
                "training": [
                    "dict",
                    "None",
                    "dict[, ]"
                ],
                "mask": [
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "CalibratedModel.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "class_balanced_model": [
                    "bool",
                    "float",
                    "int"
                ],
                "count_positive": [
                    "int",
                    "bool"
                ],
                "count_negative": [
                    "int",
                    "bool"
                ]
            }
        },
        "CalibratedModel.call": {
            "name": "call",
            "location": 47,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "str"
                ],
                "training": [
                    "int",
                    "str",
                    "None"
                ],
                "mask": [
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/mta_train.py": {
        "MTATrain.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "seq_length": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "bool",
                    "Union[float, Tuple[float, float]]"
                ],
                "hyper_parameters": [
                    "bool",
                    "None",
                    "allennlp.models.model.Model",
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "MTATrain.train": {
            "name": "train",
            "location": 39,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataset_train": [
                    "dict[str, model.Integration]",
                    "bool",
                    "Dict[str, model.Integration]",
                    "int",
                    "model.Snapshot",
                    "Dict[str, Any]"
                ],
                "dataset_validate": [
                    "dict[str, model.Integration]",
                    "bool",
                    "Dict[str, model.Integration]",
                    "int",
                    "model.Snapshot",
                    "Dict[str, Any]"
                ],
                "filepath": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MTATrain.load": {
            "name": "load",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "int"
                ]
            }
        },
        "MTATrain.HyperParameters.from_config": {
            "name": "from_config",
            "location": 26,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "neuromation.api.Config",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "sphinx.config.Config",
                    "_pytesconfig.Config",
                    "Sequence",
                    "bool",
                    "Dict[str, Any]",
                    "Config",
                    "asyncpg_migrate.model.Config"
                ],
                "config": [
                    "sphinx.config.Config",
                    "_pytesconfig.Config",
                    "Sequence",
                    "bool",
                    "Dict[str, Any]",
                    "Config",
                    "asyncpg_migrate.model.Config"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/parser.py": {
        "Parser.parse": {
            "name": "parse",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Parser.extract": {
            "name": "extract",
            "location": 30,
            "return": [
                "list[]",
                "int",
                "str",
                "Mapping",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "Parser.session": {
            "name": "session",
            "location": 35,
            "return": [
                "Session",
                "Exception",
                "Dict[str, str]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "str",
                    "set"
                ],
                "action": [
                    "str",
                    "set",
                    "set[]"
                ],
                "conversion": [
                    "str",
                    "set",
                    "set[]"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/parse_and_save_tfrecords.py": {
        "parse_and_save_tfrecords": {
            "name": "parse_and_save_tfrecords",
            "location": 13,
            "return": [
                "tuple[int]",
                "str",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Iterable['adi.Instance']",
                    "dict[, ]",
                    "Type['BaseConfig']",
                    "dict"
                ]
            }
        },
        "parse_and_save_tfrecords.serialize_example": {
            "name": "serialize_example",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "indices": [
                    "str",
                    "bool",
                    "List[List[str]]",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]"
                ],
                "label": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/shapley.py": {
        "shapley_inputs_one_sample": {
            "name": "shapley_inputs_one_sample",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sparse_positive_example": [
                    "str",
                    "int"
                ],
                "dense_shape": [
                    "pandas.DataFrame",
                    "float",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "make_shapley_inputs": {
            "name": "make_shapley_inputs",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "num_samples": [
                    "Optional[int]",
                    "int",
                    "List[float]",
                    "float"
                ],
                "dense_shape": [
                    "Optional[int]",
                    "int",
                    "List[float]",
                    "float"
                ]
            }
        },
        "make_shapley": {
            "name": "make_shapley",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "str"
                ]
            }
        },
        "squeeze_batch_dim": {
            "name": "squeeze_batch_dim",
            "location": 83,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "calculate_shapley": {
            "name": "calculate_shapley",
            "location": 87,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "Dict[str, Any]",
                    "config.Config",
                    "sideeye.config.Configuration"
                ]
            }
        },
        "make_shapley_inputs.shapley_inputs": {
            "name": "shapley_inputs",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sparse": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "make_shapley.shapley": {
            "name": "shapley",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "example_exclusive": [
                    "int",
                    "str",
                    "List[Tuple[int, int, float]]"
                ],
                "examples_inclusive": [],
                "included_excluded_indices": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/td_connector.py": {
        "TDConnector.read": {
            "name": "read",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "db": [
                    "str"
                ],
                "table": []
            }
        },
        "TDConnector.write_group_map": {
            "name": "write_group_map",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "client": [
                    "int",
                    "Optional[str]"
                ],
                "db": [],
                "table": [],
                "group_by": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "write_to": []
            }
        },
        "TDConnector.batch_query": {
            "name": "batch_query",
            "location": 32,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "table": [
                    "int",
                    "str"
                ],
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "int",
                    "str"
                ],
                "user_rnd_column": [
                    "int",
                    "str"
                ]
            }
        },
        "TDConnector.paginate": {
            "name": "paginate",
            "location": 37,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "bool"
                ],
                "table": [
                    "int"
                ],
                "group_by": [
                    "str"
                ],
                "user_rnd_column": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable",
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ],
                "count_per_page": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TDConnector.write": {
            "name": "write",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "db": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "table": [
                    "bool",
                    "str"
                ],
                "if_exists": [
                    "typing.Text",
                    "Callable",
                    "str"
                ]
            }
        },
        "TDConnector.distinct": {
            "name": "distinct",
            "location": 62,
            "return": [
                "list[]",
                "List[str]",
                "Dict[int, int]",
                "Set[str]",
                "Optional[dict]",
                "Sequence[str]"
            ],
            "arguments": {
                "db": [
                    "str"
                ],
                "table": [],
                "column": []
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/train_model_from_tfrecords.py": {
        "train_model_from_tfrecords": {
            "name": "train_model_from_tfrecords",
            "location": 11,
            "return": [
                "int",
                "Dict[str, pandas.DataFrame]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "count_positive": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "asyncpg_migrate.model.Config",
                    "Dict[str, model.Integration]"
                ],
                "count_negative": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "asyncpg_migrate.model.Config",
                    "Dict[str, model.Integration]"
                ]
            }
        },
        "train_model_from_tfrecords.dict_to_tuple": {
            "name": "dict_to_tuple",
            "location": 20,
            "return": [
                "tuple[]",
                "int",
                "Hashable",
                "bool",
                "Optional[Union[int, str]]",
                "str"
            ],
            "arguments": {
                "row": [
                    "pandas.Series",
                    "List[int]",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "train_model_from_tfrecords.random_downsample_bool": {
            "name": "random_downsample_bool",
            "location": 40,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "features": [
                    "str",
                    "List[int]",
                    "bool"
                ],
                "labels": [
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "train_model_from_tfrecords.augment_batch_with_zeros": {
            "name": "augment_batch_with_zeros",
            "location": 55,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "features": [
                    "Optional[Mapping[str, Any]]"
                ],
                "labels": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/__init__.py": {},
    "treasure-boxes-master/machine-learning-box/multi-touch-attribution/td_mta/data/__init__.py": {},
    "treasure-boxes-master/machine-learning-box/predictive-lead-scoring/tasks/__init__.py": {
        "TitleMappingGenerator.run": {
            "name": "run",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitleMappingGenerator.__categorize": {
            "name": "__categorize",
            "location": 30,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Callable[, ],str]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "raw_title": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "words": [
                    "bool"
                ]
            }
        },
        "TitleMappingGenerator.__find_category": {
            "name": "__find_category",
            "location": 53,
            "return": [
                "int",
                "str",
                "set",
                "tuple[typing.Union[str,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "str",
                    "int"
                ],
                "cat2keywords": [
                    "dict[str, typing.Any]",
                    "Mapping[str, Mapping[str, Any]]",
                    "dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]"
                ],
                "default": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/recommendation/py_scripts/data.py": {
        "upload_dataset": {
            "name": "upload_dataset",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "database": [
                    "str"
                ],
                "table": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/recommendation/py_scripts/recommend.py": {
        "_prepare_td_spark": {
            "name": "_prepare_td_spark",
            "location": 10,
            "return": [
                "str",
                "int",
                "typing.Pattern",
                "Callable"
            ],
            "arguments": {}
        },
        "spark_als": {
            "name": "spark_als",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "dict",
                    "int",
                    "dict[, ]",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "source_table": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "target_table": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "item_size": [
                    "bool",
                    "Callable",
                    "float"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/sales-prediction/py_scripts/data.py": {
        "upload_dataset": {
            "name": "upload_dataset",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "database": [
                    "str",
                    "bool"
                ],
                "table": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/sales-prediction/py_scripts/predict.py": {
        "TimeSeriesPredictor.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeSeriesPredictor._upload_graph": {
            "name": "_upload_graph",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str"
                ],
                "forecast": [
                    "int",
                    "str"
                ]
            }
        },
        "TimeSeriesPredictor.run": {
            "name": "run",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "typing.Text",
                    "str",
                    "Union[str, int]"
                ],
                "source_table": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "target_table": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "start_date": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "end_date": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "period": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "with_aws": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/sentiment-analysis/chainer_utils/nets.py": {
        "sequence_embed": {
            "name": "sequence_embed",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "embed": [
                    "float",
                    "numpy.ndarray"
                ],
                "xs": [
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "str"
                ],
                "dropout": [
                    "float",
                    "T",
                    "callable"
                ]
            }
        },
        "block_embed": {
            "name": "block_embed",
            "location": 40,
            "return": [
                "type"
            ],
            "arguments": {
                "embed": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "typing.Container",
                    "Container"
                ],
                "x": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "typing.Container",
                    "Container"
                ],
                "dropout": [
                    "float",
                    "int",
                    "Iterable[T]",
                    "callable",
                    "list"
                ]
            }
        },
        "TextClassifier.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "n_class": [
                    "int",
                    "str",
                    "bytes",
                    "list[]",
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "list",
                    "Tuple[int, int]"
                ],
                "dropout": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "list",
                    "Tuple[int, int]",
                    "bytes"
                ]
            }
        },
        "TextClassifier.forward": {
            "name": "forward",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float",
                    "int"
                ],
                "ys": [
                    "float",
                    "T",
                    "numpy.ndarray"
                ]
            }
        },
        "TextClassifier.predict": {
            "name": "predict",
            "location": 99,
            "return": [
                "str",
                "complex",
                "bytearray",
                "bytes",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float"
                ],
                "softmax": [
                    "bool",
                    "float",
                    "Tuple[float, float]",
                    "Tuple[int, int]"
                ],
                "argmax": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "RNNEncoder.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "n_layers": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_vocab": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_units": [
                    "int",
                    "str",
                    "bool"
                ],
                "dropout": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "RNNEncoder.forward": {
            "name": "forward",
            "location": 134,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "CNNEncoder.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "n_layers": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_vocab": [
                    "int",
                    "str"
                ],
                "n_units": [
                    "int",
                    "numpy.ndarray",
                    "Dict[int, FrozenSet[int]]",
                    "bool",
                    "List[int]"
                ],
                "dropout": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "CNNEncoder.forward": {
            "name": "forward",
            "location": 180,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "xs": []
            }
        },
        "MLP.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "n_layers": [
                    "int",
                    "str"
                ],
                "n_units": [
                    "str",
                    "list[]",
                    "Union[numpy.ndarray, numpy.void]",
                    "int",
                    "numpy.ndarray",
                    "None",
                    "list",
                    "Optional[int]"
                ],
                "dropout": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 211,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "T",
                    "numpy.ndarray"
                ]
            }
        },
        "BOWEncoder.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "n_vocab": [
                    "int",
                    "str"
                ],
                "n_units": [
                    "int",
                    "str"
                ],
                "dropout": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "BOWEncoder.forward": {
            "name": "forward",
            "location": 241,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "numpy.ndarray",
                    "Union[int, slice]",
                    "int",
                    "Union[pandas.Series, numpy.ndarray]",
                    "numpy.array"
                ]
            }
        },
        "BOWMLPEncoder.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "n_layers": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_vocab": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_units": [
                    "int",
                    "str",
                    "bool"
                ],
                "dropout": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "BOWMLPEncoder.forward": {
            "name": "forward",
            "location": 272,
            "return": [
                "int",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/sentiment-analysis/chainer_utils/nlp_utils.py": {
        "split_text": {
            "name": "split_text",
            "location": 9,
            "return": [
                "list[str]",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "char_based": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "normalize_text": {
            "name": "normalize_text",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "make_vocab": {
            "name": "make_vocab",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataset": [
                    "dict[, ]",
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "dict"
                ],
                "max_vocab_size": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[float]"
                ],
                "min_freq": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[float]"
                ]
            }
        },
        "read_vocab_list": {
            "name": "read_vocab_list",
            "location": 34,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "Sequence[int]",
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "max_vocab_size": [
                    "int",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "make_array": {
            "name": "make_array",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "int",
                    "Optional[BaseException]",
                    "Optional[str]"
                ],
                "vocab": [
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "Optional[bool]",
                    "Optional[Sequence[str]]",
                    "str"
                ],
                "add_eos": [
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "transform_to_array": {
            "name": "transform_to_array",
            "location": 55,
            "return": [
                "list[tuple[]]",
                "list[]",
                "str",
                "dict",
                "List[str]",
                "float",
                "int"
            ],
            "arguments": {
                "dataset": [
                    "list[list[int]]",
                    "List[List[int]]",
                    "list[list[]]",
                    "str",
                    "int",
                    "bool",
                    "List[list]",
                    "numpy.array"
                ],
                "vocab": [
                    "list[list[int]]",
                    "int",
                    "List[List[int]]",
                    "str",
                    "list[list[]]",
                    "bool",
                    "List[list]",
                    "numpy.array"
                ],
                "with_label": [
                    "bool",
                    "numpy.array",
                    "Optional[Set[str]]"
                ]
            }
        },
        "convert_seq": {
            "name": "convert_seq",
            "location": 66,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Optional[bytes]",
                "dict",
                "float",
                "bool"
            ],
            "arguments": {
                "batch": [
                    "numpy.ndarray",
                    "int"
                ],
                "device": [
                    "bool",
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "Optional[Set[str]]",
                    "typing.Mapping",
                    "Sequence[str]",
                    "set[str]",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Sequence[Tuple[str, int]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "numpy.array",
                    "typing.Sequence[tuple[typing.Union[str,int]]]"
                ],
                "with_label": [
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "Optional[Set[str]]",
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]",
                    "numpy.array"
                ]
            }
        },
        "convert_seq.to_device_batch": {
            "name": "to_device_batch",
            "location": 67,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "batch": [
                    "float",
                    "numpy.ndarray",
                    "int"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/sentiment-analysis/chainer_utils/__init__.py": {},
    "treasure-boxes-master/machine-learning-box/sentiment-analysis/py_scripts/data.py": {
        "convert_directory_to_csv": {
            "name": "convert_directory_to_csv",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "polarity": [
                    "str"
                ],
                "out_file_path": [
                    "str"
                ]
            }
        },
        "convert_dataset": {
            "name": "convert_dataset",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "list[str]",
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "load_directory_data": {
            "name": "load_directory_data",
            "location": 37,
            "return": [
                "int",
                "bytes",
                "Mapping[str, Any]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "load_dataset": {
            "name": "load_dataset",
            "location": 52,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "upload_dataset": {
            "name": "upload_dataset",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "database": [
                    "str"
                ],
                "train_table": [
                    "str",
                    "Union[str, int]",
                    "int"
                ],
                "test_table": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/machine-learning-box/sentiment-analysis/py_scripts/predict.py": {
        "run": {
            "name": "run",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "input_table": [
                    "typing.Text",
                    "str",
                    "type",
                    "bytes",
                    "Dict[str, Any]",
                    "T",
                    "boto3.resources.base.ServiceResource"
                ],
                "database": [
                    "typing.Text"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/sentiment-analysis/py_scripts/predict_chainer.py": {
        "setup_model": {
            "name": "setup_model",
            "location": 29,
            "return": [
                "tuple[TextClassifier]"
            ],
            "arguments": {
                "device": [
                    "pandas.DataFrame"
                ],
                "model_setup": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "run_batch": {
            "name": "run_batch",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "bool",
                    "Any",
                    "typing.Any"
                ],
                "input_table": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "output_table": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "int"
                ],
                "device": [
                    "bool",
                    "str",
                    "list",
                    "list[]"
                ],
                "model": [
                    "bool",
                    "str",
                    "list",
                    "list[]"
                ],
                "vocab": [
                    "bool",
                    "str",
                    "list",
                    "list[]"
                ],
                "setup": [
                    "str",
                    "bool",
                    "int"
                ],
                "batchsize": [
                    "int",
                    "str",
                    "bool",
                    "BoundMethod[Callable(logging.Logger.debug)[Any, Any], logging.Logger]"
                ]
            }
        },
        "download_model": {
            "name": "download_model",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "predict_chainer": {
            "name": "predict_chainer",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "bool",
                    "None",
                    "dict[str, typing.Any]",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]"
                ],
                "input_table": [
                    "str",
                    "bool",
                    "None",
                    "dict[str, typing.Any]",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]"
                ],
                "output_table": [
                    "str",
                    "bool",
                    "None",
                    "dict[str, typing.Any]",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]"
                ],
                "device_num": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "run_batch.predict_batch": {
            "name": "predict_batch",
            "location": 59,
            "return": [
                "tuple[]",
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "words_batch": [
                    "int",
                    "list"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/sentiment-analysis/py_scripts/sentiment.py": {
        "_upload_model": {
            "name": "_upload_model",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "str"
                ],
                "model_file": [
                    "typing.Text",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "with_aws": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Iterable[int]"
                ],
                "database": [
                    "typing.Text",
                    "bool",
                    "str",
                    "dict"
                ],
                "train_table": [
                    "typing.Text",
                    "str",
                    "dict",
                    "Optional[int]"
                ],
                "test_table": [
                    "typing.Text",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/skyfox/pyscripts/ingest.py": {
        "classification_dataset": {
            "name": "classification_dataset",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "bool",
                    "str",
                    "List[Tuple[str, int]]",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "regression_dataset": {
            "name": "regression_dataset",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "bool",
                    "str",
                    "List[Tuple[str, int]]",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "timeseries1_dataset": {
            "name": "timeseries1_dataset",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "bool",
                    "str",
                    "List[Tuple[str, int]]",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "timeseries2_dataset": {
            "name": "timeseries2_dataset",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "bool",
                    "str",
                    "List[Tuple[str, int]]",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "treasure-boxes-master/machine-learning-box/skyfox/pyscripts/skyfox.py": {
        "Skyfox.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Skyfox.get_token": {
            "name": "get_token",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Skyfox.upload": {
            "name": "upload",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ],
                "job_id": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "Skyfox._check_completed_uploading_data": {
            "name": "_check_completed_uploading_data",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "seconds": [
                    "int",
                    "str"
                ]
            }
        },
        "Skyfox.train": {
            "name": "train",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "target_variable": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "transformer_id": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "algorithm_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Skyfox._check_completed_building_model": {
            "name": "_check_completed_building_model",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "seconds": [
                    "int",
                    "str"
                ]
            }
        },
        "Skyfox.predict": {
            "name": "predict",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data_id": [
                    "Optional[int]",
                    "int",
                    "List[Optional[str]]",
                    "None",
                    "str",
                    "Set[Tuple[int, int]]",
                    "list[typing.Optional[str]]",
                    "Optional[str]",
                    "set[tuple[typing.Union[int,int]]]"
                ],
                "model_id": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "dest_database": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[List[\"custom_index\"]]",
                    "list[\"custom_index\"]",
                    "None"
                ],
                "dest_table": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[List[\"custom_index\"]]",
                    "list[\"custom_index\"]",
                    "None"
                ]
            }
        },
        "Skyfox._check_completed_predicting": {
            "name": "_check_completed_predicting",
            "location": 184,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "model_id": [
                    "str",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "prediction_id": [
                    "str",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "seconds": [
                    "int",
                    "str",
                    "List[None]",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "treasure-boxes-master/scenarios/kill_wf_attempt/py_script/loop.py": {
        "loop": {
            "name": "loop",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/tool-box/audit-log-detection-samples/py/td.py": {
        "get_users": {
            "name": "get_users",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/tool-box/get-table-row-counts/get_row_count.py": {
        "get_row_count": {
            "name": "get_row_count",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dest_db": [
                    "bool",
                    "list",
                    "list[]"
                ],
                "dest_table": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "treasure-boxes-master/tool-box/get_cdp_segments/getcdpsegments.py": {
        "uploadDataToTD": {
            "name": "uploadDataToTD",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "td_endpoint": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "td_api_key": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "dataframe": [
                    "bool",
                    "Callable[[], int]",
                    "str",
                    "typing.Callable[[], int]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "td_database": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "td_table": [
                    "bool",
                    "Callable[[], int]",
                    "str",
                    "typing.Callable[[], int]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "getSegmentLists": {
            "name": "getSegmentLists",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/tool-box/job-monitoring/job-monitoring.py": {
        "get_job_list": {
            "name": "get_job_list",
            "location": 16,
            "return": [
                "list[dict[typing.Text, typing.Union[int,str]]]",
                "bytes",
                "Dict[str, Any]",
                "Callable",
                "Callable[[str], T]",
                "str",
                "pandas.DataFrame",
                "Optional[str]"
            ],
            "arguments": {
                "status": [
                    "int"
                ],
                "max_num": [
                    "int"
                ]
            }
        },
        "bulk_load": {
            "name": "bulk_load",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "list[]",
                    "bool",
                    "dict[str, typing.Any]",
                    "list",
                    "Dict[str, Any]"
                ],
                "database": [
                    "bool",
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "table": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "monitoring": {
            "name": "monitoring",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "table": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "treasure-boxes-master/tool-box/job-monitoring/job-monitoring/job-monitoring.py": {
        "get_job_list": {
            "name": "get_job_list",
            "location": 16,
            "return": [
                "list[dict[typing.Text, typing.Union[int,str]]]",
                "bytes",
                "Dict[str, Any]",
                "Callable",
                "Callable[[str], T]",
                "str",
                "pandas.DataFrame",
                "Optional[str]"
            ],
            "arguments": {
                "status": [
                    "int"
                ],
                "max_num": [
                    "int"
                ]
            }
        },
        "bulk_load": {
            "name": "bulk_load",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "list[]",
                    "bool",
                    "dict[str, typing.Any]",
                    "list",
                    "Dict[str, Any]"
                ],
                "database": [
                    "bool",
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "table": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "monitoring": {
            "name": "monitoring",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "table": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "treasure-boxes-master/tool-box/ps_backup_restore/migrate_segment_folder.py": {
        "execute": {
            "name": "execute",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/tool-box/ps_backup_restore/python_script/restore_main.py": {
        "create_folder": {
            "name": "create_folder",
            "location": 73,
            "return": [
                "None",
                "str",
                "int",
                "Union['KspNativeControl', int]"
            ],
            "arguments": {
                "p_id": [
                    "str",
                    "int"
                ],
                "c_id": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "create_folder_struct": {
            "name": "create_folder_struct",
            "location": 84,
            "return": [
                "None",
                "str",
                "pandas.Series",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "p_id": [
                    "str",
                    "int"
                ],
                "c_id": [
                    "str",
                    "bytes",
                    "Dict[str, Optional[Any]]",
                    "float",
                    "dict[str, typing.Union[typing.Any,None]]",
                    "Dict[str, bytes]",
                    "dict[str, bytes]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "create_entity": {
            "name": "create_entity",
            "location": 99,
            "return": [
                "None",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "c_id": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "treasure-boxes-master/tool-box/s3_presigned/py_scripts/s3_example.py": {
        "generate_presigned_url": {
            "name": "generate_presigned_url",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "int"
                ],
                "region_name": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ],
                "s3_path": [
                    "str",
                    "int"
                ],
                "expires_in": [
                    "str",
                    "int"
                ]
            }
        }
    }
}
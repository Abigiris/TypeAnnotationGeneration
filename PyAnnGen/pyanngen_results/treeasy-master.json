{
    "treeasy-master/test/test_classify.py": {
        "test_classify_tree_id3": {
            "name": "test_classify_tree_id3",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "treeasy-master/test/test_entropy.py": {
        "test_entropy": {
            "name": "test_entropy",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "snapshot": []
            }
        },
        "test_collection_entropy": {
            "name": "test_collection_entropy",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "snapshot": []
            }
        },
        "test_collection_entropy_call": {
            "name": "test_collection_entropy_call",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "entropy": [],
                "snapshot": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_attribute_information_gain": {
            "name": "test_attribute_information_gain",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "snapshot": []
            }
        },
        "test_target_collection_information_gain_call": {
            "name": "test_target_collection_information_gain_call",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "attribute_information_gain": []
            }
        },
        "test_target_collection_information_gain": {
            "name": "test_target_collection_information_gain",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "snapshot": []
            }
        }
    },
    "treeasy-master/test/test_trees.py": {
        "test_tree_id3": {
            "name": "test_tree_id3",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "snapshot": []
            }
        }
    },
    "treeasy-master/test/__init__.py": {},
    "treeasy-master/test/snapshots/snap_test_entropy.py": {},
    "treeasy-master/test/snapshots/snap_test_trees.py": {},
    "treeasy-master/test/snapshots/__init__.py": {},
    "treeasy-master/treeasy/classify.py": {
        "classify": {
            "name": "classify",
            "location": 6,
            "return": [
                "list",
                "IO[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "tree": [
                    "treeasy.types.Tree"
                ],
                "instance": [
                    "dict"
                ]
            }
        }
    },
    "treeasy-master/treeasy/entropy.py": {
        "collection_entropy": {
            "name": "collection_entropy",
            "location": 5,
            "return": [
                "float"
            ],
            "arguments": {
                "collection": [
                    "List[int]"
                ]
            }
        },
        "entropy": {
            "name": "entropy",
            "location": 15,
            "return": [
                "float"
            ],
            "arguments": {
                "probabilities": [
                    "List[float]"
                ],
                "log": [
                    "bool",
                    "int",
                    "str",
                    "Optional[int]",
                    "Union[int, str]"
                ]
            }
        },
        "target_collection_information_gain": {
            "name": "target_collection_information_gain",
            "location": 34,
            "return": [
                "float"
            ],
            "arguments": {
                "target_collection": [
                    "List[int]"
                ],
                "attribute_subsets": [
                    "List[List[int]]"
                ]
            }
        },
        "attribute_information_gain": {
            "name": "attribute_information_gain",
            "location": 45,
            "return": [
                "float"
            ],
            "arguments": {
                "target_entropy": [
                    "float"
                ],
                "target_instance_size": [
                    "int"
                ],
                "attribute_subsets": [
                    "List[List[int]]"
                ]
            }
        }
    },
    "treeasy-master/treeasy/trees.py": {
        "tree_id3": {
            "name": "tree_id3",
            "location": 7,
            "return": [
                "treeasy.types.Tree"
            ],
            "arguments": {
                "examples": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "target_attribute": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "attributes": [
                    "int",
                    "str",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "get_max_information_gain_attribute": {
            "name": "get_max_information_gain_attribute",
            "location": 67,
            "return": [
                "str",
                "list[]",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "examples": [
                    "int",
                    "str",
                    "dict[str, int]",
                    "bool",
                    "Dict[str, int]"
                ],
                "attributes": [
                    "int",
                    "str",
                    "dict[str, int]",
                    "bool",
                    "Dict[str, int]"
                ],
                "target_attribute": [
                    "int",
                    "str",
                    "dict[str, int]",
                    "bool",
                    "Dict[str, int]"
                ],
                "target_attribute_entropy": [
                    "int",
                    "str",
                    "dict[str, int]",
                    "bool",
                    "Dict[str, int]"
                ],
                "target_instance_size": [
                    "int",
                    "str",
                    "dict[str, int]",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "get_attribute_gains": {
            "name": "get_attribute_gains",
            "location": 84,
            "return": [
                "Dict[(Any, float)]"
            ],
            "arguments": {
                "examples": [
                    "bool",
                    "int",
                    "list[int]",
                    "Optional[List[int]]",
                    "None"
                ],
                "attributes": [
                    "bool",
                    "Optional[int]",
                    "starfish.types.Number"
                ],
                "target_attribute": [
                    "bool",
                    "int",
                    "list[int]",
                    "Optional[List[int]]",
                    "None"
                ],
                "target_attribute_entropy": [
                    "int",
                    "float",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Optional[int]",
                    "None"
                ],
                "target_instance_size": [
                    "int",
                    "float",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "get_attribute_subset_values": {
            "name": "get_attribute_subset_values",
            "location": 105,
            "return": [
                "list"
            ],
            "arguments": {
                "examples": [
                    "str"
                ],
                "attribute": [
                    "str"
                ],
                "target_attribute": [
                    "List[List[int]]",
                    "int",
                    "list[list[int]]",
                    "list",
                    "list[]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "get_attribute_value_dataframe": {
            "name": "get_attribute_value_dataframe",
            "location": 116,
            "return": [
                "Dict[str, int]",
                "float",
                "int",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "original_df": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str, Set[str]]"
                ],
                "column": [
                    "int",
                    "str",
                    "Dict[str, Set[str]]",
                    "bytes"
                ],
                "value": [
                    "int",
                    "str",
                    "bytes",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "get_column_values_count": {
            "name": "get_column_values_count",
            "location": 120,
            "return": [
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "column": [
                    "bool",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "test_tree_id3_tennis": {
            "name": "test_tree_id3_tennis",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tree_id3_cars": {
            "name": "test_tree_id3_cars",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tree_id3_iris": {
            "name": "test_tree_id3_iris",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "treeasy-master/treeasy/types.py": {
        "Tree.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "Tree.set_children": {
            "name": "set_children",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "bool",
                    "float"
                ]
            }
        },
        "Tree.get_tree_dict": {
            "name": "get_tree_dict",
            "location": 12,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "treeasy-master/treeasy/__init__.py": {}
}
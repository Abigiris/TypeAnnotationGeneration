{
    "trio-typing-master/conftest.py": {},
    "trio-typing-master/setup.py": {},
    "trio-typing-master/trio_typing/plugin.py": {
        "args_invariant_decorator_callback": {
            "name": "args_invariant_decorator_callback",
            "location": 62,
            "return": [
                "mypy.errors.Errors"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.FunctionContext",
                    "discord.excommands.Context",
                    "FunctionContext",
                    "MethodContext",
                    "mypy.plugin.MethodSigContext",
                    "trezor.wire.Context"
                ]
            }
        },
        "decode_agen_types_from_return_type": {
            "name": "decode_agen_types_from_return_type",
            "location": 82,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.FunctionContext",
                    "discord.excommands.Context",
                    "str",
                    "mypy.types.Type",
                    "mypy.nodes.Context"
                ],
                "original_async_return_type": [
                    "mypy.types.Type",
                    "trezor.wire.Context",
                    "mypy.plugin.AnalyzeTypeContext",
                    "Context"
                ]
            }
        },
        "async_generator_callback": {
            "name": "async_generator_callback",
            "location": 168,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.FunctionContext",
                    "mypy.plugin.ClassDefContext",
                    "discord.excommands.Context",
                    "mypy.plugin.AnalyzeTypeContext",
                    "click.Context"
                ]
            }
        },
        "decode_enclosing_agen_types": {
            "name": "decode_enclosing_agen_types",
            "location": 207,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.FunctionContext",
                    "discord.excommands.Context",
                    "mypy.plugin.AttributeContext",
                    "mypy.plugin.MethodContext",
                    "Context"
                ]
            }
        },
        "yield_callback": {
            "name": "yield_callback",
            "location": 249,
            "return": [
                "mypy.types.Type",
                "mypy.nodes.FuncItem",
                "mypy.nodes.ClassDef",
                "mypy.nodes.Expression"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.FunctionContext",
                    "FunctionContext",
                    "mypy.plugin.MethodContext"
                ]
            }
        },
        "yield_from_callback": {
            "name": "yield_from_callback",
            "location": 275,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.MethodContext",
                    "mypy.plugin.FunctionContext"
                ]
            }
        },
        "started_callback": {
            "name": "started_callback",
            "location": 326,
            "return": [
                "Optional[mypy.types.Type]",
                "str",
                "int"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.ClassDefContext",
                    "Context",
                    "mypy.plugin.FunctionContext",
                    "discord.excommands.Context",
                    "str"
                ]
            }
        },
        "takes_callable_and_args_callback": {
            "name": "takes_callable_and_args_callback",
            "location": 345,
            "return": [
                "mypy.nodes.TypeInfo",
                "mypy.types.Type",
                "str",
                "int"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.FunctionContext",
                    "FunctionContext",
                    "Optional[str]",
                    "trezor.wire.Context",
                    "discord.excommands.Context"
                ]
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 514,
            "return": [
                "typing.Type[TrioPlugin]"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "TrioPlugin.get_function_hook": {
            "name": "get_function_hook",
            "location": 36,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "TrioPlugin.get_method_hook": {
            "name": "get_method_hook",
            "location": 54,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        }
    },
    "trio-typing-master/trio_typing/_version.py": {},
    "trio-typing-master/trio_typing/__init__.py": {
        "takes_callable_and_args": {
            "name": "takes_callable_and_args",
            "location": 26,
            "return": [
                "Dict[str,dict[str,int]]",
                "int",
                "str",
                "float",
                "Iterable[Iterable[T]]"
            ],
            "arguments": {
                "fn": [
                    "Dict[str,Dict[str,int]]",
                    "str",
                    "Dict[str,dict[str,int]]"
                ]
            }
        }
    },
    "trio-typing-master/trio_typing/_tests/datadriven.py": {
        "ConfigModule.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatchedNodeMeta.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "mypy.types.Type",
                "mypy.nodes.Var"
            ],
            "arguments": {
                "cls": [
                    "PatchedNodeMeta"
                ]
            }
        }
    },
    "trio-typing-master/trio_typing/_tests/test_runtime.py": {
        "test_runtime": {
            "name": "test_runtime",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "trio-typing-master/trio_typing/_tests/test_typecheck.py": {
        "test_typecheck_dummy": {
            "name": "test_typecheck_dummy",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TrioTestSuite.run_case": {
            "name": "run_case",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testcase": [
                    "Sequence[str]",
                    "mypy.tesdata.DataDrivenTestCase",
                    "str",
                    "bytes",
                    "IO"
                ]
            }
        }
    },
    "trio-typing-master/trio_typing/_tests/__init__.py": {}
}
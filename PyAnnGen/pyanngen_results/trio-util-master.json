{
    "trio-util-master/setup.py": {},
    "trio-util-master/docs/conf.py": {},
    "trio-util-master/src/trio_util/_async_bool.py": {
        "AsyncBool.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "trio-util-master/src/trio_util/_async_itertools.py": {
        "azip": {
            "name": "azip",
            "location": 26,
            "return": [
                "AsyncGenerator[(Tuple[(None, ...)], Any)]"
            ],
            "arguments": {}
        },
        "azip_longest": {
            "name": "azip_longest",
            "location": 31,
            "return": [
                "AsyncGenerator[(Tuple[(_T0, ...)], Any)]"
            ],
            "arguments": {}
        }
    },
    "trio-util-master/src/trio_util/_async_value.py": {
        "_ANY_TRANSITION": {
            "name": "_ANY_TRANSITION",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [],
                "old_value": []
            }
        },
        "_ANY_VALUE": {
            "name": "_ANY_VALUE",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "_WaitQueue.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WaitQueue.unpark_all": {
            "name": "unpark_all",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Result.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ValueWrapper.__new__": {
            "name": "__new__",
            "location": 77,
            "return": [
                "Union[(_ValueWrapper, _T0)]"
            ],
            "arguments": {
                "cls": [],
                "value_or_predicate": [
                    "_T0"
                ]
            }
        },
        "_ValueWrapper.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ValueWrapper.__hash__": {
            "name": "__hash__",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ValueWrapper.__eq__": {
            "name": "__eq__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ValueWrapper.__call__": {
            "name": "__call__",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AsyncValue.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "AsyncValue.__repr__": {
            "name": "__repr__",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncValue.value": {
            "name": "value",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AsyncValue.open_transform": {
            "name": "open_transform",
            "location": 327,
            "return": [
                "ContextManager[AsyncValue[T_OUT]]"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable[([T], T_OUT)]"
                ]
            }
        },
        "AsyncValue._open_transform": {
            "name": "_open_transform",
            "location": 343,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "_WaitQueue.park.abort_fn": {
            "name": "abort_fn",
            "location": 30,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "trio-util-master/src/trio_util/_awaitables.py": {},
    "trio-util-master/src/trio_util/_cancel_scopes.py": {},
    "trio-util-master/src/trio_util/_compose_values.py": {
        "_IDENTITY": {
            "name": "_IDENTITY",
            "location": 9,
            "return": [
                "_T0"
            ],
            "arguments": {
                "x": [
                    "_T0"
                ]
            }
        },
        "compose_values": {
            "name": "compose_values",
            "location": 21,
            "return": [
                "ContextManager[trio_util._async_value.AsyncValue[T_OUT]]"
            ],
            "arguments": {}
        },
        "_compose_values": {
            "name": "_compose_values",
            "location": 69,
            "return": [
                "",
                "typing.Generator[AsyncValue]"
            ],
            "arguments": {
                "_transform_": [
                    "str",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ],
                "value_map": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Optional[dict]"
                ]
            }
        },
        "_compose_values._update_composite": {
            "name": "_update_composite",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "val": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "trio-util-master/src/trio_util/_exceptions.py": {
        "_async_friendly_contextmanager": {
            "name": "_async_friendly_contextmanager",
            "location": 30,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "defer_to_cancelled": {
            "name": "defer_to_cancelled",
            "location": 41,
            "return": [
                "_AsyncFriendlyGeneratorContextManager"
            ],
            "arguments": {}
        },
        "multi_error_defer_to": {
            "name": "multi_error_defer_to",
            "location": 75,
            "return": [
                "_AsyncFriendlyGeneratorContextManager"
            ],
            "arguments": {}
        },
        "_AsyncFriendlyGeneratorContextManager.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_async_friendly_contextmanager.helper": {
            "name": "helper",
            "location": 36,
            "return": [
                "_AsyncFriendlyGeneratorContextManager",
                "float",
                "int",
                "Optional[bool]",
                "Optional[int]",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "_AsyncFriendlyGeneratorContextManager.__call__.inner": {
            "name": "inner",
            "location": 24,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "trio-util-master/src/trio_util/_iterators.py": {
        "iter_move_on_after.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float"
                ],
                "ait": [
                    "int",
                    "float"
                ]
            }
        },
        "iter_fail_after.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float"
                ],
                "ait": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "trio-util-master/src/trio_util/_periodic.py": {},
    "trio-util-master/src/trio_util/_ref_counted_default_dict.py": {
        "_RefCountedDefaultDict.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RefCountedDefaultDict.open_ref": {
            "name": "open_ref",
            "location": 13,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "trio-util-master/src/trio_util/_repeated_event.py": {
        "RepeatedEvent.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepeatedEvent.set": {
            "name": "set",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "trio-util-master/src/trio_util/_task_stats.py": {
        "TaskStats.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskStats.task_scheduled": {
            "name": "task_scheduled",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TaskStats.before_task_step": {
            "name": "before_task_step",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "list",
                    "list[]"
                ]
            }
        },
        "TaskStats.after_task_step": {
            "name": "after_task_step",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TaskStats.after_run": {
            "name": "after_run",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "trio-util-master/src/trio_util/_trio_async_generator.py": {
        "trio_async_generator": {
            "name": "trio_async_generator",
            "location": 9,
            "return": [
                "Callable[(..., contextlib._AsyncGeneratorContextManager)]"
            ],
            "arguments": {
                "wrapped": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "trio-util-master/src/trio_util/_version.py": {},
    "trio-util-master/src/trio_util/__init__.py": {
        "_metadata_fix": {
            "name": "_metadata_fix",
            "location": 15,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "trio-util-master/tests/test_async_bool.py": {},
    "trio-util-master/tests/test_async_itertools.py": {},
    "trio-util-master/tests/test_async_value.py": {
        "test_repr": {
            "name": "test_repr",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_always_false": {
            "name": "_always_false",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "_even": {
            "name": "_even",
            "location": 178,
            "return": [
                "bool",
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "_odd": {
            "name": "_odd",
            "location": 182,
            "return": [
                "bool",
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "test_open_transform": {
            "name": "test_open_transform",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "trio-util-master/tests/test_awaitables.py": {},
    "trio-util-master/tests/test_cancel_scopes.py": {},
    "trio-util-master/tests/test_compose_values.py": {},
    "trio-util-master/tests/test_exceptions.py": {
        "_cancelled": {
            "name": "_cancelled",
            "location": 7,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {}
        },
        "test_defer_to_cancelled_decorating_sync.foo": {
            "name": "foo",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "trio-util-master/tests/test_iterators.py": {},
    "trio-util-master/tests/test_periodic.py": {},
    "trio-util-master/tests/test_repeated_event.py": {},
    "trio-util-master/tests/test_task_stats.py": {
        "test_task_stats": {
            "name": "test_task_stats",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "bool",
                    "Optional[Union[str, Any]]",
                    "typing.Any",
                    "None"
                ],
                "autojump_clock": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "trio-util-master/tests/test_trio_async_generator.py": {},
    "trio-util-master/tests/__init__.py": {}
}
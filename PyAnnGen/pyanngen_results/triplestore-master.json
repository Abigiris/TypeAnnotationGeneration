{
    "triplestore-master/tests/query_test.py": {
        "test_clause_is_any_true": {
            "name": "test_clause_is_any_true",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clause_is_any_false": {
            "name": "test_clause_is_any_false",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_is_any_true": {
            "name": "test_query_is_any_true",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_is_any_false": {
            "name": "test_query_is_any_false",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "triplestore-master/tests/store/store_test.py": {
        "conn": {
            "name": "conn",
            "location": 24,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "metafunc": [
                    "int"
                ]
            }
        },
        "store": {
            "name": "store",
            "location": 46,
            "return": [
                "typing.Generator[MemoryStore]",
                "typing.Generator[SqliteStore]"
            ],
            "arguments": {
                "request": [
                    "Tuple[int]"
                ],
                "conn": [
                    "Exception",
                    "str"
                ]
            }
        },
        "test_count": {
            "name": "test_count",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "store": [
                    "Dict"
                ]
            }
        },
        "test_insert": {
            "name": "test_insert",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "store": [
                    "str"
                ]
            }
        },
        "test_duplicate_insert": {
            "name": "test_duplicate_insert",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "store": [
                    "bool"
                ]
            }
        },
        "test_any_query": {
            "name": "test_any_query",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "store": [
                    "dict"
                ]
            }
        },
        "test_eq_query": {
            "name": "test_eq_query",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "store": [
                    "dict"
                ]
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "store": []
            }
        }
    },
    "triplestore-master/triplestore/exceptions.py": {},
    "triplestore-master/triplestore/query.py": {
        "Clause.is_any": {
            "name": "is_any",
            "location": 17,
            "return": [
                "bool",
                "Type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.is_any": {
            "name": "is_any",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "triplestore-master/triplestore/triple.py": {},
    "triplestore-master/triplestore/__init__.py": {},
    "triplestore-master/triplestore/store/base.py": {
        "Store.insert": {
            "name": "insert",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "triple": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Store.query": {
            "name": "query",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "triplestore.query.Query",
                    "None",
                    "Optional[int]",
                    "Dict",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "Store.delete": {
            "name": "delete",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "triplestore.query.Query",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "Store.count": {
            "name": "count",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "triplestore-master/triplestore/store/memory.py": {
        "is_match": {
            "name": "is_match",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "triple": [
                    "Type[T]",
                    "Type",
                    "str",
                    "Optional[int]",
                    "int",
                    "None",
                    "Type[AbstractIntegrationConversation]",
                    "Union[AsyncIterable[Any],Iterable[Any]]",
                    "collections.abc.AsyncIterable",
                    "Iterable[Any]"
                ],
                "query": [
                    "Type[T]",
                    "Type",
                    "str",
                    "Optional[int]",
                    "int",
                    "None",
                    "Type[AbstractIntegrationConversation]",
                    "Union[AsyncIterable[Any],Iterable[Any]]",
                    "collections.abc.AsyncIterable",
                    "Iterable[Any]"
                ]
            }
        },
        "match_clause": {
            "name": "match_clause",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "actual": [
                    "Dict"
                ],
                "clause": [
                    "Callable"
                ]
            }
        },
        "MemoryStore.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryStore.insert": {
            "name": "insert",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "triple": [
                    "Callable",
                    "Dict[str,Any]",
                    "str",
                    "base.ConfigOptions",
                    "Tuple",
                    "Union[tuple,list]",
                    "List"
                ]
            }
        },
        "MemoryStore.query": {
            "name": "query",
            "location": 21,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "set",
                    "Iterator[T]"
                ]
            }
        },
        "MemoryStore.delete": {
            "name": "delete",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "List[int]",
                    "List[OrderedDict]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "MemoryStore.count": {
            "name": "count",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "triplestore-master/triplestore/store/sqlite.py": {
        "where_clause": {
            "name": "where_clause",
            "location": 84,
            "return": [
                "Tuple[(str, list)]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "query.Query[T]",
                    "Query"
                ]
            }
        },
        "clause_to_sql": {
            "name": "clause_to_sql",
            "location": 114,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "clause": [
                    "str"
                ]
            }
        },
        "SqliteStore.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SqliteStore.insert": {
            "name": "insert",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "triple": [
                    "str",
                    "Dict",
                    "Tuple"
                ]
            }
        },
        "SqliteStore.query": {
            "name": "query",
            "location": 44,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "triplestore.query.Query",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SqliteStore.delete": {
            "name": "delete",
            "location": 58,
            "return": [
                "bool",
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "triplestore.query.Query"
                ]
            }
        },
        "SqliteStore.count": {
            "name": "count",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteStore.setup": {
            "name": "setup",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "triplestore-master/triplestore/store/__init___.py": {}
}
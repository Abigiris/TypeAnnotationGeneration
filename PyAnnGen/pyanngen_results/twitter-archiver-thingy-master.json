{
    "twitter-archiver-thingy-master/cli.py": {
        "cli": {
            "name": "cli",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_api": {
            "name": "test_api",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "show_tweets": {
            "name": "show_tweets",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "iterator": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "show_thread": {
            "name": "show_thread",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str,Union[str,int]]"
                ]
            }
        },
        "show_favorites": {
            "name": "show_favorites",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "older": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "forever": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "show_timeline": {
            "name": "show_timeline",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "screen_name": [
                    "bool",
                    "str",
                    "Exception"
                ],
                "older": [
                    "bool",
                    "str",
                    "Exception"
                ],
                "forever": [
                    "bool",
                    "str",
                    "Exception"
                ]
            }
        },
        "show_cached_tweets": {
            "name": "show_cached_tweets",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "grep": {
            "name": "grep",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ]
            }
        }
    },
    "twitter-archiver-thingy-master/tests/test_mypy.py": {
        "test_mypy": {
            "name": "test_mypy",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "twitter-archiver-thingy-master/tests/test_session.py": {
        "test_statusstats_as_params_works": {
            "name": "test_statusstats_as_params_works",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_statusstats_update_works": {
            "name": "test_statusstats_update_works",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_statusstats_from_cache_works": {
            "name": "test_statusstats_from_cache_works",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "twitter-archiver-thingy-master/tests/__init__.py": {},
    "twitter-archiver-thingy-master/twitblog/cache.py": {
        "Cache.get": {
            "name": "get",
            "location": 9,
            "return": [
                "Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Cache.has": {
            "name": "has",
            "location": 13,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float,int]",
                    "float",
                    "abc.graph.GraphKeyType",
                    "int"
                ]
            }
        },
        "Cache.set": {
            "name": "set",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "bytes",
                    "int",
                    "T",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[int]",
                    "bytes",
                    "int",
                    "T",
                    "None"
                ]
            }
        },
        "Cache.iterkeys": {
            "name": "iterkeys",
            "location": 21,
            "return": [
                "Iterator[str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.__contains__": {
            "name": "__contains__",
            "location": 24,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "List[dict[str,Any]]",
                    "Iterable",
                    "Iterable[str]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "Cache.__setitem__": {
            "name": "__setitem__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "Cache.__getitem__": {
            "name": "__getitem__",
            "location": 30,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "InMemoryCache.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryCache.get": {
            "name": "get",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "InMemoryCache.has": {
            "name": "has",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "InMemoryCache.set": {
            "name": "set",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "InMemoryCache.iterkeys": {
            "name": "iterkeys",
            "location": 47,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiskCache.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "DiskCache._keypath": {
            "name": "_keypath",
            "location": 58,
            "return": [
                "str",
                "Union[str, pathlib.Path]",
                "TextIO"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DiskCache.get": {
            "name": "get",
            "location": 61,
            "return": [
                "None",
                "Optional[str]",
                "Union[None,List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "DiskCache.has": {
            "name": "has",
            "location": 67,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "Tuple"
                ]
            }
        },
        "DiskCache.set": {
            "name": "set",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DiskCache.iterkeys": {
            "name": "iterkeys",
            "location": 77,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "twitter-archiver-thingy-master/twitblog/config.py": {
        "get_config": {
            "name": "get_config",
            "location": 18,
            "return": [
                "configparser.SectionProxy"
            ],
            "arguments": {}
        },
        "get_cache": {
            "name": "get_cache",
            "location": 24,
            "return": [
                "twitblog.cache.DiskCache"
            ],
            "arguments": {}
        },
        "get_session": {
            "name": "get_session",
            "location": 28,
            "return": [
                "twitblog.session.TwitterSession"
            ],
            "arguments": {}
        }
    },
    "twitter-archiver-thingy-master/twitblog/session.py": {
        "repeat_until_exhausted": {
            "name": "repeat_until_exhausted",
            "location": 20,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "maybe_repeat_until_exhausted": {
            "name": "maybe_repeat_until_exhausted",
            "location": 31,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool"
                ],
                "forever": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "StatusStats.empty": {
            "name": "empty",
            "location": 42,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "cls": [
                    "Optional[int]",
                    "int",
                    "Callable[...,T]",
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[Dict]",
                    "Optional[Mapping[str,Any]]",
                    "Dict",
                    "Mapping"
                ]
            }
        },
        "StatusStats.from_cache": {
            "name": "from_cache",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "bool"
                ],
                "cache_entry": [
                    "Dict[str,Any]",
                    "Optional[int]",
                    "Dict[Any,bool]",
                    "int",
                    "Optional[dict]",
                    "None",
                    "Dict"
                ]
            }
        },
        "StatusStats.update": {
            "name": "update",
            "location": 51,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Callable[..., None]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "id_str": [
                    "str",
                    "int"
                ]
            }
        },
        "StatusStats.as_params": {
            "name": "as_params",
            "location": 63,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "older": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict",
                    "List[Optional[C]]",
                    "List[Optional[Cell]]",
                    "Iterable[Dict]"
                ]
            }
        },
        "TwitterSession.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_key": [
                    "str"
                ],
                "client_secret": [
                    "str"
                ],
                "resource_owner_key": [
                    "str"
                ],
                "resource_owner_secret": [
                    "str"
                ],
                "cache": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[cache.Cache]",
                    "Dict[str,str]"
                ]
            }
        },
        "TwitterSession.get_tweet": {
            "name": "get_tweet",
            "location": 86,
            "return": [
                "twitblog.tweet.Tweet"
            ],
            "arguments": {
                "self": [],
                "status_id": [
                    "str",
                    "int",
                    "Dict",
                    "Dict[str,Any]",
                    "Union[int,str]"
                ]
            }
        },
        "TwitterSession.iter_reply": {
            "name": "iter_reply",
            "location": 94,
            "return": [
                "Generator[(twitblog.tweet.Tweet, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "status_id": [
                    "int",
                    "Optional[int]",
                    "List[int]",
                    "str",
                    "None"
                ]
            }
        },
        "TwitterSession._iter_timeline_once": {
            "name": "_iter_timeline_once",
            "location": 100,
            "return": [
                "Generator[(twitblog.tweet.Tweet, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "screen_name": [
                    "str",
                    "List",
                    "bool",
                    "List[str]"
                ],
                "older": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TwitterSession.iter_timeline": {
            "name": "iter_timeline",
            "location": 120,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "screen_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "older": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "forever": [
                    "bool",
                    "str",
                    "int",
                    "List[dict]"
                ]
            }
        },
        "TwitterSession._iter_favorites_once": {
            "name": "_iter_favorites_once",
            "location": 127,
            "return": [
                "Generator[(twitblog.tweet.Tweet, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "older": [
                    "int",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "TwitterSession.iter_favorites": {
            "name": "iter_favorites",
            "location": 144,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "older": [
                    "bool",
                    "int",
                    "Set[str]"
                ],
                "forever": [
                    "bool",
                    "int",
                    "Tuple[int]",
                    "Tuple[float,float,float,float]",
                    "str"
                ]
            }
        }
    },
    "twitter-archiver-thingy-master/twitblog/tweet.py": {
        "Tweet.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_str": [
                    "str",
                    "Optional[str]",
                    "Sequence[Sequence[Any]]",
                    "None"
                ],
                "text": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[str]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "screen_name": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[str]",
                    "None"
                ],
                "in_reply_to": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[str]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "original_json": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[str]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ]
            }
        },
        "Tweet.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tweet.from_json": {
            "name": "from_json",
            "location": 24,
            "return": [
                "Tweet"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTweet]"
                ],
                "blob": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "Tweet.from_json_list": {
            "name": "from_json_list",
            "location": 34,
            "return": [
                "Generator[(Tweet, Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Union[int, str]]",
                    "Mapping[str, Mapping[str, Any]]",
                    "Callable[[str], bool]",
                    "Dict[str, Dict]"
                ],
                "blob_list": [
                    "List",
                    "List[dict[str,Any]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[list[str]]",
                    "List[List[str]]",
                    "List[dict]",
                    "List[Dict]",
                    "List[tuple[Union[str,str]]]",
                    "Iterable[str]",
                    "List[Tuple[str,str]]"
                ]
            }
        },
        "Tweet.from_cache": {
            "name": "from_cache",
            "location": 39,
            "return": [
                "Generator[(Tweet, Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "cache.Cache",
                    "dict"
                ],
                "cache": [
                    "cache.Cache",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "twitter-archiver-thingy-master/twitblog/util.py": {
        "parse_status_url": {
            "name": "parse_status_url",
            "location": 4,
            "return": [
                "str",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "twitter-archiver-thingy-master/twitblog/__init__.py": {}
}
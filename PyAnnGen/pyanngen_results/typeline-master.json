{
    "typeline-master/django_config/monkeytype_config.py": {
        "is_package": {
            "name": "is_package",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "module": [
                    "str"
                ]
            }
        },
        "get_path_to_stubfile": {
            "name": "get_path_to_stubfile",
            "location": 78,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Callable[[pathlib.Path], bool]"
                ],
                "output_dir": [
                    "str",
                    "typing.Deque",
                    "pathlib2.Path",
                    "deque[str]"
                ]
            }
        },
        "generate_stub": {
            "name": "generate_stub",
            "location": 90,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "module": [
                    "str"
                ],
                "config": [
                    "typeline.postgres.config.PostgresConfig"
                ],
                "output_dir": [
                    "str"
                ],
                "line_length": [
                    "int",
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[tuple]"
                ],
                "suppress_errors": [
                    "str",
                    "bool"
                ],
                "limit_rows": [
                    "str",
                    "int"
                ]
            }
        },
        "DjangoStubsConfig.cli_context": {
            "name": "cli_context",
            "location": 35,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "DjangoStubsConfig.sample_rate": {
            "name": "sample_rate",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoStubsConfig.type_rewriter": {
            "name": "type_rewriter",
            "location": 47,
            "return": [
                "typeline.typing.ChainedRewriter"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeline-master/django_config/__init__.py": {},
    "typeline-master/typeline/cli.py": {
        "module_path": {
            "name": "module_path",
            "location": 38,
            "return": [
                "Tuple[(str, Optional[str])]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "module_path_with_qualname": {
            "name": "module_path_with_qualname",
            "location": 51,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "monkeytype_config": {
            "name": "monkeytype_config",
            "location": 59,
            "return": [
                "typeline.config.Config"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "display_sample_count": {
            "name": "display_sample_count",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "traces": [
                    "List[typeline.tracing.CallTrace]"
                ],
                "stderr": [
                    "IO"
                ]
            }
        },
        "get_stub": {
            "name": "get_stub",
            "location": 86,
            "return": [
                "Optional[typeline.stubs.Stub]"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ],
                "stdout": [
                    "IO"
                ],
                "stderr": [
                    "IO"
                ]
            }
        },
        "generate_stub_for_module": {
            "name": "generate_stub_for_module",
            "location": 111,
            "return": [
                "Optional[typeline.stubs.Stub]"
            ],
            "arguments": {
                "config": [
                    "typeline.postgres.config.PostgresConfig"
                ],
                "module": [
                    "str"
                ],
                "suppress_errors": [
                    "bool",
                    "int",
                    "Tuple[str]"
                ],
                "stderr": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ],
                "limit_rows": [
                    "int",
                    "dict",
                    "str",
                    "jumeaux.domain.config.vo.Config",
                    "sockeye.config.Config",
                    "Dict[str, Any]"
                ],
                "suppressed_exceptions": [
                    "bool",
                    "str",
                    "None",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "run_handler": {
            "name": "run_handler",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ],
                "stdout": [
                    "IO"
                ],
                "stderr": [
                    "IO"
                ]
            }
        },
        "update_args_from_config": {
            "name": "update_args_from_config",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 182,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "List[str]"
                ],
                "stdout": [
                    "IO"
                ],
                "stderr": [
                    "IO"
                ]
            }
        },
        "entry_point_main": {
            "name": "entry_point_main",
            "location": 328,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "typeline-master/typeline/config.py": {
        "_startswith": {
            "name": "_startswith",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "pathlib.Path"
                ],
                "b": [
                    "pathlib.Path"
                ]
            }
        },
        "default_code_filter": {
            "name": "default_code_filter",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "str",
                    "typing.BinaryIO",
                    "pathlib.Path",
                    "BinaryIO",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "get_default_config": {
            "name": "get_default_config",
            "location": 155,
            "return": [
                "Config"
            ],
            "arguments": {}
        },
        "Config.trace_store": {
            "name": "trace_store",
            "location": 41,
            "return": [
                "typeline.db.base.CallTraceStore"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.cli_context": {
            "name": "cli_context",
            "location": 46,
            "return": [
                "typing.Iterator[None]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "Config.trace_logger": {
            "name": "trace_logger",
            "location": 55,
            "return": [
                "typeline.tracing.CallTraceLogger"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.code_filter": {
            "name": "code_filter",
            "location": 63,
            "return": [
                "Optional[Callable[([types.CodeType], bool)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.sample_rate": {
            "name": "sample_rate",
            "location": 72,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.type_rewriter": {
            "name": "type_rewriter",
            "location": 80,
            "return": [
                "typeline.typing.TypeRewriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.query_limit": {
            "name": "query_limit",
            "location": 84,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.include_unparsable_defaults": {
            "name": "include_unparsable_defaults",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultConfig.type_rewriter": {
            "name": "type_rewriter",
            "location": 138,
            "return": [
                "typeline.typing.TypeRewriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultConfig.trace_store": {
            "name": "trace_store",
            "location": 141,
            "return": [
                "typeline.db.base.CallTraceStore"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultConfig.code_filter": {
            "name": "code_filter",
            "location": 150,
            "return": [
                "Callable[([types.CodeType], bool)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeline-master/typeline/encoding.py": {
        "type_to_dict": {
            "name": "type_to_dict",
            "location": 52,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[]]]",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Any]",
                "List[str]",
                "dict",
                "Exception"
            ],
            "arguments": {
                "typ": [
                    "type"
                ]
            }
        },
        "type_from_dict": {
            "name": "type_from_dict",
            "location": 87,
            "return": [
                "type"
            ],
            "arguments": {
                "d": []
            }
        },
        "type_to_json": {
            "name": "type_to_json",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "typ": [
                    "type"
                ]
            }
        },
        "type_from_json": {
            "name": "type_from_json",
            "location": 120,
            "return": [
                "type"
            ],
            "arguments": {
                "typ_json": [
                    "str"
                ]
            }
        },
        "arg_types_to_json": {
            "name": "arg_types_to_json",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "arg_types": [
                    "dict[str, typing.Type]",
                    "Dict[str, type]",
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "arg_types_from_json": {
            "name": "arg_types_from_json",
            "location": 135,
            "return": [
                "dict[tuple[typing.Union[typing.Any,str]], ]",
                "bool",
                "Dict[str, type]"
            ],
            "arguments": {
                "arg_types": [
                    "str"
                ]
            }
        },
        "maybe_encode_type": {
            "name": "maybe_encode_type",
            "location": 146,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "encode": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "typ": [
                    "typing.Type",
                    "Optional[type]",
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[dbadapters.base.relation.BaseRelation]",
                    "typing.Sequence[typing.Any]",
                    "Optional[Union[int, str]]",
                    "Optional[int]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "maybe_decode_type": {
            "name": "maybe_decode_type",
            "location": 155,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "decode": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "encoded": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[type]",
                    "typing.Type",
                    "Optional[dbadapters.base.relation.BaseRelation]",
                    "int",
                    "typing.Sequence[typing.Optional[str]]",
                    "Optional[int]",
                    "Sequence[Optional[str]]"
                ]
            }
        },
        "serialize_traces": {
            "name": "serialize_traces",
            "location": 233,
            "return": [
                "typing.Iterable[CallTraceRow]",
                "typing.Generator[]"
            ],
            "arguments": {
                "traces": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ClassPropsTraceRow.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ],
                "qualname": [
                    "str"
                ],
                "props": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ClassPropsTraceRow.to_trace": {
            "name": "to_trace",
            "location": 170,
            "return": [
                "typeline.tracing.ClassPropsTrace"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTraceRow.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ],
                "qualname": [
                    "str"
                ],
                "arg_types": [
                    "str"
                ],
                "return_type": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "yield_type": [
                    "Type",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "CallTraceRow.from_trace": {
            "name": "from_trace",
            "location": 196,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "type"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "bytes",
                    "Any",
                    "typing.Any"
                ],
                "trace": [
                    "typeline.tracing.CallTrace"
                ]
            }
        },
        "CallTraceRow.to_trace": {
            "name": "to_trace",
            "location": 204,
            "return": [
                "typeline.tracing.CallTrace"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTraceRow.__eq__": {
            "name": "__eq__",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        }
    },
    "typeline-master/typeline/exceptions.py": {},
    "typeline-master/typeline/retype.py": {
        "main": {
            "name": "main",
            "location": 86,
            "return": [],
            "arguments": {
                "src": [],
                "pyi_dir": [],
                "target_dir": [],
                "incremental": [],
                "quiet": [],
                "replace_any": [],
                "hg": [],
                "traceback": []
            }
        },
        "retype_path": {
            "name": "retype_path",
            "location": 115,
            "return": [
                "Generator[(Tuple[(_T0, str, Type[Exception], List[str])], Any, None)]"
            ],
            "arguments": {
                "src": [
                    "_T0"
                ],
                "pyi_dir": [],
                "targets": []
            }
        },
        "retype_file": {
            "name": "retype_file",
            "location": 138,
            "return": [],
            "arguments": {
                "src": [],
                "pyi_dir": [],
                "targets": []
            }
        },
        "lib2to3_parse": {
            "name": "lib2to3_parse",
            "location": 171,
            "return": [
                "pytree.Node"
            ],
            "arguments": {
                "src_txt": []
            }
        },
        "lib2to3_unparse": {
            "name": "lib2to3_unparse",
            "location": 195,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "reapply_all": {
            "name": "reapply_all",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "ast_node": [],
                "lib2to3_node": []
            }
        },
        "reapply": {
            "name": "reapply",
            "location": 216,
            "return": [],
            "arguments": {
                "ast_node": [],
                "lib2to3_node": []
            }
        },
        "_r_list": {
            "name": "_r_list",
            "location": 225,
            "return": [],
            "arguments": {
                "l": [],
                "lib2to3_node": []
            }
        },
        "_r_importfrom": {
            "name": "_r_importfrom",
            "location": 236,
            "return": [],
            "arguments": {
                "import_from": [],
                "node": []
            }
        },
        "_r_import": {
            "name": "_r_import",
            "location": 258,
            "return": [],
            "arguments": {
                "import_": [],
                "node": []
            }
        },
        "_r_classdef": {
            "name": "_r_classdef",
            "location": 278,
            "return": [],
            "arguments": {
                "cls": [],
                "node": []
            }
        },
        "indent": {
            "name": "indent",
            "location": 299,
            "return": [
                "List[pytree.Leaf]"
            ],
            "arguments": {
                "level": []
            }
        },
        "ellipsis": {
            "name": "ellipsis",
            "location": 303,
            "return": [
                "pytree.Node"
            ],
            "arguments": {}
        },
        "parameters": {
            "name": "parameters",
            "location": 311,
            "return": [
                "pytree.Node"
            ],
            "arguments": {
                "arg_names": [
                    "List[str]"
                ]
            }
        },
        "get_funcdef_node": {
            "name": "get_funcdef_node",
            "location": 329,
            "return": [
                "pytree.Node"
            ],
            "arguments": {
                "funcname": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ],
                "decorators": [
                    "List[str]"
                ],
                "indentation_level": []
            }
        },
        "_r_functiondef": {
            "name": "_r_functiondef",
            "location": 364,
            "return": [],
            "arguments": {
                "pyi_fun": [],
                "py_node": []
            }
        },
        "_r_annassign": {
            "name": "_r_annassign",
            "location": 449,
            "return": [],
            "arguments": {
                "annassign": [],
                "body": []
            }
        },
        "_r_assign": {
            "name": "_r_assign",
            "location": 557,
            "return": [],
            "arguments": {
                "assign": [],
                "body": []
            }
        },
        "serialize_attribute": {
            "name": "serialize_attribute",
            "location": 644,
            "return": [],
            "arguments": {
                "attr": []
            }
        },
        "_sa_attribute": {
            "name": "_sa_attribute",
            "location": 652,
            "return": [],
            "arguments": {
                "attr": []
            }
        },
        "_sa_name": {
            "name": "_sa_name",
            "location": 657,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "_sa_expr": {
            "name": "_sa_expr",
            "location": 662,
            "return": [],
            "arguments": {
                "expr": []
            }
        },
        "convert_annotation": {
            "name": "convert_annotation",
            "location": 667,
            "return": [],
            "arguments": {
                "ann": []
            }
        },
        "_c_subscript": {
            "name": "_c_subscript",
            "location": 673,
            "return": [],
            "arguments": {
                "sub": []
            }
        },
        "_c_name": {
            "name": "_c_name",
            "location": 690,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "_c_nameconstant": {
            "name": "_c_nameconstant",
            "location": 695,
            "return": [],
            "arguments": {
                "const": []
            }
        },
        "_c_ellipsis": {
            "name": "_c_ellipsis",
            "location": 700,
            "return": [],
            "arguments": {
                "ell": []
            }
        },
        "_c_str": {
            "name": "_c_str",
            "location": 705,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_c_index": {
            "name": "_c_index",
            "location": 710,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "_c_tuple": {
            "name": "_c_tuple",
            "location": 715,
            "return": [],
            "arguments": {
                "tup": []
            }
        },
        "_c_attribute": {
            "name": "_c_attribute",
            "location": 728,
            "return": [],
            "arguments": {
                "attr": []
            }
        },
        "_c_call": {
            "name": "_c_call",
            "location": 734,
            "return": [],
            "arguments": {
                "call": []
            }
        },
        "_c_keyword": {
            "name": "_c_keyword",
            "location": 757,
            "return": [],
            "arguments": {
                "kwarg": []
            }
        },
        "_c_list": {
            "name": "_c_list",
            "location": 770,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "names_already_imported": {
            "name": "names_already_imported",
            "location": 786,
            "return": [],
            "arguments": {
                "names": [],
                "node": []
            }
        },
        "_nai_list": {
            "name": "_nai_list",
            "location": 792,
            "return": [],
            "arguments": {
                "names": [],
                "node": []
            }
        },
        "_nai_alias": {
            "name": "_nai_alias",
            "location": 797,
            "return": [],
            "arguments": {
                "alias": [],
                "node": []
            }
        },
        "decorator_names": {
            "name": "decorator_names",
            "location": 831,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_dn_node": {
            "name": "_dn_node",
            "location": 836,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "_dn_list": {
            "name": "_dn_list",
            "location": 847,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "_dn_name": {
            "name": "_dn_name",
            "location": 855,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "_dn_call": {
            "name": "_dn_call",
            "location": 860,
            "return": [],
            "arguments": {
                "call": []
            }
        },
        "_dn_attribute": {
            "name": "_dn_attribute",
            "location": 865,
            "return": [],
            "arguments": {
                "attr": []
            }
        },
        "fix_remaining_type_comments": {
            "name": "fix_remaining_type_comments",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "fix_variable_annotation_type_comment": {
            "name": "fix_variable_annotation_type_comment",
            "location": 885,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [],
                "last": []
            }
        },
        "fix_signature_annotation_type_comment": {
            "name": "fix_signature_annotation_type_comment",
            "location": 903,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [],
                "last": []
            }
        },
        "is_assignment": {
            "name": "is_assignment",
            "location": 925,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": []
            }
        },
        "is_builtin_method_decorator": {
            "name": "is_builtin_method_decorator",
            "location": 934,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": []
            }
        },
        "make_import": {
            "name": "make_import",
            "location": 938,
            "return": [
                "pytree.Node"
            ],
            "arguments": {}
        },
        "append_after_imports": {
            "name": "append_after_imports",
            "location": 983,
            "return": [
                "None"
            ],
            "arguments": {
                "stmt_to_insert": [],
                "node": []
            }
        },
        "annotate_parameters": {
            "name": "annotate_parameters",
            "location": 988,
            "return": [
                "None"
            ],
            "arguments": {
                "parameters": [
                    "pytree.Node"
                ],
                "ast_args": []
            }
        },
        "annotate_return": {
            "name": "annotate_return",
            "location": 1106,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [],
                "ast_returns": [],
                "offset": []
            }
        },
        "get_function_signature": {
            "name": "get_function_signature",
            "location": 1135,
            "return": [
                "Tuple[(Any, ast3.Name)]"
            ],
            "arguments": {
                "fun": []
            }
        },
        "parse_signature_type_comment": {
            "name": "parse_signature_type_comment",
            "location": 1163,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "type_comment": []
            }
        },
        "parse_type_comment": {
            "name": "parse_type_comment",
            "location": 1188,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "type_comment": []
            }
        },
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 1199,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "arguments": []
            }
        },
        "copy_arguments_to_annotations": {
            "name": "copy_arguments_to_annotations",
            "location": 1218,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "type_comment": []
            }
        },
        "copy_type_comments_to_annotations": {
            "name": "copy_type_comments_to_annotations",
            "location": 1271,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "copy_type_comment_to_annotation": {
            "name": "copy_type_comment_to_annotation",
            "location": 1288,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": []
            }
        },
        "maybe_replace_any_if_equal": {
            "name": "maybe_replace_any_if_equal",
            "location": 1297,
            "return": [
                "_T1"
            ],
            "arguments": {
                "name": [],
                "expected": [
                    "_T1"
                ],
                "actual": []
            }
        },
        "ensure_no_annotation": {
            "name": "ensure_no_annotation",
            "location": 1330,
            "return": [
                "None"
            ],
            "arguments": {
                "ann": []
            }
        },
        "ensure_annotations_equal": {
            "name": "ensure_annotations_equal",
            "location": 1337,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "expected": [],
                "actual": []
            }
        },
        "remove_function_signature_type_comment": {
            "name": "remove_function_signature_type_comment",
            "location": 1345,
            "return": [
                "None"
            ],
            "arguments": {
                "body": []
            }
        },
        "minimize_whitespace": {
            "name": "minimize_whitespace",
            "location": 1355,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "maybe_space_before_comment": {
            "name": "maybe_space_before_comment",
            "location": 1359,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "text": [
                    "_T0"
                ]
            }
        },
        "flatten_some": {
            "name": "flatten_some",
            "location": 1369,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "children": []
            }
        },
        "pop_param": {
            "name": "pop_param",
            "location": 1378,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "params": []
            }
        },
        "gen_annotated_params": {
            "name": "gen_annotated_params",
            "location": 1404,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "args": [],
                "defaults": [],
                "params": []
            }
        },
        "get_annotated_param": {
            "name": "get_annotated_param",
            "location": 1447,
            "return": [],
            "arguments": {
                "node": [],
                "arg": []
            }
        },
        "get_offset_and_prefix": {
            "name": "get_offset_and_prefix",
            "location": 1482,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "body": [],
                "skip_assignments": []
            }
        },
        "name_used_in_node": {
            "name": "name_used_in_node",
            "location": 1525,
            "return": [],
            "arguments": {
                "node": [],
                "name": []
            }
        },
        "_nuin_node": {
            "name": "_nuin_node",
            "location": 1530,
            "return": [],
            "arguments": {
                "node": [],
                "name": []
            }
        },
        "_nuin_leaf": {
            "name": "_nuin_leaf",
            "location": 1539,
            "return": [],
            "arguments": {
                "leaf": [],
                "name": []
            }
        },
        "fix_line_numbers": {
            "name": "fix_line_numbers",
            "location": 1543,
            "return": [
                "None"
            ],
            "arguments": {
                "body": []
            }
        },
        "new": {
            "name": "new",
            "location": 1553,
            "return": [
                "Union[(pytree.Leaf, _T0)]"
            ],
            "arguments": {
                "n": [
                    "_T0"
                ],
                "prefix": []
            }
        },
        "_r_assign.lazy_aliasing": {
            "name": "lazy_aliasing",
            "location": 608,
            "return": [],
            "arguments": {}
        },
        "copy_arguments_to_annotations.next_value": {
            "name": "next_value",
            "location": 1251,
            "return": [],
            "arguments": {
                "index": []
            }
        }
    },
    "typeline-master/typeline/stubs.py": {
        "_get_import_for_qualname": {
            "name": "_get_import_for_qualname",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "qualname": [
                    "str"
                ]
            }
        },
        "get_imports_for_annotation": {
            "name": "get_imports_for_annotation",
            "location": 141,
            "return": [
                "ImportMap"
            ],
            "arguments": {
                "anno": [
                    "denite.util.UserContext"
                ]
            }
        },
        "get_imports_for_signature": {
            "name": "get_imports_for_signature",
            "location": 174,
            "return": [
                "ImportMap"
            ],
            "arguments": {
                "sig": [
                    "inspect.Signature"
                ]
            }
        },
        "get_imports_for_types": {
            "name": "get_imports_for_types",
            "location": 185,
            "return": [
                "ImportMap"
            ],
            "arguments": {
                "types": [
                    "list[typing.Type]",
                    "str",
                    "List[type]",
                    "Callable",
                    "Type[T]"
                ]
            }
        },
        "update_signature_args": {
            "name": "update_signature_args",
            "location": 194,
            "return": [
                "inspect.Signature"
            ],
            "arguments": {
                "sig": [
                    "inspect.Signature"
                ],
                "arg_types": [
                    "dict[str, typing.Type]",
                    "str",
                    "Dict[str, type]",
                    "dict[str, str]",
                    "T",
                    "None",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "has_self": [
                    "bool"
                ],
                "ignore_existing_annotations": [
                    "bool"
                ]
            }
        },
        "update_signature_return": {
            "name": "update_signature_return",
            "location": 214,
            "return": [
                "inspect.Signature"
            ],
            "arguments": {
                "sig": [
                    "inspect.Signature"
                ],
                "return_type": [
                    "type"
                ],
                "yield_type": [
                    "type"
                ],
                "ignore_existing_annotations": [
                    "bool"
                ]
            }
        },
        "shrink_traced_types": {
            "name": "shrink_traced_types",
            "location": 236,
            "return": [
                "tuple[typing.Optional[dict[, ]]]"
            ],
            "arguments": {
                "traces": [
                    "str",
                    "Iterable[typeline.tracing.CallTrace]",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "List[object]"
                ]
            }
        },
        "get_updated_definition": {
            "name": "get_updated_definition",
            "location": 256,
            "return": [
                "FunctionDefinition"
            ],
            "arguments": {
                "func": [
                    "int",
                    "Iterable",
                    "typing.Iterable[]"
                ],
                "traces": [
                    "Iterable[typeline.tracing.CallTrace]",
                    "str",
                    "typing.Iterable[typeline.tracing.CallTrace]",
                    "Union[str, int]",
                    "int"
                ],
                "rewriter": [
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ],
                "ignore_existing_annotations": [
                    "bool"
                ]
            }
        },
        "has_unparsable_defaults": {
            "name": "has_unparsable_defaults",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "sig": [
                    "inspect.Signature"
                ]
            }
        },
        "_is_optional": {
            "name": "_is_optional",
            "location": 331,
            "return": [
                "bool"
            ],
            "arguments": {
                "anno": []
            }
        },
        "_get_optional_elem": {
            "name": "_get_optional_elem",
            "location": 343,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "anno": [
                    "list",
                    "str",
                    "list[]",
                    "int"
                ]
            }
        },
        "render_union": {
            "name": "render_union",
            "location": 353,
            "return": [
                "str"
            ],
            "arguments": {
                "anno": [
                    "int",
                    "list",
                    "list[]",
                    "Optional[BaseException]",
                    "BaseException",
                    "tuple",
                    "None",
                    "tuple[]"
                ]
            }
        },
        "render_generic": {
            "name": "render_generic",
            "location": 358,
            "return": [
                "str"
            ],
            "arguments": {
                "anno": [
                    "bool",
                    "str",
                    "typing.Type",
                    "type",
                    "Type"
                ]
            }
        },
        "safe_issubclass": {
            "name": "safe_issubclass",
            "location": 368,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": [
                    "int",
                    "str",
                    "float"
                ],
                "base": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "render_annotation": {
            "name": "render_annotation",
            "location": 375,
            "return": [
                "str"
            ],
            "arguments": {
                "anno": [
                    "int",
                    "bool"
                ]
            }
        },
        "render_parameter": {
            "name": "render_parameter",
            "location": 402,
            "return": [
                "str"
            ],
            "arguments": {
                "param": [
                    "inspect.Parameter"
                ]
            }
        },
        "render_signature": {
            "name": "render_signature",
            "location": 433,
            "return": [
                "str"
            ],
            "arguments": {
                "sig": [
                    "inspect.Signature"
                ],
                "max_line_len": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "build_module_stubs": {
            "name": "build_module_stubs",
            "location": 618,
            "return": [
                "bool",
                "str",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "entries": [
                    "str",
                    "bool",
                    "list[dict[, ]]",
                    "dict[, ]",
                    "List[dict]",
                    "dict",
                    "Optional[int]"
                ],
                "class_properties": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "extract_public_properties": {
            "name": "extract_public_properties",
            "location": 671,
            "return": [
                "dict"
            ],
            "arguments": {
                "trace": [
                    "dict"
                ]
            }
        },
        "build_module_stubs_from_traces": {
            "name": "build_module_stubs_from_traces",
            "location": 680,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int, int, int]",
                "typing.Type",
                "list[int]"
            ],
            "arguments": {
                "traces": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict"
                ],
                "class_traces": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "ClassVar",
                    "Callable",
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "ignore_existing_annotations": [
                    "bool"
                ],
                "rewriter": [
                    "Callable",
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FunctionKind.from_callable": {
            "name": "from_callable",
            "location": 66,
            "return": [
                "FunctionKind"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFunctionKind]"
                ],
                "func": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FunctionDefinition.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ],
                "qualname": [
                    "str"
                ],
                "kind": [
                    "FunctionKind"
                ],
                "sig": [
                    "inspect.Signature"
                ],
                "is_async": [
                    "typing.Union[(builtins.NoneType, bool)]"
                ]
            }
        },
        "FunctionDefinition.from_callable": {
            "name": "from_callable",
            "location": 104,
            "return": [
                "FunctionDefinition"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFunctionDefinition]"
                ],
                "func": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "kind": [
                    "FunctionKind"
                ]
            }
        },
        "FunctionDefinition.has_self": {
            "name": "has_self",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionDefinition.__eq__": {
            "name": "__eq__",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FunctionDefinition.__repr__": {
            "name": "__repr__",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportMap.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportMap.merge": {
            "name": "merge",
            "location": 130,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "ImportMap"
                ]
            }
        },
        "Stub.__eq__": {
            "name": "__eq__",
            "location": 286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Stub.render": {
            "name": "render",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportBlockStub.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "imports": [
                    "ImportMap"
                ]
            }
        },
        "ImportBlockStub.render": {
            "name": "render",
            "location": 300,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportBlockStub.__repr__": {
            "name": "__repr__",
            "location": 315,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionStub.__init__": {
            "name": "__init__",
            "location": 503,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "signature": [
                    "inspect.Signature"
                ],
                "kind": [
                    "FunctionKind"
                ],
                "strip_modules": [
                    "str",
                    "None",
                    "rotkehlchen.db.utils.BlockchainAccounts"
                ],
                "is_async": [
                    "typing.Union[(builtins.NoneType, bool)]"
                ]
            }
        },
        "FunctionStub.render": {
            "name": "render",
            "location": 517,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "FunctionStub.__repr__": {
            "name": "__repr__",
            "location": 537,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassPropertyStub.__init__": {
            "name": "__init__",
            "location": 543,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "typ": [
                    "type"
                ]
            }
        },
        "ClassPropertyStub.render": {
            "name": "render",
            "location": 549,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "ClassStub.__init__": {
            "name": "__init__",
            "location": 558,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "function_stubs": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]"
                ],
                "property_stubs": [
                    "None",
                    "List[str]",
                    "list[str]",
                    "Type",
                    "str",
                    "typing.Type",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "Iterable[object]"
                ]
            }
        },
        "ClassStub.render": {
            "name": "render",
            "location": 568,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassStub.__repr__": {
            "name": "__repr__",
            "location": 584,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleStub.__init__": {
            "name": "__init__",
            "location": 589,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "function_stubs": [
                    "vimiv.utils.customtypes.FuncT",
                    "None"
                ],
                "class_stubs": [
                    "Tuple[int, int]",
                    "None",
                    "Mapping[str, Any]",
                    "tuple[typing.Union[int,int]]",
                    "typing.Mapping"
                ],
                "imports_stub": [
                    "ImportBlockStub"
                ]
            }
        },
        "ModuleStub.render": {
            "name": "render",
            "location": 603,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleStub.__repr__": {
            "name": "__repr__",
            "location": 613,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubIndexBuilder.__init__": {
            "name": "__init__",
            "location": 751,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "module_re": [
                    "str"
                ]
            }
        },
        "StubIndexBuilder.log": {
            "name": "log",
            "location": 755,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "typeline.tracing.CallTrace"
                ]
            }
        },
        "StubIndexBuilder.get_stubs": {
            "name": "get_stubs",
            "location": 760,
            "return": [
                "str",
                "bool",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeline-master/typeline/tracing.py": {
        "get_func_in_mro": {
            "name": "get_func_in_mro",
            "location": 143,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "code": [
                    "types.CodeType"
                ]
            }
        },
        "_has_code": {
            "name": "_has_code",
            "location": 164,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "func": [
                    "Optional[Callable]"
                ],
                "code": [
                    "types.CodeType"
                ]
            }
        },
        "get_func": {
            "name": "get_func",
            "location": 174,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "frame": [
                    "types.FrameType"
                ]
            }
        },
        "is_method_of_class": {
            "name": "is_method_of_class",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "frame": [
                    "types.FrameType"
                ]
            }
        },
        "is_private_function": {
            "name": "is_private_function",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "types.CodeType"
                ]
            }
        },
        "trace_calls": {
            "name": "trace_calls",
            "location": 378,
            "return": [
                "typing.Iterator[None]",
                "typing.Generator[]"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "code_filter": [
                    "None",
                    "int",
                    "Optional[int]",
                    "float",
                    "str",
                    "raiden.utils.Address",
                    "list[str]",
                    "Optional[List[str]]"
                ],
                "sample_rate": [
                    "None",
                    "int",
                    "Optional[int]",
                    "float",
                    "str",
                    "raiden.utils.Address",
                    "list[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "trace_calls_init_with_config": {
            "name": "trace_calls_init_with_config",
            "location": 394,
            "return": [
                "typing.Iterator[None]",
                "typing.Generator[]"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "ClassPropsTrace.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ],
                "qualname": [
                    "str"
                ],
                "class_props": [
                    "Dict[(str, type)]"
                ]
            }
        },
        "ClassPropsTrace.__eq__": {
            "name": "__eq__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "ClassPropsTrace.__hash__": {
            "name": "__hash__",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTrace.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ],
                "arg_types": [
                    "Dict[(str, type)]"
                ],
                "return_type": [
                    "Optional[type]"
                ],
                "yield_type": [
                    "Optional[type]"
                ]
            }
        },
        "CallTrace.__eq__": {
            "name": "__eq__",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "CallTrace.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTrace.__hash__": {
            "name": "__hash__",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTrace.add_yield_type": {
            "name": "add_yield_type",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "type"
                ]
            }
        },
        "CallTrace.funcname": {
            "name": "funcname",
            "location": 105,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[cmk.utils.type_defs.HostName]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTraceLogger.log": {
            "name": "log",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "CallTrace"
                ]
            }
        },
        "CallTraceLogger.flush": {
            "name": "flush",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassPropsTraceLogger.log": {
            "name": "log",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "ClassPropsTrace"
                ]
            }
        },
        "ClassPropsTraceLogger.flush": {
            "name": "flush",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTracer.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "CallTraceLogger"
                ],
                "class_logger": [
                    "ClassPropsTraceLogger"
                ],
                "code_filter": [
                    "Optional[Callable[([types.CodeType], bool)]]"
                ],
                "sample_rate": [
                    "Optional[int]"
                ],
                "skip_private_methods": [
                    "bool"
                ],
                "skip_private_properties": [
                    "bool"
                ],
                "acceptable_modules": [
                    "Optional[List[str]]"
                ]
            }
        },
        "CallTracer._get_func": {
            "name": "_get_func",
            "location": 264,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "types.FrameType"
                ]
            }
        },
        "CallTracer.handle_call": {
            "name": "handle_call",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "types.FrameType"
                ]
            }
        },
        "CallTracer.handle_return": {
            "name": "handle_return",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "types.FrameType"
                ],
                "arg": [
                    "str",
                    "hackathon.utils.utils.DataMessage"
                ]
            }
        },
        "CallTracer.__call__": {
            "name": "__call__",
            "location": 356,
            "return": [
                "CallTracer"
            ],
            "arguments": {
                "self": [
                    "_TCallTracer"
                ],
                "frame": [
                    "types.FrameType"
                ],
                "event": [
                    "str"
                ],
                "arg": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "str",
                    "int",
                    "logging.handlers.QueueListener",
                    "None"
                ]
            }
        }
    },
    "typeline-master/typeline/typing.py": {
        "shrink_types": {
            "name": "shrink_types",
            "location": 31,
            "return": [
                "bool",
                "str",
                "tuple[]",
                "tuple[str]",
                "list[str]",
                "set[]",
                "tuple[typing.Type]"
            ],
            "arguments": {
                "types": [
                    "str",
                    "list[T]",
                    "int",
                    "mypy.types.Type",
                    "Type[Any]",
                    "List[mypy.types.Type]"
                ]
            }
        },
        "make_iterator": {
            "name": "make_iterator",
            "location": 45,
            "return": [
                "Type[Iterator]"
            ],
            "arguments": {
                "typ": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "make_generator": {
            "name": "make_generator",
            "location": 49,
            "return": [
                "Type[generator]"
            ],
            "arguments": {
                "yield_typ": [
                    "bool",
                    "Optional[float]",
                    "float",
                    "list",
                    "None",
                    "list[]"
                ],
                "send_typ": [
                    "bool",
                    "Optional[float]",
                    "float",
                    "list",
                    "None",
                    "list[]"
                ],
                "return_typ": [
                    "bool",
                    "Optional[float]",
                    "float",
                    "list",
                    "None",
                    "list[]"
                ]
            }
        },
        "get_type": {
            "name": "get_type",
            "location": 66,
            "return": [
                "Union[(type, _T0)]"
            ],
            "arguments": {
                "obj": [
                    "_T0"
                ]
            }
        },
        "_get_union_type_str": {
            "name": "_get_union_type_str",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "get_type_str": {
            "name": "get_type_str",
            "location": 111,
            "return": [
                "str",
                "float",
                "set[str]"
            ],
            "arguments": {
                "t": [
                    "typing.BinaryIO",
                    "mypy.types.Type",
                    "BinaryIO"
                ]
            }
        },
        "safe_issubclass": {
            "name": "safe_issubclass",
            "location": 213,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": [
                    "str",
                    "float",
                    "bytes"
                ],
                "base_class": [
                    "str",
                    "float",
                    "bytes"
                ]
            }
        },
        "safe_getmro": {
            "name": "safe_getmro",
            "location": 220,
            "return": [
                "Union[(tuple, List[nothing])]"
            ],
            "arguments": {
                "t": []
            }
        },
        "TypeRewriter._rewrite_container": {
            "name": "_rewrite_container",
            "location": 130,
            "return": [
                "str",
                "typing.Type",
                "list[typing.Union[str,\"SqlFile\"]]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type",
                    "bool"
                ],
                "container": [
                    "type",
                    "typing.Type",
                    "List[Union[str, \"SqlFile\"]]",
                    "list[typing.Union[str,\"SqlFile\"]]"
                ]
            }
        },
        "TypeRewriter.rewrite_Dict": {
            "name": "rewrite_Dict",
            "location": 136,
            "return": [
                "Union[(Type[dict], _T0)]"
            ],
            "arguments": {
                "self": [],
                "dct": [
                    "_T0"
                ]
            }
        },
        "TypeRewriter.rewrite_List": {
            "name": "rewrite_List",
            "location": 139,
            "return": [
                "Union[(Type[list], _T0)]"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "_T0"
                ]
            }
        },
        "TypeRewriter.rewrite_Set": {
            "name": "rewrite_Set",
            "location": 142,
            "return": [
                "Union[(Type[set], _T0)]"
            ],
            "arguments": {
                "self": [],
                "st": [
                    "_T0"
                ]
            }
        },
        "TypeRewriter.rewrite_Tuple": {
            "name": "rewrite_Tuple",
            "location": 145,
            "return": [
                "Union[(Type[Tuple[Any]], _T0)]"
            ],
            "arguments": {
                "self": [],
                "tup": [
                    "_T0"
                ]
            }
        },
        "TypeRewriter.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 148,
            "return": [
                "Union[(tuple, _T0)]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "_T0"
                ]
            }
        },
        "TypeRewriter.generic_rewrite": {
            "name": "generic_rewrite",
            "location": 151,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "_T0"
                ]
            }
        },
        "TypeRewriter.rewrite": {
            "name": "rewrite",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "RemoveEmptyContainers._is_empty": {
            "name": "_is_empty",
            "location": 181,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Iterable[Any]",
                "Union[int, float, complex]",
                "List['Product']"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str"
                ]
            }
        },
        "RemoveEmptyContainers.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 185,
            "return": [
                "Union[(tuple, _T0)]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "_T0"
                ]
            }
        },
        "RewriteConfigDict.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 196,
            "return": [
                "Union[(Type[dict], _T0)]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "_T0"
                ]
            }
        },
        "RewriteLargeUnion.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "max_unique_types": [
                    "int",
                    "str"
                ],
                "max_members": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "RewriteLargeUnion._rewrite_to_tuple": {
            "name": "_rewrite_to_tuple",
            "location": 235,
            "return": [
                "Union[(builtins.NoneType, Type[tuple])]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "str",
                    "Union",
                    "typing.Sequence[str]",
                    "tuple[]",
                    "Sequence[str]",
                    "list[str]",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "RewriteLargeUnion.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 246,
            "return": [
                "int",
                "Callable",
                "tuple[str]",
                "str",
                "typing.Type",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "int",
                    "Tuple[str]",
                    "tuple[str]",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "ChainedRewriter.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "rewriters": [
                    "Iterable[TypeRewriter]"
                ]
            }
        },
        "ChainedRewriter.rewrite": {
            "name": "rewrite",
            "location": 288,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "NoOpRewriter.rewrite": {
            "name": "rewrite",
            "location": 295,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "_T0"
                ]
            }
        }
    },
    "typeline-master/typeline/util.py": {
        "get_func_fqname": {
            "name": "get_func_fqname",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "get_func_in_module": {
            "name": "get_func_in_module",
            "location": 33,
            "return": [
                "Callable"
            ],
            "arguments": {
                "module": [
                    "str"
                ],
                "qualname": [
                    "str"
                ]
            }
        },
        "get_name_in_module": {
            "name": "get_name_in_module",
            "location": 64,
            "return": [
                "str",
                "bytes",
                "List[Dict[str, Any]]",
                "IO",
                "list"
            ],
            "arguments": {
                "module": [
                    "str"
                ],
                "qualname": [
                    "str"
                ],
                "attr_getter": [
                    "Callable[([Any, str], Any)]"
                ]
            }
        },
        "is_any": {
            "name": "is_any",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "type"
                ]
            }
        },
        "is_union": {
            "name": "is_union",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "type"
                ]
            }
        }
    },
    "typeline-master/typeline/__init__.py": {
        "trace": {
            "name": "trace",
            "location": 20,
            "return": [
                "ContextManager"
            ],
            "arguments": {
                "config": [
                    "Optional[typeline.config.Config]"
                ]
            }
        }
    },
    "typeline-master/typeline/__main__.py": {},
    "typeline-master/typeline/db/base.py": {
        "CallTraceThunk.to_trace": {
            "name": "to_trace",
            "location": 24,
            "return": [
                "typeline.tracing.CallTrace"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTraceStore.add": {
            "name": "add",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "traces": [
                    "Iterable[typeline.tracing.CallTrace]"
                ]
            }
        },
        "CallTraceStore.filter": {
            "name": "filter",
            "location": 38,
            "return": [
                "List[CallTraceThunk]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ],
                "qualname_prefix": [
                    "Optional[str]"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "CallTraceStore.make_store": {
            "name": "make_store",
            "location": 52,
            "return": [
                "CallTraceStore"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCallTraceStore]"
                ],
                "connection_string": [
                    "str"
                ]
            }
        },
        "CallTraceStore.list_modules": {
            "name": "list_modules",
            "location": 59,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTraceStoreLogger.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "CallTraceStore"
                ]
            }
        },
        "CallTraceStoreLogger.log": {
            "name": "log",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "typeline.tracing.CallTrace"
                ]
            }
        },
        "CallTraceStoreLogger.flush": {
            "name": "flush",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeline-master/typeline/db/sqlite.py": {
        "create_call_trace_table": {
            "name": "create_call_trace_table",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "sqlite3.dbapi2.Connection"
                ],
                "table": [
                    "str"
                ]
            }
        },
        "make_query": {
            "name": "make_query",
            "location": 52,
            "return": [
                "Tuple[(str, List[Union[(int, str)]])]"
            ],
            "arguments": {
                "table": [
                    "str"
                ],
                "module": [
                    "str"
                ],
                "qualname": [
                    "Optional[str]"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "SQLiteStore.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "sqlite3.dbapi2.Connection"
                ],
                "table": [
                    "str"
                ]
            }
        },
        "SQLiteStore.make_store": {
            "name": "make_store",
            "location": 80,
            "return": [
                "typeline.db.base.CallTraceStore"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int"
                ],
                "connection_string": [
                    "str"
                ]
            }
        },
        "SQLiteStore.add": {
            "name": "add",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "traces": [
                    "Iterable[typeline.tracing.CallTrace]"
                ]
            }
        },
        "SQLiteStore.filter": {
            "name": "filter",
            "location": 96,
            "return": [
                "List[typeline.db.base.CallTraceThunk]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ],
                "qualname_prefix": [
                    "Optional[str]"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "SQLiteStore.list_modules": {
            "name": "list_modules",
            "location": 108,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeline-master/typeline/db/__init__.py": {},
    "typeline-master/typeline/postgres/config.py": {
        "make_filter_query": {
            "name": "make_filter_query",
            "location": 67,
            "return": [
                "Tuple[(str, List[_T0])]"
            ],
            "arguments": {
                "module": [
                    "_T0"
                ]
            }
        },
        "create_call_trace_table": {
            "name": "create_call_trace_table",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [
                    "psycopg2.extras.LoggingConnection"
                ]
            }
        },
        "MyLoggingConnection.filter": {
            "name": "filter",
            "location": 27,
            "return": [
                "float",
                "logging.LogRecord",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Dict[str, Any]"
                ],
                "curs": [
                    "str",
                    "bool",
                    "logging.LogRecord",
                    "list[]",
                    "django.db.models.QuerySet",
                    "list"
                ]
            }
        },
        "PostgresStore.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "bytes",
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]",
                    "tuple[typing.Union[str,str,str]]",
                    "Tuple[str, str, str]",
                    "bool"
                ],
                "autocommit_conn": [
                    "str",
                    "bytes",
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]",
                    "tuple[typing.Union[str,str,str]]",
                    "Tuple[str, str, str]",
                    "bool"
                ],
                "table": [
                    "str"
                ]
            }
        },
        "PostgresStore.add": {
            "name": "add",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "traces": [
                    "Iterable[typeline.tracing.CallTrace]"
                ]
            }
        },
        "PostgresStore.add_classes": {
            "name": "add_classes",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_traces": [
                    "Iterable[typeline.tracing.ClassPropsTrace]"
                ]
            }
        },
        "PostgresStore.remove_duplicates": {
            "name": "remove_duplicates",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresStore.vacuum": {
            "name": "vacuum",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresStore.make_store": {
            "name": "make_store",
            "location": 154,
            "return": [
                "PostgresStore"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPostgresStore]"
                ],
                "connection_data": [
                    "dict"
                ],
                "log_queries": [
                    "bool"
                ],
                "skip_init": [
                    "bool"
                ]
            }
        },
        "PostgresStore.filter": {
            "name": "filter",
            "location": 170,
            "return": [
                "List[typeline.encoding.CallTraceRow]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "PostgresStore.extract_class_props": {
            "name": "extract_class_props",
            "location": 185,
            "return": [
                "List[typeline.encoding.ClassPropsTraceRow]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "typing.Callable[, ]",
                    "Union[django.db.models.fields.Field, django.db.models.fields.reverse_related.ForeignObjectRel]",
                    "Callable"
                ]
            }
        },
        "PostgresStore.list_modules": {
            "name": "list_modules",
            "location": 195,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "None",
                    "Callable[[str], T]",
                    "int",
                    "dict",
                    "typing.Callable[str, T]",
                    "dict[, ]"
                ]
            }
        },
        "PostgresLogger.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "typeline.db.base.CallTraceStore"
                ],
                "relevant_modules": [
                    "Optional[List[str]]"
                ]
            }
        },
        "PostgresLogger._should_be_traced": {
            "name": "_should_be_traced",
            "location": 218,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "typeline.tracing.CallTrace"
                ]
            }
        },
        "PostgresLogger.log": {
            "name": "log",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "typeline.tracing.CallTrace"
                ]
            }
        },
        "PostgresClassLogger.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "typeline.db.base.CallTraceStore"
                ],
                "relevant_modules": [
                    "Optional[List[str]]"
                ]
            }
        },
        "PostgresClassLogger._should_be_traced": {
            "name": "_should_be_traced",
            "location": 257,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "typeline.tracing.ClassPropsTrace"
                ]
            }
        },
        "PostgresClassLogger.log": {
            "name": "log",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "typeline.tracing.ClassPropsTrace"
                ]
            }
        },
        "PostgresClassLogger.flush": {
            "name": "flush",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresConfig.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_data": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "skip_private_methods": [
                    "bool",
                    "int",
                    "List[str]",
                    "Union[Callable, str]"
                ],
                "skip_private_properties": [
                    "bool",
                    "int",
                    "List[str]",
                    "Union[Callable, str]"
                ],
                "log_queries": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Mapping",
                    "List[str]"
                ],
                "relevant_modules": [
                    "Optional[List[str]]"
                ]
            }
        },
        "PostgresConfig.trace_logger": {
            "name": "trace_logger",
            "location": 293,
            "return": [
                "PostgresLogger"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresConfig.class_trace_logger": {
            "name": "class_trace_logger",
            "location": 297,
            "return": [
                "PostgresClassLogger"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresConfig.trace_store": {
            "name": "trace_store",
            "location": 301,
            "return": [
                "PostgresStore"
            ],
            "arguments": {
                "self": [],
                "skip_init": [
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "typeline-master/typeline/postgres/__init__.py": {},
    "typeline-master/typeline/rewriters/generics.py": {
        "is_allowed_base_class": {
            "name": "is_allowed_base_class",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "base_cls": [
                    "Type",
                    "bool",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "_find_acceptable_common_base": {
            "name": "_find_acceptable_common_base",
            "location": 112,
            "return": [
                "Optional[type]"
            ],
            "arguments": {
                "cls1": [
                    "typing.Type",
                    "Type",
                    "type",
                    "Type[T]"
                ],
                "cls2": [
                    "typing.Type",
                    "Type",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "UnionRewriter.transform_objects": {
            "name": "transform_objects",
            "location": 10,
            "return": [
                "typing.Optional[typing.Any]",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj1": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "obj2": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "UnionRewriter._traverse_all_pairs": {
            "name": "_traverse_all_pairs",
            "location": 13,
            "return": [
                "Optional[Tuple[(int, int, type)]]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "str",
                    "int"
                ],
                "return_transformed_obj": [
                    "Callable"
                ]
            }
        },
        "UnionRewriter.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 24,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "str",
                    "int",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "UnionRewriter.rewrite_Union_one_operation": {
            "name": "rewrite_Union_one_operation",
            "location": 42,
            "return": [
                "str",
                "Dict[str, Any]",
                "set[str]",
                "int",
                "bool",
                "Tuple[int, int, str]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "str",
                    "int",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "RemoveEmptyContainersRewriter._is_empty": {
            "name": "_is_empty",
            "location": 84,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Iterable[Any]",
                "Union[int, float, complex]",
                "List['Product']"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str"
                ]
            }
        },
        "RemoveEmptyContainersRewriter.transform_objects": {
            "name": "transform_objects",
            "location": 88,
            "return": [
                "Optional[Union[(_T0, _T1)]]"
            ],
            "arguments": {
                "self": [],
                "obj1": [
                    "_T0"
                ],
                "obj2": [
                    "_T1"
                ]
            }
        },
        "MainRewriter.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainRewriter.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "list[tuple[typing.Union[int,int,int]]]",
                "str",
                "set[str]",
                "tuple[typing.Union[str,typing.Any,int]]",
                "list[str]",
                "typing.Type",
                "typing.Callable[[], None]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "Optional[AbstractSet[str]]",
                    "typing.AbstractSet",
                    "List[str]",
                    "None",
                    "Optional[Union[Any, Any]]",
                    "list[str]",
                    "typing.Any"
                ]
            }
        },
        "MainRewriter.generic_rewrite": {
            "name": "generic_rewrite",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "type"
                ]
            }
        },
        "SimplifyByMROTraversing.transform_objects": {
            "name": "transform_objects",
            "location": 186,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "obj1": [
                    "str",
                    "int"
                ],
                "obj2": [
                    "int",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Tuple[float, float, float]",
                    "tuple[typing.Union[float,float,float]]"
                ]
            }
        },
        "SimplifyUnionOfTuples.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 204,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "_T0"
                ]
            }
        },
        "SimplifyIntFloat.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 209,
            "return": [
                "bool",
                "int",
                "str",
                "tuple[str]",
                "Dict[str, Any]",
                "List[List[str]]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "int",
                    "str",
                    "tuple[str]",
                    "Tuple[str]",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "SimplifyUnionOfTypes.transform_objects": {
            "name": "transform_objects",
            "location": 219,
            "return": [
                "Optional[Type[type]]"
            ],
            "arguments": {
                "self": [],
                "obj1": [
                    "List[str]",
                    "list[str]",
                    "type",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Iterator[Any]",
                    "typing.Iterator"
                ],
                "obj2": [
                    "List[str]",
                    "list[str]",
                    "type",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Iterator[Any]",
                    "typing.Iterator"
                ]
            }
        },
        "_DepthFirstTypeTraverser.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "union_rewriter": [
                    "typeline.typing.TypeRewriter"
                ]
            }
        },
        "_DepthFirstTypeTraverser.rewrite": {
            "name": "rewrite",
            "location": 230,
            "return": [
                "Callable",
                "Dict[str, int]",
                "str",
                "None",
                "typing.Type",
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "type"
                ]
            }
        }
    },
    "typeline-master/typeline/rewriters/transformers.py": {
        "is_generic": {
            "name": "is_generic",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Type",
                    "Type[T]",
                    "str"
                ],
                "generic": [
                    "type",
                    "Type",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "is_any": {
            "name": "is_any",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[Any]",
                    "Type[T]"
                ]
            }
        },
        "make_union": {
            "name": "make_union",
            "location": 31,
            "return": [
                "tuple"
            ],
            "arguments": {
                "args": []
            }
        },
        "_is_empty": {
            "name": "_is_empty",
            "location": 35,
            "return": [
                "int",
                "datetime.datetime",
                "Optional[str]",
                "Iterable[Any]",
                "Union[int, float, complex]",
                "List['Product']",
                "bool"
            ],
            "arguments": {
                "typ": [
                    "str"
                ]
            }
        },
        "remove_empty_container": {
            "name": "remove_empty_container",
            "location": 40,
            "return": [
                "Union[(NotDefined, _T0, _T1)]"
            ],
            "arguments": {
                "obj1": [
                    "_T0"
                ],
                "obj2": [
                    "_T1"
                ]
            }
        },
        "_is_allowed_base_class": {
            "name": "_is_allowed_base_class",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "base_cls": [
                    "type",
                    "dict"
                ],
                "allowed_bases": [
                    "str"
                ]
            }
        },
        "find_acceptable_common_base": {
            "name": "find_acceptable_common_base",
            "location": 76,
            "return": [
                "Optional[type]"
            ],
            "arguments": {
                "cls1": [
                    "List[str]",
                    "Type",
                    "Callable"
                ],
                "cls2": [
                    "List[str]",
                    "Type",
                    "Callable"
                ],
                "allowed_bases": [
                    "bool",
                    "Dict[str, Any]",
                    "Union[float, str]",
                    "float",
                    "int",
                    "List[str]"
                ],
                "allowed_base_classes": [
                    "List[dict]",
                    "bool",
                    "T",
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "find_acceptable_common_abc": {
            "name": "find_acceptable_common_abc",
            "location": 96,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "cls1": [
                    "str",
                    "List[Dict]",
                    "Callable"
                ],
                "cls2": [
                    "str",
                    "List[Dict]",
                    "Callable"
                ]
            }
        },
        "simplify_int_float": {
            "name": "simplify_int_float",
            "location": 122,
            "return": [
                "Union[(NotDefined, Type[float])]"
            ],
            "arguments": {
                "obj1": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "Sequence[int]"
                ],
                "obj2": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "simplify_datetime_classes": {
            "name": "simplify_datetime_classes",
            "location": 129,
            "return": [
                "Union[(NotDefined, Type[datetime.datetime])]"
            ],
            "arguments": {
                "obj1": [
                    "Callable",
                    "str"
                ],
                "obj2": [
                    "Callable",
                    "str"
                ]
            }
        },
        "simplify_types": {
            "name": "simplify_types",
            "location": 145,
            "return": [
                "Union[(NotDefined, Type[type])]"
            ],
            "arguments": {
                "obj1": [
                    "list",
                    "Dict[str, Any]"
                ],
                "obj2": [
                    "list",
                    "Dict[str, Any]"
                ],
                "union_rewriter": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Iterator",
                    "int"
                ]
            }
        },
        "collapse_unions": {
            "name": "collapse_unions",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "obj2": [
                    "int",
                    "Callable",
                    "str"
                ],
                "union_rewriter": [
                    "float",
                    "List[str]",
                    "int"
                ]
            }
        },
        "simplify_generics": {
            "name": "simplify_generics",
            "location": 202,
            "return": [
                "bytearray",
                "float",
                "List[int]",
                "str",
                "datetime.timedelta"
            ],
            "arguments": {
                "obj1": [
                    "List[Callable]",
                    "str",
                    "Callable"
                ],
                "obj2": [
                    "List[Callable]",
                    "str",
                    "Callable"
                ],
                "two_element_transformers": [
                    "List[Callable]"
                ]
            }
        },
        "simplify_tuples": {
            "name": "simplify_tuples",
            "location": 259,
            "return": [
                "Union[(NotDefined, Type[Tuple[Any]])]"
            ],
            "arguments": {
                "tup1": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "tup2": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "two_element_transformers": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "simplify_to_abstract_class": {
            "name": "simplify_to_abstract_class",
            "location": 389,
            "return": [
                "Union[(NotDefined, _T1)]"
            ],
            "arguments": {
                "obj1": [
                    "Type",
                    "str",
                    "bool"
                ],
                "obj2": [
                    "_T1"
                ]
            }
        },
        "is_from_stdlib": {
            "name": "is_from_stdlib",
            "location": 413,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "type"
                ]
            }
        },
        "FindAcceptableCommonBase.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_bases_prefixes": [
                    "str",
                    "bool",
                    "int",
                    "pathlib.Path",
                    "Dict[str, str]"
                ],
                "allowed_bases": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "Tuple[int, int]",
                    "List[str]"
                ]
            }
        },
        "FindAcceptableCommonBase.__call__": {
            "name": "__call__",
            "location": 71,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "obj1": [
                    "bytes",
                    "bool",
                    "dict",
                    "baseplate.lib.config.EndpointConfiguration"
                ],
                "obj2": [
                    "bytes",
                    "bool",
                    "dict",
                    "baseplate.lib.config.EndpointConfiguration"
                ]
            }
        },
        "SimplifyTypes.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "union_rewriter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SimplifyTypes.__call__": {
            "name": "__call__",
            "location": 140,
            "return": [
                "Union[(NotDefined, Type[type])]"
            ],
            "arguments": {
                "self": [],
                "obj1": [
                    "T"
                ],
                "obj2": [
                    "T"
                ]
            }
        },
        "CollapseUnions.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "union_rewriter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CollapseUnions.__call__": {
            "name": "__call__",
            "location": 162,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj1": [
                    "_Any.Any",
                    "bool",
                    "str"
                ],
                "obj2": [
                    "_Any.Any",
                    "bool",
                    "str"
                ]
            }
        },
        "IdentityUnionRewriter.rewrite": {
            "name": "rewrite",
            "location": 173,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "_T0"
                ]
            }
        },
        "SimplifyGenerics.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "two_element_transformers": [
                    "List[Callable]"
                ]
            }
        },
        "SimplifyGenerics.__call__": {
            "name": "__call__",
            "location": 198,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj1": [
                    "float",
                    "Tuple[Tuple[int, Any]]",
                    "str"
                ],
                "obj2": [
                    "float",
                    "Tuple[Tuple[int, Any]]",
                    "str"
                ]
            }
        },
        "SimplifyTuples.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "two_element_transformers": [
                    "List[Callable]"
                ]
            }
        },
        "SimplifyTuples.__call__": {
            "name": "__call__",
            "location": 254,
            "return": [
                "Union[(NotDefined, Type[Tuple[Any]])]"
            ],
            "arguments": {
                "self": [],
                "obj1": [
                    "float",
                    "Tuple[Tuple[int, Any]]",
                    "str"
                ],
                "obj2": [
                    "float",
                    "Tuple[Tuple[int, Any]]",
                    "str"
                ]
            }
        },
        "TwoElementUnionRewriter.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "two_element_transformers": [
                    "List[Callable]"
                ]
            }
        },
        "TwoElementUnionRewriter._traverse_all_pairs": {
            "name": "_traverse_all_pairs",
            "location": 294,
            "return": [
                "Optional[Tuple[(int, int, type)]]"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "List[Dict]",
                    "Union[slice, List[slice], List[int]]",
                    "str",
                    "float"
                ],
                "transformers": [
                    "List[Callable]"
                ]
            }
        },
        "TwoElementUnionRewriter.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 307,
            "return": [
                "Union[(tuple, _T0)]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "_T0"
                ]
            }
        },
        "DepthFirstTypeTraverser.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "union_rewriter": [
                    "TwoElementUnionRewriter"
                ],
                "num_of_passes": [
                    "int",
                    "Optional[int]",
                    "float",
                    "bool"
                ]
            }
        },
        "DepthFirstTypeTraverser._rewrite": {
            "name": "_rewrite",
            "location": 346,
            "return": [
                "pathlib.Path",
                "Optional[int]",
                "List[int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "type"
                ]
            }
        },
        "DepthFirstTypeTraverser.rewrite": {
            "name": "rewrite",
            "location": 381,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "type"
                ]
            }
        },
        "MroSimplifier.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_modules": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "include_stdlib": [
                    "str",
                    "list",
                    "Sequence[str]",
                    "Set[str]"
                ]
            }
        },
        "MroSimplifier._simplify_by_mro": {
            "name": "_simplify_by_mro",
            "location": 436,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "type"
                ]
            }
        },
        "MroSimplifier.rewrite": {
            "name": "rewrite",
            "location": 447,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "type"
                ]
            }
        },
        "TupleSimplifier.__init__": {
            "name": "__init__",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_members": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "TupleSimplifier._simplify_big_tuple": {
            "name": "_simplify_big_tuple",
            "location": 480,
            "return": [
                "Union[(tuple, Type[tuple])]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "tuple"
                ]
            }
        },
        "TupleSimplifier.rewrite": {
            "name": "rewrite",
            "location": 496,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "type"
                ]
            }
        }
    },
    "typeline-master/typeline/rewriters/__init__.py": {},
    "typeline-master/typeline/rewriters/tests/module1.py": {},
    "typeline-master/typeline/rewriters/tests/module2.py": {},
    "typeline-master/typeline/rewriters/tests/test_depth_first_union_rewriter.py": {
        "TestDepthFirstRewriter.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDepthFirstRewriter.test_simplified": {
            "name": "test_simplified",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeline-master/typeline/rewriters/tests/test_generics.py": {
        "BaseRewriterTestCase.assertRewrittenEqual": {
            "name": "assertRewrittenEqual",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "goal": [
                    "bytes"
                ]
            }
        },
        "TestRemoveEmptyContainers.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveEmptyContainers.test_no_other_lists_leave_as_is": {
            "name": "test_no_other_lists_leave_as_is",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveEmptyContainers.test_if_list_present_remove_list_any": {
            "name": "test_if_list_present_remove_list_any",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemoveEmptyContainers.test_rewrite_dicts": {
            "name": "test_rewrite_dicts",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifyUnionOfListsSets.setUp": {
            "name": "setUp",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifyUnionOfListsSets.test_list_of_subclass_converted_into_list_of_baseclass_if_present": {
            "name": "test_list_of_subclass_converted_into_list_of_baseclass_if_present",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifyUnionOfListsSets.test_do_not_rewrite_if_base_in_stdlib": {
            "name": "test_do_not_rewrite_if_base_in_stdlib",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifyUnionOfListsSets.test_rewrite_more_than_two_elements": {
            "name": "test_rewrite_more_than_two_elements",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifyUnionOfListsSets.test_choose_deepest_common_baseclass_if_not_direct_subclasses": {
            "name": "test_choose_deepest_common_baseclass_if_not_direct_subclasses",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifyUnionOfListsSets.test_union_of_tuples_if_subclass_into_tuple": {
            "name": "test_union_of_tuples_if_subclass_into_tuple",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifyIntFloat.setUp": {
            "name": "setUp",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifyIntFloat.test_no_float_leave_as_is": {
            "name": "test_no_float_leave_as_is",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifyIntFloat.test_if_int_and_float_present_simplify_to_float": {
            "name": "test_if_int_and_float_present_simplify_to_float",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnionOfTypes.setUp": {
            "name": "setUp",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnionOfTypes.test_union_of_types_is_type_of_union": {
            "name": "test_union_of_types_is_type_of_union",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDepthFirstTraverser.setUp": {
            "name": "setUp",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDepthFirstTraverser.test_if_just_element_returns_it": {
            "name": "test_if_just_element_returns_it",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDepthFirstTraverser.test_nested_unions_width_generics": {
            "name": "test_nested_unions_width_generics",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEverything.setUp": {
            "name": "setUp",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEverything.test_small_stuff": {
            "name": "test_small_stuff",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEverything.test_big_stuff": {
            "name": "test_big_stuff",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEverything.test_common_bases": {
            "name": "test_common_bases",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeline-master/typeline/rewriters/tests/test_mro_simplifier.py": {
        "TestMroSimplifier.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMroSimplifier.test_smoke1": {
            "name": "test_smoke1",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMroSimplifier.test_smoke2": {
            "name": "test_smoke2",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMroSimplifier.test_smoke3": {
            "name": "test_smoke3",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMroSimplifier.test_smoke4": {
            "name": "test_smoke4",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeline-master/typeline/rewriters/tests/test_simplifiers.py": {
        "TestABCSimplifier.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestABCSimplifier.test_simplify_userdict_to_mutable_mapping": {
            "name": "test_simplify_userdict_to_mutable_mapping",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeline-master/typeline/rewriters/tests/test_tuples.py": {
        "TestTuples.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTuples.test_smoke": {
            "name": "test_smoke",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTuples.test_not_simplified": {
            "name": "test_not_simplified",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeline-master/typeline/rewriters/tests/__init__.py": {},
    "typeline-master/typeline/tests/myclass.py": {
        "MyClass.method": {
            "name": "method",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typeline-master/typeline/tests/test_retype.py": {},
    "typeline-master/typeline/tests/__init__.py": {}
}
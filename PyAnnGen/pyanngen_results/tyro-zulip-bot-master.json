{
    "tyro-zulip-bot-master/tools/custom_check.py": {
        "build_custom_checkers": {
            "name": "build_custom_checkers",
            "location": 12,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "by_lang": [
                    "bool",
                    "list[]",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "build_custom_checkers.custom_check_file": {
            "name": "custom_check_file",
            "location": 16,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "identifier": [
                    "str",
                    "Mapping"
                ],
                "rules": [
                    "bool",
                    "Callable"
                ],
                "skip_rules": [
                    "None",
                    "bool",
                    "Callable"
                ],
                "max_length": [
                    "None",
                    "str",
                    "dict",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "build_custom_checkers.check_custom_checks_py": {
            "name": "check_custom_checks_py",
            "location": 222,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "build_custom_checkers.check_custom_checks_nonpy": {
            "name": "check_custom_checks_nonpy",
            "location": 233,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "tyro-zulip-bot-master/tools/pep8.py": {
        "check_pep8": {
            "name": "check_pep8",
            "location": 14,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "files": [
                    "BinaryIO",
                    "bytes"
                ]
            }
        },
        "check_pep8.run_pycodestyle": {
            "name": "run_pycodestyle",
            "location": 17,
            "return": [
                "bool",
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "files": [
                    "str",
                    "list"
                ],
                "ignored_rules": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/tools/server_lib/lister.py": {
        "get_ftype": {
            "name": "get_ftype",
            "location": 15,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "fpath": [
                    "str",
                    "int"
                ],
                "use_shebang": [
                    "bool",
                    "str"
                ]
            }
        },
        "list_files": {
            "name": "list_files",
            "location": 42,
            "return": [
                "bool",
                "list[dict[str, typing.Any]]",
                "str",
                "list[int]",
                "Dict[str, str]",
                "list[]"
            ],
            "arguments": {
                "targets": [
                    "list[]",
                    "int",
                    "List[float]",
                    "str",
                    "bool"
                ],
                "ftypes": [
                    "list[]",
                    "List[str]",
                    "str",
                    "Set[str]",
                    "List[int]"
                ],
                "use_shebang": [
                    "bool",
                    "str",
                    "Optional[Tuple[int, int]]"
                ],
                "modified_only": [
                    "bool",
                    "str",
                    "int"
                ],
                "exclude": [
                    "list[]",
                    "str",
                    "Union[str, dict]"
                ],
                "group_by_ftype": [
                    "bool",
                    "int",
                    "List[int]",
                    "tuple"
                ],
                "extless_only": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/tools/server_lib/printer.py": {
        "print_err": {
            "name": "print_err",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "color": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "line": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "Set[str]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/tools/server_lib/test_handler.py": {
        "handle_input_and_run_tests_for_package": {
            "name": "handle_input_and_run_tests_for_package",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "package_name": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ],
                "path_list": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/tools/server_lib/__init__.py": {},
    "tyro-zulip-bot-master/zulip/setup.py": {
        "version": {
            "name": "version",
            "location": 13,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "recur_expand": {
            "name": "recur_expand",
            "location": 22,
            "return": [
                "",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "target_root": [
                    "str",
                    "bool"
                ],
                "dir": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "list[str]",
                    "list",
                    "None",
                    "list[]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/__init__.py": {},
    "tyro-zulip-bot-master/zulip/integrations/bridge_between_zulips/interrealm_bridge_config.py": {},
    "tyro-zulip-bot-master/zulip/integrations/bridge_with_irc/irc-mirror.py": {},
    "tyro-zulip-bot-master/zulip/integrations/bridge_with_irc/irc_mirror_backend.py": {
        "IRCBot.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "zulip_client": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "stream": [
                    "str",
                    "bool"
                ],
                "topic": [
                    "str",
                    "bool"
                ],
                "channel": [
                    "str",
                    "bool"
                ],
                "nickname": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "server": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "nickserv_password": [
                    "typing.Text",
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "IRCBot.zulip_sender": {
            "name": "zulip_sender",
            "location": 23,
            "return": [
                "bool",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "sender_string": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "IRCBot.connect": {
            "name": "connect",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IRCBot.on_nicknameinuse": {
            "name": "on_nicknameinuse",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "float",
                    "irc.clienServerConnection",
                    "typing.Callable[, ]",
                    "T",
                    "Callable"
                ],
                "e": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ]
            }
        },
        "IRCBot.on_welcome": {
            "name": "on_welcome",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "bool",
                    "int"
                ],
                "e": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ]
            }
        },
        "IRCBot.on_privmsg": {
            "name": "on_privmsg",
            "location": 76,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ],
                "e": [
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "T",
                    "None"
                ]
            }
        },
        "IRCBot.on_pubmsg": {
            "name": "on_pubmsg",
            "location": 91,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ],
                "e": [
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]",
                    "Optional[Any]",
                    "typing.Any",
                    "T",
                    "None"
                ]
            }
        },
        "IRCBot.on_dccmsg": {
            "name": "on_dccmsg",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "bool",
                    "irc.clienEvent",
                    "typing.Callable[..., str]",
                    "irc.clienServerConnection",
                    "Callable[..., str]"
                ],
                "e": [
                    "bool",
                    "irc.clienEvent",
                    "typing.Callable[..., str]",
                    "irc.clienServerConnection",
                    "Callable[..., str]"
                ]
            }
        },
        "IRCBot.on_dccchat": {
            "name": "on_dccchat",
            "location": 111,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "bool",
                    "irc.clienServerConnection",
                    "irc.clienEvent",
                    "int"
                ],
                "e": [
                    "typing.Callable[, ]",
                    "Callable",
                    "tuple[]",
                    "Callable[..., T]",
                    "typing.Mapping",
                    "tuple",
                    "typing.Sequence[typing.Any]",
                    "Mapping[str, Any]",
                    "Sequence[Any]"
                ]
            }
        },
        "IRCBot.on_welcome.forward_to_irc": {
            "name": "forward_to_irc",
            "location": 48,
            "return": [
                "None",
                "Iterator[T]",
                "Iterator[Dict[str, str]]",
                "Iterator"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/bridge_with_matrix/matrix_bridge.py": {
        "matrix_login": {
            "name": "matrix_login",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "matrix_client": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "matrix_config": [
                    "Callable"
                ]
            }
        },
        "matrix_join_room": {
            "name": "matrix_join_room",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "matrix_client": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "matrix_config": [
                    "Callable"
                ]
            }
        },
        "die": {
            "name": "die",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "matrix_to_zulip": {
            "name": "matrix_to_zulip",
            "location": 66,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "zulip_client": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "int"
                ],
                "zulip_config": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "int"
                ],
                "matrix_config": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "int"
                ],
                "no_noise": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "int"
                ]
            }
        },
        "get_message_content_from_event": {
            "name": "get_message_content_from_event",
            "location": 99,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "List[\"InlineContent\"]",
                "int",
                "Optional['Group']"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]"
                ],
                "no_noise": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "bool",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ]
            }
        },
        "shorten_irc_nick": {
            "name": "shorten_irc_nick",
            "location": 121,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "nick": [
                    "str"
                ]
            }
        },
        "zulip_to_matrix": {
            "name": "zulip_to_matrix",
            "location": 138,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "room": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "check_zulip_message_validity": {
            "name": "check_zulip_message_validity",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Optional[Dict]",
                    "dict",
                    "configparser.ConfigParser",
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "generate_parser": {
            "name": "generate_parser",
            "location": 168,
            "return": [
                "argparse.ArgumentParser",
                "Callable[[str, Mapping], Any]"
            ],
            "arguments": {}
        },
        "read_configuration": {
            "name": "read_configuration",
            "location": 194,
            "return": [
                "dict[, ]",
                "dict",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "configparser.RawConfigParser"
                ]
            }
        },
        "write_sample_config": {
            "name": "write_sample_config",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "target_path": [
                    "str"
                ],
                "zuliprc": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 252,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "matrix_to_zulip._matrix_to_zulip": {
            "name": "_matrix_to_zulip",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "room": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "event": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "zulip_to_matrix._zulip_to_matrix": {
            "name": "_zulip_to_matrix",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/bridge_with_matrix/test_matrix.py": {
        "new_temp_dir": {
            "name": "new_temp_dir",
            "location": 39,
            "return": [
                "",
                "typing.Generator[typing.Union[str,list[]]]"
            ],
            "arguments": {}
        },
        "MatrixBridgeScriptTests.output_from_script": {
            "name": "output_from_script",
            "location": 46,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "dict"
                ]
            }
        },
        "MatrixBridgeScriptTests.test_no_args": {
            "name": "test_no_args",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeScriptTests.test_help_usage_and_description": {
            "name": "test_help_usage_and_description",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeScriptTests.test_write_sample_config": {
            "name": "test_write_sample_config",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeScriptTests.test_write_sample_config_from_zuliprc": {
            "name": "test_write_sample_config_from_zuliprc",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeScriptTests.test_detect_zuliprc_does_not_exist": {
            "name": "test_detect_zuliprc_does_not_exist",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeZulipToMatrixTests.test_zulip_message_validity_success": {
            "name": "test_zulip_message_validity_success",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeZulipToMatrixTests.test_zulip_message_validity_failure": {
            "name": "test_zulip_message_validity_failure",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeZulipToMatrixTests.test_zulip_to_matrix": {
            "name": "test_zulip_to_matrix",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/bridge_with_matrix/__init__.py": {},
    "tyro-zulip-bot-master/zulip/integrations/codebase/zulip_codebase_config.py": {},
    "tyro-zulip-bot-master/zulip/integrations/git/zulip_git_config.py": {
        "commit_notice_destination": {
            "name": "commit_notice_destination",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "branch": [],
                "commit": []
            }
        },
        "format_commit_message": {
            "name": "format_commit_message",
            "location": 61,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "author": [],
                "subject": [],
                "commit_id": []
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/hg/zulip_changegroup.py": {
        "format_summary_line": {
            "name": "format_summary_line",
            "location": 38,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "web_url": [
                    "str",
                    "int",
                    "Exception"
                ],
                "user": [
                    "str",
                    "int"
                ],
                "base": [
                    "int",
                    "bool",
                    "dict"
                ],
                "tip": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "branch": [
                    "str",
                    "int"
                ],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "format_commit_lines": {
            "name": "format_commit_lines",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "web_url": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "repo": [
                    "list[int]",
                    "str",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "base": [
                    "str",
                    "int",
                    "float",
                    "dict[, ]",
                    "dict",
                    "None",
                    "Optional[int]",
                    "typing.Sequence[dict[str, str]]",
                    "Optional[Dict]",
                    "Sequence[Dict[str, str]]"
                ],
                "tip": [
                    "int",
                    "str",
                    "dict",
                    "float",
                    "Optional[int]",
                    "Optional[Dict]",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "send_zulip": {
            "name": "send_zulip",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "bool",
                    "Optional[Union[int, Any]]",
                    "typing.Any",
                    "None"
                ],
                "api_key": [
                    "str",
                    "bool",
                    "Optional[Union[int, Any]]",
                    "typing.Any",
                    "None"
                ],
                "site": [
                    "str",
                    "bool",
                    "Optional[Union[int, Any]]",
                    "typing.Any",
                    "None"
                ],
                "stream": [
                    "str",
                    "Optional[bool]",
                    "bytes",
                    "bool",
                    "Tuple[int, int]",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "subject": [
                    "str",
                    "Optional[bool]",
                    "bytes",
                    "bool",
                    "Tuple[int, int]",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "content": [
                    "str",
                    "Optional[bool]",
                    "bytes",
                    "bool",
                    "Tuple[int, int]",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 109,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[type]"
            ],
            "arguments": {
                "ui": [
                    "str",
                    "Dict[str, Any]"
                ],
                "item": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "hook": {
            "name": "hook",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ui": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "repo": [
                    "bool",
                    "type",
                    "str",
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/jabber/jabber_mirror.py": {
        "die": {
            "name": "die",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/jabber/jabber_mirror_backend.py": {
        "room_to_stream": {
            "name": "room_to_stream",
            "location": 60,
            "return": [
                "str",
                "bytes",
                "int",
                "IO",
                "List[str]"
            ],
            "arguments": {
                "room": [
                    "str",
                    "int",
                    "list[int]",
                    "list[list[str]]",
                    "float",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "stream_to_room": {
            "name": "stream_to_room",
            "location": 64,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "jid_to_zulip": {
            "name": "jid_to_zulip",
            "location": 68,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "jid": [
                    "str"
                ]
            }
        },
        "zulip_to_jid": {
            "name": "zulip_to_jid",
            "location": 75,
            "return": [
                "JID",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "jabber_domain": [
                    "str"
                ]
            }
        },
        "get_rooms": {
            "name": "get_rooms",
            "location": 305,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "zulipToJabber": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict[, ]",
                    "dict",
                    "zulip.Client"
                ]
            }
        },
        "config_error": {
            "name": "config_error",
            "location": 327,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "JabberToZulipBot.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "jid": [
                    "str",
                    "int",
                    "tuple",
                    "tuple[]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "rooms": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "JabberToZulipBot.set_zulip_client": {
            "name": "set_zulip_client",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "zulipToJabberClient": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "bool"
                ]
            }
        },
        "JabberToZulipBot.session_start": {
            "name": "session_start",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "JabberToZulipBot.join_muc": {
            "name": "join_muc",
            "location": 114,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "str",
                    "lowerpines.endpoints.message.Message",
                    "dict",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "JabberToZulipBot.leave_muc": {
            "name": "leave_muc",
            "location": 140,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "JabberToZulipBot.message": {
            "name": "message",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "JabberToZulipBot.private": {
            "name": "private",
            "location": 162,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "slice"
                ]
            }
        },
        "JabberToZulipBot.group": {
            "name": "group",
            "location": 179,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "JabberToZulipBot.nickname_to_jid": {
            "name": "nickname_to_jid",
            "location": 207,
            "return": [
                "JID",
                "int",
                "Dict[str, int]",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "str",
                    "bool",
                    "int"
                ],
                "nick": [
                    "str"
                ]
            }
        },
        "ZulipToJabberBot.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "zulip_client": [
                    "float",
                    "bool",
                    "discord.Client"
                ]
            }
        },
        "ZulipToJabberBot.set_jabber_client": {
            "name": "set_jabber_client",
            "location": 221,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "float",
                    "discord.Client"
                ]
            }
        },
        "ZulipToJabberBot.process_event": {
            "name": "process_event",
            "location": 225,
            "return": [
                "None",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ZulipToJabberBot.stream_message": {
            "name": "stream_message",
            "location": 244,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "list[str]",
                    "Message",
                    "List[str]"
                ]
            }
        },
        "ZulipToJabberBot.private_message": {
            "name": "private_message",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "list[str]",
                    "Message",
                    "List[str]"
                ]
            }
        },
        "ZulipToJabberBot.process_subscription": {
            "name": "process_subscription",
            "location": 277,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "ZulipToJabberBot.process_stream": {
            "name": "process_stream",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "get_rooms.get_stream_infos": {
            "name": "get_stream_infos",
            "location": 307,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Iterator[str]",
                    "tuple"
                ],
                "method": [
                    "str",
                    "Union[bytes, str, SupportsFloat]",
                    "float",
                    "Tuple[int, int]",
                    "Hashable"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/openshift/zulip_openshift_config.py": {
        "deployment_notice_destination": {
            "name": "deployment_notice_destination",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "branch": []
            }
        },
        "format_deployment_message": {
            "name": "format_deployment_message",
            "location": 64,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "app_name": [
                    "typing.Text"
                ],
                "url": [
                    "typing.Text"
                ],
                "branch": [
                    "typing.Text"
                ],
                "commit_id": [
                    "typing.Text"
                ],
                "dep_id": [
                    "typing.Text"
                ],
                "dep_time": [
                    "typing.Text"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/perforce/git_p4.py": {
        "p4_build_cmd": {
            "name": "p4_build_cmd",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "cmd": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "chdir": {
            "name": "chdir",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "Union[List, str]"
                ],
                "is_client_path": [
                    "str",
                    "bool",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "die": {
            "name": "die",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str",
                    "float"
                ]
            }
        },
        "write_pipe": {
            "name": "write_pipe",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Iterator[str]"
                ],
                "stdin": [
                    "dict",
                    "Optional[tuple]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "p4_write_pipe": {
            "name": "p4_write_pipe",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "List[str]",
                    "Optional[bool]",
                    "\"IntensityTable\"",
                    "bool"
                ],
                "stdin": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "read_pipe": {
            "name": "read_pipe",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Optional[str]"
                ],
                "ignore_error": [
                    "bool",
                    "Dict[int, dict]",
                    "Type"
                ]
            }
        },
        "p4_read_pipe": {
            "name": "p4_read_pipe",
            "location": 130,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "c": [
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "str"
                ],
                "ignore_error": [
                    "int",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "read_pipe_lines": {
            "name": "read_pipe_lines",
            "location": 134,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool"
                ]
            }
        },
        "p4_read_pipe_lines": {
            "name": "p4_read_pipe_lines",
            "location": 147,
            "return": [
                "int",
                "List[str]",
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "p4_has_command": {
            "name": "p4_has_command",
            "location": 152,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Callable"
                ]
            }
        },
        "p4_has_move_command": {
            "name": "p4_has_move_command",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "system": {
            "name": "system",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "str"
                ]
            }
        },
        "p4_system": {
            "name": "p4_system",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Callable"
                ]
            }
        },
        "p4_version_string": {
            "name": "p4_version_string",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "p4_integrate": {
            "name": "p4_integrate",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "src": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "dest": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "p4_sync": {
            "name": "p4_sync",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "f": [
                    "dict",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "p4_add": {
            "name": "p4_add",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "f": [
                    "\"Atom\"",
                    "int",
                    "dict"
                ]
            }
        },
        "p4_delete": {
            "name": "p4_delete",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "f": [
                    "Tuple[str, bool]",
                    "str"
                ]
            }
        },
        "p4_edit": {
            "name": "p4_edit",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "p4_revert": {
            "name": "p4_revert",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "p4_reopen": {
            "name": "p4_reopen",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "type": [
                    "Type",
                    "Callable"
                ],
                "f": [
                    "Type",
                    "Callable"
                ]
            }
        },
        "p4_move": {
            "name": "p4_move",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "src": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "dest": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "p4_describe": {
            "name": "p4_describe",
            "location": 240,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "change": [
                    "int",
                    "Union[str, List[str]]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "split_p4_type": {
            "name": "split_p4_type",
            "location": 268,
            "return": [
                "int",
                "Pattern",
                "Optional[\"Node\"]"
            ],
            "arguments": {
                "p4type": [
                    "bool",
                    "str"
                ]
            }
        },
        "p4_type": {
            "name": "p4_type",
            "location": 301,
            "return": [
                "str",
                "Optional[str]",
                "BinaryIO"
            ],
            "arguments": {
                "file": [
                    "list",
                    "bool"
                ]
            }
        },
        "p4_keywords_regexp_for_type": {
            "name": "p4_keywords_regexp_for_type",
            "location": 309,
            "return": [
                "Optional[Callable[[bool], None]]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "base": [
                    "str",
                    "bool"
                ],
                "type_mods": [
                    "str",
                    "bool"
                ]
            }
        },
        "p4_keywords_regexp_for_file": {
            "name": "p4_keywords_regexp_for_file",
            "location": 333,
            "return": [
                "bool",
                "Callable[[Type, str], bool]",
                "Optional['Entity']"
            ],
            "arguments": {
                "file": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "setP4ExecBit": {
            "name": "setP4ExecBit",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "str",
                    "float"
                ],
                "mode": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "getP4OpenedType": {
            "name": "getP4OpenedType",
            "location": 355,
            "return": [
                "List[int]",
                "dict",
                "bytearray",
                "Optional[str]",
                "Container[str]",
                "str"
            ],
            "arguments": {
                "file": [
                    "bool"
                ]
            }
        },
        "getP4Labels": {
            "name": "getP4Labels",
            "location": 366,
            "return": [
                "str",
                "List[List[str]]",
                "int"
            ],
            "arguments": {
                "depotPaths": [
                    "Optional[str]"
                ]
            }
        },
        "getGitTags": {
            "name": "getGitTags",
            "location": 378,
            "return": [
                "str",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "diffTreePattern": {
            "name": "diffTreePattern",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "parseDiffTreeEntry": {
            "name": "parseDiffTreeEntry",
            "location": 392,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "isModeExec": {
            "name": "isModeExec",
            "location": 425,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "mode": [
                    "int",
                    "str",
                    "Callable[[Any], T]",
                    "List[Dict[str, Any]]",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "isModeExecChanged": {
            "name": "isModeExecChanged",
            "location": 430,
            "return": [
                "bool",
                "float",
                "int",
                "List[str]"
            ],
            "arguments": {
                "src_mode": [
                    "str",
                    "int"
                ],
                "dst_mode": [
                    "str",
                    "int"
                ]
            }
        },
        "p4CmdList": {
            "name": "p4CmdList",
            "location": 433,
            "return": [
                "int",
                "bool",
                "\"Parameter\"",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "cmd": [
                    "dict",
                    "str",
                    "List[List[int]]",
                    "bool",
                    "List[str]"
                ],
                "stdin": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Union[bytes, str]",
                    "Optional[bytes]",
                    "bool"
                ],
                "stdin_mode": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "cb": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "p4Cmd": {
            "name": "p4Cmd",
            "location": 483,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "cmd": [
                    "Deque",
                    "Callable[..., bool]"
                ]
            }
        },
        "p4Where": {
            "name": "p4Where",
            "location": 490,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "depotPath": [
                    "str"
                ]
            }
        },
        "currentGitBranch": {
            "name": "currentGitBranch",
            "location": 523,
            "return": [
                "str",
                "type",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "isValidGitDir": {
            "name": "isValidGitDir",
            "location": 526,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "parseRevision": {
            "name": "parseRevision",
            "location": 532,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "ref": [
                    "str",
                    "Collection[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "branchExists": {
            "name": "branchExists",
            "location": 535,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ref": [
                    "str",
                    "Match[str]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "extractLogMessageFromGitCommit": {
            "name": "extractLogMessageFromGitCommit",
            "location": 540,
            "return": [
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "commit": [
                    "float",
                    "subprocess.Popen",
                    "Optional[List[str]]",
                    "Optional[BaseException]"
                ]
            }
        },
        "extractSettingsGitLog": {
            "name": "extractSettingsGitLog",
            "location": 554,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "log": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "gitBranchExists": {
            "name": "gitBranchExists",
            "location": 579,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "branch": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "gitConfig": {
            "name": "gitConfig",
            "location": 586,
            "return": [
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "gitConfigBool": {
            "name": "gitConfigBool",
            "location": 593,
            "return": [
                "Dict[str, Any]",
                "dict",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "gitConfigList": {
            "name": "gitConfigList",
            "location": 605,
            "return": [
                "Dict[str, Any]",
                "dict",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "p4BranchesInGit": {
            "name": "p4BranchesInGit",
            "location": 611,
            "return": [
                "Dict[str, str]",
                "int",
                "Iterable[Iterable[T]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "branchesAreInRemotes": [
                    "str",
                    "int",
                    "Callable",
                    "Coroutine[Any, Any, Any]",
                    "bool"
                ]
            }
        },
        "branch_exists": {
            "name": "branch_exists",
            "location": 643,
            "return": [
                "bool"
            ],
            "arguments": {
                "branch": [
                    "int",
                    "float"
                ]
            }
        },
        "findUpstreamBranchPoint": {
            "name": "findUpstreamBranchPoint",
            "location": 654,
            "return": [
                "str",
                "Tuple[str]",
                "bytes"
            ],
            "arguments": {
                "head": [
                    "str"
                ]
            }
        },
        "createOrUpdateBranchesFromOrigin": {
            "name": "createOrUpdateBranchesFromOrigin",
            "location": 681,
            "return": [
                ""
            ],
            "arguments": {
                "localRefPrefix": [
                    "str",
                    "List[str]"
                ],
                "silent": [
                    "bool",
                    "tuple"
                ]
            }
        },
        "originP4BranchesExist": {
            "name": "originP4BranchesExist",
            "location": 728,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "p4ChangesForPaths": {
            "name": "p4ChangesForPaths",
            "location": 731,
            "return": [
                "str",
                "bool",
                "Type[Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "depotPaths": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "bool"
                ],
                "changeRange": [
                    "bool",
                    "str",
                    "TextIO"
                ]
            }
        },
        "p4PathStartsWith": {
            "name": "p4PathStartsWith",
            "location": 746,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "getClientSpec": {
            "name": "getClientSpec",
            "location": 758,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "getClientRoot": {
            "name": "getClientRoot",
            "location": 788,
            "return": [
                "str",
                "Dict[str, Sequence[Any]]"
            ],
            "arguments": {}
        },
        "wildcard_decode": {
            "name": "wildcard_decode",
            "location": 806,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "wildcard_encode": {
            "name": "wildcard_encode",
            "location": 818,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "wildcard_present": {
            "name": "wildcard_present",
            "location": 826,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "printUsage": {
            "name": "printUsage",
            "location": 3193,
            "return": [
                ""
            ],
            "arguments": {
                "commands": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 3213,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 831,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.__init__": {
            "name": "__init__",
            "location": 837,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.p4UserId": {
            "name": "p4UserId",
            "location": 841,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.p4UserIsMe": {
            "name": "p4UserIsMe",
            "location": 852,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p4User": [
                    "dict"
                ]
            }
        },
        "P4UserMap.getUserCacheFilename": {
            "name": "getUserCacheFilename",
            "location": 860,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.getUserMapFromPerforceServer": {
            "name": "getUserMapFromPerforceServer",
            "location": 864,
            "return": [
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.loadUserMapFromCache": {
            "name": "loadUserMapFromCache",
            "location": 883,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Debug.__init__": {
            "name": "__init__",
            "location": 897,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Debug.run": {
            "name": "run",
            "location": 903,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4RollBack.__init__": {
            "name": "__init__",
            "location": 912,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4RollBack.run": {
            "name": "run",
            "location": 920,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Submit.__init__": {
            "name": "__init__",
            "location": 973,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.check": {
            "name": "check",
            "location": 1001,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.separate_jobs_from_description": {
            "name": "separate_jobs_from_description",
            "location": 1005,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "P4Submit.prepareLogMessage": {
            "name": "prepareLogMessage",
            "location": 1029,
            "return": [
                "int",
                "str",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "jobs": [
                    "str",
                    "List[int]",
                    "Iterable[Type]"
                ]
            }
        },
        "P4Submit.patchRCSKeywords": {
            "name": "patchRCSKeywords",
            "location": 1061,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "FrozenSet[str]"
                ],
                "pattern": [
                    "str",
                    "bytes",
                    "TextIO",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "P4Submit.p4UserForCommit": {
            "name": "p4UserForCommit",
            "location": 1084,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "P4Submit.checkValidP4Users": {
            "name": "checkValidP4Users",
            "location": 1095,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "commits": [
                    "Mapping",
                    "float",
                    "bool",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "P4Submit.lastP4Changelist": {
            "name": "lastP4Changelist",
            "location": 1106,
            "return": [
                "bool",
                "List[str]",
                "str",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.modifyChangelistUser": {
            "name": "modifyChangelistUser",
            "location": 1125,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "dict",
                    "Optional[str]"
                ],
                "newUser": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "P4Submit.canChangeChangelists": {
            "name": "canChangeChangelists",
            "location": 1147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.prepareSubmitTemplate": {
            "name": "prepareSubmitTemplate",
            "location": 1159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.edit_template": {
            "name": "edit_template",
            "location": 1191,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "template_file": [
                    "IO[bytes]"
                ]
            }
        },
        "P4Submit.applyCommit": {
            "name": "applyCommit",
            "location": 1226,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "P4Submit.exportGitTags": {
            "name": "exportGitTags",
            "location": 1495,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gitTags": [
                    "list",
                    "Type[Exception]",
                    "Dict[str, Any]",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "P4Submit.run": {
            "name": "run",
            "location": 1564,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "View.__init__": {
            "name": "__init__",
            "location": 1787,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_name": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "View.append": {
            "name": "append",
            "location": 1793,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "view_line": [
                    "Sequence[str]",
                    "Tuple[str, str]",
                    "os.DirEntry",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "View.convert_client_path": {
            "name": "convert_client_path",
            "location": 1837,
            "return": [
                "Tuple[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "clientFile": [
                    "str",
                    "bytes"
                ]
            }
        },
        "View.update_client_spec_path_cache": {
            "name": "update_client_spec_path_cache",
            "location": 1844,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Optional[List[\"DeliveryItem\"]]"
            ],
            "arguments": {
                "self": [],
                "files": []
            }
        },
        "View.map_in_client": {
            "name": "map_in_client",
            "location": 1870,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "depot_path": [
                    "str"
                ]
            }
        },
        "P4Sync.__init__": {
            "name": "__init__",
            "location": 1884,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.checkpoint": {
            "name": "checkpoint",
            "location": 1936,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.extractFilesFromCommit": {
            "name": "extractFilesFromCommit",
            "location": 1943,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "str",
                    "Union[str, IO[bytes]]",
                    "bool"
                ]
            }
        },
        "P4Sync.stripRepoPath": {
            "name": "stripRepoPath",
            "location": 1970,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "prefixes": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "P4Sync.splitFilesIntoBranches": {
            "name": "splitFilesIntoBranches",
            "location": 2002,
            "return": [
                "str",
                "List[str]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bytes",
                    "Union[str, List[str]]",
                    "dict",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "P4Sync.streamOneP4File": {
            "name": "streamOneP4File",
            "location": 2048,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ],
                "contents": [
                    "Dict[str, str]",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "P4Sync.streamOneP4Deletion": {
            "name": "streamOneP4Deletion",
            "location": 2118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "IO[str]",
                    "AsyncGenerator",
                    "Coroutine"
                ]
            }
        },
        "P4Sync.streamP4FilesCb": {
            "name": "streamP4FilesCb",
            "location": 2125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "marshalled": [
                    "str"
                ]
            }
        },
        "P4Sync.streamP4Files": {
            "name": "streamP4Files",
            "location": 2168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "files": [
                    "Sequence[str]",
                    "IO[str]",
                    "IO[Any]",
                    "List[str]"
                ]
            }
        },
        "P4Sync.make_email": {
            "name": "make_email",
            "location": 2209,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "userid": [
                    "str",
                    "deque",
                    "int",
                    "list"
                ]
            }
        },
        "P4Sync.streamTag": {
            "name": "streamTag",
            "location": 2216,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gitStream": [
                    "str",
                    "int",
                    "Dict[str, bool]",
                    "Set[int]"
                ],
                "labelName": [
                    "str"
                ],
                "labelDetails": [
                    "str"
                ],
                "commit": [
                    "str",
                    "Container[str]"
                ],
                "epoch": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, bytes]"
                ]
            }
        },
        "P4Sync.commit": {
            "name": "commit",
            "location": 2247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "details": [
                    "bool",
                    "str",
                    "list",
                    "Set[str]",
                    "Iterator[str]"
                ],
                "files": [
                    "str",
                    "\"Pipeline\""
                ],
                "branch": [
                    "str"
                ],
                "parent": [
                    "str",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        },
        "P4Sync.getLabels": {
            "name": "getLabels",
            "location": 2326,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.importP4Labels": {
            "name": "importP4Labels",
            "location": 2356,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Hashable",
                    "Callable"
                ],
                "p4Labels": [
                    "str"
                ]
            }
        },
        "P4Sync.guessProjectName": {
            "name": "guessProjectName",
            "location": 2415,
            "return": [
                "str",
                "Dict[str, Any]",
                "IO",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.getBranchMapping": {
            "name": "getBranchMapping",
            "location": 2424,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.getBranchMappingFromGitBranches": {
            "name": "getBranchMappingFromGitBranches",
            "location": 2484,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.updateOptionDict": {
            "name": "updateOptionDict",
            "location": 2493,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        },
        "P4Sync.readOptions": {
            "name": "readOptions",
            "location": 2500,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "P4Sync.gitRefForBranch": {
            "name": "gitRefForBranch",
            "location": 2504,
            "return": [
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "int",
                    "bool",
                    "Union[str, int]"
                ]
            }
        },
        "P4Sync.gitCommitByP4Change": {
            "name": "gitCommitByP4Change",
            "location": 2513,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Union[dict, list]",
                    "Callable",
                    "Union[str, int]"
                ],
                "change": [
                    "str",
                    "Callable",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "P4Sync.importNewBranch": {
            "name": "importNewBranch",
            "location": 2546,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "branch": [
                    "str",
                    "bool",
                    "os.DirEntry"
                ],
                "maxChange": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "P4Sync.searchParent": {
            "name": "searchParent",
            "location": 2574,
            "return": [
                "Optional[int]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str"
                ],
                "branch": [
                    "str",
                    "IO[str]"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "P4Sync.importChanges": {
            "name": "importChanges",
            "location": 2589,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "changes": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "P4Sync.importHeadRevision": {
            "name": "importHeadRevision",
            "location": 2671,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "revision": [
                    "str",
                    "int"
                ]
            }
        },
        "P4Sync.run": {
            "name": "run",
            "location": 2726,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Rebase.__init__": {
            "name": "__init__",
            "location": 3032,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Rebase.run": {
            "name": "run",
            "location": 3041,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Rebase.rebase": {
            "name": "rebase",
            "location": 3048,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Clone.__init__": {
            "name": "__init__",
            "location": 3068,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Clone.ensure_value": {
            "name": "ensure_value",
            "location": 3087,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Sequence[MutableMapping]"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "P4Clone.defaultDestination": {
            "name": "defaultDestination",
            "location": 3092,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Clone.run": {
            "name": "run",
            "location": 3101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Branches.__init__": {
            "name": "__init__",
            "location": 3156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Branches.run": {
            "name": "run",
            "location": 3163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "HelpFormatter.__init__": {
            "name": "__init__",
            "location": 3184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.format_description": {
            "name": "format_description",
            "location": 3187,
            "return": [
                "str",
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "CalledProcessError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "returncode": [
                    "int",
                    "bool",
                    "float"
                ],
                "cmd": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CalledProcessError.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "int",
                "dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.streamP4Files.streamP4FilesCbSelf": {
            "name": "streamP4FilesCbSelf",
            "location": 2196,
            "return": [
                ""
            ],
            "arguments": {
                "entry": [
                    "str"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/perforce/zulip_change-commit.py": {},
    "tyro-zulip-bot-master/zulip/integrations/perforce/zulip_perforce_config.py": {
        "commit_notice_destination": {
            "name": "commit_notice_destination",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "changelist": []
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/svn/zulip_svn_config.py": {
        "commit_notice_destination": {
            "name": "commit_notice_destination",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "commit": []
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/trac/zulip_trac.py": {
        "markdown_ticket_url": {
            "name": "markdown_ticket_url",
            "location": 58,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "ticket": [],
                "heading": [
                    "typing.Text"
                ]
            }
        },
        "markdown_block": {
            "name": "markdown_block",
            "location": 62,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "desc": []
            }
        },
        "truncate": {
            "name": "truncate",
            "location": 66,
            "return": [],
            "arguments": {
                "string": [],
                "length": []
            }
        },
        "trac_subject": {
            "name": "trac_subject",
            "location": 72,
            "return": [],
            "arguments": {
                "ticket": []
            }
        },
        "send_update": {
            "name": "send_update",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "ticket": [],
                "content": []
            }
        },
        "ZulipPlugin.ticket_created": {
            "name": "ticket_created",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticket": []
            }
        },
        "ZulipPlugin.ticket_changed": {
            "name": "ticket_changed",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticket": [],
                "comment": [],
                "author": [],
                "old_values": []
            }
        },
        "ZulipPlugin.ticket_deleted": {
            "name": "ticket_deleted",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticket": []
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/trac/zulip_trac_config.py": {},
    "tyro-zulip-bot-master/zulip/integrations/trello/zulip_trello.py": {
        "get_model_id": {
            "name": "get_model_id",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "options": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "get_webhook_id": {
            "name": "get_webhook_id",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "options": [
                    "str"
                ],
                "id_model": [
                    "str"
                ]
            }
        },
        "create_webhook": {
            "name": "create_webhook",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "options": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "dict[, ]",
                    "dict",
                    "T"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/trello/__init__.py": {},
    "tyro-zulip-bot-master/zulip/integrations/zephyr/zephyr_mirror.py": {
        "die": {
            "name": "die",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "run_job": {
            "name": "run_job",
            "location": 66,
            "return": [
                "int",
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "shard": [
                    "str",
                    "tuple",
                    "bool",
                    "tuple[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip/integrations/zephyr/zephyr_mirror_backend.py": {
        "to_zulip_username": {
            "name": "to_zulip_username",
            "location": 52,
            "return": [
                "str",
                "Mapping",
                "bool"
            ],
            "arguments": {
                "zephyr_username": [
                    "str"
                ]
            }
        },
        "to_zephyr_username": {
            "name": "to_zephyr_username",
            "location": 65,
            "return": [
                "str",
                "bool",
                "Dict[int, dict]",
                "datetime.date",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "zulip_username": [
                    "str"
                ]
            }
        },
        "different_paragraph": {
            "name": "different_paragraph",
            "location": 88,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "next_line": [
                    "str"
                ]
            }
        },
        "unwrap_lines": {
            "name": "unwrap_lines",
            "location": 97,
            "return": [
                "typing.Text",
                "str",
                "Match",
                "bool",
                "int",
                "List[Dict[str, str]]",
                "list",
                "Type"
            ],
            "arguments": {
                "body": [
                    "bytes",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "send_zulip": {
            "name": "send_zulip",
            "location": 121,
            "return": [
                "bool",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "zeph": []
            }
        },
        "send_error_zulip": {
            "name": "send_error_zulip",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "error_msg": [
                    "Dict[str, int]",
                    "dict[str, int]",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "zephyr_bulk_subscribe": {
            "name": "zephyr_bulk_subscribe",
            "location": 164,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "subs": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "update_subscriptions": {
            "name": "update_subscriptions",
            "location": 200,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {}
        },
        "maybe_kill_child": {
            "name": "maybe_kill_child",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "maybe_restart_mirroring_script": {
            "name": "maybe_restart_mirroring_script",
            "location": 233,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "process_loop": {
            "name": "process_loop",
            "location": 253,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "log": [
                    "Optional[Dict]",
                    "dict[, ]",
                    "int",
                    "None",
                    "Dict[str, Any]",
                    "Callable",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "parse_zephyr_body": {
            "name": "parse_zephyr_body",
            "location": 293,
            "return": [
                "tuple[typing.Text]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "zephyr_data": [
                    "str"
                ],
                "notice_format": [
                    "str",
                    "bool",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "parse_crypt_table": {
            "name": "parse_crypt_table",
            "location": 310,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "zephyr_class": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "typing.Type",
                    "Type",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Type[T]"
                ],
                "instance": [
                    "type",
                    "typing.Type",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "decrypt_zephyr": {
            "name": "decrypt_zephyr",
            "location": 332,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "MutableMapping[str, Any]",
                "float",
                "int",
                "list[]",
                "Optional[float]",
                "dict[, ]"
            ],
            "arguments": {
                "zephyr_class": [
                    "typing.Type",
                    "type",
                    "typing.Callable[, ]",
                    "types.FunctionType",
                    "types.MethodType",
                    "Callable"
                ],
                "instance": [
                    "typing.Type",
                    "type",
                    "typing.Callable[, ]",
                    "types.FunctionType",
                    "types.MethodType",
                    "Callable"
                ],
                "body": [
                    "str",
                    "bool",
                    "float",
                    "list[]",
                    "int",
                    "dict[, ]",
                    "list",
                    "dict"
                ]
            }
        },
        "process_notice": {
            "name": "process_notice",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "notice": [
                    "str",
                    "datetime.datetime",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict"
                ],
                "log": [
                    "logging.Logger",
                    "Dict[str, Any]",
                    "Union[int, str]",
                    "str"
                ]
            }
        },
        "decode_unicode_byte_strings": {
            "name": "decode_unicode_byte_strings",
            "location": 462,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "zeph": [
                    "str"
                ]
            }
        },
        "quit_failed_initialization": {
            "name": "quit_failed_initialization",
            "location": 474,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "zephyr_init_autoretry": {
            "name": "zephyr_init_autoretry",
            "location": 480,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "Sequence[str]"
            ],
            "arguments": {}
        },
        "zephyr_load_session_autoretry": {
            "name": "zephyr_load_session_autoretry",
            "location": 496,
            "return": [
                "None",
                "int",
                "Set[str]",
                "DefaultDict",
                "str",
                "Set[VT]"
            ],
            "arguments": {
                "session_path": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "zephyr_subscribe_autoretry": {
            "name": "zephyr_subscribe_autoretry",
            "location": 512,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "sub": [
                    "str",
                    "int",
                    "VT"
                ]
            }
        },
        "zephyr_to_zulip": {
            "name": "zephyr_to_zulip",
            "location": 528,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "options": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "send_zephyr": {
            "name": "send_zephyr",
            "location": 580,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "zwrite_args": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "content": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "send_authed_zephyr": {
            "name": "send_authed_zephyr",
            "location": 597,
            "return": [
                "str",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "zwrite_args": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "content": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "send_unauthed_zephyr": {
            "name": "send_unauthed_zephyr",
            "location": 601,
            "return": [
                "int",
                "Iterable[str]",
                "dict"
            ],
            "arguments": {
                "zwrite_args": [
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Callable"
                ],
                "content": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "zcrypt_encrypt_content": {
            "name": "zcrypt_encrypt_content",
            "location": 605,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "zephyr_class": [
                    "str",
                    "Set[str]",
                    "bool",
                    "set[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "instance": [
                    "str",
                    "Set[str]",
                    "bool",
                    "set[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "content": [
                    "str",
                    "bool"
                ]
            }
        },
        "forward_to_zephyr": {
            "name": "forward_to_zephyr",
            "location": 631,
            "return": [
                "Dict[str, Any]",
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Union[str, dict]",
                    "logging.LogRecord"
                ]
            }
        },
        "maybe_forward_to_zephyr": {
            "name": "maybe_forward_to_zephyr",
            "location": 760,
            "return": [
                "None",
                "mypy.types.Type",
                "Iterator[Dict[str, str]]",
                "Iterator"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "zulip_to_zephyr": {
            "name": "zulip_to_zephyr",
            "location": 783,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "options": [
                    "bool",
                    "str"
                ]
            }
        },
        "subscribed_to_mail_messages": {
            "name": "subscribed_to_mail_messages",
            "location": 794,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "add_zulip_subscriptions": {
            "name": "add_zulip_subscriptions",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "bytes",
                    "Exception",
                    "int",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "valid_stream_name": {
            "name": "valid_stream_name",
            "location": 896,
            "return": [
                "bool",
                "str",
                "type",
                "Optional[List[str]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "parse_zephyr_subs": {
            "name": "parse_zephyr_subs",
            "location": 900,
            "return": [
                "set[]",
                "int",
                "set[tuple[]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "open_logger": {
            "name": "open_logger",
            "location": 929,
            "return": [
                "str",
                "int",
                "bool",
                "apistar.types.RouteConfig"
            ],
            "arguments": {}
        },
        "configure_logger": {
            "name": "configure_logger",
            "location": 955,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "int",
                    "Union[int, str]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Optional[str]",
                    "set[str]",
                    "Optional[dict]",
                    "Optional[Set[str]]"
                ],
                "direction_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 970,
            "return": [],
            "arguments": {}
        },
        "die_gracefully": {
            "name": "die_gracefully",
            "location": 1054,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip/tests/test_default_arguments.py": {
        "TestDefaultArguments.test_invalid_arguments": {
            "name": "test_invalid_arguments",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultArguments.test_config_path_with_tilde": {
            "name": "test_config_path_with_tilde",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os_path_exists": [
                    "str",
                    "Union[Dict[str, Any], List[Any]]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[typing.Any]",
                    "list[str]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip/tests/__init__.py": {},
    "tyro-zulip-bot-master/zulip/zulip/api_examples.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "tyro-zulip-bot-master/zulip/zulip/send.py": {
        "do_send_message": {
            "name": "do_send_message",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [],
                "message_data": []
            }
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "tyro-zulip-bot-master/zulip/zulip/__init__.py": {
        "_default_client": {
            "name": "_default_client",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "add_default_arguments": {
            "name": "add_default_arguments",
            "location": 108,
            "return": [],
            "arguments": {
                "parser": [],
                "patch_error_handling": [],
                "allow_provisioning": []
            }
        },
        "generate_option_group": {
            "name": "generate_option_group",
            "location": 178,
            "return": [],
            "arguments": {
                "parser": [],
                "prefix": []
            }
        },
        "init_from_options": {
            "name": "init_from_options",
            "location": 233,
            "return": [],
            "arguments": {
                "options": [],
                "client": []
            }
        },
        "get_default_config_filename": {
            "name": "get_default_config_filename",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "validate_boolean_field": {
            "name": "validate_boolean_field",
            "location": 274,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "CountingBackoff.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "maximum_retries": [],
                "timeout_success_equivalent": []
            }
        },
        "CountingBackoff.keep_going": {
            "name": "keep_going",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountingBackoff.succeed": {
            "name": "succeed",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountingBackoff.fail": {
            "name": "fail",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountingBackoff._check_success_timeout": {
            "name": "_check_success_timeout",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomExponentialBackoff.fail": {
            "name": "fail",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "email": [],
                "api_key": [],
                "config_file": [],
                "verbose": [],
                "retry_on_errors": [],
                "site": [],
                "client": [],
                "cert_bundle": [],
                "insecure": [],
                "client_cert": [],
                "client_cert_key": []
            }
        },
        "Client.ensure_session": {
            "name": "ensure_session",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_user_agent": {
            "name": "get_user_agent",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.do_api_query": {
            "name": "do_api_query",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "orig_request": [],
                "url": [],
                "method": [],
                "longpolling": [],
                "files": [],
                "timeout": []
            }
        },
        "Client.call_endpoint": {
            "name": "call_endpoint",
            "location": 610,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "method": [],
                "request": [],
                "longpolling": [],
                "files": [],
                "timeout": []
            }
        },
        "Client.call_on_each_event": {
            "name": "call_on_each_event",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [],
                "event_types": [],
                "narrow": []
            }
        },
        "Client.call_on_each_message": {
            "name": "call_on_each_message",
            "location": 687,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Client.get_messages": {
            "name": "get_messages",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "message_filters": []
            }
        },
        "Client.get_raw_message": {
            "name": "get_raw_message",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": []
            }
        },
        "Client.send_message": {
            "name": "send_message",
            "location": 716,
            "return": [],
            "arguments": {
                "self": [],
                "message_data": []
            }
        },
        "Client.upload_file": {
            "name": "upload_file",
            "location": 726,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Client.update_message": {
            "name": "update_message",
            "location": 736,
            "return": [],
            "arguments": {
                "self": [],
                "message_data": []
            }
        },
        "Client.delete_message": {
            "name": "delete_message",
            "location": 747,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": []
            }
        },
        "Client.update_message_flags": {
            "name": "update_message_flags",
            "location": 757,
            "return": [],
            "arguments": {
                "self": [],
                "update_data": []
            }
        },
        "Client.mark_all_as_read": {
            "name": "mark_all_as_read",
            "location": 768,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.mark_stream_as_read": {
            "name": "mark_stream_as_read",
            "location": 781,
            "return": [],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Client.mark_topic_as_read": {
            "name": "mark_topic_as_read",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "stream_id": [],
                "topic_name": []
            }
        },
        "Client.get_message_history": {
            "name": "get_message_history",
            "location": 812,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": []
            }
        },
        "Client.add_reaction": {
            "name": "add_reaction",
            "location": 822,
            "return": [],
            "arguments": {
                "self": [],
                "reaction_data": []
            }
        },
        "Client.remove_reaction": {
            "name": "remove_reaction",
            "location": 840,
            "return": [],
            "arguments": {
                "self": [],
                "reaction_data": []
            }
        },
        "Client.get_realm_emoji": {
            "name": "get_realm_emoji",
            "location": 859,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.upload_custom_emoji": {
            "name": "upload_custom_emoji",
            "location": 869,
            "return": [],
            "arguments": {
                "self": [],
                "emoji_name": [],
                "file_obj": []
            }
        },
        "Client.get_realm_filters": {
            "name": "get_realm_filters",
            "location": 883,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.add_realm_filter": {
            "name": "add_realm_filter",
            "location": 896,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "url_format_string": []
            }
        },
        "Client.remove_realm_filter": {
            "name": "remove_realm_filter",
            "location": 913,
            "return": [],
            "arguments": {
                "self": [],
                "filter_id": []
            }
        },
        "Client.get_server_settings": {
            "name": "get_server_settings",
            "location": 926,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_events": {
            "name": "get_events",
            "location": 939,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.register": {
            "name": "register",
            "location": 951,
            "return": [],
            "arguments": {
                "self": [],
                "event_types": [],
                "narrow": []
            }
        },
        "Client.deregister": {
            "name": "deregister",
            "location": 976,
            "return": [],
            "arguments": {
                "self": [],
                "queue_id": [],
                "timeout": []
            }
        },
        "Client.get_profile": {
            "name": "get_profile",
            "location": 995,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.get_user_presence": {
            "name": "get_user_presence",
            "location": 1009,
            "return": [],
            "arguments": {
                "self": [],
                "email": []
            }
        },
        "Client.update_presence": {
            "name": "update_presence",
            "location": 1022,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.get_streams": {
            "name": "get_streams",
            "location": 1040,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.update_stream": {
            "name": "update_stream",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": [],
                "stream_data": []
            }
        },
        "Client.delete_stream": {
            "name": "delete_stream",
            "location": 1063,
            "return": [],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Client.get_members": {
            "name": "get_members",
            "location": 1073,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.get_alert_words": {
            "name": "get_alert_words",
            "location": 1084,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.add_alert_words": {
            "name": "add_alert_words",
            "location": 1094,
            "return": [],
            "arguments": {
                "self": [],
                "alert_words": []
            }
        },
        "Client.remove_alert_words": {
            "name": "remove_alert_words",
            "location": 1107,
            "return": [],
            "arguments": {
                "self": [],
                "alert_words": []
            }
        },
        "Client.list_subscriptions": {
            "name": "list_subscriptions",
            "location": 1120,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.add_subscriptions": {
            "name": "add_subscriptions",
            "location": 1131,
            "return": [],
            "arguments": {
                "self": [],
                "streams": []
            }
        },
        "Client.remove_subscriptions": {
            "name": "remove_subscriptions",
            "location": 1146,
            "return": [],
            "arguments": {
                "self": [],
                "streams": [],
                "principals": []
            }
        },
        "Client.mute_topic": {
            "name": "mute_topic",
            "location": 1164,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.update_subscription_settings": {
            "name": "update_subscription_settings",
            "location": 1175,
            "return": [],
            "arguments": {
                "self": [],
                "subscription_data": []
            }
        },
        "Client.update_notification_settings": {
            "name": "update_notification_settings",
            "location": 1198,
            "return": [],
            "arguments": {
                "self": [],
                "notification_settings": []
            }
        },
        "Client.get_stream_id": {
            "name": "get_stream_id",
            "location": 1215,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "Client.get_stream_topics": {
            "name": "get_stream_topics",
            "location": 1228,
            "return": [],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Client.get_user_groups": {
            "name": "get_user_groups",
            "location": 1238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.create_user_group": {
            "name": "create_user_group",
            "location": 1250,
            "return": [],
            "arguments": {
                "self": [],
                "group_data": []
            }
        },
        "Client.update_user_group": {
            "name": "update_user_group",
            "location": 1267,
            "return": [],
            "arguments": {
                "self": [],
                "group_data": []
            }
        },
        "Client.remove_user_group": {
            "name": "remove_user_group",
            "location": 1285,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": []
            }
        },
        "Client.update_user_group_members": {
            "name": "update_user_group_members",
            "location": 1298,
            "return": [],
            "arguments": {
                "self": [],
                "group_data": []
            }
        },
        "Client.get_subscribers": {
            "name": "get_subscribers",
            "location": 1315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.render_message": {
            "name": "render_message",
            "location": 1332,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.create_user": {
            "name": "create_user",
            "location": 1346,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.update_storage": {
            "name": "update_storage",
            "location": 1357,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.get_storage": {
            "name": "get_storage",
            "location": 1372,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.set_typing_status": {
            "name": "set_typing_status",
            "location": 1389,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ZulipStream.__init__": {
            "name": "__init__",
            "location": 1410,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "to": [],
                "subject": []
            }
        },
        "ZulipStream.write": {
            "name": "write",
            "location": 1417,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ZulipStream.flush": {
            "name": "flush",
            "location": 1425,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "add_default_arguments.custom_error_handling": {
            "name": "custom_error_handling",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Client.do_api_query.error_retry": {
            "name": "error_retry",
            "location": 511,
            "return": [],
            "arguments": {
                "error_string": []
            }
        },
        "Client.do_api_query.end_error_retry": {
            "name": "end_error_retry",
            "location": 528,
            "return": [],
            "arguments": {
                "succeeded": []
            }
        },
        "Client.call_on_each_event.do_register": {
            "name": "do_register",
            "location": 628,
            "return": [],
            "arguments": {}
        },
        "Client.call_on_each_message.event_callback": {
            "name": "event_callback",
            "location": 689,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/setup.py": {
        "check_dependency_manually": {
            "name": "check_dependency_manually",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "tartare.core.models.PlatformOptions"
                ],
                "version": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/custom_exceptions.py": {},
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/finder.py": {
        "import_module_from_source": {
            "name": "import_module_from_source",
            "location": 8,
            "return": [
                "None",
                "dict",
                "str",
                "Union[str, None]",
                "frozenset",
                "Dict[str, Any]",
                "dict[str, typing.Any]",
                "Optional[str]",
                "Optional[Type[Exception]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "import_module_by_name": {
            "name": "import_module_by_name",
            "location": 26,
            "return": [
                "None",
                "Optional[int]",
                "Type",
                "str",
                "Optional[BaseException]",
                "Optional[Dict]",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "resolve_bot_path": {
            "name": "resolve_bot_path",
            "location": 33,
            "return": [
                "str",
                "tuple[typing.Union[str,list[str],int,set[str]]]",
                "cerulean.path.AbstractPath",
                "tuple[str]",
                "dict",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/game_handler.py": {
        "BadMoveException.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "BadMoveException.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamePlayerMove.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SamePlayerMove.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_name": [
                    "str"
                ],
                "bot_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "move_help_message": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "move_regex": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "model": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "gameMessageHandler": [
                    "str",
                    "int"
                ],
                "rules": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "max_players": [
                    "int",
                    "Optional[int]",
                    "Tuple[int, int]",
                    "Optional[float]"
                ],
                "min_players": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "supports_computer": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GameAdapter.add_user_statistics": {
            "name": "add_user_statistics",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int"
                ],
                "values": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, set[str]]",
                    "List[Tuple[str, str]]",
                    "dict[str, dict[str, str]]",
                    "Dict[str, Set[str]]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "GameAdapter.help_message": {
            "name": "help_message",
            "location": 77,
            "return": [
                "str",
                "Iterable[str]",
                "int",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.help_message_single_player": {
            "name": "help_message_single_player",
            "location": 100,
            "return": [
                "str",
                "Iterable[str]",
                "int",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.get_commands": {
            "name": "get_commands",
            "location": 111,
            "return": [
                "dict[typing.Text, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.manage_command": {
            "name": "manage_command",
            "location": 123,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "bool",
                    "Exception",
                    "List[str]"
                ],
                "message": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "typing.Callable[bytes, bytes]"
                ]
            }
        },
        "GameAdapter.already_in_game_message": {
            "name": "already_in_game_message",
            "location": 131,
            "return": [
                "bool",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.confirm_new_invitation": {
            "name": "confirm_new_invitation",
            "location": 134,
            "return": [
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "opponent": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "GameAdapter.play_with_computer_help": {
            "name": "play_with_computer_help",
            "location": 138,
            "return": [
                "str",
                "Optional[str]",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.alert_new_invitation": {
            "name": "alert_new_invitation",
            "location": 143,
            "return": [
                "int",
                "Sequence[str]",
                "str",
                "Union[int, float]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GameAdapter.confirm_invitation_accepted": {
            "name": "confirm_invitation_accepted",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        },
        "GameAdapter.confirm_invitation_declined": {
            "name": "confirm_invitation_declined",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        },
        "GameAdapter.send_message": {
            "name": "send_message",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Union[str, Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "content": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Union[str, Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "is_private": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Union[str, Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "subject": [
                    "typing.Text",
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Union[str, Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "GameAdapter.send_reply": {
            "name": "send_reply",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original_message": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "Dict[str, Tuple[Any, Any, Any]]",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "content": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "Dict[str, Tuple[Any, Any, Any]]",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "GameAdapter.usage": {
            "name": "usage",
            "location": 169,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.initialize": {
            "name": "initialize",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "list[dict[str, float]]",
                    "List[Dict[str, float]]",
                    "typing.Callable[, ]",
                    "Callable",
                    "logging.Logger"
                ]
            }
        },
        "GameAdapter.handle_message": {
            "name": "handle_message",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "Callable",
                    "int",
                    "str"
                ],
                "bot_handler": [
                    "str",
                    "BaseException",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "GameAdapter.is_user_in_game": {
            "name": "is_user_in_game",
            "location": 266,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "user_email": [
                    "bool",
                    "Optional[bool]",
                    "float",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "GameAdapter.command_start_game_with": {
            "name": "command_start_game_with",
            "location": 272,
            "return": [
                "set",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes"
                ],
                "sender": [
                    "str",
                    "bool",
                    "set",
                    "float",
                    "set[]"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "GameAdapter.command_start_game": {
            "name": "command_start_game",
            "location": 280,
            "return": [
                "None",
                "set",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "sender": [],
                "content": [
                    "bytes",
                    "str"
                ]
            }
        },
        "GameAdapter.command_accept": {
            "name": "command_accept",
            "location": 296,
            "return": [
                "set",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "sender": [],
                "content": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GameAdapter.create_game_lobby": {
            "name": "create_game_lobby",
            "location": 312,
            "return": [
                "None",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Callable"
                ],
                "users": [
                    "int",
                    "str"
                ]
            }
        },
        "GameAdapter.command_decline": {
            "name": "command_decline",
            "location": 363,
            "return": [
                "set",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "sender": [],
                "content": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GameAdapter.command_quit": {
            "name": "command_quit",
            "location": 379,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes"
                ],
                "sender": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "content": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GameAdapter.command_join": {
            "name": "command_join",
            "location": 391,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict"
                ],
                "sender": [],
                "content": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GameAdapter.command_play": {
            "name": "command_play",
            "location": 408,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "int"
                ],
                "sender": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "content": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GameAdapter.command_leaderboard": {
            "name": "command_leaderboard",
            "location": 423,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes"
                ],
                "sender": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "content": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GameAdapter.get_sorted_player_statistics": {
            "name": "get_sorted_player_statistics",
            "location": 441,
            "return": [
                "list[tuple[]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.send_invite": {
            "name": "send_invite",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ],
                "user_email": [
                    "str",
                    "Optional[dict]"
                ],
                "message": [
                    "dict[, ]",
                    "str",
                    "bool"
                ]
            }
        },
        "GameAdapter.cancel_game": {
            "name": "cancel_game",
            "location": 460,
            "return": [
                "None",
                "set",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ],
                "reason": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        },
        "GameAdapter.start_game_if_ready": {
            "name": "start_game_if_ready",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        },
        "GameAdapter.start_game": {
            "name": "start_game",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str",
                    "int",
                    "Union[Literal, str]",
                    "Callable(id)[[object], int]"
                ]
            }
        },
        "GameAdapter.get_formatted_game_object": {
            "name": "get_formatted_game_object",
            "location": 488,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        },
        "GameAdapter.join_game": {
            "name": "join_game",
            "location": 500,
            "return": [
                "None",
                "Union[tuple, list]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]",
                    "bytes"
                ],
                "user_email": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "message": [
                    "dict[, ]",
                    "str",
                    "int",
                    "List[int]",
                    "Tuple[float, float]",
                    "float"
                ]
            }
        },
        "GameAdapter.get_players": {
            "name": "get_players",
            "location": 510,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "parameter": [
                    "typing.Text",
                    "dict",
                    "Optional[str]",
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "GameAdapter.get_game_info": {
            "name": "get_game_info",
            "location": 526,
            "return": [
                "dict[typing.Text, typing.Union[str,int]]",
                "str",
                "List[str]",
                "Dict[str, bytes]",
                "Dict[str, str]",
                "Tuple[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str",
                    "int"
                ]
            }
        },
        "GameAdapter.get_user_by_name": {
            "name": "get_user_by_name",
            "location": 548,
            "return": [
                "int",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "Union[List[str], str]"
                ]
            }
        },
        "GameAdapter.get_number_of_players": {
            "name": "get_number_of_players",
            "location": 556,
            "return": [
                "int",
                "str",
                "List[List[int]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "int",
                    "str"
                ]
            }
        },
        "GameAdapter.get_host": {
            "name": "get_host",
            "location": 560,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        },
        "GameAdapter.parse_message": {
            "name": "parse_message",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "bool",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "GameAdapter.change_game_subject": {
            "name": "change_game_subject",
            "location": 588,
            "return": [
                "None",
                "Union[tuple, list]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ],
                "stream_name": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "subject_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "message": [
                    "dict[, ]",
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "GameAdapter.set_invite_by_user": {
            "name": "set_invite_by_user",
            "location": 607,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "user_email": [
                    "str",
                    "dict",
                    "Callable"
                ],
                "is_accepted": [
                    "str",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "list[str]",
                    "List[str]",
                    "list[tuple[typing.Union[str,int]]]",
                    "List[Tuple[str, int]]",
                    "Iterable[str]"
                ],
                "message": [
                    "str",
                    "list[str]",
                    "list[tuple[typing.Union[str,int]]]",
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "List[Tuple[str, int]]",
                    "Iterable[str]"
                ]
            }
        },
        "GameAdapter.add_user_to_cache": {
            "name": "add_user_to_cache",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "GameAdapter.put_user_cache": {
            "name": "put_user_cache",
            "location": 635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.get_user_cache": {
            "name": "get_user_cache",
            "location": 640,
            "return": [
                "dict[, ]",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.verify_users": {
            "name": "verify_users",
            "location": 648,
            "return": [
                "list[]",
                "str",
                "list[typing.Union[tuple[str],bytes]]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "str",
                    "dict[str, str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "message": [
                    "dict[, ]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "GameAdapter.get_game_instance_by_subject": {
            "name": "get_game_instance_by_subject",
            "location": 673,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "subject_name": [
                    "str"
                ],
                "stream_name": [
                    "str"
                ]
            }
        },
        "GameAdapter.get_invite_in_subject": {
            "name": "get_invite_in_subject",
            "location": 679,
            "return": [
                "typing.Text",
                "str",
                "bytes",
                "Iterable[str]",
                "dict",
                "List[Dict[str, Any]]",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": [],
                "subject_name": [
                    "str",
                    "list",
                    "list[]"
                ],
                "stream_name": [
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "GameAdapter.is_game_in_subject": {
            "name": "is_game_in_subject",
            "location": 685,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "subject_name": [
                    "str"
                ],
                "stream_name": [
                    "str"
                ]
            }
        },
        "GameAdapter.is_user_not_player": {
            "name": "is_user_not_player",
            "location": 690,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_email": [
                    "str",
                    "bool"
                ],
                "message": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "GameAdapter.generate_game_id": {
            "name": "generate_game_id",
            "location": 709,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.broadcast": {
            "name": "broadcast",
            "location": 716,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str",
                    "int"
                ],
                "content": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ],
                "include_private": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "GameAdapter.get_username_by_email": {
            "name": "get_username_by_email",
            "location": 733,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "user_email": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GameAdapter.get_user_by_email": {
            "name": "get_user_by_email",
            "location": 736,
            "return": [
                "dict[, ]",
                "Callable",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_email": [
                    "str"
                ]
            }
        },
        "GameAdapter.get_game_id_by_email": {
            "name": "get_game_id_by_email",
            "location": 741,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_email": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "GameAdapter.get_bot_username": {
            "name": "get_bot_username",
            "location": 751,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.__init__": {
            "name": "__init__",
            "location": 766,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gameAdapter": [
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "is_private": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "bytes",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "List[Callable]",
                    "list[typing.Callable[, ]]"
                ],
                "subject": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "bytes",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "List[Callable]",
                    "list[typing.Callable[, ]]"
                ],
                "game_id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Union[Iterable, str]",
                    "None",
                    "typing.Iterable[]"
                ],
                "players": [
                    "int",
                    "list",
                    "Sequence",
                    "List[int]",
                    "bytes"
                ],
                "stream": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "bytes",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "List[Callable]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "GameInstance.start": {
            "name": "start",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.change_subject": {
            "name": "change_subject",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "subject": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GameInstance.get_player_text": {
            "name": "get_player_text",
            "location": 791,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.get_start_message": {
            "name": "get_start_message",
            "location": 798,
            "return": [
                "str",
                "FrozenSet[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.handle_message": {
            "name": "handle_message",
            "location": 808,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "player_email": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "GameInstance.broadcast": {
            "name": "broadcast",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "GameInstance.check_draw": {
            "name": "check_draw",
            "location": 841,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.handle_current_player_command": {
            "name": "handle_current_player_command",
            "location": 847,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Dict[int, str]",
                    "dict[int, str]"
                ]
            }
        },
        "GameInstance.make_move": {
            "name": "make_move",
            "location": 854,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "is_computer": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "GameInstance.is_turn_of": {
            "name": "is_turn_of",
            "location": 878,
            "return": [
                "bool",
                "str",
                "int",
                "Tuple[float, float, float]",
                "float"
            ],
            "arguments": {
                "self": [],
                "player_email": [
                    "str",
                    "float"
                ]
            }
        },
        "GameInstance.same_player_turn": {
            "name": "same_player_turn",
            "location": 881,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "str",
                    "Callable[[int], float]",
                    "None",
                    "List[int]",
                    "list[int]",
                    "IO[str]",
                    "typing.IO"
                ],
                "message": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]"
                ],
                "is_computer": [
                    "bool",
                    "bytes",
                    "list[dict[str, str]]",
                    "int",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "GameInstance.next_turn": {
            "name": "next_turn",
            "location": 905,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.broadcast_current_message": {
            "name": "broadcast_current_message",
            "location": 922,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.parse_current_board": {
            "name": "parse_current_board",
            "location": 927,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.end_game": {
            "name": "end_game",
            "location": 930,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "winner": [
                    "str",
                    "list"
                ]
            }
        },
        "GameInstance.send_win_responses": {
            "name": "send_win_responses",
            "location": 960,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "winner": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/lib.py": {
        "exit_gracefully": {
            "name": "exit_gracefully",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_bots_directory_path": {
            "name": "get_bots_directory_path",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "zulip_env_vars_are_present": {
            "name": "zulip_env_vars_are_present",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "extract_query_without_mention": {
            "name": "extract_query_without_mention",
            "location": 253,
            "return": [
                "str",
                "None",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "message": [
                    "str",
                    "list[str]",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "client": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "zerver.models.Client"
                ]
            }
        },
        "is_private_message_from_another_user": {
            "name": "is_private_message_from_another_user",
            "location": 272,
            "return": [
                "bool",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "message_dict": [
                    "str",
                    "int",
                    "tuple[typing.Union[typing.Any,str]]",
                    "Dict[str, Any]",
                    "Tuple[Any, str]"
                ],
                "current_user_id": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Tuple[Any, str]",
                    "tuple[typing.Union[typing.Any,str]]"
                ]
            }
        },
        "display_config_file_errors": {
            "name": "display_config_file_errors",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "error_msg": [
                    "str",
                    "int",
                    "Callable[..., None]",
                    "typing.Callable[..., None]",
                    "List[str]",
                    "list[str]"
                ],
                "config_file": [
                    "str"
                ]
            }
        },
        "prepare_message_handler": {
            "name": "prepare_message_handler",
            "location": 291,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "bool",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "bot_handler": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "bot_lib_module": [
                    "ValuesView",
                    "str"
                ]
            }
        },
        "run_message_handler_for_bot": {
            "name": "run_message_handler_for_bot",
            "location": 301,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "lib_module": [
                    "str",
                    "bool"
                ],
                "quiet": [
                    "str",
                    "bool"
                ],
                "config_file": [
                    "str",
                    "bool"
                ],
                "bot_config_file": [
                    "str",
                    "bool"
                ],
                "bot_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "RateLimit.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_limit": [
                    "int",
                    "float",
                    "bool"
                ],
                "interval_limit": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RateLimit.is_legal": {
            "name": "is_legal",
            "location": 58,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimit.show_error_and_exit": {
            "name": "show_error_and_exit",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateHandler.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float",
                    "discord.Client"
                ]
            }
        },
        "StateHandler.put": {
            "name": "put",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "bytes",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "StateHandler.get": {
            "name": "get",
            "location": 85,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "bool",
                "Dict[str, Type[Any]]",
                "Dict[str, Tuple[Any, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "StateHandler.contains": {
            "name": "contains",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "BotIdentity.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "email": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ExternalBotHandler.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "root_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "bot_details": [
                    "int",
                    "str",
                    "bool",
                    "list[typing.Callable[, ]]",
                    "dict[str, typing.Any]",
                    "List[Callable]",
                    "Dict[str, Any]"
                ],
                "bot_config_file": [
                    "None",
                    "configparser.ConfigParser",
                    "tuple[str]",
                    "Tuple[str]",
                    "Client"
                ],
                "bot_config_parser": [
                    "None",
                    "configparser.RawConfigParser",
                    "Optional[configparser.ConfigParser]"
                ]
            }
        },
        "ExternalBotHandler.storage": {
            "name": "storage",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalBotHandler.identity": {
            "name": "identity",
            "location": 154,
            "return": [
                "BotIdentity",
                "str",
                "int",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalBotHandler.send_message": {
            "name": "send_message",
            "location": 157,
            "return": [
                "bool",
                "dict[str, str]",
                "str",
                "dict[, ]",
                "dict",
                "dict[int, str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "Callable[[str], None]"
                ]
            }
        },
        "ExternalBotHandler.send_reply": {
            "name": "send_reply",
            "location": 165,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ],
                "response": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "widget_content": [
                    "int",
                    "None",
                    "dict",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ExternalBotHandler.update_message": {
            "name": "update_message",
            "location": 182,
            "return": [
                "str",
                "Callable",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ExternalBotHandler.get_config_info": {
            "name": "get_config_info",
            "location": 187,
            "return": [
                "dict[, ]",
                "Optional[str]",
                "Dict[str, Any]",
                "configparser.ConfigParser",
                "dict",
                "Dict[str, Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str"
                ],
                "optional": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "ExternalBotHandler.upload_file_from_path": {
            "name": "upload_file_from_path",
            "location": 231,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "ExternalBotHandler.upload_file": {
            "name": "upload_file",
            "location": 235,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[type]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "ExternalBotHandler.open": {
            "name": "open",
            "location": 240,
            "return": [
                "typing.IO",
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "ExternalBotHandler.quit": {
            "name": "quit",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "run_message_handler_for_bot.handle_message": {
            "name": "handle_message",
            "location": 342,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "message": [
                    "int",
                    "bytes",
                    "dict"
                ],
                "flags": [
                    "int",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "run_message_handler_for_bot.event_callback": {
            "name": "event_callback",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/provision.py": {
        "get_bot_paths": {
            "name": "get_bot_paths",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "provision_bot": {
            "name": "provision_bot",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path_to_bot": [
                    "str"
                ],
                "force": [
                    "bool",
                    "str",
                    "BinaryIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 41,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "available_bots": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Type[\"ExtractableWordnet\"]",
                    "typing.Type"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/request_test_lib.py": {
        "mock_http_conversation": {
            "name": "mock_http_conversation",
            "location": 10,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "http_data": [
                    "bytes",
                    "Tuple[int, str]"
                ]
            }
        },
        "mock_request_exception": {
            "name": "mock_request_exception",
            "location": 104,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "mock_http_conversation.get_response": {
            "name": "get_response",
            "location": 21,
            "return": [
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "http_response": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "http_headers": [
                    "int",
                    "Dict[int, str]"
                ],
                "is_raw_response": [
                    "List[Tuple[Any, str]]",
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "Sequence",
                    "List[str]"
                ]
            }
        },
        "mock_http_conversation.assert_called_with_fields": {
            "name": "assert_called_with_fields",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_result": [
                    "str"
                ],
                "http_request": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "fields": [
                    "list",
                    "Iterable[str]",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "meta": [
                    "list",
                    "Iterable[str]",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "mock_request_exception.assert_mock_called": {
            "name": "assert_mock_called",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_result": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/run.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 21,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "exit_gracefully_if_zulip_config_is_missing": {
            "name": "exit_gracefully_if_zulip_config_is_missing",
            "location": 56,
            "return": [
                "Iterator[Dict[str, str]]",
                "None"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "exit_gracefully_if_bot_config_file_does_not_exist": {
            "name": "exit_gracefully_if_bot_config_file_does_not_exist",
            "location": 87,
            "return": [
                "Iterator[Dict[str, str]]",
                "None"
            ],
            "arguments": {
                "bot_config_file": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/simple_lib.py": {
        "SimpleStorage.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleStorage.contains": {
            "name": "contains",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Callable[[T], bool]",
                    "typing.Callable[T, bool]"
                ]
            }
        },
        "SimpleStorage.put": {
            "name": "put",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "SimpleStorage.get": {
            "name": "get",
            "location": 17,
            "return": [
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "SimpleMessageServer.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMessageServer.send": {
            "name": "send",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Optional[Callable]",
                    "str",
                    "typing.Callable[, ]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "SimpleMessageServer.update": {
            "name": "update",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "SimpleMessageServer.upload_file": {
            "name": "upload_file",
            "location": 36,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "typing.IO",
                    "IO[str]",
                    "typing.Sequence[str]",
                    "IO[Any]",
                    "Sequence[str]"
                ]
            }
        },
        "TerminalBotHandler.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_config_file": [
                    "Optional[str]",
                    "str",
                    "Set[str]",
                    "None",
                    "set[str]"
                ]
            }
        },
        "TerminalBotHandler.identity": {
            "name": "identity",
            "location": 45,
            "return": [
                "BotIdentity",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TerminalBotHandler.send_message": {
            "name": "send_message",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "TerminalBotHandler.send_reply": {
            "name": "send_reply",
            "location": 61,
            "return": [
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "List[str]",
                    "float",
                    "list[str]"
                ],
                "response": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TerminalBotHandler.update_message": {
            "name": "update_message",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TerminalBotHandler.upload_file_from_path": {
            "name": "upload_file_from_path",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "TerminalBotHandler.upload_file": {
            "name": "upload_file",
            "location": 79,
            "return": [
                "str",
                "Optional[int]",
                "List[List[str]]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "TerminalBotHandler.get_config_info": {
            "name": "get_config_info",
            "location": 82,
            "return": [
                "dict[, ]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "optional": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/terminal.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 11,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/test_file_utils.py": {
        "get_bot_message_handler": {
            "name": "get_bot_message_handler",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot_name": [
                    "str"
                ]
            }
        },
        "read_bot_fixture_data": {
            "name": "read_bot_fixture_data",
            "location": 27,
            "return": [
                "Dict[str, List[int]]",
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "bot_name": [
                    "str"
                ],
                "test_name": [
                    "str"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/test_lib.py": {
        "StubBotHandler.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.reset_transcript": {
            "name": "reset_transcript",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.identity": {
            "name": "identity",
            "location": 37,
            "return": [
                "BotIdentity",
                "str",
                "int",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.send_message": {
            "name": "send_message",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "list",
                    "None",
                    "list[]"
                ]
            }
        },
        "StubBotHandler.send_reply": {
            "name": "send_reply",
            "location": 44,
            "return": [
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ],
                "response": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "widget_content": [
                    "Dict[str, Any]",
                    "None",
                    "dict",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "StubBotHandler.update_message": {
            "name": "update_message",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "StubBotHandler.upload_file_from_path": {
            "name": "upload_file_from_path",
            "location": 56,
            "return": [
                "str",
                "List[List[str]]",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "StubBotHandler.upload_file": {
            "name": "upload_file",
            "location": 61,
            "return": [
                "str",
                "Optional[int]",
                "List[List[str]]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "StubBotHandler.quit": {
            "name": "quit",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StubBotHandler.get_config_info": {
            "name": "get_config_info",
            "location": 71,
            "return": [
                "dict[, ]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "optional": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "StubBotHandler.unique_reply": {
            "name": "unique_reply",
            "location": 74,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.unique_response": {
            "name": "unique_response",
            "location": 84,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.ensure_unique_response": {
            "name": "ensure_unique_response",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "responses": [
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "DefaultTests.make_request_message": {
            "name": "make_request_message",
            "location": 103,
            "return": [
                "typing.Dict[builtins.str, typing.Any]",
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Optional[Mapping[str, str]]",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "DefaultTests.get_response": {
            "name": "get_response",
            "location": 106,
            "return": [
                "typing.Dict[builtins.str, typing.Any]",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "DefaultTests.test_bot_usage": {
            "name": "test_bot_usage",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultTests.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTestCase._get_handlers": {
            "name": "_get_handlers",
            "location": 126,
            "return": [
                "tuple[StubBotHandler]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTestCase.get_response": {
            "name": "get_response",
            "location": 135,
            "return": [
                "dict",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "BotTestCase.make_request_message": {
            "name": "make_request_message",
            "location": 142,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "list[str]",
                "List[Dict]",
                "int",
                "bool",
                "None",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Type['Declared']",
                    "typing.Type",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BotTestCase.get_reply_dict": {
            "name": "get_reply_dict",
            "location": 157,
            "return": [
                "int",
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "BotTestCase.verify_reply": {
            "name": "verify_reply",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Tuple[str, dict, int, Any]",
                    "tuple[typing.Union[str,dict[, ],int,typing.Any]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "response": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Iterable"
                ]
            }
        },
        "BotTestCase.verify_dialog": {
            "name": "verify_dialog",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conversation": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BotTestCase.validate_invalid_config": {
            "name": "validate_invalid_config",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_data": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "dict",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "None",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "error_regexp": [
                    "str",
                    "bool",
                    "baseplate.lib.config.RawConfig"
                ]
            }
        },
        "BotTestCase.validate_valid_config": {
            "name": "validate_valid_config",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_data": [
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BotTestCase.mock_http_conversation": {
            "name": "mock_http_conversation",
            "location": 189,
            "return": [
                "str",
                "lib.applications.TodoRequest",
                "int"
            ],
            "arguments": {
                "self": [],
                "test_name": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Union[str, List[str]]",
                    "list[str]"
                ]
            }
        },
        "BotTestCase.mock_request_exception": {
            "name": "mock_request_exception",
            "location": 194,
            "return": [
                "List[Dict[str, Any]]",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotTestCase.mock_config_info": {
            "name": "mock_config_info",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "config_info": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/__init__.py": {},
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/__init__.py": {},
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/codeforces.py": {
        "get_contest_list": {
            "name": "get_contest_list",
            "location": 11,
            "return": [
                "typing.Text",
                "str",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {}
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/code_compile.py": {
        "compile_code": {
            "name": "compile_code",
            "location": 4,
            "return": [
                "str",
                "bytes",
                "Tuple[int]",
                "dict",
                "int"
            ],
            "arguments": {
                "bot_handler": [
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "int",
                    "Iterable[str]",
                    "list[str]",
                    "List[str]"
                ],
                "message": [
                    "str",
                    "Optional[str]",
                    "TextIO"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/contest.py": {
        "get_contest": {
            "name": "get_contest",
            "location": 3,
            "return": [
                "typing.Text",
                "str",
                "dict",
                "Type[Any]"
            ],
            "arguments": {
                "bot_handler": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ],
                "message": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/fb_login.py": {
        "fblogin": {
            "name": "fblogin",
            "location": 5,
            "return": [
                "typing.Text",
                "Optional[int]",
                "str",
                "Callable"
            ],
            "arguments": {
                "bot_handler": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "message": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/instaquiz.py": {
        "start_game": {
            "name": "start_game",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Type['Model']",
                    "typing.Type"
                ],
                "bot_handler": [
                    "Dict[str, Any]",
                    "Type['Model']",
                    "str"
                ]
            }
        },
        "choose": {
            "name": "choose",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "recv": [
                    "list",
                    "Match",
                    "str"
                ],
                "message": [
                    "Hashable",
                    "typing.Hashable",
                    "dict",
                    "dict[, ]"
                ],
                "bot_handler": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/mathbot.py": {
        "evaluate_all_expression": {
            "name": "evaluate_all_expression",
            "location": 16,
            "return": [
                "typing.Text",
                "List[str]",
                "Type[Any]",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/quiz.py": {
        "quiz_content": {
            "name": "quiz_content",
            "location": 3,
            "return": [
                "typing.Text",
                "list",
                "int",
                "List[List[int]]",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "bot_handler": [
                    "str",
                    "int"
                ],
                "msg_content": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/recipe.py": {
        "get_recipe": {
            "name": "get_recipe",
            "location": 5,
            "return": [
                "dict[typing.Text, typing.Text]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "bot_handler": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ],
                "message": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/search.py": {
        "get_result": {
            "name": "get_result",
            "location": 3,
            "return": [
                "typing.Text",
                "str",
                "List[Union[int, Any]]",
                "List[Union[int, str]]",
                "bool",
                "int"
            ],
            "arguments": {
                "bot_handler": [
                    "bool",
                    "dict[, ]",
                    "dict",
                    "Iterable[str]"
                ],
                "message": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/spellchecker.py": {
        "check_spellings": {
            "name": "check_spellings",
            "location": 18,
            "return": [
                "int",
                "str",
                "Callable",
                "dict[, ]"
            ],
            "arguments": {
                "sentence": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/stack_overflow.py": {
        "get_bot_stackoverflow_response": {
            "name": "get_bot_stackoverflow_response",
            "location": 7,
            "return": [
                "typing.Text",
                "Dict[str, Any]",
                "dict",
                "List[dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "message": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/tyro.py": {
        "detect_intent_texts": {
            "name": "detect_intent_texts",
            "location": 27,
            "return": [
                "None",
                "dict",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "int"
                ],
                "session_id": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "typing.Callable[typing.Any, None]",
                    "Iterable[str]",
                    "None",
                    "typing.Iterable[str]"
                ],
                "language_code": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "TyroHandler.usage": {
            "name": "usage",
            "location": 48,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TyroHandler.handle_message": {
            "name": "handle_message",
            "location": 51,
            "return": [
                "Callable",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, float]"
                ],
                "bot_handler": [
                    "str",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/wolframbot.py": {
        "get_short_answer": {
            "name": "get_short_answer",
            "location": 14,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Union[int, slice]",
                    "Union[int, str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/__init__.py": {},
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots/tyro/.vscode/.ropeproject/config.py": {
        "set_prefs": {
            "name": "set_prefs",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "prefs": [
                    "str"
                ]
            }
        },
        "project_opened": {
            "name": "project_opened",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "project": [
                    "Set[str]",
                    "bool",
                    "set[str]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots_unmaintained/commute/commute.py": {
        "test_parse_pair": {
            "name": "test_parse_pair",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_seconds": {
            "name": "test_calculate_seconds",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_helper_functions": {
            "name": "test_helper_functions",
            "location": 214,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "CommuteHandler.initialize": {
            "name": "initialize",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "CommuteHandler.usage": {
            "name": "usage",
            "location": 16,
            "return": [
                "typing.Text",
                "int",
                "Optional[int]",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommuteHandler.send_info": {
            "name": "send_info",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "bytes",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "letter": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "bytes",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "CommuteHandler.calculate_seconds": {
            "name": "calculate_seconds",
            "location": 79,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "time_str": [
                    "str"
                ]
            }
        },
        "CommuteHandler.add_time_to_params": {
            "name": "add_time_to_params",
            "location": 90,
            "return": [
                "None",
                "str",
                "Dict[str, Any]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "Callable[[T], bool]",
                    "Union[Callable, str]"
                ]
            }
        },
        "CommuteHandler.get_send_content": {
            "name": "get_send_content",
            "location": 101,
            "return": [
                "None",
                "Dict[str, Any]",
                "List[Dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "rjson": [
                    "bytes",
                    "str",
                    "int"
                ],
                "params": [
                    "str",
                    "tuple[]",
                    "int",
                    "dict[str, typing.Any]",
                    "tuple",
                    "Dict[str, Any]"
                ],
                "message": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "bot_handler": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Sequence",
                    "typing.Sequence[]"
                ]
            }
        },
        "CommuteHandler.parse_pair": {
            "name": "parse_pair",
            "location": 155,
            "return": [
                "dict[, ]",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "content_list": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "Sequence[str]",
                    "list",
                    "Dict[str, Any]",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "CommuteHandler.receive_response": {
            "name": "receive_response",
            "location": 167,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "int",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "message": [
                    "Generator[str, None, None]",
                    "bool",
                    "typing.Generator[typing.Union[str,None,None]]",
                    "str",
                    "Any",
                    "typing.Any"
                ],
                "bot_handler": [
                    "Generator[str, None, None]",
                    "bool",
                    "typing.Generator[typing.Union[str,None,None]]",
                    "str",
                    "Any",
                    "typing.Any"
                ]
            }
        },
        "CommuteHandler.handle_message": {
            "name": "handle_message",
            "location": 183,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "bot_handler": [
                    "Type['Model']",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "CommuteHandler.receive_response.validate_requests": {
            "name": "validate_requests",
            "location": 168,
            "return": [
                "None",
                "Mapping[str, Any]",
                "Optional[Dict[str, str]]",
                "Optional[Dict[str, Any]]",
                "str",
                "Exception",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots_unmaintained/commute/__init__.py": {},
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots_unmaintained/foursquare/foursquare.py": {
        "FoursquareHandler.initialize": {
            "name": "initialize",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "FoursquareHandler.usage": {
            "name": "usage",
            "location": 13,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoursquareHandler.format_json": {
            "name": "format_json",
            "location": 37,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "venues": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "FoursquareHandler.send_info": {
            "name": "send_info",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "bytes",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "letter": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "bytes",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "FoursquareHandler.handle_message": {
            "name": "handle_message",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "dict",
                    "Dict[str, Any]"
                ],
                "bot_handler": [
                    "dict",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "FoursquareHandler.format_json.format_venue": {
            "name": "format_venue",
            "location": 38,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "venue": [
                    "str"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots_unmaintained/foursquare/__init__.py": {},
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots_unmaintained/howdoi/howdoi.py": {
        "HowdoiHandler.usage": {
            "name": "usage",
            "location": 49,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "HowdoiHandler.line_wrap": {
            "name": "line_wrap",
            "location": 61,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "length": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "HowdoiHandler.get_answer": {
            "name": "get_answer",
            "location": 69,
            "return": [
                "typing.Text",
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "bytes",
                    "Dict[str, Any]",
                    "int"
                ],
                "query": [
                    "str",
                    "bytes",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "HowdoiHandler.handle_message": {
            "name": "handle_message",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "bot_handler": [
                    "List[dict]",
                    "bool",
                    "list[dict[, ]]",
                    "float"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots_unmaintained/howdoi/__init__.py": {},
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots_unmaintained/john/john.py": {
        "create_chat_bot": {
            "name": "create_chat_bot",
            "location": 26,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "no_learn": [
                    "str"
                ]
            }
        },
        "JohnHandler.usage": {
            "name": "usage",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JohnHandler.initialize": {
            "name": "initialize",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bot_handler": [
                    "str"
                ]
            }
        },
        "JohnHandler.handle_message": {
            "name": "handle_message",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "Tuple[bytes]",
                    "bool"
                ],
                "bot_handler": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/bots_unmaintained/john/__init__.py": {},
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/tests/test_finder.py": {
        "FinderTestCase.test_resolve_bot_path": {
            "name": "test_resolve_bot_path",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/tests/test_lib.py": {
        "FakeClient.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeClient.get_profile": {
            "name": "get_profile",
            "location": 16,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeClient.update_storage": {
            "name": "update_storage",
            "location": 23,
            "return": [
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "list[typing.Callable[, ]]",
                    "int",
                    "List[Callable]"
                ]
            }
        },
        "FakeClient.get_storage": {
            "name": "get_storage",
            "location": 31,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "FakeClient.send_message": {
            "name": "send_message",
            "location": 37,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FakeClient.upload_file": {
            "name": "upload_file",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "typing.IO",
                    "IO[str]",
                    "None",
                    "IO[Any]",
                    "typing.Sequence[str]",
                    "Optional[io.TextIOWrapper]",
                    "Sequence[str]"
                ]
            }
        },
        "FakeBotHandler.usage": {
            "name": "usage",
            "location": 46,
            "return": [
                "bool",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeBotHandler.handle_message": {
            "name": "handle_message",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "bot_handler": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "LibTest.test_basics": {
            "name": "test_basics",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_state_handler": {
            "name": "test_state_handler",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_state_handler_by_mock": {
            "name": "test_state_handler_by_mock",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_send_reply": {
            "name": "test_send_reply",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_content_and_full_content": {
            "name": "test_content_and_full_content",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_run_message_handler_for_bot": {
            "name": "test_run_message_handler_for_bot",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_upload_file": {
            "name": "test_upload_file",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_upload_file_from_path": {
            "name": "test_upload_file_from_path",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_extract_query_without_mention": {
            "name": "test_extract_query_without_mention",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest._create_client_and_handler_for_file_upload": {
            "name": "_create_client_and_handler_for_file_upload",
            "location": 213,
            "return": [
                "tuple[typing.Union[FakeClient,ExternalBotHandler]]",
                "str",
                "baseplate.lib.metrics.Client"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_run_message_handler_for_bot.call_on_each_event_mock": {
            "name": "call_on_each_event_mock",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "event_types": [
                    "None",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "narrow": [
                    "None",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "LibTest.test_run_message_handler_for_bot.call_on_each_event_mock.test_message": {
            "name": "test_message",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "bool"
                ],
                "flags": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_bots/zulip_bots/tests/test_run.py": {
        "TestDefaultArguments.test_argument_parsing_with_bot_name": {
            "name": "test_argument_parsing_with_bot_name",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_run_message_handler_for_bot": []
            }
        },
        "TestDefaultArguments.test_argument_parsing_with_bot_path": {
            "name": "test_argument_parsing_with_bot_path",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_run_message_handler_for_bot": []
            }
        },
        "TestDefaultArguments.test_adding_bot_parent_dir_to_sys_path_when_bot_name_specified": {
            "name": "test_adding_bot_parent_dir_to_sys_path_when_bot_name_specified",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultArguments.test_adding_bot_parent_dir_to_sys_path_when_bot_path_specified": {
            "name": "test_adding_bot_parent_dir_to_sys_path_when_bot_path_specified",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os_path_isfile": []
            }
        },
        "TestDefaultArguments._test_adding_bot_parent_dir_to_sys_path": {
            "name": "_test_adding_bot_parent_dir_to_sys_path",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_qualifier": [],
                "bot_dir_path": []
            }
        },
        "TestDefaultArguments.test_run_bot_by_module_name": {
            "name": "test_run_bot_by_module_name",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os_path_isfile": []
            }
        },
        "TestBotLib.test_extract_query_without_mention": {
            "name": "test_extract_query_without_mention",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotLib.test_extract_query_without_mention.test_message": {
            "name": "test_message",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict"
                ],
                "message": [
                    "str",
                    "Union[Literal, str]"
                ],
                "expected_return": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_botserver/setup.py": {
        "check_dependency_manually": {
            "name": "check_dependency_manually",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "tartare.core.models.PlatformOptions"
                ],
                "version": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_botserver/tests/server_test_lib.py": {
        "BotServerTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotServerTestCase.assert_bot_server_response": {
            "name": "assert_bot_server_response",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ExternalBotHandler": [
                    "str",
                    "mock.Mock",
                    "dict[, ]",
                    "dict"
                ],
                "available_bots": [
                    "Callable",
                    "None",
                    "Dict[str, Any]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "bots_config": [
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict",
                    "dict[str, typing.Any]",
                    "bool",
                    "Optional[str]",
                    "dict[, ]",
                    "str",
                    "Callable",
                    "Optional[List[str]]",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "bot_handlers": [
                    "None"
                ],
                "event": [
                    "Dict[str, str]",
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, str]"
                ],
                "expected_response": [
                    "dict",
                    "None",
                    "float",
                    "dict[, ]",
                    "List[int]",
                    "Dict[str, Any]",
                    "list[int]",
                    "dict[str, typing.Any]"
                ],
                "check_success": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "third_party_bot_conf": [
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "tyro-zulip-bot-master/zulip_botserver/tests/test_server.py": {
        "BotServerTests.test_successful_request": {
            "name": "test_successful_request",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_successful_request_from_two_bots": {
            "name": "test_successful_request_from_two_bots",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_request_for_unkown_bot": {
            "name": "test_request_for_unkown_bot",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_wrong_bot_token": {
            "name": "test_wrong_bot_token",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_wrong_bot_credentials": {
            "name": "test_wrong_bot_credentials",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_StateHandler": [
                    "mock.Mock"
                ],
                "mock_LoggingError": [
                    "mock.Mock"
                ]
            }
        },
        "BotServerTests.test_argument_parsing_defaults": {
            "name": "test_argument_parsing_defaults",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_read_config_file": {
            "name": "test_read_config_file",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.MockMessageHandler.handle_message": {
            "name": "handle_message",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "bot_handler": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BotServerTests.MockLibModule.handler_class": {
            "name": "handler_class",
            "location": 18,
            "return": [
                "MockMessageHandler",
                "Optional[Any]",
                "bool",
                "int",
                "type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tyro-zulip-bot-master/zulip_botserver/tests/__init__.py": {},
    "tyro-zulip-bot-master/zulip_botserver/zulip_botserver/input_parameters.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 4,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "tyro-zulip-bot-master/zulip_botserver/zulip_botserver/server.py": {
        "read_config_section": {
            "name": "read_config_section",
            "location": 18,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "parser": [
                    "baseplate.lib.config.RawConfig"
                ],
                "section": [
                    "baseplate.lib.config.RawConfig"
                ]
            }
        },
        "read_config_file": {
            "name": "read_config_file",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "config_file_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "bot_name": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "parse_config_file": {
            "name": "parse_config_file",
            "location": 61,
            "return": [],
            "arguments": {
                "config_file_path": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        },
        "load_lib_modules": {
            "name": "load_lib_modules",
            "location": 70,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "available_bots": [
                    "List[str]",
                    "bool",
                    "Type",
                    "Optional[str]"
                ]
            }
        },
        "load_bot_handlers": {
            "name": "load_bot_handlers",
            "location": 86,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "available_bots": [
                    "List[str]",
                    "bool",
                    "Iterable[str]",
                    "dict"
                ],
                "bots_config": [
                    "str",
                    "logging.Logger",
                    "Dict[str, str]",
                    "dict"
                ],
                "third_party_bot_conf": [
                    "Callable",
                    "Optional[configparser.ConfigParser]"
                ]
            }
        },
        "init_message_handlers": {
            "name": "init_message_handlers",
            "location": 108,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "available_bots": [
                    "List[str]",
                    "bool",
                    "int",
                    "float"
                ],
                "bots_lib_modules": [
                    "int",
                    "str"
                ],
                "bot_handlers": [
                    "str",
                    "List[str]",
                    "Dict[str, Dict]",
                    "Union[int, str]",
                    "Callable[..., None]"
                ]
            }
        },
        "handle_bot": {
            "name": "handle_bot",
            "location": 127,
            "return": [
                "List[str]",
                "int",
                "bytes",
                "dict"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tyro-zulip-bot-master/zulip_botserver/zulip_botserver/__init__.py": {}
}
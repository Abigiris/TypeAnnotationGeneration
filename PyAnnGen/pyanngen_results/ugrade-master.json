{
    "ugrade-master/server/manage.py": {},
    "ugrade-master/server/contests/admin.py": {},
    "ugrade-master/server/contests/apps.py": {},
    "ugrade-master/server/contests/exceptions.py": {
        "ContestError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "NoSuchLanguageError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NoSuchContestError.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NoSuchUserError.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "UserAlreadySignedUpError.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "UsernameAlreadyUsedError.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "UserAlreadyInvitedError.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "UserHaventSignedUpError.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "AuthenticationError.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ForbiddenActionError.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NoSuchProblemError.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NoSuchSubmissionError.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ForbiddenLanguageError.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "ugrade-master/server/contests/models.py": {
        "checker_upload_path": {
            "name": "checker_upload_path",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "filename": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "solution_upload_path": {
            "name": "solution_upload_path",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "filename": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "tcgen_upload_path": {
            "name": "tcgen_upload_path",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "filename": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "submission_upload_path": {
            "name": "submission_upload_path",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "filename": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "Language.extension_list": {
            "name": "extension_list",
            "location": 16,
            "return": [
                "List[int]",
                "int",
                "Dict[int, zam_repondeur.services.fetch.an.dossiers.models.TexteRef]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Language.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contest.clean": {
            "name": "clean",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contest.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.permission_codes": {
            "name": "permission_codes",
            "location": 88,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[int]",
                "List[T]",
                "List[str]",
                "Optional[Type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.has_permission": {
            "name": "has_permission",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "perm": [
                    "Callable",
                    "List[int]",
                    "Tuple[float,float,float]",
                    "Tuple[Union[float,float,float]]"
                ]
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Problem.__str__": {
            "name": "__str__",
            "location": 150,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Submission.__str__": {
            "name": "__str__",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Submission.verdict": {
            "name": "verdict",
            "location": 181,
            "return": [
                "Text",
                "bool",
                "Optional[Union[str,Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ugrade-master/server/contests/schema.py": {
        "SubmissionType.resolve_verdict": {
            "name": "resolve_verdict",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [
                    "Dict[str,Any]",
                    "int",
                    "contests.models.Submission"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float",
                    "graphene.ResolveInfo"
                ]
            }
        },
        "ContestType.resolve_permitted_languages": {
            "name": "resolve_permitted_languages",
            "location": 255,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "root": [],
                "_info": [
                    "List",
                    "Callable",
                    "float",
                    "graphene.ResolveInfo"
                ]
            }
        }
    },
    "ugrade-master/server/contests/views.py": {
        "ContestView.format_error": {
            "name": "format_error",
            "location": 10,
            "return": [
                "str",
                "Dict[Text,Union[Text,dict]]",
                "bytes",
                "Dict[Text,]",
                "int",
                "Dict[Text,Text]"
            ],
            "arguments": {
                "error": [
                    "int",
                    "Dict[str,int]",
                    "Sequence[Sequence[Any]]",
                    "MutableMapping",
                    "Sequence[Mapping]",
                    "str",
                    "Sequence[Mapping[str,Any]]",
                    "Sequence[Any]"
                ]
            }
        },
        "ContestView.format_error.to_camel": {
            "name": "to_camel",
            "location": 16,
            "return": [
                "int",
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "strs": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "ugrade-master/server/contests/__init__.py": {},
    "ugrade-master/server/contests/auth/core.py": {
        "_assert_contest_exists": {
            "name": "_assert_contest_exists",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "contest_id": [
                    "int",
                    "str"
                ]
            }
        },
        "get_all_permissions": {
            "name": "get_all_permissions",
            "location": 24,
            "return": [
                "str",
                "bool",
                "List[zerver.models.UserProfile]",
                "Union[bool, str]",
                "int"
            ],
            "arguments": {}
        },
        "get_all_users": {
            "name": "get_all_users",
            "location": 28,
            "return": [
                "str",
                "Optional[str]",
                "Callable",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "get_user_by_id": {
            "name": "get_user_by_id",
            "location": 32,
            "return": [
                "bool",
                "models.User",
                "app.models.GameMember",
                "app.models.course.Course",
                "List[dict]"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ]
            }
        },
        "get_user_by_email": {
            "name": "get_user_by_email",
            "location": 39,
            "return": [
                "str",
                "zam_repondeur.models.Lecture",
                "Dict[str,Any]",
                "Callable",
                "List",
                "None",
                "asgard.models.user.User",
                "user_models.User",
                "int",
                "core.models.UserPreferences"
            ],
            "arguments": {
                "contest_id": [
                    "int",
                    "str",
                    "transfer.models.TopicID",
                    "transfer.models.TicketID",
                    "transfer.models.BadgeID"
                ],
                "email": [
                    "int",
                    "str"
                ]
            }
        },
        "get_user_by_username": {
            "name": "get_user_by_username",
            "location": 47,
            "return": [
                "str",
                "None",
                "zam_repondeur.models.Lecture",
                "zerver.models.UserProfile",
                "Iterable[str]",
                "metaswitch_tinder.database.models.User",
                "bob_emploi.frontend.api.user_pb2.User",
                "Dict[str,Any]",
                "user.transfer.models.User",
                "List[zerver.models.UserProfile]",
                "contests.models.User",
                "domain.User"
            ],
            "arguments": {
                "contest_id": [
                    "int",
                    "List[int]",
                    "str",
                    "Sequence[int]"
                ],
                "username": [
                    "str",
                    "int",
                    "List[int]",
                    "transfer.models.TicketID",
                    "transfer.models.TopicID"
                ]
            }
        },
        "get_contest_users": {
            "name": "get_contest_users",
            "location": 56,
            "return": [
                "Dict[str, Any]",
                "models.User",
                "bool",
                "Optional[List[Any]]",
                "transfer.models.Scope"
            ],
            "arguments": {
                "contest_id": [
                    "int",
                    "str"
                ]
            }
        },
        "sign_in": {
            "name": "sign_in",
            "location": 61,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ],
                "password": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "sign_up": {
            "name": "sign_up",
            "location": 82,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "Any",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "name": [
                    "str",
                    "Dict[str,str]"
                ],
                "password": [
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "List[int]",
                    "Optional[str]",
                    "None",
                    "Union[int,str]",
                    "int",
                    "Optional[bytes]",
                    "bytes"
                ],
                "signup_code": [
                    "str",
                    "int"
                ]
            }
        },
        "forgot_password": {
            "name": "forgot_password",
            "location": 117,
            "return": [
                "str",
                "zam_repondeur.models.Lecture",
                "Callable",
                "set",
                "zerver.models.UserProfile",
                "int",
                "bool"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ]
            }
        },
        "reset_password": {
            "name": "reset_password",
            "location": 134,
            "return": [
                "str",
                "zam_repondeur.models.Lecture",
                "Callable",
                "set",
                "zerver.models.UserProfile",
                "int",
                "bool"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "bytes"
                ],
                "reset_password_otc": [
                    "str",
                    "int"
                ],
                "new_password": [
                    "str",
                    "int"
                ]
            }
        },
        "get_user_from_token": {
            "name": "get_user_from_token",
            "location": 154,
            "return": [
                "int",
                "Dict[str,str]",
                "core.models.User",
                "zerver.models.UserProfile",
                "Iterable[str]",
                "metaswitch_tinder.database.models.User",
                "core.models.UserPreferences",
                "aiolambda.Maybe[auth.user.User]",
                "database.User",
                "User"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_me": {
            "name": "get_me",
            "location": 168,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "Dict[str, str]",
                "Dict[str, Type[Any]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "ugrade-master/server/contests/auth/resolvers.py": {
        "user_permissions_resolver": {
            "name": "user_permissions_resolver",
            "location": 31,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "root": [
                    "Dict",
                    "contests.models.User"
                ],
                "_info": [
                    "str",
                    "Type",
                    "Dict",
                    "core.DependencyContainer"
                ]
            }
        },
        "sign_in_mutate": {
            "name": "sign_in_mutate",
            "location": 35,
            "return": [
                "SignInResult",
                "bool",
                "topicdb.core.models.attribute.Attribute"
            ],
            "arguments": {
                "_self": [
                    "str",
                    "int"
                ],
                "_info": [
                    "str",
                    "int"
                ],
                "user_id": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "sign_up_mutate": {
            "name": "sign_up_mutate",
            "location": 40,
            "return": [
                "bool",
                "SignUpResult"
            ],
            "arguments": {
                "_self": [
                    "int",
                    "str",
                    "bool"
                ],
                "_info": [
                    "int",
                    "str",
                    "bool"
                ],
                "user_id": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "user": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "jgikbase.idmapping.core.user.AuthsourceID"
                ],
                "signup_code": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "forgot_password_mutate": {
            "name": "forgot_password_mutate",
            "location": 49,
            "return": [
                "int",
                "str",
                "Iterable[int]",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "_self": [
                    "str",
                    "List[int]",
                    "app.models.group.Group"
                ],
                "_info": [
                    "str",
                    "List[int]",
                    "app.models.group.Group"
                ],
                "user_id": [
                    "int",
                    "str",
                    "Type[models.taxonomies.T]",
                    "Type"
                ]
            }
        },
        "reset_passwod_mutate": {
            "name": "reset_passwod_mutate",
            "location": 53,
            "return": [
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "_self": [
                    "str",
                    "Tuple[str]"
                ],
                "_info": [
                    "str",
                    "Tuple[str]"
                ],
                "user_id": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "reset_password_otc": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "new_password": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "me_resolver": {
            "name": "me_resolver",
            "location": 60,
            "return": [
                "str",
                "bool",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "_root": [
                    "List",
                    "Callable",
                    "float"
                ],
                "info": []
            }
        },
        "user_resolver": {
            "name": "user_resolver",
            "location": 64,
            "return": [
                "str",
                "zilencer.models.RemoteZulipServer",
                "app.models.GameMember",
                "app.models.course.Course",
                "abilian.core.models.subjects.User",
                "Callable[[str, str], None]",
                "Optional[Any]"
            ],
            "arguments": {
                "_root": [
                    "Set[int]",
                    "List[str]",
                    "bool",
                    "List[int]",
                    "app.models.group.Group",
                    "int"
                ],
                "_info": [
                    "Set[int]",
                    "List[str]",
                    "bool",
                    "List[int]",
                    "app.models.group.Group",
                    "int"
                ],
                "user_id": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "users_resolver": {
            "name": "users_resolver",
            "location": 68,
            "return": [
                "Optional[str]",
                "dict",
                "int",
                "Union[server.models.User, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "_root": [
                    "salon.models.Stylist"
                ],
                "_info": [
                    "salon.models.Stylist"
                ]
            }
        },
        "user_by_username_resolver": {
            "name": "user_by_username_resolver",
            "location": 72,
            "return": [
                "app.models.GameMember",
                "app.models.course.Course",
                "Mapping[str, Any]",
                "abilian.core.models.subjects.User",
                "int"
            ],
            "arguments": {
                "_root": [
                    "List[str]",
                    "Sequence[services.ticketing.models.tickeTicket]",
                    "Dict",
                    "str",
                    "Sequence[str]",
                    "bool"
                ],
                "_info": [
                    "List[str]",
                    "Sequence[services.ticketing.models.tickeTicket]",
                    "Dict",
                    "str",
                    "Sequence[str]",
                    "bool"
                ],
                "contest_id": [
                    "int",
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "username": [
                    "int",
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "user_by_email_resolver": {
            "name": "user_by_email_resolver",
            "location": 76,
            "return": [
                "[dict]",
                "app.models.Game",
                "app.models.GameMember",
                "app.models.course.Course",
                "Mapping[str, Any]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "_root": [
                    "str",
                    "bool",
                    "zerver.models.Realm"
                ],
                "_info": [
                    "str",
                    "bool",
                    "zerver.models.Realm"
                ],
                "contest_id": [
                    "str",
                    "int"
                ],
                "email": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ugrade-master/server/contests/auth/test_core.py": {
        "test_get_all_permissions": {
            "name": "test_get_all_permissions",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_all_users": {
            "name": "test_get_all_users",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_user_by_id": {
            "name": "test_get_user_by_id",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_user_by_username": {
            "name": "test_get_user_by_username",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_user_by_email": {
            "name": "test_get_user_by_email",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_contest_users": {
            "name": "test_get_contest_users",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SignInTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "bool",
                    "str"
                ]
            }
        },
        "SignInTest.test_wrong_user_id": {
            "name": "test_wrong_user_id",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignInTest.test_havent_signed_up": {
            "name": "test_havent_signed_up",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignInTest.test_wrong_password": {
            "name": "test_wrong_password",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignInTest.test_success": {
            "name": "test_success",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "bool",
                    "str"
                ]
            }
        },
        "SignUpTest.test_wrong_email": {
            "name": "test_wrong_email",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpTest.test_already_signed_up": {
            "name": "test_already_signed_up",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpTest.test_wrong_otc": {
            "name": "test_wrong_otc",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpTest.test_already_used_username": {
            "name": "test_already_used_username",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpTest.test_invalid_input": {
            "name": "test_invalid_input",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUpTest.test_success": {
            "name": "test_success",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgotPasswordTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "bool",
                    "str"
                ]
            }
        },
        "ForgotPasswordTest.test_wrong_email": {
            "name": "test_wrong_email",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgotPasswordTest.test_havent_signed_up": {
            "name": "test_havent_signed_up",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgotPasswordTest.test_success_and_create_new_otc": {
            "name": "test_success_and_create_new_otc",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgotPasswordTest.test_success_and_use_old_otc": {
            "name": "test_success_and_use_old_otc",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetPasswordTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "bool",
                    "str"
                ]
            }
        },
        "ResetPasswordTest.test_wrong_user_id": {
            "name": "test_wrong_user_id",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetPasswordTest.test_havent_signed_up": {
            "name": "test_havent_signed_up",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetPasswordTest.test_wrong_code": {
            "name": "test_wrong_code",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetPasswordTest.test_success": {
            "name": "test_success",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetPasswordTest.test_with_forgot_password": {
            "name": "test_with_forgot_password",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetUserFromTokenTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "bool",
                    "str"
                ]
            }
        },
        "GetUserFromTokenTest.test_authentication_error": {
            "name": "test_authentication_error",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetUserFromTokenTest.test_success": {
            "name": "test_success",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ugrade-master/server/contests/auth/__init__.py": {},
    "ugrade-master/server/contests/contest/core.py": {
        "get_all_languages": {
            "name": "get_all_languages",
            "location": 16,
            "return": [
                "int",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {}
        },
        "get_language_by_id": {
            "name": "get_language_by_id",
            "location": 20,
            "return": [
                "str",
                "zerver.models.Realm",
                "int",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "lang_id": [
                    "int",
                    "str",
                    "site.transfer.models.SiteID"
                ]
            }
        },
        "get_all_contests": {
            "name": "get_all_contests",
            "location": 27,
            "return": [
                "int",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {}
        },
        "get_contest_by_id": {
            "name": "get_contest_by_id",
            "location": 31,
            "return": [
                "str",
                "zerver.models.Realm",
                "int",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "contest_id": [
                    "int",
                    "str",
                    "site.transfer.models.SiteID"
                ]
            }
        },
        "get_contest_by_short_id": {
            "name": "get_contest_by_short_id",
            "location": 38,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "short_id": [
                    "str"
                ]
            }
        },
        "create_contest": {
            "name": "create_contest",
            "location": 46,
            "return": [
                "Tuple[Union[Contest,User]]",
                "Optional[Any]",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "short_id": [
                    "str",
                    "int",
                    "Dict"
                ],
                "short_description": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "description": [
                    "Text",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "start_time": [
                    "None",
                    "Optional[datetime.datetime]",
                    "str",
                    "bool",
                    "datetime.datetime"
                ],
                "finish_time": [
                    "None",
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "Optional[datetime.date]",
                    "datetime.date"
                ],
                "freezed": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "grading_size": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "update_contest": {
            "name": "update_contest",
            "location": 96,
            "return": [
                "int",
                "str",
                "Optional[bool]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "user": [
                    "contests.models.User",
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "short_description": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[Union[str,int]]",
                    "Optional[List[str]]"
                ],
                "description": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "None",
                    "Optional[int]",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "start_time": [
                    "None",
                    "str",
                    "Optional[datetime.datetime]",
                    "int",
                    "datetime.datetime"
                ],
                "finish_time": [
                    "None",
                    "str",
                    "Optional[datetime.datetime]",
                    "int",
                    "datetime.datetime"
                ],
                "freezed": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[Union[str,int]]",
                    "List[Any]",
                    "Optional[List[Any]]"
                ],
                "grading_size": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "Optional[datetime.datetime]"
                ],
                "permitted_languages": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "invite_users": {
            "name": "invite_users",
            "location": 135,
            "return": [
                "List[User]",
                "Dict",
                "str",
                "int"
            ],
            "arguments": {
                "user": [
                    "contests.models.User",
                    "Optional[Dict[str, Any]]",
                    "core.models.User",
                    "users.models.JustfixUser",
                    "http_quesuser.model.User",
                    "app.models.User",
                    "Dict[str, Any]",
                    "str"
                ],
                "emails": [
                    "str",
                    "excars.models.user.User",
                    "musictaxonomy.spotify.models.SpotifyUser",
                    "server.models.User"
                ],
                "permissions": [
                    "str",
                    "List[str]",
                    "contests.models.User",
                    "zerver.models.UserProfile",
                    "http_quesuser.model.User",
                    "app.models.User",
                    "User.models.User"
                ]
            }
        },
        "update_permissions": {
            "name": "update_permissions",
            "location": 167,
            "return": [
                "set",
                "bool",
                "zam_repondeur.models.Lecture",
                "django.db.migrations.state.StateApps"
            ],
            "arguments": {
                "issuer": [
                    "contests.models.User",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "user_id": [
                    "int",
                    "str",
                    "Set[int]",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "Optional[str]",
                    "None"
                ],
                "permissions": [
                    "str",
                    "core.models.User",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "ugrade-master/server/contests/contest/resolvers.py": {
        "language_extensions_resolver": {
            "name": "language_extensions_resolver",
            "location": 46,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "root": [
                    "Dict[str,Any]",
                    "int",
                    "contests.models.Submission"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float"
                ]
            }
        },
        "contest_members_resolver": {
            "name": "contest_members_resolver",
            "location": 50,
            "return": [
                "Sequence[str]",
                "str",
                "List[str]",
                "audiopyle.lib.models.plugin.VampyPlugin"
            ],
            "arguments": {
                "root": [
                    "str",
                    "float"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float"
                ]
            }
        },
        "contest_problems_resolver": {
            "name": "contest_problems_resolver",
            "location": 54,
            "return": [
                "Sequence[str]",
                "str",
                "audiopyle.lib.models.plugin.VampyPlugin",
                "zerver.models.Realm"
            ],
            "arguments": {
                "root": [
                    "str",
                    "story.models.Story",
                    "story.models.Author"
                ],
                "info": [
                    "str",
                    "Dict[str,Any]",
                    "contests.models.Submission"
                ]
            }
        },
        "contest_submissions_resolver": {
            "name": "contest_submissions_resolver",
            "location": 59,
            "return": [
                "Sequence[str]",
                "str",
                "audiopyle.lib.models.plugin.VampyPlugin",
                "zerver.models.Realm"
            ],
            "arguments": {
                "root": [
                    "str",
                    "story.models.Story",
                    "story.models.Author"
                ],
                "info": [
                    "str",
                    "Dict[str,Any]",
                    "contests.models.Submission"
                ]
            }
        },
        "language_resolver": {
            "name": "language_resolver",
            "location": 64,
            "return": [
                "Sequence[str]",
                "List[str]",
                "str",
                "Tuple[int, int]",
                "Optional[str]"
            ],
            "arguments": {
                "_root": [
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "_info": [
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "lang_id": [
                    "int",
                    "str",
                    "bytearray",
                    "bool"
                ]
            }
        },
        "languages_resolver": {
            "name": "languages_resolver",
            "location": 68,
            "return": [
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "_root": [
                    "List",
                    "Callable",
                    "float"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float"
                ]
            }
        },
        "contest_resolver": {
            "name": "contest_resolver",
            "location": 72,
            "return": [
                "Sequence[str]",
                "List[str]",
                "str",
                "Tuple[int, int]",
                "Optional[str]"
            ],
            "arguments": {
                "_root": [
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "_info": [
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "contest_id": [
                    "int",
                    "str",
                    "bytearray",
                    "bool"
                ]
            }
        },
        "contest_by_short_id_resolver": {
            "name": "contest_by_short_id_resolver",
            "location": 76,
            "return": [
                "int",
                "str",
                "bool",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "_root": [
                    "str",
                    "bytes",
                    "Dict",
                    "int",
                    "List[int]"
                ],
                "_info": [
                    "str",
                    "bytes",
                    "Dict",
                    "int",
                    "List[int]"
                ],
                "short_id": [
                    "int",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "contests_resolver": {
            "name": "contests_resolver",
            "location": 80,
            "return": [
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "_root": [
                    "List",
                    "Callable",
                    "float"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float"
                ]
            }
        },
        "my_contest_resolver": {
            "name": "my_contest_resolver",
            "location": 84,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "_root": [
                    "List",
                    "Callable",
                    "float"
                ],
                "info": [
                    "str",
                    "Dict[str,Any]",
                    "contests.models.Submission"
                ]
            }
        },
        "create_contest_mutate": {
            "name": "create_contest_mutate",
            "location": 89,
            "return": [
                "CreateContestResult",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "_self": [
                    "bool",
                    "str",
                    "None",
                    "List[Optional[C]]",
                    "Optional[str]",
                    "int",
                    "List[Optional[Cell]]",
                    "Iterable[Dict]"
                ],
                "_info": [
                    "bool",
                    "str",
                    "None",
                    "List[Optional[C]]",
                    "Optional[str]",
                    "int",
                    "List[Optional[Cell]]",
                    "Iterable[Dict]"
                ],
                "email": [
                    "str",
                    "bool",
                    "zerver.models.Realm",
                    "int"
                ],
                "contest": [
                    "str",
                    "bool",
                    "zerver.models.Realm",
                    "int"
                ]
            }
        },
        "update_contest_mutate": {
            "name": "update_contest_mutate",
            "location": 102,
            "return": [
                "int",
                "set",
                "Sequence[str]",
                "submission.Submission",
                "str"
            ],
            "arguments": {
                "_root": [
                    "int",
                    "Sequence[T]",
                    "Tuple"
                ],
                "info": [],
                "contest": [
                    "Dict",
                    "str",
                    "Callable"
                ]
            }
        },
        "invite_users_mutate": {
            "name": "invite_users_mutate",
            "location": 116,
            "return": [
                "models.User",
                "bool",
                "int",
                "app.models.GameMember",
                "app.models.course.Course"
            ],
            "arguments": {
                "_root": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "info": [
                    "str",
                    "bool"
                ],
                "emails": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "permissions": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "update_user_permissions_mutate": {
            "name": "update_user_permissions_mutate",
            "location": 121,
            "return": [
                "str",
                "blurr.core.schema_loader.SchemaLoader",
                "dict"
            ],
            "arguments": {
                "_root": [
                    "str",
                    "bytes",
                    "List[aw_core.models.Event]",
                    "Mapping",
                    "Mapping[str,Optional[float]]",
                    "List[tuple[Union[bytes,bytes]]]",
                    "List[Tuple[bytes,bytes]]",
                    "aw_core.models.Event"
                ],
                "info": [
                    "str",
                    "int"
                ],
                "user_id": [
                    "str",
                    "Callable[,None]",
                    "int",
                    "user.User"
                ],
                "permissions": [
                    "str",
                    "Callable[,None]",
                    "int",
                    "user.User"
                ]
            }
        }
    },
    "ugrade-master/server/contests/contest/__init__.py": {},
    "ugrade-master/server/contests/migrations/0001_initial.py": {},
    "ugrade-master/server/contests/migrations/0002_contest_grading_size.py": {},
    "ugrade-master/server/contests/migrations/0003_auto_20190421_1552.py": {},
    "ugrade-master/server/contests/migrations/__init__.py": {},
    "ugrade-master/server/contests/problem/core.py": {
        "get_contest_problems": {
            "name": "get_contest_problems",
            "location": 12,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "user": [
                    "contests.models.User",
                    "str",
                    "dict",
                    "Mapping[str, Any]",
                    "services.ticketing.models.ticket_evenTicketEvent",
                    "int",
                    "Optional[zerver.models.UserProfile]"
                ],
                "contest_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "get_problem_by_id": {
            "name": "get_problem_by_id",
            "location": 29,
            "return": [
                "int",
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "user": [
                    "contests.models.User",
                    "bool",
                    "zerver.models.UserProfile",
                    "Dict[int, dict]",
                    "dict",
                    "int"
                ],
                "problem_id": [
                    "int"
                ]
            }
        },
        "check_files": {
            "name": "check_files",
            "location": 51,
            "return": [
                "Tuple[Union[None,str,bool,Mapping,AnyStr]]",
                "str",
                "bool"
            ],
            "arguments": {
                "user": [
                    "str",
                    "contests.models.User",
                    "bool",
                    "bytes",
                    "None",
                    "zerver.models.UserProfile",
                    "Optional[bool]",
                    "Optional[str]",
                    "int"
                ],
                "tcgen_language_id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[django.core.files.File]",
                    "List[str]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "tcgen_source_code": [
                    "Optional[django.core.files.File]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Mapping",
                    "str",
                    "Optional[AnyStr]",
                    "AnyStr"
                ],
                "solution_language_id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[django.core.files.File]",
                    "List[str]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "solution_source_code": [
                    "Optional[django.core.files.File]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Mapping",
                    "str",
                    "Optional[AnyStr]",
                    "AnyStr"
                ],
                "checker_language_id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[django.core.files.File]",
                    "List[str]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "checker_source_code": [
                    "Optional[django.core.files.File]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Mapping",
                    "str",
                    "Optional[AnyStr]",
                    "AnyStr"
                ]
            }
        },
        "create_problem": {
            "name": "create_problem",
            "location": 95,
            "return": [
                "Problem",
                "Set",
                "int",
                "Sequence[str]",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "user": [
                    "Optional[django.core.files.File]",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "short_id": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "name": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "statement": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "disabled": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "time_limit": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "tolerance": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "memory_limit": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "output_limit": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "tcgen_language_id": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "tcgen_source_code": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "solution_language_id": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "solution_source_code": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "checker_language_id": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "checker_source_code": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ]
            }
        },
        "update_problem": {
            "name": "update_problem",
            "location": 146,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "user": [
                    "Optional[django.core.files.File]",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "problem_id": [
                    "int"
                ],
                "short_id": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Mapping",
                    "None",
                    "Optional[bool]",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[bool]",
                    "bool"
                ],
                "statement": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[Union[str,int]]"
                ],
                "disabled": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "time_limit": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "Mapping",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "tolerance": [
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "memory_limit": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "Mapping",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "output_limit": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "T",
                    "Optional[bool]",
                    "bool"
                ],
                "tcgen_language_id": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "tcgen_source_code": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "solution_language_id": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "solution_source_code": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "checker_language_id": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ],
                "checker_source_code": [
                    "None",
                    "Optional[django.core.files.File]",
                    "int",
                    "Optional[int]",
                    "contests.models.User"
                ]
            }
        },
        "delete_problem": {
            "name": "delete_problem",
            "location": 218,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "user": [
                    "contests.models.User",
                    "int",
                    "Iterable",
                    "float",
                    "str"
                ],
                "problem_id": [
                    "int",
                    "zerver.models.Realm"
                ]
            }
        }
    },
    "ugrade-master/server/contests/problem/resolvers.py": {
        "create_problem_mutate": {
            "name": "create_problem_mutate",
            "location": 50,
            "return": [
                "str",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "_root": [
                    "int",
                    "Callable",
                    "str"
                ],
                "info": [
                    "int",
                    "str",
                    "eth.db.backends.base.BaseDB"
                ],
                "problem": [
                    "int",
                    "Optional[Dict]",
                    "Dict",
                    "Type[static_frame.core.container.ContainerBase]",
                    "None",
                    "Type"
                ]
            }
        },
        "update_problem_mutate": {
            "name": "update_problem_mutate",
            "location": 69,
            "return": [
                "str",
                "Tuple[int, int]",
                "int",
                "List[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "_root": [
                    "int",
                    "str",
                    "Dict",
                    "List[int]",
                    "Sequence[services.seating.models.seaSeat]",
                    "Dict[str,int]",
                    "Optional[str]",
                    "None"
                ],
                "info": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Callable",
                    "None"
                ],
                "problem_id": [
                    "int",
                    "List[int]",
                    "str",
                    "models.User"
                ],
                "problem": [
                    "int",
                    "List[int]",
                    "str",
                    "models.User"
                ]
            }
        },
        "delete_problem_mutate": {
            "name": "delete_problem_mutate",
            "location": 92,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, int]",
                "bool"
            ],
            "arguments": {
                "_root": [
                    "int",
                    "List[int]",
                    "Sequence[services.ticketing.models.tickeTicket]",
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "info": [
                    "str",
                    "Optional[Dict[str,bytes]]",
                    "Dict[str,bytes]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "problem_id": [
                    "int",
                    "str"
                ]
            }
        },
        "problem_resolver": {
            "name": "problem_resolver",
            "location": 97,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "_root": [
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "info": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Dict",
                    "None"
                ],
                "problem_id": [
                    "int",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "problems_resolver": {
            "name": "problems_resolver",
            "location": 102,
            "return": [
                "str",
                "Optional[int]",
                "Union[int, float]"
            ],
            "arguments": {
                "_root": [
                    "List",
                    "Callable",
                    "float"
                ],
                "info": [
                    "str",
                    "Dict[str,Any]",
                    "contests.models.Submission"
                ]
            }
        }
    },
    "ugrade-master/server/contests/problem/__init__.py": {},
    "ugrade-master/server/contests/status/resolvers.py": {
        "ping_resolver": {
            "name": "ping_resolver",
            "location": 5,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_root": [
                    "List",
                    "Callable",
                    "float"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float"
                ]
            }
        },
        "server_clock_resolver": {
            "name": "server_clock_resolver",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_root": [
                    "List",
                    "Callable",
                    "float"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float"
                ]
            }
        }
    },
    "ugrade-master/server/contests/status/__init__.py": {},
    "ugrade-master/server/contests/submission/core.py": {
        "get_contest_submissions": {
            "name": "get_contest_submissions",
            "location": 12,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "user": [
                    "contests.models.User",
                    "str",
                    "Dict[str, Any]",
                    "float"
                ],
                "contest_id": [
                    "int",
                    "Set[int]",
                    "str",
                    "zerver.models.Realm",
                    "None",
                    "ticketing.transfer.models.TicketCategoryID",
                    "Iterable[str]",
                    "Optional[int]"
                ]
            }
        },
        "get_submission_by_id": {
            "name": "get_submission_by_id",
            "location": 27,
            "return": [
                "int",
                "str",
                "Dict[str,str]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "user": [
                    "contests.models.User",
                    "Optional[str]",
                    "Type[T]",
                    "str",
                    "Optional[abilian.core.models.Model]",
                    "Optional[int]"
                ],
                "submission_id": [
                    "int"
                ]
            }
        },
        "submit_solution": {
            "name": "submit_solution",
            "location": 42,
            "return": [
                "Submission",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "user": [
                    "str",
                    "int",
                    "float",
                    "List[str]",
                    "core.types.FBUserID",
                    "stiff.models.Tagging"
                ],
                "problem_id": [
                    "int",
                    "Set[str]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "language_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Tuple[int,str]",
                    "Tuple[Union[int,str]]"
                ],
                "source_code": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str,int]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "ugrade-master/server/contests/submission/resolvers.py": {
        "submission_language_resolver": {
            "name": "submission_language_resolver",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [
                    "Dict[str,Any]",
                    "int",
                    "contests.models.Submission"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float"
                ]
            }
        },
        "submission_source_code_resolver": {
            "name": "submission_source_code_resolver",
            "location": 14,
            "return": [
                "str",
                "Callable",
                "list"
            ],
            "arguments": {
                "root": [
                    "float",
                    "int",
                    "contests.models.Submission",
                    "Dict[str,Any]",
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]"
                ],
                "_info": [
                    "str",
                    "Dict[str,Any]",
                    "List[transaction_model.TransactionModel]"
                ]
            }
        },
        "submission_resolver": {
            "name": "submission_resolver",
            "location": 18,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "_root": [
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "info": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Dict",
                    "None"
                ],
                "submission_id": [
                    "int",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "submissions_resolver": {
            "name": "submissions_resolver",
            "location": 23,
            "return": [
                "str",
                "Optional[int]",
                "Union[int, float]"
            ],
            "arguments": {
                "_root": [
                    "List",
                    "Callable",
                    "float"
                ],
                "info": [
                    "str",
                    "Dict[str,Any]",
                    "contests.models.Submission"
                ]
            }
        },
        "submit_solution_mutate": {
            "name": "submit_solution_mutate",
            "location": 28,
            "return": [
                "bool",
                "Iterable[str]",
                "models.User"
            ],
            "arguments": {
                "_root": [
                    "bool",
                    "List[str]",
                    "Set[int]",
                    "str",
                    "Optional[str]",
                    "None",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]"
                ],
                "info": [
                    "bool",
                    "str",
                    "bytes",
                    "int",
                    "Dict",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None"
                ],
                "problem_id": [
                    "int",
                    "django.core.files.File"
                ],
                "language_id": [
                    "int",
                    "django.core.files.File"
                ],
                "source_code": [
                    "int",
                    "django.core.files.File"
                ]
            }
        }
    },
    "ugrade-master/server/contests/submission/__init__.py": {},
    "ugrade-master/server/contests/tests/test_auth.py": {
        "TestAuth.test_dummy": {
            "name": "test_dummy",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ugrade-master/server/contests/tests/__init__.py": {},
    "ugrade-master/server/grading/admin.py": {},
    "ugrade-master/server/grading/apps.py": {},
    "ugrade-master/server/grading/grader.py": {
        "insert_spec": {
            "name": "insert_spec",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "grading_group": [
                    "str",
                    "dict"
                ]
            }
        },
        "grade_submission": {
            "name": "grade_submission",
            "location": 83,
            "return": [],
            "arguments": {
                "submission_model": [
                    "Optional[int]",
                    "float",
                    "Union[str, type]",
                    "int",
                    "str"
                ]
            }
        },
        "get_grading_job": {
            "name": "get_grading_job",
            "location": 109,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "dict",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "user": [
                    "str",
                    "aw_core.models.Event",
                    "bool"
                ]
            }
        },
        "submit_grading_job": {
            "name": "submit_grading_job",
            "location": 140,
            "return": [],
            "arguments": {
                "token": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "verdict": [
                    "pathpy.core.network.Network",
                    "Set[T]"
                ],
                "output": [
                    "str",
                    "int",
                    "IO"
                ]
            }
        },
        "get_grading_job.hash_id": {
            "name": "hash_id",
            "location": 111,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "ugrade-master/server/grading/models.py": {
        "spec_upload_path": {
            "name": "spec_upload_path",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "filename": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "GradingGroup.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grading.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ugrade-master/server/grading/tests.py": {},
    "ugrade-master/server/grading/urls.py": {},
    "ugrade-master/server/grading/views.py": {
        "JobView.get": {
            "name": "get",
            "location": 12,
            "return": [
                "HttpResponse",
                "django.http.HttpResponse",
                "int",
                "Dict[str,Any]",
                "bool",
                "apistar.http.RequestData"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,Any]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "JobView.post": {
            "name": "post",
            "location": 34,
            "return": [
                "HttpResponse",
                "List[Dict[str,Any]]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "ugrade-master/server/grading/__init__.py": {},
    "ugrade-master/server/grading/migrations/0001_initial.py": {},
    "ugrade-master/server/grading/migrations/0002_auto_20190421_1552.py": {},
    "ugrade-master/server/grading/migrations/__init__.py": {},
    "ugrade-master/server/ugrade/schema.py": {},
    "ugrade-master/server/ugrade/settings.py": {},
    "ugrade-master/server/ugrade/urls.py": {},
    "ugrade-master/server/ugrade/wsgi.py": {},
    "ugrade-master/server/ugrade/__init__.py": {}
}
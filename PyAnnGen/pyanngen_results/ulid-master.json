{
    "ulid-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "ulid-master/docs/conf.py": {},
    "ulid-master/tests/conftest.py": {
        "valid_bytes_48_before": {
            "name": "valid_bytes_48_before",
            "location": 27,
            "return": [
                "str",
                "Optional[float]",
                "Callable",
                "bytes"
            ],
            "arguments": {}
        },
        "valid_bytes_48_after": {
            "name": "valid_bytes_48_after",
            "location": 36,
            "return": [
                "str",
                "Optional[float]",
                "Callable",
                "bytes"
            ],
            "arguments": {}
        },
        "valid_bytes_80_before": {
            "name": "valid_bytes_80_before",
            "location": 45,
            "return": [
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "valid_bytes_48_before": [
                    "list[str]",
                    "tuple[typing.Union[int,str]]",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "float",
                    "List[str]",
                    "Tuple[int, str]"
                ]
            }
        },
        "valid_bytes_80_after": {
            "name": "valid_bytes_80_after",
            "location": 54,
            "return": [
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "valid_bytes_48_after": [
                    "list[str]",
                    "tuple[typing.Union[int,str]]",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "float",
                    "List[str]",
                    "Tuple[int, str]"
                ]
            }
        },
        "valid_bytes_128_before": {
            "name": "valid_bytes_128_before",
            "location": 63,
            "return": [
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "valid_bytes_48_before": [
                    "list[str]",
                    "tuple[typing.Union[int,str]]",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "float",
                    "List[str]",
                    "Tuple[int, str]"
                ]
            }
        },
        "valid_bytes_128_after": {
            "name": "valid_bytes_128_after",
            "location": 72,
            "return": [
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "valid_bytes_48_after": [
                    "list[str]",
                    "tuple[typing.Union[int,str]]",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "float",
                    "List[str]",
                    "Tuple[int, str]"
                ]
            }
        },
        "valid_bytes_128": {
            "name": "valid_bytes_128",
            "location": 81,
            "return": [
                "str",
                "bool",
                "Iterable[Iterable[str]]"
            ],
            "arguments": {}
        },
        "valid_bytes_80": {
            "name": "valid_bytes_80",
            "location": 89,
            "return": [
                "str",
                "Optional[float]",
                "int"
            ],
            "arguments": {}
        },
        "valid_bytes_48": {
            "name": "valid_bytes_48",
            "location": 97,
            "return": [
                "str",
                "list",
                "List[str]"
            ],
            "arguments": {}
        },
        "invalid_bytes_128_overflow": {
            "name": "invalid_bytes_128_overflow",
            "location": 105,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "int"
                ]
            }
        },
        "invalid_bytes_128": {
            "name": "invalid_bytes_128",
            "location": 113,
            "return": [
                "int",
                "bytes",
                "Dict[str, Dict[str, float]]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "invalid_bytes_80": {
            "name": "invalid_bytes_80",
            "location": 121,
            "return": [
                "int",
                "bytes",
                "Dict[str, Dict[str, float]]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "invalid_bytes_48": {
            "name": "invalid_bytes_48",
            "location": 129,
            "return": [
                "int",
                "bytes",
                "Dict[str, Dict[str, float]]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "invalid_bytes_48_80_128": {
            "name": "invalid_bytes_48_80_128",
            "location": 137,
            "return": [
                "int",
                "bytes",
                "Dict[str, Dict[str, float]]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "valid_str_valid_length": {
            "name": "valid_str_valid_length",
            "location": 145,
            "return": [
                "str",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "valid_str_26": {
            "name": "valid_str_26",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "valid_str_10": {
            "name": "valid_str_10",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "valid_str_16": {
            "name": "valid_str_16",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "invalid_str_26": {
            "name": "invalid_str_26",
            "location": 177,
            "return": [
                "str",
                "Union[str, bytes]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]",
                    "Callable[..., Awaitable[dict]]",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "invalid_str_16": {
            "name": "invalid_str_16",
            "location": 185,
            "return": [
                "str",
                "Union[str, bytes]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]",
                    "Callable[..., Awaitable[dict]]",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "invalid_str_10": {
            "name": "invalid_str_10",
            "location": 193,
            "return": [
                "str",
                "Union[str, bytes]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]",
                    "Callable[..., Awaitable[dict]]",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "invalid_str_10_msb_invalid": {
            "name": "invalid_str_10_msb_invalid",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "invalid_str_10_16_26": {
            "name": "invalid_str_10_16_26",
            "location": 210,
            "return": [
                "str",
                "Union[str, bytes]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]",
                    "Callable[..., Awaitable[dict]]",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "invalid_str_10_16_26_32_36": {
            "name": "invalid_str_10_16_26_32_36",
            "location": 218,
            "return": [
                "str",
                "Union[str, bytes]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]",
                    "Callable[..., Awaitable[dict]]",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "ascii_non_base32_str_valid_length": {
            "name": "ascii_non_base32_str_valid_length",
            "location": 227,
            "return": [
                "dict",
                "str",
                "Optional[Dict[str, Any]]",
                "Literal",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "ascii_non_base32_str_26": {
            "name": "ascii_non_base32_str_26",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ascii_non_base32_str_10": {
            "name": "ascii_non_base32_str_10",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ascii_non_base32_str_16": {
            "name": "ascii_non_base32_str_16",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "extended_ascii_str_valid_length": {
            "name": "extended_ascii_str_valid_length",
            "location": 263,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "float"
            ],
            "arguments": {
                "request": []
            }
        },
        "extended_ascii_str_26": {
            "name": "extended_ascii_str_26",
            "location": 272,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {}
        },
        "extended_ascii_str_10": {
            "name": "extended_ascii_str_10",
            "location": 281,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {}
        },
        "extended_ascii_str_16": {
            "name": "extended_ascii_str_16",
            "location": 290,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {}
        },
        "random_timestamp_bytes": {
            "name": "random_timestamp_bytes",
            "location": 298,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "random_non_zero_byte": {
            "name": "random_non_zero_byte",
            "location": 307,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "random_bytes": {
            "name": "random_bytes",
            "location": 315,
            "return": [
                "bytes"
            ],
            "arguments": {
                "num_bytes": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Callable"
                ],
                "not_in": [
                    "int",
                    "tuple[int]"
                ]
            }
        },
        "random_str": {
            "name": "random_str",
            "location": 323,
            "return": [
                "float",
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "num_chars": [
                    "int",
                    "Callable[[str], bool]",
                    "dict",
                    "Callable"
                ],
                "alphabet": [
                    "int",
                    "bool"
                ],
                "msb_alphabet": [
                    "str",
                    "int",
                    "bool"
                ],
                "not_in": [
                    "tuple[int]",
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "fixed_year_timestamp_bytes": {
            "name": "fixed_year_timestamp_bytes",
            "location": 332,
            "return": [
                "bytes"
            ],
            "arguments": {}
        }
    },
    "ulid-master/tests/test_api_api.py": {
        "mock_provider": {
            "name": "mock_provider",
            "location": 14,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "Iterable",
                    "typing.Iterable[]"
                ]
            }
        },
        "mock_api": {
            "name": "mock_api",
            "location": 26,
            "return": [
                "Dict[str, Sequence[str]]",
                "Api"
            ],
            "arguments": {
                "mock_provider": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_all_defined_expected_methods": {
            "name": "test_all_defined_expected_methods",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_api_new_calls_provider_new": {
            "name": "test_api_new_calls_provider_new",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_api": []
            }
        },
        "test_api_from_timestamp_calls_provider_randomness": {
            "name": "test_api_from_timestamp_calls_provider_randomness",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "mock_api": [],
                "valid_bytes_48": []
            }
        },
        "test_api_from_randomness_calls_provider_timestamp": {
            "name": "test_api_from_randomness_calls_provider_timestamp",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_api": [],
                "valid_bytes_80": []
            }
        }
    },
    "ulid-master/tests/test_api_default.py": {
        "test_module_has_dunder_all": {
            "name": "test_module_has_dunder_all",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_module_exposes_expected_interface": {
            "name": "test_module_exposes_expected_interface",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_module_api_uses_correct_provider": {
            "name": "test_module_api_uses_correct_provider",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "ulid-master/tests/test_api_microsecond.py": {
        "test_module_has_dunder_all": {
            "name": "test_module_has_dunder_all",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_module_exposes_expected_interface": {
            "name": "test_module_exposes_expected_interface",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_module_api_uses_correct_provider": {
            "name": "test_module_api_uses_correct_provider",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "ulid-master/tests/test_api_monotonic.py": {
        "test_module_has_dunder_all": {
            "name": "test_module_has_dunder_all",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_module_exposes_expected_interface": {
            "name": "test_module_exposes_expected_interface",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_module_api_uses_correct_provider": {
            "name": "test_module_api_uses_correct_provider",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "ulid-master/tests/test_api_package.py": {
        "api": {
            "name": "api",
            "location": 35,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "unsupported_type": {
            "name": "unsupported_type",
            "location": 49,
            "return": [
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "buffer_type": {
            "name": "buffer_type",
            "location": 57,
            "return": [
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_package_has_dunder_all": {
            "name": "test_package_has_dunder_all",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_package_exposes_expected_interface": {
            "name": "test_package_exposes_expected_interface",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "float",
                    "bool"
                ]
            }
        },
        "test_min_timestamp_uses_expected_value": {
            "name": "test_min_timestamp_uses_expected_value",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_max_timestamp_uses_expected_value": {
            "name": "test_max_timestamp_uses_expected_value",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_min_randomness_uses_expected_value": {
            "name": "test_min_randomness_uses_expected_value",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "api": []
            }
        },
        "test_max_randomness_uses_expected_value": {
            "name": "test_max_randomness_uses_expected_value",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "int"
                ]
            }
        },
        "test_min_ulid_uses_expected_value": {
            "name": "test_min_ulid_uses_expected_value",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "api": []
            }
        },
        "test_max_ulid_uses_expected_value": {
            "name": "test_max_ulid_uses_expected_value",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "int",
                    "str"
                ]
            }
        },
        "test_new_returns_ulid_instance": {
            "name": "test_new_returns_ulid_instance",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "api": []
            }
        },
        "test_parse_returns_given_ulid_instance": {
            "name": "test_parse_returns_given_ulid_instance",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str"
                ]
            }
        },
        "test_parse_returns_ulid_instance_from_uuid": {
            "name": "test_parse_returns_ulid_instance_from_uuid",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_parse_returns_ulid_instance_from_uuid_str": {
            "name": "test_parse_returns_ulid_instance_from_uuid_str",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str"
                ]
            }
        },
        "test_parse_returns_ulid_instance_from_uuid_hex_str": {
            "name": "test_parse_returns_ulid_instance_from_uuid_hex_str",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_parse_returns_ulid_instance_from_ulid_str": {
            "name": "test_parse_returns_ulid_instance_from_ulid_str",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bytes"
                ],
                "valid_bytes_128": [
                    "str",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        },
        "test_parse_returns_ulid_instance_from_randomness_str": {
            "name": "test_parse_returns_ulid_instance_from_randomness_str",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bytes"
                ],
                "valid_bytes_80": [
                    "str",
                    "None",
                    "Optional[str]",
                    "uuid.UUID"
                ]
            }
        },
        "test_parse_returns_ulid_instance_from_timestamp_str": {
            "name": "test_parse_returns_ulid_instance_from_timestamp_str",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bytes"
                ],
                "valid_bytes_48": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_parse_error_on_invalid_length_str": {
            "name": "test_parse_error_on_invalid_length_str",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [],
                "invalid_str_10_16_26_32_36": []
            }
        },
        "test_parse_returns_ulid_instance_from_int": {
            "name": "test_parse_returns_ulid_instance_from_int",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "valid_bytes_128": [
                    "int",
                    "str",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "test_parse_raises_when_int_greater_than_128_bits": {
            "name": "test_parse_raises_when_int_greater_than_128_bits",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bytes"
                ],
                "invalid_bytes_128_overflow": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "test_parse_raises_when_int_negative": {
            "name": "test_parse_raises_when_int_negative",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "float"
                ]
            }
        },
        "test_parse_returns_ulid_instance_from_float": {
            "name": "test_parse_returns_ulid_instance_from_float",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "valid_bytes_128": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "test_parse_raises_when_float_greater_than_128_bits": {
            "name": "test_parse_raises_when_float_greater_than_128_bits",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bytes"
                ],
                "invalid_bytes_128_overflow": [
                    "int",
                    "bytes"
                ]
            }
        },
        "test_parse_raises_when_float_negative": {
            "name": "test_parse_raises_when_float_negative",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "bytes"
                ]
            }
        },
        "test_parse_returns_ulid_instance_from_buffer_type": {
            "name": "test_parse_returns_ulid_instance_from_buffer_type",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bool"
                ],
                "buffer_type": [
                    "str",
                    "Iterable[Sequence[str]]",
                    "typing.Iterable[typing.Sequence[str]]"
                ],
                "valid_bytes_128": [
                    "str",
                    "bytes",
                    "bytearray",
                    "typing.BinaryIO",
                    "bool",
                    "BinaryIO",
                    "typing.IO",
                    "IO[str]",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "test_parse_raises_when_buffer_type_not_128_bits": {
            "name": "test_parse_raises_when_buffer_type_not_128_bits",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Callable[[str], str]"
                ],
                "buffer_type": [
                    "tuple",
                    "str",
                    "tuple[]",
                    "int",
                    "Union[Dict, List]",
                    "dict[, ]",
                    "Optional[float]",
                    "list[]",
                    "List[str]",
                    "float",
                    "None",
                    "list[str]"
                ],
                "invalid_bytes_128": [
                    "tuple",
                    "str",
                    "tuple[]",
                    "int",
                    "Union[Dict, List]",
                    "dict[, ]",
                    "Optional[float]",
                    "list[]",
                    "List[str]",
                    "float",
                    "None",
                    "list[str]"
                ]
            }
        },
        "test_parse_raises_when_given_unsupported_type": {
            "name": "test_parse_raises_when_given_unsupported_type",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bytes"
                ],
                "unsupported_type": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_create_timestamp_datetime_returns_ulid_instance": {
            "name": "test_create_timestamp_datetime_returns_ulid_instance",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Union[str, Iterable[str]]"
                ],
                "valid_bytes_80": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_create_timestamp_int_returns_ulid_instance": {
            "name": "test_create_timestamp_int_returns_ulid_instance",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Union[str, Iterable[str]]"
                ],
                "valid_bytes_80": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_create_timestamp_float_returns_ulid_instance": {
            "name": "test_create_timestamp_float_returns_ulid_instance",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Union[str, Iterable[str]]"
                ],
                "valid_bytes_80": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_create_timestamp_str_returns_ulid_instance": {
            "name": "test_create_timestamp_str_returns_ulid_instance",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]"
                ],
                "valid_bytes_48": [
                    "str",
                    "None",
                    "Optional[str]",
                    "datetime.datetime"
                ],
                "valid_bytes_80": [
                    "str",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_create_timestamp_bytes_returns_ulid_instance": {
            "name": "test_create_timestamp_bytes_returns_ulid_instance",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Union[str, Dict[str, Any]]",
                    "bool"
                ],
                "buffer_type": [
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "Type",
                    "typing.Type",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "valid_bytes_48": [
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "Type",
                    "typing.Type",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "valid_bytes_80": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "test_create_timestamp_timestamp_returns_ulid_instance": {
            "name": "test_create_timestamp_timestamp_returns_ulid_instance",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bool"
                ],
                "valid_bytes_48": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "valid_bytes_80": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_create_timestamp_ulid_returns_ulid_instance": {
            "name": "test_create_timestamp_ulid_returns_ulid_instance",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bool"
                ],
                "valid_bytes_128": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "valid_bytes_80": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_create_raises_when_given_unsupported_timestamp_type": {
            "name": "test_create_raises_when_given_unsupported_timestamp_type",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bool",
                    "float",
                    "Dict[str, str]"
                ],
                "unsupported_type": [
                    "str",
                    "bool",
                    "float",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "valid_bytes_80": [
                    "str",
                    "bool",
                    "float",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_create_randomness_int_returns_ulid_instance": {
            "name": "test_create_randomness_int_returns_ulid_instance",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[Union[str, int]]",
                    "Set[str]"
                ],
                "valid_bytes_48": [
                    "str",
                    "Optional[Union[str, int]]",
                    "int",
                    "Set[str]",
                    "None",
                    "set[str]"
                ],
                "valid_bytes_80": [
                    "bytes",
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "test_create_randomness_float_returns_ulid_instance": {
            "name": "test_create_randomness_float_returns_ulid_instance",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[Union[str, int]]",
                    "Set[str]"
                ],
                "valid_bytes_48": [
                    "str",
                    "Optional[Union[str, int]]",
                    "int",
                    "Set[str]",
                    "None",
                    "set[str]"
                ],
                "valid_bytes_80": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_create_randomness_str_returns_ulid_instance": {
            "name": "test_create_randomness_str_returns_ulid_instance",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[Union[str, int]]",
                    "None"
                ],
                "valid_bytes_48": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[Union[str, int]]",
                    "None"
                ],
                "valid_bytes_80": [
                    "str",
                    "None",
                    "Optional[str]",
                    "uuid.UUID"
                ]
            }
        },
        "test_create_randomness_bytes_returns_ulid_instance": {
            "name": "test_create_randomness_bytes_returns_ulid_instance",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "Optional[Any]"
                ],
                "buffer_type": [
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "Type",
                    "typing.Type",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "valid_bytes_48": [
                    "Dict[str, int]",
                    "dict[str, int]",
                    "Dict[str, Any]",
                    "typing.Any",
                    "Optional[Any]",
                    "None"
                ],
                "valid_bytes_80": [
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "Type",
                    "typing.Type",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_create_randomness_randomness_returns_ulid_instance": {
            "name": "test_create_randomness_randomness_returns_ulid_instance",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[Union[str, int]]",
                    "Set[str]"
                ],
                "valid_bytes_48": [
                    "str",
                    "Optional[Union[str, int]]",
                    "int",
                    "Set[str]",
                    "None",
                    "set[str]"
                ],
                "valid_bytes_80": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_create_randomness_ulid_returns_ulid_instance": {
            "name": "test_create_randomness_ulid_returns_ulid_instance",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[Union[str, int]]",
                    "Set[str]"
                ],
                "valid_bytes_48": [
                    "str",
                    "Optional[Union[str, int]]",
                    "int",
                    "Set[str]",
                    "None",
                    "set[str]"
                ],
                "valid_bytes_128": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_create_raises_when_given_unsupported_randomness_type": {
            "name": "test_create_raises_when_given_unsupported_randomness_type",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "bool",
                    "int"
                ],
                "unsupported_type": [
                    "bool",
                    "int"
                ],
                "valid_bytes_48": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_from_bytes_returns_ulid_instance": {
            "name": "test_from_bytes_returns_ulid_instance",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[str]"
                ],
                "buffer_type": [
                    "str",
                    "bool",
                    "int"
                ],
                "valid_bytes_128": [
                    "str",
                    "bytes",
                    "consts.Pid",
                    "consts.Seqno"
                ]
            }
        },
        "test_from_bytes_raises_when_not_128_bits": {
            "name": "test_from_bytes_raises_when_not_128_bits",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "buffer_type": [
                    "tuple",
                    "tuple[]",
                    "str",
                    "List[Dict]",
                    "bool",
                    "list[dict[, ]]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "invalid_bytes_128": [
                    "tuple",
                    "tuple[]",
                    "str",
                    "List[Dict]",
                    "bool",
                    "list[dict[, ]]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_from_int_returns_ulid_instance": {
            "name": "test_from_int_returns_ulid_instance",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "int"
                ],
                "valid_bytes_128": [
                    "int",
                    "bytes",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "test_from_int_raises_when_greater_than_128_bits": {
            "name": "test_from_int_raises_when_greater_than_128_bits",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union[float, int]"
                ],
                "invalid_bytes_128_overflow": [
                    "int",
                    "str",
                    "bytes",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_from_int_raises_when_negative_number": {
            "name": "test_from_int_raises_when_negative_number",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str"
                ]
            }
        },
        "test_from_str_returns_ulid_instance": {
            "name": "test_from_str_returns_ulid_instance",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "bytes",
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "dict",
                    "Union[str, int]"
                ],
                "valid_bytes_128": [
                    "str",
                    "bytes",
                    "dict[bytes, bytes]",
                    "Union[str, bytes]",
                    "Dict[bytes, bytes]"
                ]
            }
        },
        "test_from_str_raises_when_not_128_bits": {
            "name": "test_from_str_raises_when_not_128_bits",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]"
                ],
                "valid_bytes_48": [
                    "str",
                    "int"
                ]
            }
        },
        "test_from_uuid_returns_ulid_instance": {
            "name": "test_from_uuid_returns_ulid_instance",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "api": []
            }
        },
        "test_from_timestamp_datetime_returns_ulid_instance": {
            "name": "test_from_timestamp_datetime_returns_ulid_instance",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "raiden.api.resAPIServer"
                ]
            }
        },
        "test_from_timestamp_int_returns_ulid_instance": {
            "name": "test_from_timestamp_int_returns_ulid_instance",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "raiden.api.resAPIServer"
                ]
            }
        },
        "test_from_timestamp_float_returns_ulid_instance": {
            "name": "test_from_timestamp_float_returns_ulid_instance",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "raiden.api.resAPIServer"
                ]
            }
        },
        "test_from_timestamp_str_returns_ulid_instance": {
            "name": "test_from_timestamp_str_returns_ulid_instance",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[Callable[..., Any]]",
                    "None",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "typing.Callable[..., typing.Any]"
                ],
                "valid_bytes_48": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_from_timestamp_bytes_returns_ulid_instance": {
            "name": "test_from_timestamp_bytes_returns_ulid_instance",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "Mapping[str, Any]",
                    "raiden.api.resAPIServer",
                    "Type",
                    "Dict[str, Any]"
                ],
                "buffer_type": [
                    "bool",
                    "float",
                    "str",
                    "Tuple[str, List[str]]",
                    "tuple[typing.Union[str,list[str]]]",
                    "Tuple[bool, float]",
                    "tuple[typing.Union[bool,float]]"
                ],
                "valid_bytes_48": [
                    "bool",
                    "float",
                    "str",
                    "Tuple[str, List[str]]",
                    "tuple[typing.Union[str,list[str]]]",
                    "Tuple[bool, float]",
                    "tuple[typing.Union[bool,float]]"
                ]
            }
        },
        "test_from_timestamp_timestamp_returns_ulid_instance": {
            "name": "test_from_timestamp_timestamp_returns_ulid_instance",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[Callable[..., Any]]",
                    "bob_emploi.frontend.api.user_pb2.User"
                ],
                "valid_bytes_48": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_from_timestamp_ulid_returns_ulid_instance": {
            "name": "test_from_timestamp_ulid_returns_ulid_instance",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[Callable[..., Any]]",
                    "bob_emploi.frontend.api.user_pb2.User"
                ],
                "valid_bytes_128": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_from_timestamp_with_unsupported_type_raises": {
            "name": "test_from_timestamp_with_unsupported_type_raises",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bool",
                    "Type[Any]",
                    "typing.Type"
                ],
                "unsupported_type": [
                    "str",
                    "bool",
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "test_from_timestamp_with_incorrect_size_bytes_raises": {
            "name": "test_from_timestamp_with_incorrect_size_bytes_raises",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "uuid.UUID"
                ],
                "valid_bytes_128": [
                    "str",
                    "dict[str, dict[str, str]]",
                    "Dict[str, Dict[str, str]]",
                    "uuid.UUID"
                ]
            }
        },
        "test_from_randomness_int_returns_ulid_instance": {
            "name": "test_from_randomness_int_returns_ulid_instance",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[Callable[..., Any]]",
                    "bob_emploi.frontend.api.user_pb2.User"
                ],
                "valid_bytes_80": [
                    "int",
                    "Optional[str]",
                    "Optional[Callable]",
                    "str",
                    "float",
                    "bytes"
                ]
            }
        },
        "test_from_randomness_float_returns_ulid_instance": {
            "name": "test_from_randomness_float_returns_ulid_instance",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[Callable[..., Any]]",
                    "bob_emploi.frontend.api.user_pb2.User"
                ],
                "valid_bytes_80": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_from_randomness_str_returns_ulid_instance": {
            "name": "test_from_randomness_str_returns_ulid_instance",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[Callable[..., Any]]",
                    "None",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "typing.Callable[..., typing.Any]"
                ],
                "valid_bytes_80": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_from_randomness_bytes_returns_ulid_instance": {
            "name": "test_from_randomness_bytes_returns_ulid_instance",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "Mapping[str, Any]",
                    "raiden.api.resAPIServer",
                    "Type",
                    "Dict[str, Any]"
                ],
                "buffer_type": [
                    "bool",
                    "float",
                    "str",
                    "Tuple[str, List[str]]",
                    "tuple[typing.Union[str,list[str]]]",
                    "Tuple[bool, float]",
                    "tuple[typing.Union[bool,float]]"
                ],
                "valid_bytes_80": [
                    "bool",
                    "float",
                    "str",
                    "Tuple[str, List[str]]",
                    "tuple[typing.Union[str,list[str]]]",
                    "Tuple[bool, float]",
                    "tuple[typing.Union[bool,float]]"
                ]
            }
        },
        "test_from_randomness_randomness_returns_ulid_instance": {
            "name": "test_from_randomness_randomness_returns_ulid_instance",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[Callable[..., Any]]",
                    "bob_emploi.frontend.api.user_pb2.User"
                ],
                "valid_bytes_80": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_from_randomness_ulid_returns_ulid_instance": {
            "name": "test_from_randomness_ulid_returns_ulid_instance",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[Callable[..., Any]]",
                    "bob_emploi.frontend.api.user_pb2.User"
                ],
                "valid_bytes_128": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_from_randomness_with_unsupported_type_raises": {
            "name": "test_from_randomness_with_unsupported_type_raises",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "bool",
                    "Type[Any]",
                    "typing.Type"
                ],
                "unsupported_type": [
                    "str",
                    "bool",
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "test_from_randomness_with_incorrect_size_bytes_raises": {
            "name": "test_from_randomness_with_incorrect_size_bytes_raises",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "uuid.UUID"
                ],
                "valid_bytes_128": [
                    "str",
                    "dict[str, dict[str, str]]",
                    "Dict[str, Dict[str, str]]",
                    "uuid.UUID"
                ]
            }
        }
    },
    "ulid-master/tests/test_base32.py": {
        "decoding_alphabet": {
            "name": "decoding_alphabet",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_encode_handles_ulid_and_returns_26_char_string": {
            "name": "test_encode_handles_ulid_and_returns_26_char_string",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_encode_handles_timestamp_and_returns_10_char_string": {
            "name": "test_encode_handles_timestamp_and_returns_10_char_string",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_48": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_encode_handles_randomness_and_returns_16_char_string": {
            "name": "test_encode_handles_randomness_and_returns_16_char_string",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_80": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_encode_raises_on_bytes_length_mismatch": {
            "name": "test_encode_raises_on_bytes_length_mismatch",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_bytes_48_80_128": [
                    "str"
                ]
            }
        },
        "test_encode_ulid_returns_26_char_string": {
            "name": "test_encode_ulid_returns_26_char_string",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "Optional[Union[float, str]]",
                    "bytes",
                    "str",
                    "float",
                    "bytearray",
                    "None"
                ]
            }
        },
        "test_encode_ulid_raises_on_bytes_length_mismatch": {
            "name": "test_encode_ulid_raises_on_bytes_length_mismatch",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_bytes_128": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_encode_timestamp_returns_10_char_string": {
            "name": "test_encode_timestamp_returns_10_char_string",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_48": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[Union[int, str]]",
                    "int",
                    "None"
                ]
            }
        },
        "test_encode_timestamp_raises_on_bytes_length_mismatch": {
            "name": "test_encode_timestamp_raises_on_bytes_length_mismatch",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_bytes_48": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]"
                ]
            }
        },
        "test_encode_randomness_returns_16_char_string": {
            "name": "test_encode_randomness_returns_16_char_string",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_80": [
                    "int",
                    "Optional[Union[float, str]]",
                    "bytes",
                    "str",
                    "float",
                    "bytearray",
                    "None"
                ]
            }
        },
        "test_encode_randomness_raises_on_bytes_length_mismatch": {
            "name": "test_encode_randomness_raises_on_bytes_length_mismatch",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_bytes_80": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_decode_handles_ulid_and_returns_16_bytes": {
            "name": "test_decode_handles_ulid_and_returns_16_bytes",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_str_26": [
                    "str"
                ]
            }
        },
        "test_decode_handles_timestamp_and_returns_6_bytes": {
            "name": "test_decode_handles_timestamp_and_returns_6_bytes",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_str_10": [
                    "str"
                ]
            }
        },
        "test_decode_handles_randomness_and_returns_10_bytes": {
            "name": "test_decode_handles_randomness_and_returns_10_bytes",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_str_16": [
                    "str"
                ]
            }
        },
        "test_decode_raises_on_str_length_mismatch": {
            "name": "test_decode_raises_on_str_length_mismatch",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_str_10_16_26": [
                    "str"
                ]
            }
        },
        "test_decode_raises_on_extended_ascii_str": {
            "name": "test_decode_raises_on_extended_ascii_str",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "extended_ascii_str_valid_length": []
            }
        },
        "test_decode_raises_on_non_base32_decode_char": {
            "name": "test_decode_raises_on_non_base32_decode_char",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "ascii_non_base32_str_valid_length": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Optional[Callable[[str], bool]]",
                    "None"
                ]
            }
        },
        "test_decode_ulid_returns_16_bytes": {
            "name": "test_decode_ulid_returns_16_bytes",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_str_26": [
                    "str"
                ]
            }
        },
        "test_decode_ulid_raises_on_str_length_mismatch": {
            "name": "test_decode_ulid_raises_on_str_length_mismatch",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_str_26": [
                    "str"
                ]
            }
        },
        "test_decode_ulid_raises_on_non_ascii_str": {
            "name": "test_decode_ulid_raises_on_non_ascii_str",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "extended_ascii_str_26": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_decode_ulid_raises_on_non_base32_decode_char": {
            "name": "test_decode_ulid_raises_on_non_base32_decode_char",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "ascii_non_base32_str_26": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "test_decode_timestamp_returns_6_bytes": {
            "name": "test_decode_timestamp_returns_6_bytes",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_str_10": [
                    "str"
                ]
            }
        },
        "test_decode_timestamp_raises_on_str_length_mismatch": {
            "name": "test_decode_timestamp_raises_on_str_length_mismatch",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_str_10": [
                    "str"
                ]
            }
        },
        "test_decode_timestamp_raises_on_non_ascii_str": {
            "name": "test_decode_timestamp_raises_on_non_ascii_str",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "extended_ascii_str_10": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Tuple[float, float, float, float]",
                    "None",
                    "tuple[typing.Union[float,float,float,float]]"
                ]
            }
        },
        "test_decode_timestamp_raises_on_non_base32_decode_char": {
            "name": "test_decode_timestamp_raises_on_non_base32_decode_char",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "ascii_non_base32_str_10": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_decode_randomness_returns_10_bytes": {
            "name": "test_decode_randomness_returns_10_bytes",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_str_16": [
                    "str"
                ]
            }
        },
        "test_decode_randomness_raises_on_str_length_mismatch": {
            "name": "test_decode_randomness_raises_on_str_length_mismatch",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_str_16": [
                    "str"
                ]
            }
        },
        "test_decode_randomness_raises_on_non_ascii_str": {
            "name": "test_decode_randomness_raises_on_non_ascii_str",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "extended_ascii_str_16": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_decode_randomness_raises_on_non_base32_decode_char": {
            "name": "test_decode_randomness_raises_on_non_base32_decode_char",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "ascii_non_base32_str_16": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "test_decode_table_has_value_for_entire_decoding_alphabet": {
            "name": "test_decode_table_has_value_for_entire_decoding_alphabet",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "decoding_alphabet": []
            }
        },
        "test_str_to_bytes_returns_expected_bytes": {
            "name": "test_str_to_bytes_returns_expected_bytes",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_str_valid_length": [
                    "str",
                    "int"
                ]
            }
        },
        "test_str_to_bytes_raises_on_unexpected_length": {
            "name": "test_str_to_bytes_raises_on_unexpected_length",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_str_26": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_str_to_bytes_raises_on_extended_ascii_str": {
            "name": "test_str_to_bytes_raises_on_extended_ascii_str",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "extended_ascii_str_valid_length": [
                    "str"
                ]
            }
        },
        "test_str_to_bytes_raises_on_non_base32_decode_char": {
            "name": "test_str_to_bytes_raises_on_non_base32_decode_char",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "ascii_non_base32_str_valid_length": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "test_str_to_bytes_raises_on_timestamp_msb_overflow": {
            "name": "test_str_to_bytes_raises_on_timestamp_msb_overflow",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_str_10_msb_invalid": [
                    "str"
                ]
            }
        }
    },
    "ulid-master/tests/test_bugs.py": {
        "test_github_issue_58": {
            "name": "test_github_issue_58",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_github_issue_61": {
            "name": "test_github_issue_61",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_github_issue_452": {
            "name": "test_github_issue_452",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_github_issue_463": {
            "name": "test_github_issue_463",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ulid-master/tests/test_codec.py": {
        "unsupported_type": {
            "name": "unsupported_type",
            "location": 28,
            "return": [
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "buffer_type": {
            "name": "buffer_type",
            "location": 36,
            "return": [
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_decode_timestamp_datetime_returns_timestamp_instance": {
            "name": "test_decode_timestamp_datetime_returns_timestamp_instance",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decode_timestamp_int_returns_timestamp_instance": {
            "name": "test_decode_timestamp_int_returns_timestamp_instance",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decode_timestamp_float_returns_timestamp_instance": {
            "name": "test_decode_timestamp_float_returns_timestamp_instance",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decode_timestamp_str_returns_timestamp_instance": {
            "name": "test_decode_timestamp_str_returns_timestamp_instance",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_48": [
                    "str",
                    "float",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_decode_timestamp_bytes_returns_timestamp_instance": {
            "name": "test_decode_timestamp_bytes_returns_timestamp_instance",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "buffer_type": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "None",
                    "bool",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "valid_bytes_48": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "None",
                    "bool",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_decode_timestamp_timestamp_returns_timestamp_instance": {
            "name": "test_decode_timestamp_timestamp_returns_timestamp_instance",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_48": [
                    "bytearray"
                ]
            }
        },
        "test_decode_timestamp_ulid_returns_timestamp_instance": {
            "name": "test_decode_timestamp_ulid_returns_timestamp_instance",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "bytearray"
                ]
            }
        },
        "test_decode_timestamp_with_unsupported_type_raises": {
            "name": "test_decode_timestamp_with_unsupported_type_raises",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "unsupported_type": [
                    "Type[Any]",
                    "typing.Type"
                ]
            }
        },
        "test_decode_timestamp_with_incorrect_size_bytes_raises": {
            "name": "test_decode_timestamp_with_incorrect_size_bytes_raises",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_decode_randomness_int_returns_randomness_instance": {
            "name": "test_decode_randomness_int_returns_randomness_instance",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_80": [
                    "int",
                    "bytearray",
                    "bool"
                ]
            }
        },
        "test_decode_randomness_float_returns_randomness_instance": {
            "name": "test_decode_randomness_float_returns_randomness_instance",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_80": [
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "test_decode_randomness_str_returns_randomness_instance": {
            "name": "test_decode_randomness_str_returns_randomness_instance",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_80": [
                    "str",
                    "int"
                ]
            }
        },
        "test_decode_randomness_bytes_returns_randomness_instance": {
            "name": "test_decode_randomness_bytes_returns_randomness_instance",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "buffer_type": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "None",
                    "bool",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "valid_bytes_80": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "None",
                    "bool",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_decode_randomness_randomness_returns_randomness_instance": {
            "name": "test_decode_randomness_randomness_returns_randomness_instance",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_80": [
                    "bytearray"
                ]
            }
        },
        "test_decode_randomness_ulid_returns_randomness_instance": {
            "name": "test_decode_randomness_ulid_returns_randomness_instance",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "bytearray"
                ]
            }
        },
        "test_decode_randomness_with_unsupported_type_raises": {
            "name": "test_decode_randomness_with_unsupported_type_raises",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "unsupported_type": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_decode_randomness_with_incorrect_size_bytes_raises": {
            "name": "test_decode_randomness_with_incorrect_size_bytes_raises",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "Set[str]",
                    "int",
                    "set[str]",
                    "str"
                ]
            }
        }
    },
    "ulid-master/tests/test_consts.py": {
        "test_min_timestamp_uses_expected_value": {
            "name": "test_min_timestamp_uses_expected_value",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_max_timestamp_uses_expected_value": {
            "name": "test_max_timestamp_uses_expected_value",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_min_randomness_uses_expected_value": {
            "name": "test_min_randomness_uses_expected_value",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_max_randomness_uses_expected_value": {
            "name": "test_max_randomness_uses_expected_value",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_min_ulid_uses_expected_value": {
            "name": "test_min_ulid_uses_expected_value",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_max_ulid_uses_expected_value": {
            "name": "test_max_ulid_uses_expected_value",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ulid-master/tests/test_module.py": {
        "test_module_has_dunder_version": {
            "name": "test_module_has_dunder_version",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_module_has_dunder_all": {
            "name": "test_module_has_dunder_all",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_module_has_submodule_interface": {
            "name": "test_module_has_submodule_interface",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "submodule": [
                    "int"
                ]
            }
        },
        "test_module_exposes_api_interfaces_via_all": {
            "name": "test_module_exposes_api_interfaces_via_all",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ulid-master/tests/test_providers_base.py": {
        "test_provider_is_abstract": {
            "name": "test_provider_is_abstract",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ulid-master/tests/test_providers_default.py": {
        "provider": {
            "name": "provider",
            "location": 15,
            "return": [
                "Provider",
                "list",
                "bool",
                "Dict[str, Any]",
                "base.ConfigOptions"
            ],
            "arguments": {}
        },
        "test_provider_derives_from_base": {
            "name": "test_provider_derives_from_base",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_provider_new_returns_bytes_pair": {
            "name": "test_provider_new_returns_bytes_pair",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_provider_timestamp_returns_bytes": {
            "name": "test_provider_timestamp_returns_bytes",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_provider_timestamp_uses_time_epoch": {
            "name": "test_provider_timestamp_uses_time_epoch",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "test_provider_randomness_returns_bytes": {
            "name": "test_provider_randomness_returns_bytes",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_provider_randomness_returns_random_values_for_same_timestamp": {
            "name": "test_provider_randomness_returns_random_values_for_same_timestamp",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "antidote.providers.lazy.LazyCallProvider"
                ]
            }
        }
    },
    "ulid-master/tests/test_providers_microsecond.py": {
        "provider": {
            "name": "provider",
            "location": 13,
            "return": [
                "Provider",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "valid_epoch_milliseconds": {
            "name": "valid_epoch_milliseconds",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "valid_epoch_microseconds": {
            "name": "valid_epoch_microseconds",
            "location": 29,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "mock_time_provider": {
            "name": "mock_time_provider",
            "location": 37,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Callable"
            ],
            "arguments": {
                "mocker": [],
                "valid_epoch_milliseconds": [
                    "List[str]",
                    "list[str]"
                ],
                "valid_epoch_microseconds": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "provider_time_mock": {
            "name": "provider_time_mock",
            "location": 48,
            "return": [
                "Provider",
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {
                "mocker": [
                    "float",
                    "dict",
                    "dict[, ]"
                ],
                "mock_time_provider": [
                    "float",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_provider_derives_from_base": {
            "name": "test_provider_derives_from_base",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_provider_new_returns_bytes_pair": {
            "name": "test_provider_new_returns_bytes_pair",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_provider_new_returns_randomness_with_microseconds": {
            "name": "test_provider_new_returns_randomness_with_microseconds",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "provider_time_mock": []
            }
        },
        "test_provider_timestamp_returns_bytes": {
            "name": "test_provider_timestamp_returns_bytes",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_provider_timestamp_uses_time_epoch": {
            "name": "test_provider_timestamp_uses_time_epoch",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "test_provider_randomness_returns_bytes": {
            "name": "test_provider_randomness_returns_bytes",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "ulid-master/tests/test_providers_monotonic.py": {
        "provider": {
            "name": "provider",
            "location": 17,
            "return": [
                "Provider",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "test_provider_derives_from_base": {
            "name": "test_provider_derives_from_base",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_provider_new_returns_bytes_pair": {
            "name": "test_provider_new_returns_bytes_pair",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_provider_timestamp_returns_bytes": {
            "name": "test_provider_timestamp_returns_bytes",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_provider_timestamp_uses_time_epoch": {
            "name": "test_provider_timestamp_uses_time_epoch",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "test_provider_randomness_returns_bytes": {
            "name": "test_provider_randomness_returns_bytes",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_provider_randomness_returns_increasing_values_for_same_timestamp": {
            "name": "test_provider_randomness_returns_increasing_values_for_same_timestamp",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "antidote.providers.lazy.LazyCallProvider"
                ]
            }
        },
        "test_provider_randomness_raises_on_max_randomness": {
            "name": "test_provider_randomness_raises_on_max_randomness",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "ulid-master/tests/test_providers_package.py": {
        "test_package_has_dunder_all": {
            "name": "test_package_has_dunder_all",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_package_exposes_expected_interface": {
            "name": "test_package_exposes_expected_interface",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_package_has_default_provider": {
            "name": "test_package_has_default_provider",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_package_has_monotonic_provider": {
            "name": "test_package_has_monotonic_provider",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ulid-master/tests/test_providers_time_base.py": {
        "test_provider_is_abstract": {
            "name": "test_provider_is_abstract",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ulid-master/tests/test_providers_time_default.py": {
        "provider": {
            "name": "provider",
            "location": 15,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]",
                "base.ConfigOptions"
            ],
            "arguments": {}
        },
        "test_provider_derives_from_base": {
            "name": "test_provider_derives_from_base",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_provider_milliseconds_returns_int": {
            "name": "test_provider_milliseconds_returns_int",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_provider_microseconds_returns_int": {
            "name": "test_provider_microseconds_returns_int",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_provider_milliseconds_is_unix_epoch": {
            "name": "test_provider_milliseconds_is_unix_epoch",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "int"
                ]
            }
        },
        "test_provider_microseconds_is_unix_epoch": {
            "name": "test_provider_microseconds_is_unix_epoch",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "int"
                ]
            }
        }
    },
    "ulid-master/tests/test_providers_time_nanosecond.py": {
        "provider": {
            "name": "provider",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_provider_derives_from_base": {
            "name": "test_provider_derives_from_base",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_provider_milliseconds_returns_int": {
            "name": "test_provider_milliseconds_returns_int",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_provider_microseconds_returns_int": {
            "name": "test_provider_microseconds_returns_int",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_provider_milliseconds_is_unix_epoch": {
            "name": "test_provider_milliseconds_is_unix_epoch",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "int"
                ]
            }
        },
        "test_provider_microseconds_is_unix_epoch": {
            "name": "test_provider_microseconds_is_unix_epoch",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "int"
                ]
            }
        }
    },
    "ulid-master/tests/test_ulid.py": {
        "unsupported_comparison_type": {
            "name": "unsupported_comparison_type",
            "location": 27,
            "return": [
                "int",
                "str",
                "Optional[Type[BaseException]]",
                "datetime.datetime"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "model_types": {
            "name": "model_types",
            "location": 40,
            "return": [
                "int",
                "str",
                "Optional[Type[BaseException]]",
                "Type"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "model_with_eq_bytes": {
            "name": "model_with_eq_bytes",
            "location": 48,
            "return": [
                "tuple[typing.Union[str,int,bytes,None,float]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "model_types": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "valid_bytes_128": [
                    "int",
                    "float"
                ],
                "valid_bytes_80": [
                    "int",
                    "float"
                ],
                "valid_bytes_48": [
                    "int",
                    "float"
                ]
            }
        },
        "model_with_ne_bytes": {
            "name": "model_with_ne_bytes",
            "location": 61,
            "return": [
                "Optional[str]",
                "tuple[typing.Union[int,str,bytes,None,typing.Sequence[typing.Any]]]"
            ],
            "arguments": {
                "model_types": [
                    "int",
                    "str",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "Union[int, str]"
                ],
                "valid_bytes_128": [
                    "str",
                    "bool",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "valid_bytes_80": [
                    "int",
                    "str"
                ],
                "valid_bytes_48": [
                    "int"
                ]
            }
        },
        "model_with_ordered_bytes": {
            "name": "model_with_ordered_bytes",
            "location": 75,
            "return": [
                "tuple[typing.Union[int,str,float,bytearray,bytes]]",
                "Type[Any]",
                "Optional[Dict[str, str]]",
                "dict"
            ],
            "arguments": {
                "model_types": [
                    "int",
                    "str"
                ],
                "valid_bytes_128_before": [
                    "int",
                    "float",
                    "Union[bytearray, bytes]",
                    "bytearray",
                    "bool",
                    "bytes"
                ],
                "valid_bytes_128_after": [
                    "int",
                    "float",
                    "Union[bytearray, bytes]",
                    "bytearray",
                    "bool",
                    "bytes"
                ],
                "valid_bytes_80_before": [
                    "int",
                    "float",
                    "Union[bytearray, bytes]",
                    "bytearray",
                    "bool",
                    "bytes"
                ],
                "valid_bytes_80_after": [
                    "int",
                    "float",
                    "Union[bytearray, bytes]",
                    "bytearray",
                    "bool",
                    "bytes"
                ],
                "valid_bytes_48_before": [
                    "int",
                    "float",
                    "Union[bytearray, bytes]",
                    "bytearray",
                    "bool",
                    "bytes"
                ],
                "valid_bytes_48_after": [
                    "int",
                    "float",
                    "Union[bytearray, bytes]",
                    "bytearray",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_model_supports_eq_with_expected_types": {
            "name": "test_model_supports_eq_with_expected_types",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "model_with_eq_bytes": [
                    "str",
                    "int"
                ]
            }
        },
        "test_model_supports_ne_with_expected_types": {
            "name": "test_model_supports_ne_with_expected_types",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "model_with_ne_bytes": [
                    "str",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_model_supports_lt_with_expected_types": {
            "name": "test_model_supports_lt_with_expected_types",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "model_with_ordered_bytes": [
                    "str",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_model_supports_gt_with_expected_types": {
            "name": "test_model_supports_gt_with_expected_types",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "model_with_ordered_bytes": [
                    "str",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_model_supports_le_with_expected_types": {
            "name": "test_model_supports_le_with_expected_types",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "model_with_ordered_bytes": [
                    "str",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_model_supports_ge_with_expected_types": {
            "name": "test_model_supports_ge_with_expected_types",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "model_with_ordered_bytes": [
                    "str",
                    "float",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_memoryview_eq_false_with_unsupported_type": {
            "name": "test_memoryview_eq_false_with_unsupported_type",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "str",
                    "uuid.UUID"
                ],
                "unsupported_comparison_type": [
                    "str",
                    "uuid.UUID"
                ]
            }
        },
        "test_memoryview_ne_false_with_unsupported_type": {
            "name": "test_memoryview_ne_false_with_unsupported_type",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "str",
                    "uuid.UUID"
                ],
                "unsupported_comparison_type": [
                    "str",
                    "uuid.UUID"
                ]
            }
        },
        "test_memoryview_unorderble_with_unsupported_type": {
            "name": "test_memoryview_unorderble_with_unsupported_type",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "bool",
                    "str"
                ],
                "unsupported_comparison_type": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_memoryview_supports_bin": {
            "name": "test_memoryview_supports_bin",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_memoryview_supports_hex": {
            "name": "test_memoryview_supports_hex",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_memoryview_supports_oct": {
            "name": "test_memoryview_supports_oct",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_memoryview_supports_bytes": {
            "name": "test_memoryview_supports_bytes",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_memoryview_supports_str": {
            "name": "test_memoryview_supports_str",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_memoryview_supports_int": {
            "name": "test_memoryview_supports_int",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_memoryview_supports_float": {
            "name": "test_memoryview_supports_float",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_memoryview_supports_hash": {
            "name": "test_memoryview_supports_hash",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_memoryview_supports_index": {
            "name": "test_memoryview_supports_index",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_memoryview_supports_getstate": {
            "name": "test_memoryview_supports_getstate",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_memoryview_supports_pickle": {
            "name": "test_memoryview_supports_pickle",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_memoryview_supports_copy": {
            "name": "test_memoryview_supports_copy",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_memoryview_supports_deepcopy": {
            "name": "test_memoryview_supports_deepcopy",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_timestamp_coverts_bytes_to_unix_time_seconds": {
            "name": "test_timestamp_coverts_bytes_to_unix_time_seconds",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timestamp_converts_to_utc_aware_datetime": {
            "name": "test_timestamp_converts_to_utc_aware_datetime",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ulid_timestamp_returns_instance": {
            "name": "test_ulid_timestamp_returns_instance",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "list[int]",
                    "Collection",
                    "typing.Collection"
                ]
            }
        },
        "test_ulid_timestamp_is_first_48_bits": {
            "name": "test_ulid_timestamp_is_first_48_bits",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "bytes",
                    "str",
                    "bytearray",
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_ulid_randomness_returns_instance": {
            "name": "test_ulid_randomness_returns_instance",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "list[int]",
                    "Collection",
                    "typing.Collection"
                ]
            }
        },
        "test_ulid_randomness_is_first_48_bits": {
            "name": "test_ulid_randomness_is_first_48_bits",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "bytes",
                    "str",
                    "bytearray",
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "test_ulid_uuid_returns_instance": {
            "name": "test_ulid_uuid_returns_instance",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "List[bool]",
                    "int",
                    "list[bool]"
                ]
            }
        },
        "test_ulid_hex_length_padding": {
            "name": "test_ulid_hex_length_padding",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_bytes_128": [
                    "bool",
                    "str",
                    "bytes",
                    "set[str]",
                    "Set[str]",
                    "int"
                ]
            }
        }
    },
    "ulid-master/tests/benchmarks/test_creation.py": {
        "test_ulid_new": {
            "name": "test_ulid_new",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": []
            }
        },
        "test_uuid_v1_new": {
            "name": "test_uuid_v1_new",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": []
            }
        },
        "test_uuid_v4_new": {
            "name": "test_uuid_v4_new",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": []
            }
        }
    },
    "ulid-master/ulid/base32.py": {
        "encode": {
            "name": "encode",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "bytes"
                ]
            }
        },
        "encode_ulid": {
            "name": "encode_ulid",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "bytes"
                ]
            }
        },
        "encode_timestamp": {
            "name": "encode_timestamp",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "timestamp": [
                    "bytes"
                ]
            }
        },
        "encode_randomness": {
            "name": "encode_randomness",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "randomness": [
                    "bytes"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 207,
            "return": [
                "bytes"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "decode_ulid": {
            "name": "decode_ulid",
            "location": 236,
            "return": [
                "bytes"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "decode_timestamp": {
            "name": "decode_timestamp",
            "location": 275,
            "return": [
                "bytes"
            ],
            "arguments": {
                "timestamp": [
                    "str"
                ]
            }
        },
        "decode_randomness": {
            "name": "decode_randomness",
            "location": 306,
            "return": [
                "bytes"
            ],
            "arguments": {
                "randomness": [
                    "str"
                ]
            }
        },
        "str_to_bytes": {
            "name": "str_to_bytes",
            "location": 341,
            "return": [
                "bytes"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "expected_length": [
                    "int"
                ]
            }
        }
    },
    "ulid-master/ulid/codec.py": {
        "decode_timestamp": {
            "name": "decode_timestamp",
            "location": 22,
            "return": [
                "ulid.Timestamp"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "Optional[str]",
                    "None",
                    "float",
                    "datetime.datetime",
                    "datetime.timedelta",
                    "Optional[datetime.date]"
                ]
            }
        },
        "decode_randomness": {
            "name": "decode_randomness",
            "location": 70,
            "return": [
                "ulid.Randomness"
            ],
            "arguments": {
                "randomness": [
                    "bool",
                    "bytes",
                    "int",
                    "str"
                ]
            }
        }
    },
    "ulid-master/ulid/consts.py": {},
    "ulid-master/ulid/hints.py": {},
    "ulid-master/ulid/ulid.py": {
        "MemoryView.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "Union[(bytearray, builtins.bytes, memoryview)]"
                ]
            }
        },
        "MemoryView.__eq__": {
            "name": "__eq__",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(MemoryView, bytearray, builtins.bytes, builtins.float, builtins.int, memoryview, builtins.str)]"
                ]
            }
        },
        "MemoryView.__ne__": {
            "name": "__ne__",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(MemoryView, bytearray, builtins.bytes, builtins.float, builtins.int, memoryview, builtins.str)]"
                ]
            }
        },
        "MemoryView.__lt__": {
            "name": "__lt__",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(MemoryView, bytearray, builtins.bytes, builtins.float, builtins.int, memoryview, builtins.str)]"
                ]
            }
        },
        "MemoryView.__gt__": {
            "name": "__gt__",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(MemoryView, bytearray, builtins.bytes, builtins.float, builtins.int, memoryview, builtins.str)]"
                ]
            }
        },
        "MemoryView.__le__": {
            "name": "__le__",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(MemoryView, bytearray, builtins.bytes, builtins.float, builtins.int, memoryview, builtins.str)]"
                ]
            }
        },
        "MemoryView.__ge__": {
            "name": "__ge__",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(MemoryView, bytearray, builtins.bytes, builtins.float, builtins.int, memoryview, builtins.str)]"
                ]
            }
        },
        "MemoryView.__hash__": {
            "name": "__hash__",
            "location": 118,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.__bytes__": {
            "name": "__bytes__",
            "location": 121,
            "return": [
                "builtins.bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.__float__": {
            "name": "__float__",
            "location": 124,
            "return": [
                "builtins.float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.__int__": {
            "name": "__int__",
            "location": 127,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.__index__": {
            "name": "__index__",
            "location": 130,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.__repr__": {
            "name": "__repr__",
            "location": 133,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.__str__": {
            "name": "__str__",
            "location": 136,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.__getstate__": {
            "name": "__getstate__",
            "location": 139,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.__setstate__": {
            "name": "__setstate__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "builtins.str"
                ]
            }
        },
        "MemoryView.bin": {
            "name": "bin",
            "location": 146,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.bytes": {
            "name": "bytes",
            "location": 156,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.float": {
            "name": "float",
            "location": 166,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.hex": {
            "name": "hex",
            "location": 176,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.int": {
            "name": "int",
            "location": 186,
            "return": [
                "int",
                "str",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.oct": {
            "name": "oct",
            "location": 196,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryView.str": {
            "name": "str",
            "location": 206,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timestamp.str": {
            "name": "str",
            "location": 234,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timestamp.timestamp": {
            "name": "timestamp",
            "location": 245,
            "return": [
                "Timestamp"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timestamp.datetime": {
            "name": "datetime",
            "location": 255,
            "return": [
                "datetime.datetime",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Randomness.str": {
            "name": "str",
            "location": 283,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ULID.str": {
            "name": "str",
            "location": 307,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ULID.timestamp": {
            "name": "timestamp",
            "location": 317,
            "return": [
                "Timestamp"
            ],
            "arguments": {
                "self": []
            }
        },
        "ULID.randomness": {
            "name": "randomness",
            "location": 326,
            "return": [
                "Randomness"
            ],
            "arguments": {
                "self": []
            }
        },
        "ULID.uuid": {
            "name": "uuid",
            "location": 336,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ulid-master/ulid/__init__.py": {},
    "ulid-master/ulid/api/api.py": {
        "Api.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "providers.base.Provider"
                ]
            }
        },
        "Api.new": {
            "name": "new",
            "location": 51,
            "return": [
                "ulid.ULID"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.parse": {
            "name": "parse",
            "location": 64,
            "return": [
                "ulid.ULID"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "bytes",
                    "Union[str, Sequence[str]]",
                    "typing.Sequence[str]",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ]
            }
        },
        "Api.from_timestamp": {
            "name": "from_timestamp",
            "location": 102,
            "return": [
                "ulid.ULID"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        },
        "Api.from_randomness": {
            "name": "from_randomness",
            "location": 130,
            "return": [
                "ulid.ULID"
            ],
            "arguments": {
                "self": [],
                "randomness": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[None, None], bool]"
                ]
            }
        },
        "Api.create": {
            "name": "create",
            "location": 157,
            "return": [
                "ulid.ULID"
            ],
            "arguments": {
                "timestamp": [
                    "bool",
                    "slice",
                    "int"
                ],
                "randomness": [
                    "str"
                ]
            }
        },
        "Api.from_bytes": {
            "name": "from_bytes",
            "location": 199,
            "return": [
                "ulid.ULID"
            ],
            "arguments": {
                "value": [
                    "bytes"
                ]
            }
        },
        "Api.from_int": {
            "name": "from_int",
            "location": 217,
            "return": [
                "ulid.ULID"
            ],
            "arguments": {
                "value": [
                    "int"
                ]
            }
        },
        "Api.from_str": {
            "name": "from_str",
            "location": 237,
            "return": [
                "ulid.ULID"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "Api.from_uuid": {
            "name": "from_uuid",
            "location": 250,
            "return": [
                "ulid.ULID"
            ],
            "arguments": {
                "value": [
                    "uuid.UUID"
                ]
            }
        }
    },
    "ulid-master/ulid/api/default.py": {},
    "ulid-master/ulid/api/microsecond.py": {},
    "ulid-master/ulid/api/monotonic.py": {},
    "ulid-master/ulid/api/__init__.py": {},
    "ulid-master/ulid/providers/base.py": {
        "Provider.new": {
            "name": "new",
            "location": 20,
            "return": [
                "Tuple[(bytes, bytes)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.timestamp": {
            "name": "timestamp",
            "location": 32,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.randomness": {
            "name": "randomness",
            "location": 42,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "bytes"
                ]
            }
        }
    },
    "ulid-master/ulid/providers/default.py": {
        "Provider.timestamp": {
            "name": "timestamp",
            "location": 18,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.randomness": {
            "name": "randomness",
            "location": 27,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "bytes"
                ]
            }
        }
    },
    "ulid-master/ulid/providers/microsecond.py": {
        "Provider.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "base.Provider"
                ]
            }
        },
        "Provider.new": {
            "name": "new",
            "location": 21,
            "return": [
                "Tuple[(bytes, bytes)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.timestamp": {
            "name": "timestamp",
            "location": 43,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.randomness": {
            "name": "randomness",
            "location": 52,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "bytes"
                ]
            }
        }
    },
    "ulid-master/ulid/providers/monotonic.py": {
        "Provider.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "base.Provider"
                ]
            }
        },
        "Provider.timestamp": {
            "name": "timestamp",
            "location": 23,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.randomness": {
            "name": "randomness",
            "location": 32,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "bytes"
                ]
            }
        }
    },
    "ulid-master/ulid/providers/__init__.py": {},
    "ulid-master/ulid/providers/time/base.py": {
        "Provider.milliseconds": {
            "name": "milliseconds",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.microseconds": {
            "name": "microseconds",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ulid-master/ulid/providers/time/default.py": {
        "Provider.milliseconds": {
            "name": "milliseconds",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.microseconds": {
            "name": "microseconds",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ulid-master/ulid/providers/time/nanosecond.py": {
        "Provider.milliseconds": {
            "name": "milliseconds",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.microseconds": {
            "name": "microseconds",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ulid-master/ulid/providers/time/__init__.py": {}
}
{
    "unit-e-experiments-master/blockchain/block.py": {
        "Block.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.genesis": {
            "name": "genesis",
            "location": 48,
            "return": [
                "Block"
            ],
            "arguments": {}
        },
        "Block.stake_modifier": {
            "name": "stake_modifier",
            "location": 63,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.kernel_hash": {
            "name": "kernel_hash",
            "location": 71,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.block_hash": {
            "name": "block_hash",
            "location": 84,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.__hash__": {
            "name": "__hash__",
            "location": 97,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.__eq__": {
            "name": "__eq__",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "Union[int, str]"
                ]
            }
        },
        "Block.try_to_be_valid": {
            "name": "try_to_be_valid",
            "location": 106,
            "return": [
                "Optional[Block]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.fit_target": {
            "name": "fit_target",
            "location": 144,
            "return": [
                "Block"
            ],
            "arguments": {
                "self": [
                    "_TBlock"
                ]
            }
        },
        "Block.is_valid": {
            "name": "is_valid",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unit-e-experiments-master/blockchain/blockchain.py": {
        "Clock.get_time": {
            "name": "get_time",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheatedClock.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "int"
                ]
            }
        },
        "CheatedClock.advance_time": {
            "name": "advance_time",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int"
                ]
            }
        },
        "CheatedClock.get_time": {
            "name": "get_time",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BiasedClock.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_clock": [
                    "Clock"
                ],
                "max_bias": [
                    "int",
                    "str"
                ],
                "p": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "BiasedClock.get_time": {
            "name": "get_time",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.add_block": {
            "name": "add_block",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "blockchain.block.Block"
                ]
            }
        },
        "BlockChain.median_past_timestamp": {
            "name": "median_past_timestamp",
            "location": 141,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.get_next_compact_target": {
            "name": "get_next_compact_target",
            "location": 146,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.get_chain_work": {
            "name": "get_chain_work",
            "location": 186,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.get_block_work": {
            "name": "get_block_work",
            "location": 197,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int"
                ]
            }
        },
        "BlockChain.get_valid_block": {
            "name": "get_valid_block",
            "location": 202,
            "return": [
                "Optional[blockchain.block.Block]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.get_truncated_copy": {
            "name": "get_truncated_copy",
            "location": 253,
            "return": [
                "BlockChain"
            ],
            "arguments": {
                "self": [
                    "_TBlockChain"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "BlockChain.is_stakeable": {
            "name": "is_stakeable",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "coin": [
                    "blockchain.transaction.Coin"
                ]
            }
        }
    },
    "unit-e-experiments-master/blockchain/simnet.py": {
        "SimNet.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimNet.define_network_topology": {
            "name": "define_network_topology",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimNet.setup_nodes": {
            "name": "setup_nodes",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimNet.setup_network": {
            "name": "setup_network",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimNet.run": {
            "name": "run",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unit-e-experiments-master/blockchain/simple_node.py": {
        "SimpleNode.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "latency_policy": [
                    "network.latencies.LatencyPolicy"
                ],
                "chain": [
                    "blockchain.blockchain.BlockChain"
                ],
                "initial_coins": [
                    "Set[blockchain.transaction.Coin]"
                ],
                "is_proposer": [
                    "bool"
                ],
                "greedy_proposal": [
                    "bool"
                ],
                "max_num_tips": [
                    "int"
                ],
                "max_outbound_peers": [
                    "int"
                ],
                "processing_time": [
                    "float"
                ],
                "coins_snapshots_spacing": [
                    "int"
                ]
            }
        },
        "SimpleNode.add_outbound_peer": {
            "name": "add_outbound_peer",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "peer": [
                    "SimpleNode"
                ]
            }
        },
        "SimpleNode.receive_message": {
            "name": "receive_message",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arrival_time": [
                    "float"
                ],
                "msg": [
                    "blockchain.block.Block"
                ],
                "source_id": [
                    "int"
                ]
            }
        },
        "SimpleNode.relay_message": {
            "name": "relay_message",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "blockchain.block.Block"
                ],
                "send_time": [
                    "Optional[float]"
                ],
                "discard_peers": [
                    "Collection[int]"
                ]
            }
        },
        "SimpleNode.process_messages": {
            "name": "process_messages",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNode.process_orphans": {
            "name": "process_orphans",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNode.process_block": {
            "name": "process_block",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "blockchain.block.Block"
                ]
            }
        },
        "SimpleNode.try_to_propose": {
            "name": "try_to_propose",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNode.find_best_tip": {
            "name": "find_best_tip",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleNode.apply_reorganization": {
            "name": "apply_reorganization",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_chains": [
                    "List[blockchain.blockchain.BlockChain]"
                ]
            }
        }
    },
    "unit-e-experiments-master/blockchain/transaction.py": {
        "TransactionOutput.genesis": {
            "name": "genesis",
            "location": 21,
            "return": [
                "TransactionOutput"
            ],
            "arguments": {}
        },
        "Coin.genesis": {
            "name": "genesis",
            "location": 35,
            "return": [
                "Coin"
            ],
            "arguments": {
                "amount": [
                    "int"
                ]
            }
        },
        "CoinStakeTransaction.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoinStakeTransaction.genesis": {
            "name": "genesis",
            "location": 71,
            "return": [
                "CoinStakeTransaction"
            ],
            "arguments": {
                "vout": [
                    "Optional[List[int]]"
                ]
            }
        },
        "CoinStakeTransaction.tx_hash": {
            "name": "tx_hash",
            "location": 78,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoinStakeTransaction.get_nth_coin": {
            "name": "get_nth_coin",
            "location": 92,
            "return": [
                "Coin"
            ],
            "arguments": {
                "self": [],
                "out_idx": [
                    "int",
                    "str",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "float",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "CoinStakeTransaction.get_all_coins": {
            "name": "get_all_coins",
            "location": 102,
            "return": [
                "List[Coin]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoinStakeTransaction.__hash__": {
            "name": "__hash__",
            "location": 116,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoinStakeTransaction.__eq__": {
            "name": "__eq__",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "unit-e-experiments-master/blockchain/utils.py": {
        "compact_target_to_uint256": {
            "name": "compact_target_to_uint256",
            "location": 11,
            "return": [
                "bytes"
            ],
            "arguments": {
                "compact_target": [
                    "bytes"
                ]
            }
        },
        "compact_target_to_bigint": {
            "name": "compact_target_to_bigint",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "compact_target": [
                    "bytes"
                ]
            }
        },
        "bigint_to_compact_target": {
            "name": "bigint_to_compact_target",
            "location": 58,
            "return": [
                "bytes"
            ],
            "arguments": {
                "bigint": [
                    "int"
                ]
            }
        },
        "uint256_to_compact_target": {
            "name": "uint256_to_compact_target",
            "location": 62,
            "return": [
                "bytes"
            ],
            "arguments": {
                "hash_target": [
                    "bytes"
                ]
            }
        }
    },
    "unit-e-experiments-master/blockchain/__init__.py": {},
    "unit-e-experiments-master/experiments/forking_simulation.py": {
        "main": {
            "name": "main",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ForkingSimulation.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForkingSimulation.run": {
            "name": "run",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForkingSimulation.autofinalization_workaround": {
            "name": "autofinalization_workaround",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForkingSimulation.safe_run": {
            "name": "safe_run",
            "location": 265,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "close_loop": [
                    "bool",
                    "int",
                    "T"
                ]
            }
        },
        "ForkingSimulation.setup_directories": {
            "name": "setup_directories",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForkingSimulation.cleanup_directories": {
            "name": "cleanup_directories",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForkingSimulation.setup_chain": {
            "name": "setup_chain",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForkingSimulation.setup_nodes": {
            "name": "setup_nodes",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForkingSimulation.start_node": {
            "name": "start_node",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "ForkingSimulation.start_nodes": {
            "name": "start_nodes",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Optional[list]"
                ]
            }
        },
        "ForkingSimulation.stop_nodes": {
            "name": "stop_nodes",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForkingSimulation.define_network_topology": {
            "name": "define_network_topology",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForkingSimulation.setup_nodes.get_node_args": {
            "name": "get_node_args",
            "location": 366,
            "return": [
                "str"
            ],
            "arguments": {
                "node_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "unit-e-experiments-master/experiments/graph.py": {
        "create_directed_graph": {
            "name": "create_directed_graph",
            "location": 25,
            "return": [
                "Tuple[(Set[Tuple[(int, int)]], Dict[(int, int)])]"
            ],
            "arguments": {
                "num_nodes": [
                    "int"
                ],
                "num_outbound_connections": [
                    "int"
                ],
                "max_inbound_connections": [
                    "int"
                ],
                "graph_seed_size": [
                    "Optional[int]"
                ],
                "model": [
                    "str"
                ]
            }
        },
        "create_static_graph": {
            "name": "create_static_graph",
            "location": 81,
            "return": [
                "Tuple[(Set[Tuple[(int, int)]], Dict[(int, int)])]"
            ],
            "arguments": {
                "num_nodes": [
                    "int"
                ],
                "num_outbound_connections": [
                    "int"
                ],
                "max_ingoing_connections": [
                    "int"
                ]
            }
        },
        "create_growing_graph": {
            "name": "create_growing_graph",
            "location": 110,
            "return": [
                "Tuple[(Set[Tuple[(int, int)]], Dict[(int, int)])]"
            ],
            "arguments": {
                "num_nodes": [
                    "int"
                ],
                "num_outbound_connections": [
                    "int"
                ],
                "max_inbound_connections": [
                    "int"
                ],
                "graph_seed_size": [
                    "Optional[int]"
                ]
            }
        },
        "create_preferential_attachment_graph": {
            "name": "create_preferential_attachment_graph",
            "location": 146,
            "return": [
                "Tuple[(Set[Tuple[(int, int)]], Dict[(int, int)])]"
            ],
            "arguments": {
                "num_nodes": [
                    "int"
                ],
                "num_outbound_connections": [
                    "int"
                ],
                "max_inbound_connections": [
                    "int"
                ],
                "graph_seed_size": [
                    "Optional[int]"
                ]
            }
        },
        "create_simple_dense_graph": {
            "name": "create_simple_dense_graph",
            "location": 193,
            "return": [
                "Set[Tuple[(int, int)]]"
            ],
            "arguments": {
                "node_ids": [
                    "List[int]"
                ],
                "num_outbound_connections": [
                    "int"
                ]
            }
        },
        "enforce_nodes_reconnections": {
            "name": "enforce_nodes_reconnections",
            "location": 216,
            "return": [
                "Tuple[(Set[Tuple[(int, int)]], Dict[(int, int)])]"
            ],
            "arguments": {
                "graph_edges": [
                    "Set[Tuple[(int, int)]]"
                ],
                "inbound_degrees": [
                    "Dict[(int, int)]"
                ],
                "num_reconnection_rounds": [
                    "int"
                ]
            }
        },
        "get_node_neighbours": {
            "name": "get_node_neighbours",
            "location": 280,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "node_id": [
                    "int"
                ],
                "graph_edges": [
                    "Set[Tuple[(int, int)]]"
                ],
                "degree": [
                    "int"
                ]
            }
        },
        "compute_degrees": {
            "name": "compute_degrees",
            "location": 298,
            "return": [
                "Tuple[(List[int], Set[Tuple[(int, int)]])]"
            ],
            "arguments": {
                "graph_edges": [
                    "Set[Tuple[(int, int)]]"
                ],
                "num_nodes": [
                    "int"
                ],
                "processed_edges": [
                    "Optional[Set[Tuple[(int, int)]]]"
                ],
                "degrees": [
                    "Optional[List[int]]"
                ]
            }
        },
        "degrees_distribution": {
            "name": "degrees_distribution",
            "location": 331,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "degrees": [
                    "List[int]"
                ]
            }
        },
        "weighted_random_int": {
            "name": "weighted_random_int",
            "location": 339,
            "return": [
                "int"
            ],
            "arguments": {
                "degrees_dist": [
                    "List[int]"
                ]
            }
        },
        "ensure_one_inbound_connection_per_node": {
            "name": "ensure_one_inbound_connection_per_node",
            "location": 353,
            "return": [
                "Tuple[(Set[Tuple[(int, int)]], Dict[(int, int)])]"
            ],
            "arguments": {
                "num_nodes": [
                    "int"
                ],
                "graph_edges": [
                    "Set[Tuple[(int, int)]]"
                ],
                "inbound_degrees": [
                    "Dict[(int, int)]"
                ]
            }
        }
    },
    "unit-e-experiments-master/experiments/__init__.py": {},
    "unit-e-experiments-master/network/latencies.py": {
        "LatencyPolicy.get_delay": {
            "name": "get_delay",
            "location": 15,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "src_node": [
                    "int"
                ],
                "dst_node": [
                    "int"
                ]
            }
        },
        "StaticLatencyPolicy.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_delay": [
                    "float"
                ]
            }
        },
        "StaticLatencyPolicy.set_delay": {
            "name": "set_delay",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_node": [
                    "int"
                ],
                "dst_node": [
                    "int"
                ],
                "delay": [
                    "Optional[float]"
                ]
            }
        },
        "StaticLatencyPolicy.get_delay": {
            "name": "get_delay",
            "location": 30,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "src_node": [
                    "int"
                ],
                "dst_node": [
                    "int"
                ]
            }
        },
        "ExponentiallyDistributedLatencyPolicy.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "avg_delay": [
                    "float"
                ]
            }
        },
        "ExponentiallyDistributedLatencyPolicy.set_avg_delay": {
            "name": "set_avg_delay",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_node": [
                    "int"
                ],
                "dst_node": [
                    "int"
                ],
                "avg_delay": [
                    "Optional[float]"
                ]
            }
        },
        "ExponentiallyDistributedLatencyPolicy.get_delay": {
            "name": "get_delay",
            "location": 49,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "src_node": [
                    "int"
                ],
                "dst_node": [
                    "int"
                ]
            }
        }
    },
    "unit-e-experiments-master/network/nodes_hub.py": {
        "NodesHub.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ],
                "latency_policy": [
                    "network.latencies.LatencyPolicy"
                ],
                "nodes": [
                    "list"
                ],
                "network_stats_collector": [
                    "network.stats.NetworkStatsCollector"
                ],
                "host": [
                    "str"
                ]
            }
        },
        "NodesHub.sync_start_proxies": {
            "name": "sync_start_proxies",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_ids": [
                    "Optional[List[int]]"
                ]
            }
        },
        "NodesHub.sync_biconnect_nodes_as_linked_list": {
            "name": "sync_biconnect_nodes_as_linked_list",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes_list": [
                    "bool",
                    "None",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "NodesHub.sync_connect_nodes_graph": {
            "name": "sync_connect_nodes_graph",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph_edges": [
                    "set"
                ]
            }
        },
        "NodesHub.close": {
            "name": "close",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodesHub.get_rpc_node_port": {
            "name": "get_rpc_node_port",
            "location": 201,
            "return": [
                "str",
                "utils.Node",
                "List[int]",
                "int",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "node_idx": [
                    "Pattern",
                    "str",
                    "typing.Pattern",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "NodesHub.get_p2p_node_port": {
            "name": "get_p2p_node_port",
            "location": 205,
            "return": [
                "int",
                "str",
                "utils.Node",
                "List[int]",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "node_idx": [
                    "dict[str, typing.Any]",
                    "raiden.utils.Address",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "NodesHub.get_p2p_proxy_port": {
            "name": "get_p2p_proxy_port",
            "location": 208,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "node_idx": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "List[T]",
                    "Sequence[T]"
                ]
            }
        },
        "NodesHub.get_proxy_address": {
            "name": "get_proxy_address",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node_idx": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "NodesHub.process_buffer": {
            "name": "process_buffer",
            "location": 310,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "bytes"
                ],
                "transport": [
                    "asyncio.transports.WriteTransport"
                ],
                "connection": [
                    "Union[(ProxyInputConnection, ProxyOutputConnection)]"
                ]
            }
        },
        "NodesHub.register_p2p_command": {
            "name": "register_p2p_command",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "bytes"
                ],
                "connection": [
                    "Union[(ProxyInputConnection, ProxyOutputConnection)]"
                ],
                "msglen": [
                    "int"
                ]
            }
        },
        "ProxyInputConnection.__init__": {
            "name": "__init__",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hub_ref": [
                    "NodesHub"
                ],
                "node_id": [
                    "int"
                ]
            }
        },
        "ProxyInputConnection.deferred_constructor": {
            "name": "deferred_constructor",
            "location": 420,
            "return": [
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Union['KspNativeControl', int]"
                ],
                "hub_ref": [
                    "NodesHub"
                ],
                "node_id": [
                    "int"
                ]
            }
        },
        "ProxyInputConnection.connection_made": {
            "name": "connection_made",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "str"
                ]
            }
        },
        "ProxyInputConnection.connection_lost": {
            "name": "connection_lost",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ProxyInputConnection.data_received": {
            "name": "data_received",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "str",
                    "None",
                    "Optional[bytes]",
                    "typing.Callable[, ]",
                    "Callable",
                    "telegram.utils.AsyncResult"
                ]
            }
        },
        "ProxyOutputConnection.__init__": {
            "name": "__init__",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_connection": [
                    "ProxyInputConnection"
                ]
            }
        },
        "ProxyOutputConnection.connection_made": {
            "name": "connection_made",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ProxyOutputConnection.connection_lost": {
            "name": "connection_lost",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ProxyOutputConnection.data_received": {
            "name": "data_received",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "str",
                    "None",
                    "Optional[bytes]",
                    "typing.Callable[, ]",
                    "Callable",
                    "telegram.utils.AsyncResult"
                ]
            }
        }
    },
    "unit-e-experiments-master/network/stats.py": {
        "NetworkStatsCollector.register_event": {
            "name": "register_event",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "command_name": [
                    "str"
                ],
                "command_size": [
                    "int"
                ],
                "src_node_id": [
                    "Optional[int]"
                ],
                "dst_node_id": [
                    "Optional[int]"
                ]
            }
        },
        "NetworkStatsCollector.close": {
            "name": "close",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvNetworkStatsCollector.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_file": [
                    "BinaryIO"
                ]
            }
        },
        "CsvNetworkStatsCollector.register_event": {
            "name": "register_event",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command_name": [
                    "str"
                ],
                "command_size": [
                    "int"
                ],
                "src_node_id": [
                    "Optional[int]"
                ],
                "dst_node_id": [
                    "Optional[int]"
                ]
            }
        },
        "CsvNetworkStatsCollector.close": {
            "name": "close",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullNetworkStatsCollector.register_event": {
            "name": "register_event",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command_name": [
                    "str"
                ],
                "command_size": [
                    "int"
                ],
                "src_node_id": [
                    "Optional[int]"
                ],
                "dst_node_id": [
                    "Optional[int]"
                ]
            }
        },
        "NullNetworkStatsCollector.close": {
            "name": "close",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unit-e-experiments-master/network/utils.py": {
        "get_pid_for_network_client": {
            "name": "get_pid_for_network_client",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "server_port": [
                    "int"
                ],
                "client_port": [
                    "int"
                ]
            }
        },
        "get_pid_for_network_server": {
            "name": "get_pid_for_network_server",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "server_port": [
                    "int"
                ]
            }
        }
    },
    "unit-e-experiments-master/network/__init__.py": {},
    "unit-e-experiments-master/test/__init__.py": {},
    "unit-e-experiments-master/test/blockchain/test_block.py": {
        "test_block_block_hash": {
            "name": "test_block_block_hash",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_block_try_to_be_valid": {
            "name": "test_block_try_to_be_valid",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "unit-e-experiments-master/test/blockchain/test_blockchain.py": {
        "test_cheated_clock": {
            "name": "test_cheated_clock",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_biased_clock": {
            "name": "test_biased_clock",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blockchain_get_chain_work": {
            "name": "test_blockchain_get_chain_work",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "unit-e-experiments-master/test/blockchain/test_simnet.py": {
        "test_simnet_run": {
            "name": "test_simnet_run",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "unit-e-experiments-master/test/blockchain/test_simple_node.py": {
        "test_receive_message": {
            "name": "test_receive_message",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_messages": {
            "name": "test_process_messages",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "unit-e-experiments-master/test/blockchain/test_utils.py": {
        "test_compact_target_to_uint256": {
            "name": "test_compact_target_to_uint256",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uint256_to_compact_target": {
            "name": "test_uint256_to_compact_target",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "unit-e-experiments-master/test/blockchain/__init__.py": {},
    "unit-e-experiments-master/test/experiments/test_graph.py": {
        "test_degrees_distribution": {
            "name": "test_degrees_distribution",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weighted_random_int": {
            "name": "test_weighted_random_int",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_node_neighbours": {
            "name": "test_get_node_neighbours",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_degrees": {
            "name": "test_compute_degrees",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enforce_nodes_reconnections": {
            "name": "test_enforce_nodes_reconnections",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_static_graph": {
            "name": "test_create_static_graph",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_growing_graph": {
            "name": "test_create_growing_graph",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_preferential_attachment_graph": {
            "name": "test_create_preferential_attachment_graph",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_simple_dense_graph": {
            "name": "test_create_simple_dense_graph",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "unit-e-experiments-master/test/experiments/__init__.py": {},
    "unit-e-experiments-master/test/network/test_latencies.py": {
        "test_static_latency_policy": {
            "name": "test_static_latency_policy",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponentially_distributed_latency_policy": {
            "name": "test_exponentially_distributed_latency_policy",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "unit-e-experiments-master/test/network/test_nodes_hub.py": {
        "test_get_port_methods": {
            "name": "test_get_port_methods",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_p2p_command": {
            "name": "test_register_p2p_command",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_buffer": {
            "name": "test_process_buffer",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init_environment": {
            "name": "init_environment",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_node_mock": {
            "name": "get_node_mock",
            "location": 346,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {
                "node_id": [
                    "int"
                ]
            }
        }
    },
    "unit-e-experiments-master/test/network/test_stats.py": {
        "test_csv_network_stats_collector": {
            "name": "test_csv_network_stats_collector",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_null_network_stats_collector": {
            "name": "test_null_network_stats_collector",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "unit-e-experiments-master/test/network/test_utils.py": {
        "__get_client_socket": {
            "name": "__get_client_socket",
            "location": 74,
            "return": [
                "socket.socket"
            ],
            "arguments": {
                "listening_port": [
                    "int"
                ]
            }
        }
    },
    "unit-e-experiments-master/test/network/__init__.py": {}
}
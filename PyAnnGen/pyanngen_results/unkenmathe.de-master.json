{
    "unkenmathe.de-master/.travis/reload-webapp.py": {},
    "unkenmathe.de-master/src/manage.py": {},
    "unkenmathe.de-master/src/config/urls.py": {},
    "unkenmathe.de-master/src/config/__init__.py": {},
    "unkenmathe.de-master/src/config/settings/common.py": {
        "get_secret": {
            "name": "get_secret",
            "location": 20,
            "return": [
                "str",
                "dict[str, bool]",
                "dict[, ]",
                "float",
                "int",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "setting": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Pattern",
                    "Iterable[str]",
                    "Pattern",
                    "List[str]",
                    "dict"
                ],
                "secrets": [
                    "str",
                    "Union[int, bool]",
                    "tuple",
                    "list",
                    "int"
                ]
            }
        }
    },
    "unkenmathe.de-master/src/config/settings/development.py": {},
    "unkenmathe.de-master/src/config/settings/production.py": {},
    "unkenmathe.de-master/src/config/settings/testing.py": {
        "DisableMigrations.__contains__": {
            "name": "__contains__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "DisableMigrations.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "unkenmathe.de-master/src/config/settings/__init__.py": {},
    "unkenmathe.de-master/src/system_tests/conftest.py": {
        "assert_regex": {
            "name": "assert_regex",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "regex": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "wait_for": {
            "name": "wait_for",
            "location": 31,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bool",
                    "list[str]",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "List[str]",
                    "None",
                    "Union[int, Tuple[int, int]]",
                    "Optional[int]"
                ]
            }
        },
        "wait_for_true": {
            "name": "wait_for_true",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expression": [
                    "list",
                    "str",
                    "list[]",
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "anon_browser": {
            "name": "anon_browser",
            "location": 56,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "user": {
            "name": "user",
            "location": 73,
            "return": [
                "str",
                "dict[str, str]",
                "int",
                "abilian.core.models.subjects.User",
                "dict[str, dict[int, str]]"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "browser": {
            "name": "browser",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "anon_browser": [
                    "str",
                    "int",
                    "bytes",
                    "Tuple[str, str, str]"
                ],
                "client": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "int"
                ],
                "live_server": [
                    "str",
                    "bool"
                ],
                "user": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "unkenmathe.de-master/src/system_tests/test_adding_and_editing_exercises.py": {
        "test_florian_adds_a_new_exercise": {
            "name": "test_florian_adds_a_new_exercise",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "browser": [
                    "str"
                ],
                "live_server": []
            }
        },
        "test_user_edits_an_exercise": {
            "name": "test_user_edits_an_exercise",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "browser": [],
                "live_server": [
                    "str"
                ],
                "user": [
                    "str",
                    "slice"
                ]
            }
        },
        "test_anonymous_user_views_an_exercise": {
            "name": "test_anonymous_user_views_an_exercise",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "anon_browser": [],
                "live_server": []
            }
        },
        "test_florian_deletes_an_exercise": {
            "name": "test_florian_deletes_an_exercise",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "browser": [],
                "live_server": [
                    "str"
                ],
                "user": [
                    "slice"
                ]
            }
        }
    },
    "unkenmathe.de-master/src/system_tests/test_login_and_logout.py": {
        "test_login_of_anonymous_user": {
            "name": "test_login_of_anonymous_user",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "live_server": [
                    "str"
                ],
                "anon_browser": [
                    "slice"
                ],
                "user": []
            }
        },
        "test_logout_of_authenticated_user": {
            "name": "test_logout_of_authenticated_user",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "browser": [
                    "str"
                ],
                "live_server": []
            }
        }
    },
    "unkenmathe.de-master/src/system_tests/__init__.py": {},
    "unkenmathe.de-master/src/tests/conftest.py": {
        "users": {
            "name": "users",
            "location": 11,
            "return": [
                "models.Course",
                "zam_repondeur.models.Dossier",
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {}
        },
        "exercises": {
            "name": "exercises",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        }
    },
    "unkenmathe.de-master/src/tests/core/test_jinja2.py": {
        "TestJinja2Environment.test_environment": {
            "name": "test_environment",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJinja2Environment.test_env_renders_correct_latex": {
            "name": "test_env_renders_correct_latex",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unkenmathe.de-master/src/tests/core/test_models.py": {
        "TestUserModel.test_can_build_new_user": {
            "name": "test_can_build_new_user",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unkenmathe.de-master/src/tests/core/test_utils.py": {
        "TestPDFUtilities.test_pdflatex_creates_pdf_from_latex_template": {
            "name": "test_pdflatex_creates_pdf_from_latex_template",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unkenmathe.de-master/src/tests/core/test_views.py": {
        "test_favicon": {
            "name": "test_favicon",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_robots_txt": {
            "name": "test_robots_txt",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "TestBasicViews.test_home_page_GET": {
            "name": "test_home_page_GET",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "unkenmathe.de-master/src/tests/core/__init__.py": {},
    "unkenmathe.de-master/src/tests/exercises/test_forms.py": {
        "TestExerciseForms.test_exercise_form_if_is_original": {
            "name": "test_exercise_form_if_is_original",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[Tuple]",
                    "list[tuple[]]"
                ],
                "license": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[Tuple]",
                    "list[tuple[]]"
                ],
                "validity": [
                    "str"
                ]
            }
        },
        "TestExerciseForms.test_exercise_form_if_sourced": {
            "name": "test_exercise_form_if_sourced",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Callable[..., None]",
                    "str",
                    "typing.Callable[..., None]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Tuple[str, str]]",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ],
                "source_url": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "changes": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "validity": []
            }
        }
    },
    "unkenmathe.de-master/src/tests/exercises/test_models.py": {
        "TestExerciseTimestampAttributes.test_exercise_has_timestamps": {
            "name": "test_exercise_has_timestamps",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "mocker": []
            }
        },
        "TestExerciseSaveMethod.test_text_is_rendered_as_html_on_save": {
            "name": "test_text_is_rendered_as_html_on_save",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestExerciseSaveMethod.test_text_is_rendered_as_tex_on_save": {
            "name": "test_text_is_rendered_as_tex_on_save",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestExerciseRenderMethods.test_render_html_renders_markdown_to_html": {
            "name": "test_render_html_renders_markdown_to_html",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExerciseRenderMethods.test_render_tex_renders_markdown_to_latex": {
            "name": "test_render_tex_renders_markdown_to_latex",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExerciseDeleteMethod.no_test_delete_doesnt_remove_from_database": {
            "name": "no_test_delete_doesnt_remove_from_database",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "mocker": []
            }
        },
        "TestExerciseExample.test_exercise_example_has_string_representation": {
            "name": "test_exercise_example_has_string_representation",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unkenmathe.de-master/src/tests/exercises/test_views.py": {
        "TestExamplesViews.test_howto_view_returns_200": {
            "name": "test_howto_view_returns_200",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "mocker": [
                    "asgard.models.user.User",
                    "asgard.models.accounAccount"
                ]
            }
        },
        "TestExerciseCreateView.test_create_view_doesnt_allow_anonymous_user": {
            "name": "test_create_view_doesnt_allow_anonymous_user",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "rf": [
                    "str"
                ],
                "users": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ],
                "user_status": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "TestExerciseCreateView.test_post_to_create_view_adds_author_to_object": {
            "name": "test_post_to_create_view_adds_author_to_object",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "rf": [
                    "str",
                    "Union[None, str]",
                    "Callable"
                ],
                "mocker": [
                    "Set[str]"
                ]
            }
        },
        "TestExerciseCreateView.test_creating_new_original_exercise_clears_source_information": {
            "name": "test_creating_new_original_exercise_clears_source_information",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool"
                ],
                "rf": [
                    "str",
                    "zam_repondeur.models.Lecture",
                    "Callable"
                ],
                "mocker": []
            }
        },
        "TestExerciseCreateView.test_post_to_create_view_redirects_to_detail_view": {
            "name": "test_post_to_create_view_redirects_to_detail_view",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool",
                    "server.models.User",
                    "zerver.models.UserProfile"
                ],
                "rf": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "users": [
                    "bool",
                    "server.models.User",
                    "zerver.models.UserProfile"
                ],
                "mocker": [
                    "str",
                    "core.models.MyUser",
                    "server.models.PickupPoint",
                    "users.models.JustfixUser",
                    "core.models.Recipe",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "TestExerciseCreateView.test_get_with_url_parameter_prepopulates_text": {
            "name": "test_get_with_url_parameter_prepopulates_text",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool"
                ],
                "rf": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "django.tesRequestFactory",
                    "dict",
                    "core.Core"
                ],
                "mocker": []
            }
        },
        "TestExerciseDetailView.test_get_detail_view": {
            "name": "test_get_detail_view",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "mocker": [
                    "List[src.main.core.models.area.Area]",
                    "list[A]"
                ]
            }
        },
        "TestExerciseDetailView.test_context_includes_variable_can_edit": {
            "name": "test_context_includes_variable_can_edit",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[, ]",
                    "dict",
                    "dict[str, dict[str, typing.Any]]",
                    "django.tesClient",
                    "Dict[str, Dict[str, Any]]"
                ],
                "users": [
                    "int",
                    "float",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "mocker": [
                    "zerver.models.PreregistrationUser",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "zerver.models.UserProfile"
                ],
                "user_status": [
                    "int",
                    "float",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "can_edit": [
                    "core.models.Recipe"
                ]
            }
        },
        "TestExerciseUpdateView.test_update_view_requires_staff_or_author": {
            "name": "test_update_view_requires_staff_or_author",
            "location": 201,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "dict[, ]",
                    "Dict[str, Tuple[str, str]]",
                    "Callable",
                    "str",
                    "dict"
                ],
                "users": [
                    "Callable",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "mocker": [
                    "int",
                    "server.models.bike.Bike",
                    "models.Telegram_Chat",
                    "server.models.User"
                ],
                "user_status": [
                    "typing.Callable[, ]",
                    "Callable",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "status_code": [
                    "float",
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "TestExerciseUpdateView.test_post_to_update_view_preserves_the_original_author": {
            "name": "test_post_to_update_view_preserves_the_original_author",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "rf": [
                    "str",
                    "Callable",
                    "zam_repondeur.models.Lecture"
                ],
                "mocker": []
            }
        },
        "TestExerciseUpdateView.test_post_to_update_view_redirects_to_detail_view": {
            "name": "test_post_to_update_view_redirects_to_detail_view",
            "location": 241,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool"
                ],
                "rf": [
                    "str",
                    "Callable",
                    "zam_repondeur.models.Lecture"
                ],
                "mocker": []
            }
        },
        "TestExerciseUpdateView.test_post_request_with_continue_parameter_returns_to_update_view": {
            "name": "test_post_request_with_continue_parameter_returns_to_update_view",
            "location": 261,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool"
                ],
                "rf": [
                    "str",
                    "Callable"
                ],
                "mocker": [
                    "Set[str]",
                    "abilian.core.sqlalchemy.SQLAlchemy"
                ]
            }
        },
        "TestExerciseDeleteView.test_delete_view_requires_staff_or_author": {
            "name": "test_delete_view_requires_staff_or_author",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "dict[, ]",
                    "Callable",
                    "Dict[str, Tuple[str, str]]",
                    "dict",
                    "str"
                ],
                "users": [
                    "Callable",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "mocker": [
                    "int",
                    "server.models.bike.Bike",
                    "models.Telegram_Chat",
                    "server.models.User"
                ],
                "user_status": [
                    "typing.Callable[, ]",
                    "Callable",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "status_code": [
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[str, int]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "TestExercisePDFView.test_pdf_view_returns_pdf": {
            "name": "test_pdf_view_returns_pdf",
            "location": 316,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "mocker": [
                    "core.models.Grouping"
                ]
            }
        },
        "TestExerciseListViews.test_exercises_index_GET": {
            "name": "test_exercises_index_GET",
            "location": 341,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "rf": [],
                "exercises": []
            }
        },
        "TestExerciseListViews.test_exercises_index_shows_all_exercises": {
            "name": "test_exercises_index_shows_all_exercises",
            "location": 353,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "mocker": [
                    "asgard.models.user.User",
                    "asgard.models.accounAccount"
                ],
                "exercises": [
                    "asgard.models.user.User",
                    "asgard.models.accounAccount"
                ]
            }
        }
    },
    "unkenmathe.de-master/src/tests/exercises/__init__.py": {},
    "unkenmathe.de-master/src/tests/sheets/test_views.py": {
        "TestSheetCreateView.test_create_view_doesnt_allow_anonymous_user": {
            "name": "test_create_view_doesnt_allow_anonymous_user",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "rf": [
                    "str"
                ],
                "users": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ],
                "user_status": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "TestSheetCreateView.test_post_to_create_view_adds_author_to_object": {
            "name": "test_post_to_create_view_adds_author_to_object",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool",
                    "server.models.User",
                    "zerver.models.UserProfile",
                    "zerver.models.Client"
                ],
                "rf": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "users": [
                    "bool",
                    "server.models.User",
                    "zerver.models.UserProfile",
                    "zerver.models.Client"
                ],
                "mocker": [
                    "bool",
                    "server.models.User",
                    "zerver.models.UserProfile",
                    "zerver.models.Client"
                ]
            }
        },
        "TestSheetCreateView.test_post_to_create_view_redirects_to_detail_view": {
            "name": "test_post_to_create_view_redirects_to_detail_view",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool",
                    "server.models.User",
                    "zerver.models.UserProfile"
                ],
                "rf": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "users": [
                    "bool",
                    "server.models.User",
                    "zerver.models.UserProfile"
                ],
                "mocker": [
                    "bool",
                    "server.models.User",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "TestSheetDetailView.test_get_detail_view": {
            "name": "test_get_detail_view",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool"
                ],
                "rf": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "django.tesRequestFactory",
                    "Dict[str, Any]",
                    "core.Core",
                    "dict"
                ],
                "mocker": [
                    "int",
                    "list[server.models.Rental]",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "zerver.models.UserProfile",
                    "List[server.models.Rental]"
                ]
            }
        },
        "TestSheetDetailView.test_context_includes_variable_can_edit": {
            "name": "test_context_includes_variable_can_edit",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[, ]",
                    "dict",
                    "dict[str, dict[str, typing.Any]]",
                    "django.tesClient",
                    "Dict[str, Dict[str, Any]]"
                ],
                "users": [
                    "int",
                    "float",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "mocker": [
                    "zerver.models.PreregistrationUser",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "zerver.models.UserProfile"
                ],
                "user_status": [
                    "int",
                    "float",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "can_edit": [
                    "core.models.Recipe"
                ]
            }
        },
        "TestSheetUpdateView.test_update_view_requires_staff_or_author": {
            "name": "test_update_view_requires_staff_or_author",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "dict[, ]",
                    "Dict[str, Tuple[str, str]]",
                    "Callable",
                    "str",
                    "dict"
                ],
                "users": [
                    "Callable",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "mocker": [
                    "int",
                    "server.models.bike.Bike",
                    "models.Telegram_Chat",
                    "server.models.User"
                ],
                "user_status": [
                    "typing.Callable[, ]",
                    "Callable",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "status_code": [
                    "float",
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        }
    },
    "unkenmathe.de-master/src/tests/sheets/__init__.py": {},
    "unkenmathe.de-master/src/um/__init__.py": {},
    "unkenmathe.de-master/src/um/core/constants.py": {},
    "unkenmathe.de-master/src/um/core/context_processors.py": {
        "rollbar_environment": {
            "name": "rollbar_environment",
            "location": 5,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "unkenmathe.de-master/src/um/core/factories.py": {},
    "unkenmathe.de-master/src/um/core/jinja2.py": {},
    "unkenmathe.de-master/src/um/core/utils.py": {
        "pdflatex": {
            "name": "pdflatex",
            "location": 8,
            "return": [
                "BinaryIO"
            ],
            "arguments": {
                "template": [
                    "str"
                ]
            }
        }
    },
    "unkenmathe.de-master/src/um/core/views.py": {
        "UserCanEditMixin.get_context_data": {
            "name": "get_context_data",
            "location": 19,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveAndContinueMixin.form_valid": {
            "name": "form_valid",
            "location": 33,
            "return": [
                "HttpResponseRedirect",
                "Dict[str, Any]",
                "dict",
                "django.http.HttpResponse",
                "int"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "UserFormKwargsMixin.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 48,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFuncMixin.test_func": {
            "name": "test_func",
            "location": 58,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unkenmathe.de-master/src/um/core/__init__.py": {},
    "unkenmathe.de-master/src/um/core/templatetags/markdown_filters.py": {
        "markdownify": {
            "name": "markdownify",
            "location": 9,
            "return": [
                "bool",
                "float",
                "Dict[str, Any]",
                "Sequence[Any]",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "unkenmathe.de-master/src/um/exercises/admin.py": {},
    "unkenmathe.de-master/src/um/exercises/factories.py": {},
    "unkenmathe.de-master/src/um/exercises/forms.py": {
        "ExerciseForm.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseForm.clean": {
            "name": "clean",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseForm.clean_original_author": {
            "name": "clean_original_author",
            "location": 98,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseForm.clean_source_url": {
            "name": "clean_source_url",
            "location": 108,
            "return": [
                "typing.Text",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unkenmathe.de-master/src/um/exercises/models.py": {
        "Exercise.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.license_url": {
            "name": "license_url",
            "location": 74,
            "return": [
                "str",
                "float",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.license_name_long": {
            "name": "license_name_long",
            "location": 79,
            "return": [
                "str",
                "zerver.models.Realm",
                "List[Tuple[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.url": {
            "name": "url",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 88,
            "return": [
                "bool",
                "int",
                "float",
                "db.models.Article",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.render_html": {
            "name": "render_html",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.render_tex": {
            "name": "render_tex",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.super_save": {
            "name": "super_save",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.save": {
            "name": "save",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseExample.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unkenmathe.de-master/src/um/exercises/urls.py": {},
    "unkenmathe.de-master/src/um/exercises/views.py": {
        "exercise_pdf_view": {
            "name": "exercise_pdf_view",
            "location": 26,
            "return": [
                "HttpResponse",
                "bytes",
                "dict"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "slug": [
                    "int",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "ExerciseCreateView.form_valid": {
            "name": "form_valid",
            "location": 68,
            "return": [
                "str",
                "pathpy.core.network.Network",
                "Dict[str, str]",
                "Optional[str]",
                "raiden.utils.List[raiden.utils.FeeAmount]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Dict[str, Any]",
                    "List[Tuple[str, int]]",
                    "str",
                    "Iterable[float]"
                ]
            }
        },
        "ExerciseCreateView.get_context_data": {
            "name": "get_context_data",
            "location": 75,
            "return": [
                "dict[typing.Text, dict[typing.Text, ]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseCreateView.get_initial": {
            "name": "get_initial",
            "location": 87,
            "return": [
                "str",
                "dict[int, None]",
                "bool",
                "dict[str, int]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExerciseUpdateView.get_update_url": {
            "name": "get_update_url",
            "location": 116,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unkenmathe.de-master/src/um/exercises/__init__.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0001_initial.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0002_auto_20170813_1426.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0003_exercise_text_tex.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0004_exercise_author.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0005_auto_20170826_0942.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0006_exercise_license.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0007_auto_20170828_0658.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0008_auto_20170829_1729.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0009_auto_20170829_1806.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0010_exerciseexample.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0011_exerciseexample_description.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0012_exerciseexample_title.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0013_exercise_source.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0014_exercise_source_url.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0015_auto_20170925_1745.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0016_auto_20170927_1640.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0017_remove_exercise_source.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0018_exercise_is_original.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0019_exercise_changes.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0020_exercise_uuid.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0021_auto_20171004_0954.py": {
        "gen_uuid": {
            "name": "gen_uuid",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "str",
                    "bool",
                    "django.db.migrations.state.StateApps",
                    "int"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "unkenmathe.de-master/src/um/exercises/migrations/0022_auto_20171004_0954.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0023_auto_20171004_1012.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0024_exercise_slug.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/0025_auto_20171005_1447.py": {},
    "unkenmathe.de-master/src/um/exercises/migrations/__init__.py": {},
    "unkenmathe.de-master/src/um/sheets/factories.py": {
        "SheetFactory.exercises": {
            "name": "exercises",
            "location": 25,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "tuple[typing.Union[int,str]]",
                    "Tuple[int, str]",
                    "typing.Iterator",
                    "Iterator[int]",
                    "Iterable[int]"
                ],
                "extracted": [
                    "tuple[typing.Union[int,str]]",
                    "int",
                    "Tuple[int, str]",
                    "Iterator[int]",
                    "Iterable[int]"
                ]
            }
        }
    },
    "unkenmathe.de-master/src/um/sheets/forms.py": {
        "SheetForm.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unkenmathe.de-master/src/um/sheets/models.py": {
        "Sheet.url": {
            "name": "url",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sheet.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 28,
            "return": [
                "bool",
                "int",
                "float",
                "db.models.Article",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unkenmathe.de-master/src/um/sheets/urls.py": {},
    "unkenmathe.de-master/src/um/sheets/views.py": {
        "SheetCreateView.form_valid": {
            "name": "form_valid",
            "location": 18,
            "return": [
                "str",
                "pathpy.core.network.Network",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Dict[str, Any]",
                    "List[Tuple[str, int]]",
                    "str",
                    "Iterable[float]"
                ]
            }
        },
        "SheetUpdateView.get_update_url": {
            "name": "get_update_url",
            "location": 41,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "unkenmathe.de-master/src/um/sheets/__init__.py": {},
    "unkenmathe.de-master/src/um/sheets/migrations/0001_initial.py": {},
    "unkenmathe.de-master/src/um/sheets/migrations/0002_sheet_author.py": {},
    "unkenmathe.de-master/src/um/sheets/migrations/__init__.py": {}
}
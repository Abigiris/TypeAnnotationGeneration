{
    "useful-tools-services-master/setup.py": {},
    "useful-tools-services-master/useful_tools_services/__init__.py": {},
    "useful-tools-services-master/useful_tools_services/app/adhocrows.py": {
        "adhoc_data.adhoc_script_for_bulk_upload": {
            "name": "adhoc_script_for_bulk_upload",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "useful-tools-services-master/useful_tools_services/app/connection.py": {
        "resourceItem.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str"
                ],
                "item_name": [
                    "str"
                ],
                "links": [
                    "str"
                ],
                "resource_desc": [
                    "str"
                ]
            }
        },
        "resourceItem.group": {
            "name": "group",
            "location": 22,
            "return": [
                "",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Optional[Union[str, Any]]",
                    "Optional[T]",
                    "Optional[str]",
                    "Union[None, int, float]",
                    "Union[int, None]",
                    "Union[str, None]"
                ]
            }
        },
        "resourceItem.item_name": {
            "name": "item_name",
            "location": 33,
            "return": [
                "",
                "str",
                "dict[str, str]",
                "dict[, ]",
                "bytes",
                "list[dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Callable[[Any], bool]"
                ]
            }
        },
        "resourceItem.links": {
            "name": "links",
            "location": 44,
            "return": [
                "",
                "int",
                "dict[int, str]",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Hashable",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Union[int, None]"
                ]
            }
        },
        "resourceItem.resource_desc": {
            "name": "resource_desc",
            "location": 55,
            "return": [
                "",
                "str",
                "int",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[bytes]",
                    "Optional[str]",
                    "Optional[Union[str, Any]]",
                    "Optional[int]",
                    "T"
                ]
            }
        },
        "dbConnection.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "dbConnection.gen_insert_sql": {
            "name": "gen_insert_sql",
            "location": 79,
            "return": [
                "int",
                "str",
                "Callable",
                "list[int]",
                "list[str]",
                "dict[str, str]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": [],
                "resourceItem": [
                    "typing.Callable[, ]",
                    "T",
                    "str",
                    "Callable",
                    "typing.Type",
                    "Type[object]"
                ]
            }
        },
        "dbConnection.gen_delete_sql": {
            "name": "gen_delete_sql",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resourceItem": [
                    "resourceItem"
                ]
            }
        },
        "dbConnection.select_all": {
            "name": "select_all",
            "location": 94,
            "return": [
                "sqlalchemy.engine.cursor.CursorResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "dbConnection.get_distinct_webpages": {
            "name": "get_distinct_webpages",
            "location": 97,
            "return": [
                "sqlalchemy.engine.cursor.CursorResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "dbConnection.execute_ins": {
            "name": "execute_ins",
            "location": 101,
            "return": [
                "sqlalchemy.engine.cursor.LegacyCursorResult"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "str"
                ]
            }
        }
    },
    "useful-tools-services-master/useful_tools_services/app/main.py": {
        "jsonify_response": {
            "name": "jsonify_response",
            "location": 21,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Exception]",
                    "Exception",
                    "T",
                    "None",
                    "Type[T]",
                    "typing.Type",
                    "List[dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "hello": {
            "name": "hello",
            "location": 30,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "get_all_webpage_urls": {
            "name": "get_all_webpage_urls",
            "location": 36,
            "return": [
                "list[]",
                "Set[str]",
                "Optional[dict]",
                "int",
                "list"
            ],
            "arguments": {}
        },
        "get_all_items": {
            "name": "get_all_items",
            "location": 44,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, list[dict[typing.Text, ]]]]]",
                "pandas.DataFrame",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "insert_item": {
            "name": "insert_item",
            "location": 63,
            "return": [
                "Response",
                "List[str]",
                "Dict[str, pandas.DataFrame]",
                "Optional[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "delete_item": {
            "name": "delete_item",
            "location": 78,
            "return": [
                "Response",
                "List[str]",
                "int",
                "Dict[str, Any]",
                "Optional[str]",
                "Dict[str, str]",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "create_resource_item": {
            "name": "create_resource_item",
            "location": 92,
            "return": [
                "useful_tools_services.app.connection.resourceItem"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "mongo_tech_articles": {
            "name": "mongo_tech_articles",
            "location": 102,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {}
        },
        "pull_and_analyse_articles": {
            "name": "pull_and_analyse_articles",
            "location": 112,
            "return": [
                "Counter"
            ],
            "arguments": {
                "mongo_url": [
                    "str"
                ]
            }
        },
        "count_occurances": {
            "name": "count_occurances",
            "location": 119,
            "return": [
                "Counter[nothing]"
            ],
            "arguments": {
                "coll": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "get_docs": {
            "name": "get_docs",
            "location": 131,
            "return": [
                "int",
                "Sequence[Any]"
            ],
            "arguments": {
                "coll": [
                    "str",
                    "bool"
                ]
            }
        },
        "jsonify_response.jsonify": {
            "name": "jsonify",
            "location": 23,
            "return": [
                "Response",
                "List[str]",
                "Union[str, List[str]]",
                "str",
                "Dict[str, Any]",
                "bool",
                "Dict[str, dict]"
            ],
            "arguments": {}
        }
    },
    "useful-tools-services-master/useful_tools_services/app/manage_tables.py": {
        "get_connection": {
            "name": "get_connection",
            "location": 6,
            "return": [
                "psycopg2._psycopg.connection"
            ],
            "arguments": {}
        },
        "create_table": {
            "name": "create_table",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "useful-tools-services-master/useful_tools_services/app/__init__.py": {},
    "useful-tools-services-master/useful_tools_services/mongo/pull_records.py": {
        "get_site_links": {
            "name": "get_site_links",
            "location": 16,
            "return": [
                "List[nothing]"
            ],
            "arguments": {}
        },
        "DataExtractor.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "urls": [
                    "List[str]"
                ],
                "create_index": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[tuple]"
                ]
            }
        },
        "DataExtractor.__iter__": {
            "name": "__iter__",
            "location": 32,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [
                    "_T0"
                ]
            }
        },
        "DataExtractor.__next__": {
            "name": "__next__",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataExtractor.extract_pages_and_insert": {
            "name": "extract_pages_and_insert",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "next_url": [
                    "str"
                ]
            }
        },
        "MongoInserter.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str"
                ],
                "collection": [
                    "str"
                ]
            }
        },
        "MongoInserter.create_index": {
            "name": "create_index",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        }
    },
    "useful-tools-services-master/useful_tools_services/test/test_app.py": {
        "datapath": {
            "name": "datapath",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_word_frequency_aggregation": {
            "name": "test_word_frequency_aggregation",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_word_frequency_aggregation.mockreturn": {
            "name": "mockreturn",
            "location": 27,
            "return": [
                "list[]",
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "collection": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    }
}
{
    "video-archiver-master/archive.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "video-archiver-master/tasks.py": {
        "style": {
            "name": "style",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "check": [
                    "bool"
                ]
            }
        },
        "isort": {
            "name": "isort",
            "location": 33,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "check": [
                    "bool",
                    "Tuple[cirq.Qid]",
                    "Dict[str,str]",
                    "Dict[str,Optional[str]]"
                ]
            }
        },
        "black": {
            "name": "black",
            "location": 39,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "check": [
                    "bool",
                    "Tuple[cirq.Qid]",
                    "Dict[str,str]",
                    "Dict[str,Optional[str]]"
                ]
            }
        },
        "lint_flake8": {
            "name": "lint_flake8",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint_pylint": {
            "name": "lint_pylint",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint_mypy": {
            "name": "lint_mypy",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint": {
            "name": "lint",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "radon_cc": {
            "name": "radon_cc",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "radon_mi": {
            "name": "radon_mi",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "radon": {
            "name": "radon",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "xenon": {
            "name": "xenon",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 108,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "publish": [
                    "bool",
                    "Union[List,set]",
                    "Iterator[str]",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ],
                "xml": [
                    "bool",
                    "Union[List,set]",
                    "Iterator[str]",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ]
            }
        }
    },
    "video-archiver-master/tests/conftest.py": {
        "yaml_config_load": {
            "name": "yaml_config_load",
            "location": 8,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "video-archiver-master/tests/test_config.py": {
        "TestConfig.test_load": {
            "name": "test_load",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "video-archiver-master/tests/test_cookie_converter.py": {
        "TestCookieConverter.test_convert_cookie_dict_to_string": {
            "name": "test_convert_cookie_dict_to_string",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "video-archiver-master/tests/test_m3u8_handler.py": {
        "TestM3U8Handler.test_extract_highest_quality_streaming_url": {
            "name": "test_extract_highest_quality_streaming_url",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestM3U8Handler.test_return_higher_quality": {
            "name": "test_return_higher_quality",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "video-archiver-master/tests/test_windows.py": {
        "TestWindows.test_replace_disallow_character": {
            "name": "test_replace_disallow_character",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "video-archiver-master/tests/__init__.py": {},
    "video-archiver-master/tests/niconico/test_client_for_back_end.py": {
        "TestClientForBackEnd.test_login": {
            "name": "test_login",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "yaml_config_load": [
                    "str",
                    "Dict[str,Any]",
                    "List[int]"
                ]
            }
        }
    },
    "video-archiver-master/tests/niconico/__init__.py": {},
    "video-archiver-master/tests/testlibraries/additional_matcher_factory.py": {
        "AdditionalMatcherFactory.create_request_data_matcher": {
            "name": "create_request_data_matcher",
            "location": 11,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict",
                    "List[dict]",
                    "Dict[str,str]",
                    "bytes",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "AdditionalMatcherFactory.create_request_data_matcher.additional_matcher": {
            "name": "additional_matcher",
            "location": 12,
            "return": [
                "bool",
                "Dict[str,Any]",
                "Dict[str,float]",
                "bytes",
                "Dict[str,Set[str]]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Mapping[str, str]",
                    "dict"
                ]
            }
        }
    },
    "video-archiver-master/tests/testlibraries/cookie_jar_factory.py": {
        "RequestsCookieJarFactory.create": {
            "name": "create",
            "location": 9,
            "return": [
                "requests.cookies.RequestsCookieJar"
            ],
            "arguments": {
                "list_cookie": [
                    "Dict",
                    "List",
                    "bool"
                ]
            }
        }
    },
    "video-archiver-master/tests/testlibraries/instance_resource.py": {},
    "video-archiver-master/tests/testlibraries/stream_factory.py": {
        "StreamFactory.create_stream_expect": {
            "name": "create_stream_expect",
            "location": 14,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cookies_streaming": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "path_file": [
                    "pathlib.Path"
                ],
                "uri": [
                    "str",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "video-archiver-master/tests/testlibraries/__init__.py": {},
    "video-archiver-master/tests/tvasahi/test_client_for_back_end.py": {
        "TestClientForBackEnd.test_login": {
            "name": "test_login",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [
                    "mock.Mock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestClientForBackEnd.test_request_program_home_page": {
            "name": "test_request_program_home_page",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [
                    "str",
                    "tests.clienMDMClient"
                ]
            }
        },
        "TestClientForBackEnd.test_request_episode_home_page": {
            "name": "test_request_episode_home_page",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "TestClientForBackEnd.test_request_html": {
            "name": "test_request_html",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "TestClientForBackEnd.test_request_cookie": {
            "name": "test_request_cookie",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "TestClientForBackEnd.test_request_playlist": {
            "name": "test_request_playlist",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "TestClientForBackEnd.test_request_api_list_episode": {
            "name": "test_request_api_list_episode",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestClientForBackEnd.test_download": {
            "name": "test_download",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "TestClientForBackEnd.test_ffmpeg": {
            "name": "test_ffmpeg",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_run": [
                    "str"
                ]
            }
        }
    },
    "video-archiver-master/tests/tvasahi/test_dictionary_converter.py": {
        "TestDictionaryConverter.test_convert_to_list": {
            "name": "test_convert_to_list",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDictionaryConverter.test_convert_to_model": {
            "name": "test_convert_to_model",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "video-archiver-master/tests/tvasahi/test_episode_loader.py": {
        "TestEpisodeLoader.test_load_backup": {
            "name": "test_load_backup",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestEpisodeLoader.test_list_up_episode": {
            "name": "test_list_up_episode",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [],
                "tmp_path": []
            }
        },
        "TestEpisodeLoader.test__list_up_episode": {
            "name": "test__list_up_episode",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [],
                "tmp_path": []
            }
        }
    },
    "video-archiver-master/tests/tvasahi/test_episode_media_archiver.py": {
        "TestEpisodeMediaArchiver.test_archive_image_if_has_not_archived": {
            "name": "test_archive_image_if_has_not_archived",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "tmp_path": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestEpisodeMediaArchiver.test_archive_video_if_has_not_archived": {
            "name": "test_archive_video_if_has_not_archived",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_run": [],
                "requests_mock": [],
                "tmp_path": [
                    "tests.e2e.Helper"
                ]
            }
        }
    },
    "video-archiver-master/tests/tvasahi/test_java_script_analyzer.py": {
        "TestJavaScriptAnalyzer.test_extract_variable": {
            "name": "test_extract_variable",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestJavaScriptAnalyzer.test_extract_variable_from_definition_line": {
            "name": "test_extract_variable_from_definition_line",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "definition_line": [
                    "str",
                    "int",
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ],
                "expected": [
                    "str",
                    "int",
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ]
            }
        }
    },
    "video-archiver-master/tests/tvasahi/test_path_builder.py": {
        "TestPathBuilder.test_build_path_archive_directory": {
            "name": "test_build_path_archive_directory",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestPathBuilder.test_build_archive_path_for_image": {
            "name": "test_build_archive_path_for_image",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "video-archiver-master/tests/tvasahi/__init__.py": {},
    "video-archiver-master/videoarchiver/abstract_client_for_back_end.py": {
        "AbstractClientForBackEnd.login": {
            "name": "login",
            "location": 9,
            "return": [
                "requests.cookies.RequestsCookieJar",
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "video-archiver-master/videoarchiver/config.py": {},
    "video-archiver-master/videoarchiver/cookie_converter.py": {
        "CookieConverter.convert_requests_cookie_jar_to_string": {
            "name": "convert_requests_cookie_jar_to_string",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "requests_cookie_jar": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        }
    },
    "video-archiver-master/videoarchiver/m3u8_handler.py": {
        "M3U8Handler.extract_highest_quality_streaming_url": {
            "name": "extract_highest_quality_streaming_url",
            "location": 8,
            "return": [
                "None",
                "int",
                "Iterable[Any]",
                "Tuple[int,int,int,int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Union[str,int]",
                    "int",
                    "str"
                ],
                "m3u8_object": [
                    "str",
                    "int",
                    "List[dict]"
                ]
            }
        },
        "M3U8Handler.return_higher_quality": {
            "name": "return_higher_quality",
            "location": 16,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "playlist_a": [
                    "Dict",
                    "m3u8.Playlist",
                    "int",
                    "Dict[int,dict[str,str]]",
                    "Dict[int,Dict[str,str]]",
                    "None",
                    "Dict[str,str]",
                    "Optional[Dict]",
                    "Optional[Dict[str,str]]"
                ],
                "playlist_b": [
                    "Dict",
                    "m3u8.Playlist",
                    "int",
                    "Dict[int,dict[str,str]]",
                    "Dict[int,Dict[str,str]]",
                    "None",
                    "Dict[str,str]",
                    "Optional[Dict]",
                    "Optional[Dict[str,str]]"
                ]
            }
        }
    },
    "video-archiver-master/videoarchiver/membership_site_archive_step.py": {
        "MembershipSiteArchiveStep.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_for_back_end": [
                    "int",
                    "str"
                ],
                "path_directory_download": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "MembershipSiteArchiveStep.execute": {
            "name": "execute",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "video-archiver-master/videoarchiver/video_archiver.py": {
        "VideoArchiver.execute": {
            "name": "execute",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "video-archiver-master/videoarchiver/windows.py": {
        "Windows.replace_disallow_character": {
            "name": "replace_disallow_character",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": []
            }
        }
    },
    "video-archiver-master/videoarchiver/__init__.py": {
        "Directory.value": {
            "name": "value",
            "location": 18,
            "return": [
                "str",
                "int",
                "dict",
                "tuple",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "video-archiver-master/videoarchiver/niconico/archive_step.py": {
        "ArchiveStep.execute": {
            "name": "execute",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchiveStep.execute_per_program": {
            "name": "execute_per_program",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_id_string": []
            }
        }
    },
    "video-archiver-master/videoarchiver/niconico/client_for_back_end.py": {
        "ClientForBackEnd.login": {
            "name": "login",
            "location": 19,
            "return": [
                "requests.cookies.RequestsCookieJar"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[str,pathlib.Path,bytes,BinaryIO]",
                    "memoryview",
                    "bool",
                    "bytes",
                    "BinaryIO"
                ]
            }
        },
        "ClientForBackEnd.ffmpeg": {
            "name": "ffmpeg",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List",
                    "Callable",
                    "pathlib.Path",
                    "List[Union[str,int]]",
                    "bool",
                    "Dict[str,Any]"
                ],
                "uri": [
                    "str"
                ],
                "cookies_streaming": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict",
                    "bytes",
                    "None"
                ],
                "path_file": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "video-archiver-master/videoarchiver/niconico/__init__.py": {},
    "video-archiver-master/videoarchiver/tvasahi/archive_step.py": {
        "ArchiveStep.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_for_back_end": [
                    "Type",
                    "Type[videoarchiver.tvasahi.client_for_back_end.ClientForBackEnd]",
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "path_directory_download": [
                    "Type",
                    "Type[videoarchiver.tvasahi.client_for_back_end.ClientForBackEnd]",
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "path_directory_cache": [
                    "str",
                    "bool"
                ]
            }
        },
        "ArchiveStep.execute": {
            "name": "execute",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchiveStep.execute_per_program": {
            "name": "execute_per_program",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_id_string": [
                    "bytes",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        }
    },
    "video-archiver-master/videoarchiver/tvasahi/client_for_back_end.py": {
        "ClientForBackEnd.login": {
            "name": "login",
            "location": 36,
            "return": [
                "requests.cookies.RequestsCookieJar"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ClientForBackEnd.request_program_home_page": {
            "name": "request_program_home_page",
            "location": 46,
            "return": [
                "bs4.BeautifulSoup"
            ],
            "arguments": {
                "cls": [],
                "program_id_string": []
            }
        },
        "ClientForBackEnd.request_episode_page": {
            "name": "request_episode_page",
            "location": 50,
            "return": [
                "bs4.BeautifulSoup"
            ],
            "arguments": {
                "cls": [],
                "episode": [],
                "cookies_login": []
            }
        },
        "ClientForBackEnd.request_html": {
            "name": "request_html",
            "location": 58,
            "return": [
                "bs4.BeautifulSoup"
            ],
            "arguments": {
                "cls": [],
                "request_url": [],
                "program_id_string": [],
                "cookies": [
                    "None"
                ]
            }
        },
        "ClientForBackEnd.request_cookies": {
            "name": "request_cookies",
            "location": 66,
            "return": [
                "requests.cookies.RequestsCookieJar"
            ],
            "arguments": {
                "cls": [],
                "request_url": []
            }
        },
        "ClientForBackEnd.request_playlist": {
            "name": "request_playlist",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "request_url": []
            }
        },
        "ClientForBackEnd.request_api_list_episode": {
            "name": "request_api_list_episode",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "program_id_string": [],
                "payload": []
            }
        },
        "ClientForBackEnd.download": {
            "name": "download",
            "location": 88,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "ClientForBackEnd.ffmpeg": {
            "name": "ffmpeg",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "playlist": [],
                "cookies_streaming": [],
                "path_file": []
            }
        }
    },
    "video-archiver-master/videoarchiver/tvasahi/dictionary_converter.py": {
        "DictionaryConverter.convert_to_list": {
            "name": "convert_to_list",
            "location": 8,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "list_dictionary_episode": [
                    "Dict[str,Any]",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "DictionaryConverter.convert_to_model": {
            "name": "convert_to_model",
            "location": 12,
            "return": [
                "Callable",
                "Dict[str, int]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "dict_episode": []
            }
        }
    },
    "video-archiver-master/videoarchiver/tvasahi/episode_loader.py": {
        "EpisodeLoader.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_directory_cache": []
            }
        },
        "EpisodeLoader.load_backup": {
            "name": "load_backup",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "program_id_string": []
            }
        },
        "EpisodeLoader.list_up_episode": {
            "name": "list_up_episode",
            "location": 23,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "program_id_string": []
            }
        },
        "EpisodeLoader._list_up_episode": {
            "name": "_list_up_episode",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "file_backup": [],
                "html_analyzer": [],
                "program_id_string": []
            }
        }
    },
    "video-archiver-master/videoarchiver/tvasahi/episode_media_archiver.py": {
        "EpisodeMediaArchiver.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "episode": [
                    "Dict[str,str]",
                    "Dict",
                    "tracim.models.data.Content",
                    "pathlib.Path",
                    "Iterable[pathlib.Path]"
                ],
                "path_directory_download": [
                    "bool",
                    "str",
                    "List[str]",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "EpisodeMediaArchiver.archive_large_image_if_has_not_archived": {
            "name": "archive_large_image_if_has_not_archived",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpisodeMediaArchiver.archive_extra_large_image_if_has_not_archived": {
            "name": "archive_extra_large_image_if_has_not_archived",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpisodeMediaArchiver.archive_image_if_has_not_archived": {
            "name": "archive_image_if_has_not_archived",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "EpisodeMediaArchiver.archive_video_if_has_not_archived": {
            "name": "archive_video_if_has_not_archived",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookies_login": [
                    "List[str]",
                    "str",
                    "Dict",
                    "float"
                ]
            }
        }
    },
    "video-archiver-master/videoarchiver/tvasahi/html_analyzer.py": {
        "HtmlAnalyzer.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "soup": []
            }
        },
        "HtmlAnalyzer.extract_episode_code": {
            "name": "extract_episode_code",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlAnalyzer.extract_sort": {
            "name": "extract_sort",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlAnalyzer.extract_url_playlist": {
            "name": "extract_url_playlist",
            "location": 19,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "soup": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "video-archiver-master/videoarchiver/tvasahi/java_script_analyzer.py": {
        "JavaScriptAnalyzer.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "java_script": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JavaScriptAnalyzer.extract_variable": {
            "name": "extract_variable",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "variable_name": [
                    "str"
                ]
            }
        },
        "JavaScriptAnalyzer.extract_url_playlist": {
            "name": "extract_url_playlist",
            "location": 8,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaScriptAnalyzer.__find_first_line": {
            "name": "__find_first_line",
            "location": 11,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "key_word": [
                    "str",
                    "Optional[bytes]",
                    "Sequence[Any]",
                    "bytes",
                    "Union[str,bytes]",
                    "None"
                ]
            }
        },
        "JavaScriptAnalyzer.extract_variable_from_definition_line": {
            "name": "extract_variable_from_definition_line",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "definition_line": [
                    "str"
                ]
            }
        },
        "JavaScriptAnalyzer.extract_url_from_definition_line": {
            "name": "extract_url_from_definition_line",
            "location": 23,
            "return": [
                "str",
                "List",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "definition_line": [
                    "str"
                ]
            }
        }
    },
    "video-archiver-master/videoarchiver/tvasahi/models.py": {
        "Episode.episode_name_for_windows_path": {
            "name": "episode_name_for_windows_path",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "video-archiver-master/videoarchiver/tvasahi/path_builder.py": {
        "PathBuilder.build_archive_directory": {
            "name": "build_archive_directory",
            "location": 8,
            "return": [
                "str",
                "List[int]",
                "pathlib.Path"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[tuple[Union[pathlib.PurePosixPath,parso.python.tree.Scope]]]",
                    "bool",
                    "Union[str,pathlib.Path]",
                    "List[Tuple[pathlib.PurePosixPath,parso.python.tree.Scope]]",
                    "pathlib.Path",
                    "Iterable[str]"
                ],
                "path_directory_cache": [
                    "str",
                    "pathlib.Path",
                    "videoarchiver.tvasahi.models.Episode"
                ],
                "episode": [
                    "str",
                    "pathlib.Path",
                    "videoarchiver.tvasahi.models.Episode"
                ]
            }
        },
        "PathBuilder.build_archive_image_file": {
            "name": "build_archive_image_file",
            "location": 16,
            "return": [
                "pathlib.Path",
                "List[str]",
                "Optional[pathlib.Path]",
                "pathlib.PosixPath",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Set[int]]",
                    "Set[int]"
                ],
                "path_archive_directory": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "video-archiver-master/videoarchiver/tvasahi/__init__.py": {}
}
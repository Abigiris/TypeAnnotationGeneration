{
    "vies-vat-check-master/setup.py": {},
    "vies-vat-check-master/tests/test_client.py": {
        "test_check_valid_request_valid_number": {
            "name": "test_check_valid_request_valid_number",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_valid_request_invalid_number": {
            "name": "test_check_valid_request_invalid_number",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_approx_valid_request_valid_number": {
            "name": "test_approx_valid_request_valid_number",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_approx_valid_request_invalid_number": {
            "name": "test_approx_valid_request_invalid_number",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error": {
            "name": "test_error",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vies-vat-check-master/tests/test_parse.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vies-vat-check-master/viesvatcheck/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wsdl": [
                    "Text",
                    "bool",
                    "str",
                    "Dict"
                ],
                "cache_path": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "cache_timeout": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "Client._request": {
            "name": "_request",
            "location": 34,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Client.check": {
            "name": "check",
            "location": 46,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "country_code": [
                    "str",
                    "int"
                ],
                "vat_number": [
                    "str",
                    "int"
                ]
            }
        },
        "Client.check_approx": {
            "name": "check_approx",
            "location": 51,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "country_code": [
                    "str",
                    "bool",
                    "float",
                    "Optional[bool]",
                    "None"
                ],
                "vat_number": [
                    "str",
                    "bool",
                    "float",
                    "Optional[bool]",
                    "None"
                ],
                "trader_name": [
                    "str",
                    "None",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "trader_company_type": [
                    "str",
                    "None",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "trader_street": [
                    "str",
                    "None",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "trader_postcode": [
                    "str",
                    "None",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "trader_city": [
                    "str",
                    "None",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "requester_country_code": [
                    "str",
                    "None",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "requester_vat_number": [
                    "str",
                    "None",
                    "float",
                    "bool",
                    "Optional[bool]"
                ]
            }
        }
    },
    "vies-vat-check-master/viesvatcheck/countries.py": {},
    "vies-vat-check-master/viesvatcheck/exceptions.py": {},
    "vies-vat-check-master/viesvatcheck/util.py": {
        "is_vies_member": {
            "name": "is_vies_member",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "country_code": [
                    "str",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "parse_number": {
            "name": "parse_number",
            "location": 28,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        }
    },
    "vies-vat-check-master/viesvatcheck/__init__.py": {}
}
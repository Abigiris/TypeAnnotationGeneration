{
    "vim-issues-master/rplugin/python3/main.py": {
        "VimIssues.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nvim": [
                    "Mapping[str, str]",
                    "bool",
                    "typing.Mapping",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "VimIssues.reload": {
            "name": "reload",
            "location": 19,
            "return": [
                "typing.Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "vim-issues-master/rplugin/python3/base/config.py": {
        "Config.create": {
            "name": "create",
            "location": 16,
            "return": [
                "Optional[List[str]]",
                "bool",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "cwd": [
                    "str",
                    "bool"
                ]
            }
        },
        "Config.get_config_path": {
            "name": "get_config_path",
            "location": 25,
            "return": [
                "str",
                "pathlib.Path",
                "List[pathlib.Path]",
                "List[int]",
                "pathlib.PosixPath"
            ],
            "arguments": {
                "cwd": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        }
    },
    "vim-issues-master/rplugin/python3/base/constants.py": {},
    "vim-issues-master/rplugin/python3/base/issues.py": {
        "IssuesProvider.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "config.Config"
                ]
            }
        },
        "IssuesProvider.create_issue": {
            "name": "create_issue",
            "location": 20,
            "return": [
                "Issue",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssuesProvider.format_issues": {
            "name": "format_issues",
            "location": 24,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "issues": [
                    "str",
                    "dict[str, int]",
                    "type",
                    "BaseException",
                    "Dict[str, int]"
                ]
            }
        },
        "IssuesProvider.get_issues": {
            "name": "get_issues",
            "location": 32,
            "return": [
                "typing.List[Issue]",
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "int",
                    "typing.Callable[list[], None]",
                    "Callable[[List], None]",
                    "list[str]",
                    "typing.Container",
                    "bool",
                    "dict[, ]",
                    "List[str]",
                    "T",
                    "Container[T]",
                    "dict"
                ],
                "filters": [
                    "int",
                    "typing.Callable[list[], None]",
                    "Callable[[List], None]",
                    "list[str]",
                    "typing.Container",
                    "bool",
                    "dict[, ]",
                    "List[str]",
                    "T",
                    "Container[T]",
                    "dict"
                ]
            }
        },
        "IssuesProvider.get_releases": {
            "name": "get_releases",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssuesProvider.get_project_name": {
            "name": "get_project_name",
            "location": 40,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "vcs_url": [
                    "str",
                    "bytes",
                    "int"
                ],
                "issues_url": [
                    "str",
                    "bytes",
                    "int"
                ],
                "review_url": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "vim-issues-master/rplugin/python3/base/project.py": {
        "Project.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "repo_url": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "token": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "vim-issues-master/rplugin/python3/base/reviews.py": {
        "ReviewsProvider.get": {
            "name": "get",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vim-issues-master/rplugin/python3/base/__init__.py": {},
    "vim-issues-master/rplugin/python3/providers/github/issues.py": {
        "GithubIssues.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict",
                    "core.common.Config",
                    "pricemonitor.config.Config"
                ]
            }
        },
        "GithubIssues.create_issue": {
            "name": "create_issue",
            "location": 14,
            "return": [
                "base.Issue",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubIssues.get_issues": {
            "name": "get_issues",
            "location": 17,
            "return": [
                "list[]",
                "Set[str]",
                "List[str]",
                "bool",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "int",
                    "typing.Callable[list[], None]",
                    "Callable[[List], None]",
                    "list[str]",
                    "typing.Container",
                    "bool",
                    "dict[, ]",
                    "List[str]",
                    "T",
                    "Container[T]",
                    "dict"
                ],
                "filters": [
                    "int",
                    "typing.Callable[list[], None]",
                    "Callable[[List], None]",
                    "list[str]",
                    "typing.Container",
                    "bool",
                    "dict[, ]",
                    "List[str]",
                    "T",
                    "Container[T]",
                    "dict"
                ]
            }
        },
        "GithubIssues.get_merge_requests": {
            "name": "get_merge_requests",
            "location": 21,
            "return": [
                "typing.List[base.MergeRequest]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubIssues.get_releases": {
            "name": "get_releases",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubIssues.get_project_name": {
            "name": "get_project_name",
            "location": 28,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "vcs_url": [
                    "str",
                    "bytes",
                    "int"
                ],
                "issues_url": [
                    "str",
                    "bytes",
                    "int"
                ],
                "review_url": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "GithubIssues._get_issue_data": {
            "name": "_get_issue_data",
            "location": 34,
            "return": [
                "Issue",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "issue": [
                    "int",
                    "github.Issue.Issue",
                    "typing.Type",
                    "str",
                    "base.FieldFactory",
                    "type"
                ]
            }
        }
    },
    "vim-issues-master/rplugin/python3/providers/github/project.py": {
        "GithubProject.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "repo_url": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ],
                "token": [
                    "bool",
                    "str",
                    "Optional[Mapping[str, str]]",
                    "typing.Mapping",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "vim-issues-master/rplugin/python3/providers/github/reviews.py": {
        "GithubReviews.get": {
            "name": "get",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vim-issues-master/rplugin/python3/providers/github/__init__.py": {},
    "vim-issues-master/rplugin/python3/providers/gitlab/reviews.py": {},
    "vim-issues-master/rplugin/python3/providers/gitlab/__init__.py": {}
}
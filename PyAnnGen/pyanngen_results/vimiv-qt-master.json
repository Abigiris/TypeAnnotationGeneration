{
    "vimiv-qt-master/fastentrypoints.py": {
        "get_args": {
            "name": "get_args",
            "location": 55,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "Exception",
                    "str"
                ],
                "dist": [
                    "str",
                    "bool"
                ],
                "header": [
                    "Mapping",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/setup.py": {
        "read_file": {
            "name": "read_file",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_from_init": {
            "name": "read_from_init",
            "location": 32,
            "return": [
                "bool",
                "int",
                "Tuple[\"ndarray\", \"ndarray\", \"ndarray\"]",
                "float"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 188,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "sphinx.application.Sphinx",
                    "Tuple[Callable, Callable]"
                ]
            }
        }
    },
    "vimiv-qt-master/scripts/lint_tests.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 16,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "get_all_python_files": {
            "name": "get_all_python_files",
            "location": 22,
            "return": [
                "list",
                "Optional[str]",
                "str",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "bytes"
                ]
            }
        },
        "run_pylint": {
            "name": "run_pylint",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "infiles": [
                    "str",
                    "Optional[List[str]]",
                    "bytes",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/scripts/maybe_build_cextension.py": {},
    "vimiv-qt-master/scripts/rstutils.py": {
        "RSTFile.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "RSTFile.__enter__": {
            "name": "__enter__",
            "location": 17,
            "return": [
                "RSTFile",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RSTFile.__exit__": {
            "name": "__exit__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "Optional[BaseException]"
                ],
                "_value": [
                    "Optional[BaseException]"
                ],
                "_traceback": [
                    "Optional[BaseException]"
                ]
            }
        },
        "RSTFile.write": {
            "name": "write",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RSTFile.write_section": {
            "name": "write_section",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "RSTFile.write_subsection": {
            "name": "write_subsection",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "RSTFile.write_subsubsection": {
            "name": "write_subsubsection",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "RSTFile.write_table": {
            "name": "write_table",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "title": [
                    "typing.Text",
                    "list",
                    "int",
                    "str",
                    "Optional[\"Node\"]"
                ],
                "widths": [
                    "typing.Text",
                    "list",
                    "int",
                    "str",
                    "Optional[\"Node\"]"
                ]
            }
        },
        "RSTFile._write_header": {
            "name": "_write_header",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/scripts/src2rst.py": {
        "generate_status_modules": {
            "name": "generate_status_modules",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_write_command_description": {
            "name": "_write_command_description",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cmds": [
                    "str",
                    "Type",
                    "Exception",
                    "int"
                ],
                "mode": [
                    "str",
                    "Union[str, int]"
                ],
                "f": [
                    "str",
                    "type",
                    "dict"
                ]
            }
        },
        "generate_commands": {
            "name": "generate_commands",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "generate_settings": {
            "name": "generate_settings",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "generate_keybindings": {
            "name": "generate_keybindings",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_gen_keybinding_rows": {
            "name": "_gen_keybinding_rows",
            "location": 87,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "bindings": [
                    "bool",
                    "str",
                    "type",
                    "Mapping"
                ]
            }
        },
        "generate_commandline_options": {
            "name": "generate_commandline_options",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_get_options": {
            "name": "_get_options",
            "location": 112,
            "return": [
                "tuple[typing.Union[dict[, typing.Text],list]]",
                "List[List[int]]",
                "str",
                "Callable"
            ],
            "arguments": {
                "argparser": [
                    "List[List[int]]",
                    "str",
                    "Callable"
                ]
            }
        },
        "_format_optional": {
            "name": "_format_optional",
            "location": 133,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "action": [
                    "str",
                    "bool",
                    "int"
                ],
                "titles": [
                    "list",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "Iterable[float]"
                ]
            }
        },
        "_format_positional": {
            "name": "_format_positional",
            "location": 149,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "action": [
                    "float",
                    "int",
                    "str"
                ],
                "titles": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "_format_option": {
            "name": "_format_option",
            "location": 164,
            "return": [
                "typing.Text",
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "title": [
                    "str",
                    "int",
                    "bytes"
                ],
                "desc": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "_format_optional_title": {
            "name": "_format_optional_title",
            "location": 174,
            "return": [
                "str",
                "list[typing.Text]"
            ],
            "arguments": {
                "action": [
                    "str",
                    "type"
                ]
            }
        },
        "generate_plugins": {
            "name": "generate_plugins",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "generate_plugins.get_plugin_description": {
            "name": "get_plugin_description",
            "location": 213,
            "return": [
                "str",
                "int",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Awaitable",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/scripts/vimiv_history.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "get_parser": {
            "name": "get_parser",
            "location": 31,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "read_history": {
            "name": "read_history",
            "location": 51,
            "return": [
                "bytes",
                "int",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/scripts/pylint_checkers/check_count.py": {
        "register": {
            "name": "register",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "linter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CountComparedWithoutNone.visit_if": {
            "name": "visit_if",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Callable[[None], bool]",
                    "str",
                    "Type",
                    "dict"
                ]
            }
        },
        "CountComparedWithoutNone.visit_ifexp": {
            "name": "visit_ifexp",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Callable[[None], bool]",
                    "str",
                    "Type",
                    "dict"
                ]
            }
        },
        "CountComparedWithoutNone._check_compare_count": {
            "name": "_check_compare_count",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str, Any]",
                    "astroid.node_classes.NodeNG"
                ]
            }
        },
        "CountAssignedToZero.visit_functiondef": {
            "name": "visit_functiondef",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Type]"
                ]
            }
        }
    },
    "vimiv-qt-master/scripts/pylint_checkers/check_docstring.py": {
        "register": {
            "name": "register",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "linter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CommandMissingDocumentation.visit_functiondef": {
            "name": "visit_functiondef",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CommandMissingDocumentation.sections": {
            "name": "sections",
            "location": 80,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "docstr": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CommandMissingDocumentation._check_syntax_section": {
            "name": "_check_syntax_section",
            "location": 92,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "argnames": [
                    "astroid.nodes",
                    "List[int]"
                ]
            }
        },
        "CommandMissingDocumentation._check_count_section": {
            "name": "_check_count_section",
            "location": 101,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "argnames": [
                    "astroid.nodes",
                    "List[int]"
                ]
            }
        },
        "CommandMissingDocumentation._check_args_section": {
            "name": "_check_args_section",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Tuple[str]",
                    "str"
                ],
                "argnames": [
                    "str",
                    "int"
                ]
            }
        },
        "CommandMissingDocumentation._is_command": {
            "name": "_is_command",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CommandMissingDocumentation._get_args_from_docstring": {
            "name": "_get_args_from_docstring",
            "location": 152,
            "return": [
                "set",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[int]",
                    "bool",
                    "astroid.nodes",
                    "list",
                    "int"
                ]
            }
        },
        "CommandMissingDocumentation._get_args_from_docstring._get_args": {
            "name": "_get_args",
            "location": 167,
            "return": [
                "set",
                "List[str]",
                "bool",
                "str",
                "Set[str]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "identifier": [
                    "str"
                ],
                "pattern": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/scripts/pylint_checkers/check_header.py": {
        "register": {
            "name": "register",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "linter": [
                    "int"
                ]
            }
        },
        "FileHeaderChecker.process_module": {
            "name": "process_module",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list",
                    "bytes",
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "List[str]"
                ]
            }
        }
    },
    "vimiv-qt-master/scripts/pylint_checkers/__init__.py": {},
    "vimiv-qt-master/tests/conftest.py": {
        "apply_platform_markers": {
            "name": "apply_platform_markers",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "item": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "apply_exif_markers": {
            "name": "apply_exif_markers",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "item": [
                    "str"
                ]
            }
        },
        "apply_markers_helper": {
            "name": "apply_markers_helper",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "item": [
                    "str"
                ],
                "markers": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "items": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "cleanup_helper": {
            "name": "cleanup_helper",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "mock_file_handler": {
            "name": "mock_file_handler",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "int",
                    "Tuple[float, float, float, float]",
                    "Exception",
                    "str"
                ]
            }
        },
        "datadir": {
            "name": "datadir",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "gif": {
            "name": "gif",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "datadir": [
                    "str",
                    "bytes"
                ]
            }
        },
        "svg": {
            "name": "svg",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "datadir": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_retrieve_file_from_web": {
            "name": "_retrieve_file_from_web",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "tmpdir": {
            "name": "tmpdir",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "piexif": {
            "name": "piexif",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Union[int, float, complex]"
                ]
            }
        },
        "noexif": {
            "name": "noexif",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Union[int, float, complex]"
                ],
                "piexif": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "add_exif_information": {
            "name": "add_exif_information",
            "location": 181,
            "return": [
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "cleanup_helper.cleanup": {
            "name": "cleanup",
            "location": 75,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "init_dict": [
                    "dict",
                    "Mapping[str, str]",
                    "T",
                    "Dict[str, List[Any]]",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "StubStream.stub": {
            "name": "stub",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevNullLogHandler.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "add_exif_information.add_exif_information_impl": {
            "name": "add_exif_information_impl",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "dict",
                    "Union[str, dict]",
                    "str",
                    "bytes",
                    "Optional[Container[str]]"
                ],
                "content": [
                    "dict",
                    "str",
                    "bytes",
                    "List[List[str]]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/conftest.py": {
        "ensureqtbot": {
            "name": "ensureqtbot",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "mock_directories": {
            "name": "mock_directories",
            "location": 35,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "home_directory": {
            "name": "home_directory",
            "location": 43,
            "return": [
                "str",
                "Iterable[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Optional['Directory']",
                    "Optional[str]"
                ],
                "mocker": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 57,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "cleanup_module": {
            "name": "cleanup_module",
            "location": 77,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "faster_wait_times": {
            "name": "faster_wait_times",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "start_vimiv": {
            "name": "start_vimiv",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "start_vimiv_with_args": {
            "name": "start_vimiv_with_args",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "args": []
            }
        },
        "run_vimiv_version": {
            "name": "run_vimiv_version",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "start_vimiv_log_level": {
            "name": "start_vimiv_log_level",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "List[str]"
                ],
                "level": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "start_directory_without_permission": {
            "name": "start_directory_without_permission",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "start_directory_with_n_paths": {
            "name": "start_directory_with_n_paths",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "n_children": [
                    "str"
                ]
            }
        },
        "start_directory_with_n_images": {
            "name": "start_directory_with_n_images",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "n_images": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "start_any_image": {
            "name": "start_any_image",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "start_any_image_of_size": {
            "name": "start_any_image_of_size",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "int"
                ],
                "size": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "start_n_images": {
            "name": "start_n_images",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Callable[[str], str]"
                ],
                "n_images": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        },
        "start_n_images_with_args": {
            "name": "start_n_images_with_args",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "List[str]",
                    "bool",
                    "str"
                ],
                "n_images": [
                    "List[str]",
                    "bool",
                    "str"
                ],
                "args": []
            }
        },
        "start_image_name": {
            "name": "start_image_name",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "start_animated_gif": {
            "name": "start_animated_gif",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "gif": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list"
                ]
            }
        },
        "start_vector_graphic": {
            "name": "start_vector_graphic",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "svg": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list"
                ]
            }
        },
        "capture_output": {
            "name": "capture_output",
            "location": 170,
            "return": [
                "Output",
                "str",
                "Optional[str]",
                "IO[str]",
                "List[int]"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "Tuple[int]",
                    "List[bytes]",
                    "Iterable[float]",
                    "int"
                ]
            }
        },
        "check_stdout": {
            "name": "check_stdout",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "output": [
                    "str",
                    "float"
                ],
                "text": [
                    "str",
                    "float"
                ]
            }
        },
        "check_stderr": {
            "name": "check_stderr",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "output": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "start_directory": {
            "name": "start_directory",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "n_children": [
                    "int",
                    "str",
                    "tuple",
                    "float"
                ],
                "n_images": [
                    "int",
                    "str",
                    "Union[str, BinaryIO]"
                ],
                "permission": [
                    "int",
                    "str",
                    "tuple",
                    "float"
                ],
                "args": [
                    "None"
                ]
            }
        },
        "start_image": {
            "name": "start_image",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "IO"
                ],
                "n_images": [
                    "int",
                    "str",
                    "IO"
                ],
                "size": [
                    "tuple[int]",
                    "str",
                    "IO"
                ],
                "args": [
                    "None"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "str"
                ]
            }
        },
        "create_n_images": {
            "name": "create_n_images",
            "location": 218,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "number": [
                    "int",
                    "bool",
                    "Tuple[int]",
                    "Optional[int]"
                ],
                "size": [
                    "tuple[int]",
                    "str",
                    "List[int]",
                    "Dict[str, str]",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "cmk.gui.availability.AVMode"
                ],
                "imgformat": [
                    "typing.Text",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_image": {
            "name": "create_image",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "home_directory.expand_user": {
            "name": "expand_user",
            "location": 49,
            "return": [
                "str",
                "List[int]",
                "list"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Output.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Output.out": {
            "name": "out",
            "location": 240,
            "return": [
                "None",
                "str",
                "Set[str]",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Output.err": {
            "name": "err",
            "location": 246,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Output._capture_output": {
            "name": "_capture_output",
            "location": 251,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/tests/end2end/mockdecorators.py": {
        "mockregister": {
            "name": "mockregister",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "component_init": [
                    "Callable",
                    "bool",
                    "dict",
                    "type"
                ]
            }
        },
        "mockregister_cleanup": {
            "name": "mockregister_cleanup",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "apply": {
            "name": "apply",
            "location": 34,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "mockregister.inside": {
            "name": "inside",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "component": [
                    "list"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/conftest.py": {
        "library": {
            "name": "library",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "thumbnail": {
            "name": "thumbnail",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "mainwindow": {
            "name": "mainwindow",
            "location": 46,
            "return": [
                "str",
                "bytes",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "commandline": {
            "name": "commandline",
            "location": 51,
            "return": [
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {}
        },
        "statusbar": {
            "name": "statusbar",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mainwindow": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "image": {
            "name": "image",
            "location": 61,
            "return": [
                "Iterable[float]",
                "float",
                "List[T]",
                "str",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "message_widget": {
            "name": "message_widget",
            "location": 66,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "mainwindow": [
                    "int",
                    "bool"
                ]
            }
        },
        "overlay": {
            "name": "overlay",
            "location": 71,
            "return": [
                "typing.Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "mainwindow": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "get_overlay": {
            "name": "get_overlay",
            "location": 75,
            "return": [
                "typ",
                "str",
                "bool"
            ],
            "arguments": {
                "mainwindow": [
                    "str",
                    "bool"
                ],
                "typ": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "counter": {
            "name": "counter",
            "location": 105,
            "return": [
                "Counter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "answer_prompt": {
            "name": "answer_prompt",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "qtbot": [
                    "bool",
                    "int",
                    "str"
                ],
                "mainwindow": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "keypress": {
            "name": "keypress",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "command": [
                    "List[str]",
                    "str"
                ],
                "qtbot": [
                    "int",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "key_press": {
            "name": "key_press",
            "location": 201,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "Mapping[str, Any]"
                ],
                "keypress": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "T",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ],
                "keys": [
                    "str",
                    "bool",
                    "Set[str]",
                    "dict",
                    "Callable"
                ]
            }
        },
        "enter_mode": {
            "name": "enter_mode",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "List[List[str]]",
                    "int",
                    "float"
                ]
            }
        },
        "leave_mode": {
            "name": "leave_mode",
            "location": 215,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "bool",
                    "BinaryIO"
                ]
            }
        },
        "resize_main_window": {
            "name": "resize_main_window",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mainwindow": [
                    "int",
                    "Tuple[int, int]",
                    "List[str]",
                    "float"
                ],
                "size": [
                    "int",
                    "list",
                    "Collection"
                ]
            }
        },
        "wait_for_working_directory_handler": {
            "name": "wait_for_working_directory_handler",
            "location": 227,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "focus_widget": {
            "name": "focus_widget",
            "location": 233,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Union[float, Sequence[float]]",
                    "pathlib.Path"
                ],
                "library": [
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "Union[float, Sequence[float]]",
                    "pathlib.Path"
                ],
                "widget_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "run_command_answering_prompt": {
            "name": "run_command_answering_prompt",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "answer_prompt": [
                    "str",
                    "Dict[Any, list]",
                    "bytes",
                    "int"
                ],
                "key": [
                    "str",
                    "Dict[Any, list]",
                    "bytes",
                    "int"
                ]
            }
        },
        "create_directory": {
            "name": "create_directory",
            "location": 251,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "create_file": {
            "name": "create_file",
            "location": 256,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "create_tag_file": {
            "name": "create_tag_file",
            "location": 263,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "no_crash": {
            "name": "no_crash",
            "location": 276,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Tuple[bytes]",
                    "float",
                    "bytes",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "check_status_text": {
            "name": "check_status_text",
            "location": 282,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "bool",
                    "str",
                    "Callable[..., None]"
                ],
                "statusbar": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "position": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "text": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "check_message": {
            "name": "check_message",
            "location": 293,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "message_widget": [
                    "int",
                    "Callable",
                    "str"
                ],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "check_any_message": {
            "name": "check_any_message",
            "location": 302,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "message_widget": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_no_message": {
            "name": "check_no_message",
            "location": 311,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "message_widget": [
                    "tuple",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "check_working_directory": {
            "name": "check_working_directory",
            "location": 320,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "basename": [
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "check_fullscreen": {
            "name": "check_fullscreen",
            "location": 325,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mainwindow": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_not_fullscreen": {
            "name": "check_not_fullscreen",
            "location": 330,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mainwindow": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_mode": {
            "name": "check_mode",
            "location": 335,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [
                    "str"
                ],
                "qtbot": [
                    "str",
                    "bool",
                    "Iterable",
                    "Optional[Any]",
                    "Optional[int]"
                ]
            }
        },
        "check_row_number": {
            "name": "check_row_number",
            "location": 341,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "library": [
                    "int",
                    "List[str]",
                    "Sequence[str]"
                ],
                "row": [
                    "int",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "check_image_index": {
            "name": "check_image_index",
            "location": 346,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "index": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "enter_thumbnail": {
            "name": "enter_thumbnail",
            "location": 351,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "thumbnail": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "check_selected_thumbnail": {
            "name": "check_selected_thumbnail",
            "location": 357,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "thumbnail": [
                    "[[]]",
                    "Set[int]",
                    "int",
                    "List[str]",
                    "List[int]",
                    "list",
                    "set",
                    "Optional[int]"
                ],
                "qtbot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "number": [
                    "[[]]",
                    "Set[int]",
                    "int",
                    "List[str]",
                    "List[int]",
                    "list",
                    "set",
                    "Optional[int]"
                ]
            }
        },
        "check_popup_displayed": {
            "name": "check_popup_displayed",
            "location": 362,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "title": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "check_filelist_length": {
            "name": "check_filelist_length",
            "location": 371,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_file_exists": {
            "name": "check_file_exists",
            "location": 378,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "check_not_file_exists": {
            "name": "check_not_file_exists",
            "location": 384,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "check_directory_exists": {
            "name": "check_directory_exists",
            "location": 389,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "check_not_directory_exists": {
            "name": "check_not_directory_exists",
            "location": 394,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "check_count": {
            "name": "check_count",
            "location": 399,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "counter": [
                    "int",
                    "Callable",
                    "str"
                ],
                "number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_commandline_text": {
            "name": "check_commandline_text",
            "location": 404,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "commandline": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "check_boolean_setting": {
            "name": "check_boolean_setting",
            "location": 409,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "list",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "float"
                ]
            }
        },
        "check_path_in_home": {
            "name": "check_path_in_home",
            "location": 415,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "home_directory": [
                    "IO[bytes]",
                    "pathlib.Path",
                    "str"
                ],
                "path": [
                    "IO[bytes]",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "Counter.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.count": {
            "name": "count",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "number": [
                    "int",
                    "Callable",
                    "str"
                ],
                "count": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "answer_prompt.get_prompt": {
            "name": "get_prompt",
            "location": 119,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "answer_prompt.function": {
            "name": "function",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "key": [
                    "int",
                    "str",
                    "bool",
                    "T",
                    "Dict[str, Any]"
                ]
            }
        },
        "keypress.get_modifier": {
            "name": "get_modifier",
            "location": 158,
            "return": [
                "tuple",
                "Optional[str]",
                "Dict[str, Type[Any]]",
                "bool",
                "List[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "keys": [
                    "str"
                ]
            }
        },
        "keypress.press_impl": {
            "name": "press_impl",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "widget": [
                    "dict",
                    "str",
                    "MutableMapping[str, Any]",
                    "bytes",
                    "Collection[str]"
                ],
                "keys": [
                    "str"
                ]
            }
        },
        "check_status_text.check_status": {
            "name": "check_status",
            "location": 285,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "check_message.check": {
            "name": "check",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_any_message.check": {
            "name": "check",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_no_message.check": {
            "name": "check",
            "location": 312,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "answer_prompt.function.click_prompt_key": {
            "name": "click_prompt_key",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run_command.external_finished": {
            "name": "external_finished",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/end2end/features/api/conftest.py": {
        "check_number_marked": {
            "name": "check_number_marked",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "n_marked": [
                    "str",
                    "int"
                ]
            }
        },
        "check_image_marked": {
            "name": "check_image_marked",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "check_image_not_marked": {
            "name": "check_image_not_marked",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/api/test_keybindings_bdd.py": {
        "cleanup_keybindings": {
            "name": "cleanup_keybindings",
            "location": 17,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "cleanup_helper": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "keybinding_exists": {
            "name": "keybinding_exists",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "binding": [
                    "str"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "keybinding_not_exists": {
            "name": "keybinding_not_exists",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "binding": [
                    "str"
                ],
                "mode": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/api/test_mark_bdd.py": {
        "remove_delete_permission": {
            "name": "remove_delete_permission",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "create_tag_with_permission": {
            "name": "create_tag_with_permission",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "Optional[str]",
                    "str",
                    "Callable[[Any], str]",
                    "Union[str, bytes]"
                ],
                "mode": [
                    "Sequence[str]",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "check_tag_file": {
            "name": "check_tag_file",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "n_paths": [
                    "str"
                ]
            }
        },
        "check_tag_file_not_exists": {
            "name": "check_tag_file_not_exists",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/api/test_modeswitch_bdd.py": {
        "toggle_mode": {
            "name": "toggle_mode",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "List[List[str]]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/api/test_print_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/api/test_prompt_bdd.py": {
        "answer_question": {
            "name": "answer_question",
            "location": 16,
            "return": [
                "str",
                "Type[T]"
            ],
            "arguments": {
                "answer_prompt": [
                    "str",
                    "bytes",
                    "Dict[Any, list]",
                    "int"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Dict[Any, list]",
                    "int"
                ]
            }
        },
        "check_prompt": {
            "name": "check_prompt",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "prompt_response": [
                    "dict",
                    "str",
                    "Dict[str, str]"
                ],
                "answer": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Optional[dict]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/api/test_rename_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/api/test_working_directory_bdd.py": {
        "check_monitored_directories": {
            "name": "check_monitored_directories",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "n_directories": [
                    "int",
                    "str"
                ]
            }
        },
        "check_monitored_files": {
            "name": "check_monitored_files",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "n_files": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/command/conftest.py": {
        "cleanup_aliases": {
            "name": "cleanup_aliases",
            "location": 13,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "cleanup_helper": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/command/test_aliases_bdd.py": {
        "check_alias_non_existent": {
            "name": "check_alias_non_existent",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/command/test_chaining_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/command/test_expand_wildcards_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/command/test_external_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/command/test_fail_run_command_bdd.py": {
        "run_empty_command": {
            "name": "run_empty_command",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/end2end/features/command/test_misccommands_bdd.py": {
        "starttime": {
            "name": "starttime",
            "location": 16,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "check_time_elapsed": {
            "name": "check_time_elapsed",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "starttime": [
                    "int",
                    "float",
                    "List[str]",
                    "bool"
                ],
                "duration": [
                    "float",
                    "int",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/command/test_repeat_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/command/test_search_bdd.py": {
        "search_results": {
            "name": "search_results",
            "location": 36,
            "return": [
                "SearchResults",
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "run_search": {
            "name": "run_search",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "run_search_reverse": {
            "name": "run_search_reverse",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "check_search_matches": {
            "name": "check_search_matches",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "search_results": [
                    "Deque",
                    "int",
                    "Dict[str, Any]"
                ],
                "n": [
                    "Deque",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "SearchResults.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResults._on_search": {
            "name": "_on_search",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_index": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[Optional['Cell']]"
                ],
                "results": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "_mode": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[Optional['Cell']]"
                ],
                "_incsearch": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[Optional['Cell']]"
                ]
            }
        },
        "SearchResults._on_search_cleared": {
            "name": "_on_search_cleared",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResults.__len__": {
            "name": "__len__",
            "location": 31,
            "return": [
                "int",
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/commandline/test_commandline_bdd.py": {
        "history": {
            "name": "history",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "commandline": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "run_help": {
            "name": "run_help",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "topic": [
                    "int",
                    "str"
                ]
            }
        },
        "populate_history": {
            "name": "populate_history",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "check_commandline_closed": {
            "name": "check_commandline_closed",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "check_help": {
            "name": "check_help",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "message_widget": [
                    "str",
                    "vimiv.api.commands._Command",
                    "dict"
                ],
                "topic": [
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "check_complete_history_empty": {
            "name": "check_complete_history_empty",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "check_mode_history_empty": {
            "name": "check_mode_history_empty",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history": [
                    "str",
                    "int"
                ],
                "modename": [
                    "str",
                    "int"
                ]
            }
        },
        "check_mode_history_not_empty": {
            "name": "check_mode_history_not_empty",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history": [
                    "str",
                    "int"
                ],
                "modename": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/completion/test_completion_bdd.py": {
        "completionwidget": {
            "name": "completionwidget",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "completiondata": {
            "name": "completiondata",
            "location": 25,
            "return": [
                "str",
                "int",
                "raiden.utils.Tuple[raiden.utils.Tuple[raiden.utils.TokenAddress, raiden.utils.ProportionalFeeAmount], ...]",
                "bool"
            ],
            "arguments": {
                "completionwidget": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_no_completion_selected": {
            "name": "check_no_completion_selected",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "completionwidget": [
                    "tuple",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "check_available_completion_text": {
            "name": "check_available_completion_text",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "completiondata": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "check_number_completion_suggestions": {
            "name": "check_number_completion_suggestions",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "completionwidget": [
                    "int",
                    "Callable",
                    "str"
                ],
                "number": [
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "check_selected_completion_row": {
            "name": "check_selected_completion_row",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "completionwidget": [
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "dict"
                ],
                "row": [
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "dict"
                ]
            }
        },
        "check_show_deletion_date": {
            "name": "check_show_deletion_date",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "completiondata": [
                    "List[Dict[str, Any]]",
                    "str",
                    "int",
                    "Callable",
                    "dict"
                ],
                "basename": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "django.utils.timezone.timedelta"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/config/test_configcommands_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/edit/conftest.py": {
        "ensure_size": {
            "name": "ensure_size",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "size": [
                    "str",
                    "list",
                    "List[Dict]",
                    "List[str]",
                    "Exception",
                    "dict"
                ],
                "image": [
                    "bool",
                    "int"
                ]
            }
        },
        "ensure_size_not": {
            "name": "ensure_size_not",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "size": [
                    "str",
                    "list",
                    "List[Dict]",
                    "List[str]",
                    "Exception",
                    "dict"
                ],
                "image": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/edit/test_manipulate_bdd.py": {
        "manipulator": {
            "name": "manipulator",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "manipulation": {
            "name": "manipulation",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "manipulator": [
                    "int",
                    "str"
                ]
            }
        },
        "apply_any_manipulation": {
            "name": "apply_any_manipulation",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manipulator": [
                    "str",
                    "int",
                    "bool"
                ],
                "qtbot": [
                    "Pattern",
                    "Iterable['cirq.Qid']",
                    "float"
                ]
            }
        },
        "check_current_manipulation_value": {
            "name": "check_current_manipulation_value",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manipulation": [
                    "float",
                    "Iterable[object]",
                    "str",
                    "Optional[Type[BaseException]]",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "value": [
                    "float",
                    "Iterable[object]",
                    "str",
                    "Optional[Type[BaseException]]",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "check_current_manipulation_name": {
            "name": "check_current_manipulation_name",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manipulation": [
                    "str",
                    "Union[str, None]"
                ],
                "name": [
                    "str",
                    "Union[str, None]"
                ]
            }
        },
        "check_stored_changes": {
            "name": "check_stored_changes",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manipulator": [
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "n_changes": [
                    "int",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/edit/test_straighten_bdd.py": {
        "find_straighten_widgets": {
            "name": "find_straighten_widgets",
            "location": 16,
            "return": [
                "str",
                "Type[T]"
            ],
            "arguments": {
                "image": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[Callable]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "straighten": {
            "name": "straighten",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "image": [
                    "str",
                    "Dict[str, Any]",
                    "List[Callable]",
                    "Dict[str, List[Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "straighten_by": {
            "name": "straighten_by",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "straighten": [
                    "int",
                    "bool",
                    "AsyncGenerator",
                    "Coroutine",
                    "Pattern"
                ],
                "angle": [
                    "int",
                    "bool",
                    "AsyncGenerator",
                    "Coroutine",
                    "Pattern"
                ]
            }
        },
        "press_key_straighten": {
            "name": "press_key_straighten",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keypress": [
                    "str",
                    "int"
                ],
                "straighten": [
                    "str",
                    "int"
                ],
                "keys": [
                    "str",
                    "int"
                ]
            }
        },
        "check_number_of_straighten_widgets": {
            "name": "check_number_of_straighten_widgets",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "bool"
                ],
                "image": [
                    "int",
                    "bool"
                ],
                "number": [
                    "int",
                    "bool"
                ]
            }
        },
        "check_straighten_angle": {
            "name": "check_straighten_angle",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "straighten": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "angle": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "straighten_by.check": {
            "name": "check",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_number_of_straighten_widgets.check": {
            "name": "check",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_straighten_angle.check": {
            "name": "check",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/end2end/features/edit/test_transform_bdd.py": {
        "ensure_orientation": {
            "name": "ensure_orientation",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "Tuple[int, int]",
                    "int"
                ],
                "orientation": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/image/conftest.py": {
        "exif_content": {
            "name": "exif_content",
            "location": 19,
            "return": [
                "dict[typing.Text, typing.Union[dict[, bytes],dict[, tuple[int]]]]",
                "str",
                "tuple",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 32,
            "return": [
                "str",
                "Callable",
                "bytes",
                "int",
                "Set[str]"
            ],
            "arguments": {}
        },
        "add_exif_information_bdd": {
            "name": "add_exif_information_bdd",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "add_exif_information": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "int"
                ],
                "handler": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "int"
                ],
                "exif_content": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/image/test_gif_bdd.py": {
        "movie": {
            "name": "movie",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "image": [
                    "IO",
                    "Iterator[T]",
                    "Iterator",
                    "str"
                ]
            }
        },
        "check_animation_playing": {
            "name": "check_animation_playing",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "movie": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_animation_paused": {
            "name": "check_animation_paused",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "movie": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/image/test_imagedelete_bdd.py": {
        "remove_move_permissions": {
            "name": "remove_move_permissions",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Type[T]",
                    "Dict[str, Any]",
                    "Container[str]",
                    "int",
                    "bool",
                    "Union[List, Dict]"
                ]
            }
        },
        "check_image_not_in_filelist": {
            "name": "check_image_not_in_filelist",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "basename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "check_image_widget_empty": {
            "name": "check_image_widget_empty",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "Dict[bytes, bytes]",
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]",
                    "dict",
                    "Sequence"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/image/test_imagefit_bdd.py": {
        "almost_equal": {
            "name": "almost_equal",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "size": [
                    "bytes",
                    "int",
                    "Callable",
                    "bool"
                ],
                "expected": [
                    "bytes",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "check_pixmap_width": {
            "name": "check_pixmap_width",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "int"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "check_pixmap_height": {
            "name": "check_pixmap_height",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "check_pixmap_width_fit": {
            "name": "check_pixmap_width_fit",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "float",
                    "int"
                ]
            }
        },
        "check_pixmap_height_fit": {
            "name": "check_pixmap_height_fit",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "int",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "check_pixmap_width_no_fit": {
            "name": "check_pixmap_width_no_fit",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "bytes"
                ]
            }
        },
        "check_pixmap_height_no_fit": {
            "name": "check_pixmap_height_no_fit",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/image/test_imagenavigate_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/image/test_imageopen_bdd.py": {
        "open_broken_images": {
            "name": "open_broken_images",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "_open_file": {
            "name": "_open_file",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Tuple[str, dict]"
                ],
                "data": [
                    "bytes",
                    "dict",
                    "Dict[str, dict]",
                    "Union[Callable, None]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/image/test_imagescroll_bdd.py": {
        "resize_image": {
            "name": "resize_image",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "check_image_coordinate": {
            "name": "check_image_coordinate",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "Union[str, IO[bytes]]",
                    "str",
                    "float",
                    "Optional[str]",
                    "int"
                ],
                "position": [
                    "dict",
                    "Mapping[Any, Any]",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Optional[float]",
                    "str"
                ],
                "value": [
                    "dict",
                    "Mapping[Any, Any]",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "position_to_value": {
            "name": "position_to_value",
            "location": 26,
            "return": [
                "int",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "position": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "rect": [
                    "list",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/image/test_imagetitle_bdd.py": {
        "image_name_in_title": {
            "name": "image_name_in_title",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mainwindow": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/image/test_imagezoom_bdd.py": {
        "check_zoom_level": {
            "name": "check_zoom_level",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "int"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "check_zoom_level_not": {
            "name": "check_zoom_level_not",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "image": [
                    "int"
                ],
                "level": [
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/image/test_metadata_bdd.py": {
        "metadata": {
            "name": "metadata",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "check_metadata_widget_visible": {
            "name": "check_metadata_widget_visible",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "metadata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_metadata_widget_not_visible": {
            "name": "check_metadata_widget_not_visible",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "metadata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_text_in_metadata": {
            "name": "check_text_in_metadata",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ],
                "text": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "check_text_not_in_metadata": {
            "name": "check_text_not_in_metadata",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ],
                "text": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/image/test_slideshow_bdd.py": {
        "sshow": {
            "name": "sshow",
            "location": 18,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "set_slideshow_delay": {
            "name": "set_slideshow_delay",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sshow": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "float"
                ],
                "delay": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "float"
                ]
            }
        },
        "check_slideshow_playing": {
            "name": "check_slideshow_playing",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sshow": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_slideshow_not_playing": {
            "name": "check_slideshow_not_playing",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sshow": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_slideshow_delay": {
            "name": "check_slideshow_delay",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sshow": [
                    "int",
                    "Callable",
                    "str"
                ],
                "delay": [
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "BaseException"
                ]
            }
        },
        "wait_slideshow_signal": {
            "name": "wait_slideshow_signal",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "str",
                    "float"
                ],
                "sshow": [
                    "int",
                    "str",
                    "float"
                ],
                "repeat": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/image/test_svg_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/image/test_write_bdd.py": {
        "write_image": {
            "name": "write_image",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": [
                    "str",
                    "Tuple[int, int]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "check_exif_information": {
            "name": "check_exif_information",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "exif_content": [
                    "str",
                    "Optional[str]",
                    "Union[str, Dict[str, Any]]",
                    "dict"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/library/test_libraryresize_bdd.py": {
        "check_library_size": {
            "name": "check_library_size",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "library": [
                    "int",
                    "Iterator",
                    "Optional[float]",
                    "Optional[int]",
                    "bytes"
                ],
                "mainwindow": [
                    "float",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "fraction": [
                    "float",
                    "Callable[[], None]",
                    "bool",
                    "bytes"
                ],
                "qtbot": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/library/test_libraryscroll_bdd.py": {
        "check_library_page": {
            "name": "check_library_page",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "library": [
                    "tuple",
                    "django.utils.timezone.datetime",
                    "Union[str, int]"
                ],
                "num": [
                    "int",
                    "float"
                ],
                "direction": [
                    "bool",
                    "int",
                    "Iterable[T]",
                    "Sequence[str]",
                    "float"
                ]
            }
        },
        "_get_pagesize": {
            "name": "_get_pagesize",
            "location": 30,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "library": [
                    "int",
                    "float",
                    "List[Tuple[int, bytes]]",
                    "Union[int, str]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/library/test_library_bdd.py": {
        "reload_library": {
            "name": "reload_library",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "library": [
                    "Optional[int]",
                    "Callable",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "check_library_paths": {
            "name": "check_library_paths",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "library": [
                    "str",
                    "list",
                    "bool",
                    "Iterable[str]"
                ],
                "n_paths": [
                    "str",
                    "list",
                    "bool",
                    "Iterable[str]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/misc/conftest.py": {
        "clipboard": {
            "name": "clipboard",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "check_clipboard": {
            "name": "check_clipboard",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clipboard": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "check_primary": {
            "name": "check_primary",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clipboard": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "check_clipboard_image": {
            "name": "check_clipboard_image",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clipboard": [
                    "int"
                ],
                "image": [
                    "int",
                    "str"
                ]
            }
        },
        "check_primary_image": {
            "name": "check_primary_image",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clipboard": [
                    "int"
                ],
                "image": [
                    "str",
                    "int"
                ]
            }
        },
        "check_clipboard_image_width": {
            "name": "check_clipboard_image_width",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clipboard": [
                    "int",
                    "bool",
                    "str"
                ],
                "width": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "check_clipboard_image_height": {
            "name": "check_clipboard_image_height",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clipboard": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "check_clipboard_image_size": {
            "name": "check_clipboard_image_size",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clipboard": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "size": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/misc/test_clipboard_bdd.py": {
        "check_clipboard_abspath": {
            "name": "check_clipboard_abspath",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clipboard": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/misc/test_fullscreen_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/misc/test_keybindings_popup_bdd.py": {
        "keybindings_popup": {
            "name": "keybindings_popup",
            "location": 17,
            "return": [
                "vimiv_@_gui_@_keybindings_popup_@_KeybindingsPopUp",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mainwindow": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "press_keys_popup": {
            "name": "press_keys_popup",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keypress": [
                    "str",
                    "int",
                    "Pattern[str]",
                    "bytes"
                ],
                "keybindings_popup": [
                    "str",
                    "int",
                    "Pattern[str]",
                    "bytes"
                ],
                "keys": [
                    "str",
                    "int",
                    "Pattern[str]",
                    "bytes"
                ]
            }
        },
        "check_keybindings_popup_text": {
            "name": "check_keybindings_popup_text",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keybindings_popup": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "text": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "check_keybindings_popup_description": {
            "name": "check_keybindings_popup_description",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keybindings_popup": [
                    "int"
                ],
                "command": [
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "check_keybindings_popup_description_empty": {
            "name": "check_keybindings_popup_description_empty",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keybindings_popup": [
                    "int"
                ]
            }
        },
        "check_keybindings_popup_highlighting": {
            "name": "check_keybindings_popup_highlighting",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keybindings_popup": [
                    "str",
                    "Optional[str]"
                ],
                "search": [
                    "str",
                    "dict"
                ],
                "command": [
                    "str",
                    "dict",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/misc/test_keyhint_bdd.py": {
        "keyhint": {
            "name": "keyhint",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "overlay": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "update_keyhint": {
            "name": "update_keyhint",
            "location": 24,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "wait_for_keyhint_widget": {
            "name": "wait_for_keyhint_widget",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keyhint": [
                    "int",
                    "bool",
                    "bytes",
                    "str"
                ],
                "qtbot": [
                    "int",
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "wait_for_keyhint_widget_timeout": {
            "name": "wait_for_keyhint_widget_timeout",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": []
            }
        },
        "keyhint_widget_visible": {
            "name": "keyhint_widget_visible",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keyhint": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "keyhint_widget_not_visible": {
            "name": "keyhint_widget_not_visible",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keyhint": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "keyhint_widget_not_appeared": {
            "name": "keyhint_widget_not_appeared",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keyhint": [
                    "Iterable[Any]",
                    "bytes",
                    "str"
                ],
                "qtbot": [
                    "int",
                    "float"
                ]
            }
        },
        "keyhint_widget_contains": {
            "name": "keyhint_widget_contains",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keyhint": [
                    "str"
                ],
                "command": [
                    "str"
                ]
            }
        },
        "keyhint_widget_above_bar": {
            "name": "keyhint_widget_above_bar",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keyhint": [
                    "str",
                    "int",
                    "Callable"
                ],
                "statusbar": [
                    "Callable[[int], None]",
                    "Sequence[T]",
                    "float",
                    "str"
                ]
            }
        },
        "keyhint_widget_bottom": {
            "name": "keyhint_widget_bottom",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keyhint": [
                    "str",
                    "int",
                    "Callable"
                ],
                "mainwindow": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/misc/test_migration_popup_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/misc/test_no_optional_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/misc/test_startup_bdd.py": {
        "patch_stdin": {
            "name": "patch_stdin",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "int"
                ],
                "tmp_path": [
                    "str",
                    "TextIO",
                    "List[str]",
                    "bool",
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "n_images": [
                    "str",
                    "TextIO",
                    "List[str]",
                    "bool",
                    "Sequence[str]",
                    "Optional[int]"
                ]
            }
        },
        "check_version_information": {
            "name": "check_version_information",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "output": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "check_log_level": {
            "name": "check_log_level",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "level": [
                    "str",
                    "raiden.utils.Address",
                    "Optional[str]",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/misc/test_symlink_bdd.py": {
        "open_symlink_test_directory": {
            "name": "open_symlink_test_directory",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "open_symlink_image_test_directory": {
            "name": "open_symlink_image_test_directory",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/misc/test_teardown_bdd.py": {
        "quit_application": {
            "name": "quit_application",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qapp": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/misc/test_version_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/plugins/test_plugins_bdd.py": {
        "load_plugin": {
            "name": "load_plugin",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Union[str, List[str]]",
                    "Optional[str]"
                ],
                "info": [
                    "str",
                    "Union[str, List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "check_format_supported": {
            "name": "check_format_supported",
            "location": 24,
            "return": [
                "None",
                "int",
                "Union[tuple, list]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/statusbar/test_message_bdd.py": {
        "log_warning": {
            "name": "log_warning",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "float"
                ],
                "qtbot": [
                    "Callable",
                    "str"
                ]
            }
        },
        "clear_status": {
            "name": "clear_status",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/end2end/features/statusbar/test_status_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/thumbnail/conftest.py": {
        "check_thumbnail_amount": {
            "name": "check_thumbnail_amount",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "thumbnail": [
                    "int",
                    "float"
                ],
                "number": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/thumbnail/test_thumbnailgoto_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/thumbnail/test_thumbnailmark_bdd.py": {
        "check_thumbnail_marked": {
            "name": "check_thumbnail_marked",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "thumbnail": [
                    "dict",
                    "Iterable[T]",
                    "int",
                    "Callable[[T], bool]"
                ],
                "number": [
                    "dict",
                    "Iterable[T]",
                    "int",
                    "Callable[[T], bool]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/end2end/features/thumbnail/test_thumbnailscroll_bdd.py": {},
    "vimiv-qt-master/tests/end2end/features/thumbnail/test_thumbnailzoom_bdd.py": {
        "check_thumbnail_size": {
            "name": "check_thumbnail_size",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "thumbnail": [
                    "int",
                    "float"
                ],
                "size": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/integration/conftest.py": {
        "custom_configparser": {
            "name": "custom_configparser",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "custom_configfile": {
            "name": "custom_configfile",
            "location": 27,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Optional['Directory']",
                    "Optional[str]"
                ],
                "custom_configparser": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        },
        "custom_configparser.create_custom_parser": {
            "name": "create_custom_parser",
            "location": 16,
            "return": [],
            "arguments": {
                "default_parser": [
                    "str"
                ]
            }
        },
        "custom_configfile.create_custom_configfile": {
            "name": "create_custom_configfile",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "basename": [
                    "List[str]",
                    "Callable"
                ],
                "read": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]"
                ],
                "default_parser": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/integration/test_app.py": {
        "test_load_icon": {
            "name": "test_load_icon",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": []
            }
        },
        "test_wait_for_running_processes": {
            "name": "test_wait_for_running_processes",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Callable",
                    "Type",
                    "Tuple[float, float, float, float, float]"
                ]
            }
        },
        "test_wait_for_running_processes.process": {
            "name": "process",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/integration/test_edit.py": {
        "edit": {
            "name": "edit",
            "location": 23,
            "return": [
                "",
                "typing.Generator[EditHandler]"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "baseplate.lib.config.EndpointConfiguration",
                    "bytes"
                ],
                "qtbot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "transform": {
            "name": "transform",
            "location": 35,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "edit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "manipulate": {
            "name": "manipulate",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "edit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "current_color": {
            "name": "current_color",
            "location": 45,
            "return": [
                "QColor",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "pixmap": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_transform_applied": {
            "name": "test_transform_applied",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "edit": [
                    "int",
                    "float",
                    "List[int]",
                    "bool"
                ],
                "transform": [
                    "str",
                    "float"
                ]
            }
        },
        "test_manipulate_applied": {
            "name": "test_manipulate_applied",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "edit": [
                    "str",
                    "float"
                ],
                "manipulate": [
                    "str",
                    "float"
                ]
            }
        },
        "test_manipulate_and_transform_iteratively": {
            "name": "test_manipulate_and_transform_iteratively",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "edit": [
                    "int"
                ],
                "transform": [],
                "manipulate": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/integration/test_read_bindings.py": {
        "reset_to_default": {
            "name": "reset_to_default",
            "location": 30,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "cleanup_helper": [
                    "str",
                    "dict"
                ]
            }
        },
        "keyspath": {
            "name": "keyspath",
            "location": 37,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "custom_configfile": [
                    "str"
                ],
                "request": [
                    "str"
                ]
            }
        },
        "bind_j": {
            "name": "bind_j",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_read_bindings": {
            "name": "test_read_bindings",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keyspath": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_delete_binding": {
            "name": "test_delete_binding",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "bind_j": [
                    "str"
                ],
                "keyspath": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/integration/test_read_settings.py": {
        "reset_to_default": {
            "name": "reset_to_default",
            "location": 57,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "cleanup_helper": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "configpath": {
            "name": "configpath",
            "location": 64,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "custom_configfile": [
                    "str"
                ],
                "request": [
                    "str"
                ]
            }
        },
        "mock_strsetting": {
            "name": "mock_strsetting",
            "location": 71,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "mocker": [
                    "solo.config.app.Config"
                ]
            }
        },
        "mock_logger": {
            "name": "mock_logger",
            "location": 76,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Hashable",
                    "float",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_read_config": {
            "name": "test_read_config",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configpath": [
                    "str"
                ]
            }
        },
        "test_read_aliases": {
            "name": "test_read_aliases",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configpath": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_read_exif_key_sets": {
            "name": "test_read_exif_key_sets",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configpath": [
                    "str"
                ]
            }
        },
        "test_read_statusbar_formatters": {
            "name": "test_read_statusbar_formatters",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_strsetting": [
                    "meeshkan.core.api.Api"
                ],
                "configpath": []
            }
        },
        "test_read_invalid_setting": {
            "name": "test_read_invalid_setting",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_logger": [],
                "configpath": []
            }
        }
    },
    "vimiv-qt-master/tests/integration/__init__.py": {},
    "vimiv-qt-master/tests/unit/test_checkversion.py": {
        "test_check_python_version": {
            "name": "test_check_python_version",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "monkeypatch": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "version_info": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_check_pyqt_version": {
            "name": "test_check_pyqt_version",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "monkeypatch": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "version_info": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_check_pyqt_available": {
            "name": "test_check_pyqt_available",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "float"
                ],
                "monkeypatch": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "build_message": {
            "name": "build_message",
            "location": 56,
            "return": [
                "typing.Text",
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "software": [
                    "str",
                    "Set[str]",
                    "Optional[int]",
                    "Pattern"
                ],
                "required": [
                    "str",
                    "Set[str]",
                    "Optional[int]",
                    "Pattern"
                ],
                "version": [
                    "str",
                    "Set[str]",
                    "Optional[int]",
                    "Pattern"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/test_parser.py": {
        "argparser": {
            "name": "argparser",
            "location": 21,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "test_parser_prog_name": {
            "name": "test_parser_prog_name",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "argparser": [
                    "str"
                ]
            }
        },
        "test_parser_description": {
            "name": "test_parser_description",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "argparser": [
                    "str",
                    "Dict[str, float]",
                    "int"
                ]
            }
        },
        "test_geometry": {
            "name": "test_geometry",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_fail_geometry": {
            "name": "test_fail_geometry",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_existing_file": {
            "name": "test_existing_file",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fail_existing_file": {
            "name": "test_fail_existing_file",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_existing_path": {
            "name": "test_existing_path",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fail_existing_path": {
            "name": "test_fail_existing_path",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_log_level": {
            "name": "test_log_level",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_fail_log_level": {
            "name": "test_fail_log_level",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_parse_settings": {
            "name": "test_parse_settings",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "argparser": [
                    "str"
                ]
            }
        },
        "test_parse_qt_args": {
            "name": "test_parse_qt_args",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "argparser": [
                    "argparse.Namespace",
                    "str",
                    "List[str]"
                ],
                "qtargs": [
                    "str",
                    "List[str]"
                ],
                "expected": [
                    "bool",
                    "List[str]",
                    "float"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/test_version.py": {
        "no_svg_support": {
            "name": "no_svg_support",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Tuple[str]"
                ]
            }
        },
        "test_svg_support_info": {
            "name": "test_svg_support_info",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_svg_support_info": {
            "name": "test_no_svg_support_info",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "no_svg_support": [
                    "str",
                    "List[str]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_pyexiv2_info": {
            "name": "test_pyexiv2_info",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_piexif_info": {
            "name": "test_piexif_info",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_exif_support_info": {
            "name": "test_no_exif_support_info",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "noexif": []
            }
        }
    },
    "vimiv-qt-master/tests/unit/__init__.py": {},
    "vimiv-qt-master/tests/unit/api/test_keybindings.py": {
        "reset_to_default": {
            "name": "reset_to_default",
            "location": 15,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "cleanup_helper": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_add_keybindings": {
            "name": "test_add_keybindings",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "binding": [
                    "bool",
                    "Optional[Union[bool, Any]]",
                    "str",
                    "int"
                ],
                "command": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "str"
                ]
            }
        },
        "test_bind_unbind_keybinding": {
            "name": "test_bind_unbind_keybinding",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_partial_matches": {
            "name": "test_partial_matches",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_partial_matches_with_special_keys": {
            "name": "test_partial_matches_with_special_keys",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_partial_matches_with_multiple_special_keys": {
            "name": "test_partial_matches_with_multiple_special_keys",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_add_keybindings.test": {
            "name": "test",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/api/test_mark.py": {
        "mark": {
            "name": "mark",
            "location": 20,
            "return": [
                "",
                "typing.Generator[Mark]"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "mocker": [
                    "int"
                ],
                "monkeypatch": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "tagdir": {
            "name": "tagdir",
            "location": 31,
            "return": [
                "",
                "typing.Generator[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "mocker": [
                    "List[str]",
                    "str",
                    "list",
                    "set",
                    "os.PathLike"
                ]
            }
        },
        "tagwrite": {
            "name": "tagwrite",
            "location": 39,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "tagdir": [
                    "str",
                    "int"
                ]
            }
        },
        "test_mark_single_image": {
            "name": "test_mark_single_image",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mark": [
                    "str"
                ]
            }
        },
        "test_mark_multiple_images": {
            "name": "test_mark_multiple_images",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mark": [
                    "bool"
                ]
            }
        },
        "test_mark_action_toggle": {
            "name": "test_mark_action_toggle",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mark": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_mark_action_mark": {
            "name": "test_mark_action_mark",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mark": [
                    "bob_emploi.frontend.api.project_pb2.Project",
                    "Container",
                    "tuple",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_mark_action_unmark": {
            "name": "test_mark_action_unmark",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mark": [
                    "tuple",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_mark_clear": {
            "name": "test_mark_clear",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mark": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_mark_restore": {
            "name": "test_mark_restore",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mark": [
                    "str"
                ]
            }
        },
        "test_tag_write": {
            "name": "test_tag_write",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tagwrite": [
                    "str"
                ]
            }
        },
        "test_tag_write_header": {
            "name": "test_tag_write_header",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tagwrite": [
                    "str"
                ]
            }
        },
        "test_tag_write_paths": {
            "name": "test_tag_write_paths",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tagwrite": [
                    "str"
                ]
            }
        },
        "test_tag_write_append_paths": {
            "name": "test_tag_write_append_paths",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tagwrite": []
            }
        },
        "test_tag_read": {
            "name": "test_tag_read",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tagwrite": []
            }
        },
        "test_tag_delete": {
            "name": "test_tag_delete",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mark": [
                    "bool"
                ],
                "parts": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/api/test_objreg.py": {
        "multiply_by_two": {
            "name": "multiply_by_two",
            "location": 28,
            "return": [
                "",
                "typing.Generator[Multiplier]"
            ],
            "arguments": {}
        },
        "test_call_with_instance": {
            "name": "test_call_with_instance",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "multiply_by_two": [
                    "str"
                ]
            }
        },
        "test_call_without_instance": {
            "name": "test_call_without_instance",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "Multiplier.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Multiplier.multiply_by": {
            "name": "multiply_by",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_call_without_instance.func": {
            "name": "func",
            "location": 42,
            "return": [
                "Tuple[str, int]",
                "Optional[str]",
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "argument": [
                    "Optional[str]",
                    "Optional[Callable]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/api/test_prompt.py": {
        "test_ask_question": {
            "name": "test_ask_question",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "answer": [
                    "dict"
                ]
            }
        },
        "QuestionAnswerer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionAnswerer.answer_question": {
            "name": "answer_question",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Callable[[T], bool]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/api/test_settings.py": {
        "prompt_setting": {
            "name": "prompt_setting",
            "location": 15,
            "return": [
                "",
                "typing.Generator[PromptSetting]"
            ],
            "arguments": {}
        },
        "test_init_setting": {
            "name": "test_init_setting",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_check_default_after_change_for_setting": {
            "name": "test_check_default_after_change_for_setting",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_set_bool_setting": {
            "name": "test_set_bool_setting",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        },
        "test_toggle_bool_setting": {
            "name": "test_toggle_bool_setting",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_set_int_setting": {
            "name": "test_set_int_setting",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "test_add_int_setting": {
            "name": "test_add_int_setting",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiply_int_setting": {
            "name": "test_multiply_int_setting",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_set_float_setting": {
            "name": "test_set_float_setting",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "test_add_float_setting": {
            "name": "test_add_float_setting",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multiply_float_setting": {
            "name": "test_multiply_float_setting",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_set_thumbnail_setting": {
            "name": "test_set_thumbnail_setting",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "test_fail_set_thumbnail_setting_non_int": {
            "name": "test_fail_set_thumbnail_setting_non_int",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_fail_set_thumbnail_setting_wrong_int": {
            "name": "test_fail_set_thumbnail_setting_wrong_int",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_step_thumbnail_size": {
            "name": "test_step_thumbnail_size",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "start": [
                    "str",
                    "List[str]",
                    "Tuple[float, float, float, float]"
                ],
                "up": [
                    "int",
                    "float",
                    "bool"
                ],
                "expected": [
                    "int",
                    "float",
                    "tuple"
                ]
            }
        },
        "test_set_str_setting": {
            "name": "test_set_str_setting",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_fail_get_unstored_setting": {
            "name": "test_fail_get_unstored_setting",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_set_prompt_setting": {
            "name": "test_set_prompt_setting",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "prompt_setting": [
                    "Callable",
                    "dict",
                    "List[str]",
                    "Iterable[Hashable]",
                    "Hashable"
                ],
                "value": [
                    "Callable",
                    "dict",
                    "List[str]",
                    "Iterable[Hashable]",
                    "Hashable"
                ],
                "expected": [
                    "Callable",
                    "dict"
                ]
            }
        },
        "test_ask_prompt_setting": {
            "name": "test_ask_prompt_setting",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [],
                "prompt_setting": [
                    "str",
                    "int"
                ],
                "answer": [
                    "str",
                    "int"
                ]
            }
        },
        "test_ask_prompt_setting.ask_question": {
            "name": "ask_question",
            "location": 148,
            "return": [
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/api/test_status.py": {
        "dummy_module": {
            "name": "dummy_module",
            "location": 15,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "test_evaluate_status_module": {
            "name": "test_evaluate_status_module",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dummy_module": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_fail_add_status_module": {
            "name": "test_fail_add_status_module",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_evaluate_unknown_module": {
            "name": "test_evaluate_unknown_module",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "dummy_module.dummy_method": {
            "name": "dummy_method",
            "location": 21,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "test_fail_add_status_module.wrong": {
            "name": "wrong",
            "location": 38,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/commands/test_aliases.py": {
        "alias": {
            "name": "alias",
            "location": 24,
            "return": [
                "",
                "typing.Generator[AliasDefinition]"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_add_global_alias": {
            "name": "test_add_global_alias",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "alias": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_add_local_alias": {
            "name": "test_add_local_alias",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "alias": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_fail_add_alias_no_list": {
            "name": "test_fail_add_alias_no_list",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_fail_mode_not_as_str": {
            "name": "test_fail_mode_not_as_str",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/commands/test_argtypes.py": {
        "test_scroll_direction": {
            "name": "test_scroll_direction",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_scroll_direction": {
            "name": "test_fail_scroll_direction",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zoom": {
            "name": "test_zoom",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_zoom": {
            "name": "test_fail_zoom",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_image_scale_text": {
            "name": "test_image_scale_text",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_image_scale_float": {
            "name": "test_image_scale_float",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_history_direction": {
            "name": "test_command_history_direction",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_command_history_direction": {
            "name": "test_fail_command_history_direction",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/commands/test_commands.py": {
        "test_number_for_command": {
            "name": "test_number_for_command",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str",
                    "bool"
                ],
                "count": [
                    "int",
                    "str",
                    "bool"
                ],
                "max_count": [
                    "int",
                    "str",
                    "bool"
                ],
                "expected": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_fail_number_for_command": {
            "name": "test_fail_number_for_command",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/commands/test_history.py": {
        "mode_based_history_file": {
            "name": "mode_based_history_file",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Tuple[str, str]"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "legacy_history_file": {
            "name": "legacy_history_file",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "history": {
            "name": "history",
            "location": 46,
            "return": [
                "",
                "typing.Generator[History]"
            ],
            "arguments": {}
        },
        "test_read_history": {
            "name": "test_read_history",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode_based_history_file": [
                    "bool",
                    "str"
                ],
                "history": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "List[cmk.base.api.agent_based.type_defs.CheckPlugin]"
                ]
            }
        },
        "test_write_history": {
            "name": "test_write_history",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode_based_history_file": [
                    "bool",
                    "str"
                ],
                "history": [
                    "str",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "test_migrate_history": {
            "name": "test_migrate_history",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "legacy_history_file": [],
                "history": [
                    "Callable"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/commands/test_history_deque.py": {
        "history_deque": {
            "name": "history_deque",
            "location": 22,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "cycle_history_deque": {
            "name": "cycle_history_deque",
            "location": 27,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "substr_history_deque": {
            "name": "substr_history_deque",
            "location": 32,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "mixed_history_deque": {
            "name": "mixed_history_deque",
            "location": 37,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "test_update_history_deque": {
            "name": "test_update_history_deque",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history_deque": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_fail_update_history_invalid_prefix": {
            "name": "test_fail_update_history_invalid_prefix",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history_deque": [
                    "Tuple[int, int]"
                ]
            }
        },
        "test_fail_update_history_empty_command": {
            "name": "test_fail_update_history_empty_command",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history_deque": [
                    "Tuple[int, int]"
                ]
            }
        },
        "test_update_history_with_duplicates": {
            "name": "test_update_history_with_duplicates",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history_deque": [
                    "int"
                ]
            }
        },
        "test_never_exceed_history_max_elements": {
            "name": "test_never_exceed_history_max_elements",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history_deque": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_do_not_fail_cycle_on_empty_history": {
            "name": "test_do_not_fail_cycle_on_empty_history",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history_deque": [
                    "Callable"
                ]
            }
        },
        "test_do_not_store_temporary_history_element": {
            "name": "test_do_not_store_temporary_history_element",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history_deque": [
                    "dict"
                ]
            }
        },
        "test_cycle_through_history": {
            "name": "test_cycle_through_history",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cycle_history_deque": []
            }
        },
        "test_cycle_reverse_through_history": {
            "name": "test_cycle_reverse_through_history",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cycle_history_deque": []
            }
        },
        "test_substr_search_history": {
            "name": "test_substr_search_history",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "substr_history_deque": [
                    "str",
                    "float"
                ]
            }
        },
        "test_do_not_mix_prefixes": {
            "name": "test_do_not_mix_prefixes",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mixed_history_deque": [],
                "prefix": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "test_reset_when_cycle_mode_changed": {
            "name": "test_reset_when_cycle_mode_changed",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "substr_history_deque": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/commands/test_runners.py": {
        "test_text_non_whitespace_with_whitespace": {
            "name": "test_text_non_whitespace_with_whitespace",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "test_text_non_whitespace_with_non_whitespace": {
            "name": "test_text_non_whitespace_with_non_whitespace",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "test_text_non_whitespace_with_whitespace.function": {
            "name": "function",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "text": []
            }
        },
        "test_text_non_whitespace_with_non_whitespace.function": {
            "name": "function",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stripped_text": [
                    "str",
                    "type"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/commands/test_search.py": {
        "test_clear_search": {
            "name": "test_clear_search",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_sort_for_search": {
            "name": "test_sort_for_search",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_sort_for_search_reverse": {
            "name": "test_sort_for_search_reverse",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/commands/test_wildcards.py": {
        "test_expand_wildcard": {
            "name": "test_expand_wildcard",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wildcard": [
                    "str",
                    "Iterable[str]"
                ],
                "escaped": [
                    "str",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "test_expand_with_backslash": {
            "name": "test_expand_with_backslash",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wildcard": [
                    "List[List[Any]]",
                    "str"
                ],
                "char": [
                    "str"
                ]
            }
        },
        "test_recursive_wildcards": {
            "name": "test_recursive_wildcards",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_escape_path": {
            "name": "test_escape_path",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/config/test_config.py": {
        "test_sysexit_on_broken_config": {
            "name": "test_sysexit_on_broken_config",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [],
                "tmp_path": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "message": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/config/test_external_configparser.py": {
        "parser": {
            "name": "parser",
            "location": 25,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "config": {
            "name": "config",
            "location": 30,
            "return": [
                "",
                "typing.Generator[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "setup_env": {
            "name": "setup_env",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[Callable]",
                    "Type",
                    "int",
                    "bool"
                ]
            }
        },
        "test_variable_match_regex": {
            "name": "test_variable_match_regex",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_update_variable_from_env": {
            "name": "test_update_variable_from_env",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "setup_env": []
            }
        },
        "test_fail_update_variable_invalid_prefix": {
            "name": "test_fail_update_variable_invalid_prefix",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "variable": [
                    "dict",
                    "List[dict]"
                ]
            }
        },
        "test_fail_update_variable_from_env": {
            "name": "test_fail_update_variable_from_env",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_read_env_variable_from_config": {
            "name": "test_read_env_variable_from_config",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "setup_env": [
                    "str"
                ],
                "config": [
                    "Callable",
                    "dict",
                    "str"
                ],
                "parser": [
                    "dict",
                    "bool",
                    "cerise.config.Config"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/config/test_styles.py": {
        "new_style": {
            "name": "new_style",
            "location": 16,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "request": [
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "style_file": {
            "name": "style_file",
            "location": 23,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "test_add_style_option": {
            "name": "test_add_style_option",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "new_style": [
                    "str",
                    "bool",
                    "Sequence[T]",
                    "tuple"
                ]
            }
        },
        "test_fail_add_non_string_style_option": {
            "name": "test_fail_add_non_string_style_option",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "new_style": [
                    "Dict[str, Any]",
                    "tuple",
                    "List[cmk.gui.plugins.visuals.utils.Filter]"
                ]
            }
        },
        "test_fail_add_non_string_style_value": {
            "name": "test_fail_add_non_string_style_value",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "new_style": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_replace_referenced_variables": {
            "name": "test_replace_referenced_variables",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "new_style": [
                    "Dict[str, Tuple[str, str]]",
                    "str"
                ]
            }
        },
        "test_fail_get_nonexisting_style_option": {
            "name": "test_fail_get_nonexisting_style_option",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "new_style": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "test_is_color_option": {
            "name": "test_is_color_option",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_check_valid_color": {
            "name": "test_check_valid_color",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_fail_check_valid_color": {
            "name": "test_fail_check_valid_color",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "color": [
                    "bool"
                ]
            }
        },
        "test_read_style": {
            "name": "test_read_style",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "style_file": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "expected_color": [
                    "List[str]",
                    "str"
                ],
                "expected_font": [
                    "str",
                    "Optional[Iterable[str]]",
                    "Dict[str, str]"
                ],
                "options": []
            }
        },
        "test_read_style_missing_section": {
            "name": "test_read_style_missing_section",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "style_file": [
                    "Callable[[str], str]",
                    "str"
                ]
            }
        },
        "test_read_style_missing_color": {
            "name": "test_read_style_missing_color",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "style_file": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.HostName"
                ],
                "n_colors": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "test_read_style_invalid_base_color": {
            "name": "test_read_style_invalid_base_color",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "style_file": [
                    "str"
                ]
            }
        },
        "check_critical_error_handling": {
            "name": "check_critical_error_handling",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_style_key": {
            "name": "test_style_key",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "style_file.create_style_file": {
            "name": "create_style_file",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "color": [
                    "typing.Text",
                    "int",
                    "Optional[bool]",
                    "Optional[int]",
                    "float",
                    "str"
                ],
                "font": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "int",
                    "Optional[Tuple[float, float]]",
                    "Optional[str]"
                ],
                "n_colors": [
                    "int",
                    "bool",
                    "raiden.utils.TokenAmount",
                    "List[str]"
                ],
                "header": [
                    "bool",
                    "tuple"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/gui/test_eventhandler.py": {
        "storage": {
            "name": "storage",
            "location": 18,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_temp_key_storage_add_keys": {
            "name": "test_temp_key_storage_add_keys",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "storage": [
                    "str"
                ]
            }
        },
        "test_temp_key_storage_get_keys": {
            "name": "test_temp_key_storage_get_keys",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "storage": [
                    "int",
                    "bytes"
                ]
            }
        },
        "test_temp_key_storage_clears_text": {
            "name": "test_temp_key_storage_clears_text",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "storage": [
                    "str"
                ],
                "qtbot": [
                    "str"
                ]
            }
        },
        "test_keyevent_to_sequence": {
            "name": "test_keyevent_to_sequence",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtkey": [
                    "int",
                    "Type['Frame']"
                ],
                "modifier": [
                    "int",
                    "Type['Frame']"
                ],
                "keyname": [
                    "int",
                    "Type['Frame']"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_keyevent_to_sequence_for_only_modifier": {
            "name": "test_keyevent_to_sequence_for_only_modifier",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_mouse_event_to_sequence": {
            "name": "test_mouse_event_to_sequence",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbutton": [],
                "modifier": [],
                "expected": [
                    "str"
                ]
            }
        },
        "_create_mouse_event": {
            "name": "_create_mouse_event",
            "location": 89,
            "return": [
                "QMouseEvent",
                "float",
                "bool"
            ],
            "arguments": {
                "button": [
                    "float",
                    "int",
                    "Tuple[float, float]"
                ],
                "modifier": [
                    "float",
                    "int",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/gui/test_statusbar.py": {
        "test_escape_subsequent_space_for_html": {
            "name": "test_escape_subsequent_space_for_html",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "AbstractSet[str]",
                    "int"
                ],
                "expected": [
                    "str",
                    "AbstractSet[str]",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/gui/test_thumbnail.py": {
        "item": {
            "name": "item",
            "location": 18,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_create_default_pixmap_once": {
            "name": "test_create_default_pixmap_once",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "item": [
                    "Union[str, Callable[[], str]]",
                    "Callable"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/imutils/test_exif.py": {
        "exif_handler": {
            "name": "exif_handler",
            "location": 15,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "test_check_exif_dependency": {
            "name": "test_check_exif_dependency",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_check_exif_dependency_piexif": {
            "name": "test_check_exif_dependency_piexif",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "piexif": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_check_exif_dependency_noexif": {
            "name": "test_check_exif_dependency_noexif",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "noexif": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_handler_base_raises": {
            "name": "test_handler_base_raises",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "methodname": [],
                "args": []
            }
        },
        "test_handler_exception_customization": {
            "name": "test_handler_exception_customization",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected_msg": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/imutils/test_imtransform.py": {
        "transform": {
            "name": "transform",
            "location": 27,
            "return": [
                "Transform",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "mocker": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "action": {
            "name": "action",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "transform": [
                    "int"
                ],
                "request": []
            }
        },
        "test_change_and_reset": {
            "name": "test_change_and_reset",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "action": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "transform": []
            }
        },
        "test_rotate_angle": {
            "name": "test_rotate_angle",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "transform": [
                    "str",
                    "float"
                ],
                "angle": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/plugins/mock_plugin.py": {
        "init": {
            "name": "init",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_info": [
                    "bool"
                ]
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/plugins/mock_plugin_syntax_error.py": {},
    "vimiv-qt-master/tests/unit/plugins/test_plugins.py": {
        "mock_plugin": {
            "name": "mock_plugin",
            "location": 17,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "mocker": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_init_and_cleanup_plugin": {
            "name": "test_init_and_cleanup_plugin",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_plugin": []
            }
        },
        "test_do_not_fail_on_non_existing_plugin": {
            "name": "test_do_not_fail_on_non_existing_plugin",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_do_not_fail_on_plugin_with_syntax_error": {
            "name": "test_do_not_fail_on_plugin_with_syntax_error",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/utils/test_crash_handler.py": {
        "print_logging": {
            "name": "print_logging",
            "location": 21,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 30,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "dict"
                ],
                "print_logging": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_crash_handler_updates_excepthook": {
            "name": "test_crash_handler_updates_excepthook",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "test_crash_handler_excepthook": {
            "name": "test_crash_handler_excepthook",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "float"
                ],
                "handler": []
            }
        },
        "test_crash_handler_exception_in_excepthook": {
            "name": "test_crash_handler_exception_in_excepthook",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [],
                "handler": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "test_crash_handler_first_interrupt": {
            "name": "test_crash_handler_first_interrupt",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [],
                "capsys": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "handler": [
                    "str",
                    "float"
                ]
            }
        },
        "test_crash_handler_second_interrupt": {
            "name": "test_crash_handler_second_interrupt",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "float"
                ],
                "handler": [
                    "Optional[bool]",
                    "Union[str, 'Path']"
                ]
            }
        },
        "test_crash_handler_exception_in_excepthook.broken": {
            "name": "broken",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_returncode": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_crash_handler_first_interrupt.check_app_exit": {
            "name": "check_app_exit",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/utils/test_debug.py": {
        "test_profiler": {
            "name": "test_profiler",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_timed": {
            "name": "test_timed",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "capsys": [
                    "Dict[str, float]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_timed.func": {
            "name": "func",
            "location": 25,
            "return": [
                "str",
                "List[int]",
                "Set[str]"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/utils/test_files.py": {
        "mockimghdr": {
            "name": "mockimghdr",
            "location": 25,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "tmpfile": {
            "name": "tmpfile",
            "location": 34,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "directory_tree": {
            "name": "directory_tree",
            "location": 41,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_listdir_wrapper": {
            "name": "test_listdir_wrapper",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_listdir_wrapper_returns_abspath": {
            "name": "test_listdir_wrapper_returns_abspath",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_listdir_wrapper_sort": {
            "name": "test_listdir_wrapper_sort",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_listdir_wrapper_remove_hidden": {
            "name": "test_listdir_wrapper_remove_hidden",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_listdir_wrapper_show_hidden": {
            "name": "test_listdir_wrapper_show_hidden",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_directories_supported": {
            "name": "test_directories_supported",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_images_supported": {
            "name": "test_images_supported",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_tar_gz_not_an_image": {
            "name": "test_tar_gz_not_an_image",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_is_image_on_error": {
            "name": "test_is_image_on_error",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_is_image_on_fifo_file": {
            "name": "test_is_image_on_fifo_file",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [],
                "tmp_path": []
            }
        },
        "test_sizeof_fmt": {
            "name": "test_sizeof_fmt",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "size": [],
                "expected": []
            }
        },
        "test_get_size_directory_with_directories": {
            "name": "test_get_size_directory_with_directories",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_get_size_directory_with_images": {
            "name": "test_get_size_directory_with_images",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_get_size_with_permission_error": {
            "name": "test_get_size_with_permission_error",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_listfiles": {
            "name": "test_listfiles",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "directory_tree": []
            }
        },
        "test_add_supported_format": {
            "name": "test_add_supported_format",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "mockimghdr": [],
                "tmpfile": [],
                "name": []
            }
        },
        "test_add_unsupported_format": {
            "name": "test_add_unsupported_format",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "mockimghdr": [],
                "tmpfile": []
            }
        },
        "_test_dummy": {
            "name": "_test_dummy",
            "location": 197,
            "return": [
                "bool"
            ],
            "arguments": {
                "h": [],
                "f": []
            }
        },
        "directory_tree.create_subdirectory": {
            "name": "create_subdirectory",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/utils/test_lazy.py": {
        "clear_imported_module": {
            "name": "clear_imported_module",
            "location": 20,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "module": {
            "name": "module",
            "location": 29,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "test_lazy_import_is_lazy": {
            "name": "test_lazy_import_is_lazy",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "module": [
                    "int",
                    "Literal",
                    "Callable",
                    "list",
                    "str",
                    "Callable[..., None]",
                    "bool",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "capsys": [
                    "raiden.utils.PaymentWithFeeAmount",
                    "List[int]"
                ]
            }
        },
        "test_lazy_imported_module": {
            "name": "test_lazy_imported_module",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "module": [
                    "Callable",
                    "bool",
                    "Union[str, List[str]]",
                    "str"
                ],
                "capsys": [
                    "raiden.utils.PaymentWithFeeAmount",
                    "List[int]"
                ]
            }
        },
        "test_lazy_module_single_instance": {
            "name": "test_lazy_module_single_instance",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "module": [
                    "raiden.utils.PaymentWithFeeAmount",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "test_lazy_import_nonexisting_module": {
            "name": "test_lazy_import_nonexisting_module",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Union[str, BinaryIO]"
                ],
                "optional": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/utils/test_log.py": {
        "clean_module_loggers": {
            "name": "clean_module_loggers",
            "location": 18,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "lazy_logger": {
            "name": "lazy_logger",
            "location": 31,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_module_logger_name": {
            "name": "test_module_logger_name",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "test_lazy_logger_is_lazy": {
            "name": "test_lazy_logger_is_lazy",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "setup_logging": [],
                "lazy_logger": []
            }
        },
        "test_lazy_logger_logs": {
            "name": "test_lazy_logger_logs",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [],
                "setup_logging": [],
                "lazy_logger": [
                    "str"
                ]
            }
        },
        "test_setup_logging_debug_loggers": {
            "name": "test_setup_logging_debug_loggers",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [],
                "creation_time": []
            }
        },
        "test_module_logger_level_after_setup": {
            "name": "test_module_logger_level_after_setup",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "Iterable[Any]",
                    "int"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "test_log_once": {
            "name": "test_log_once",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "str",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "Callable"
                ],
                "setup_logging": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/utils/test_migration.py": {
        "mock_gtk_version": {
            "name": "mock_gtk_version",
            "location": 20,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "monkeypatch": [
                    "str",
                    "dict"
                ]
            }
        },
        "mock_backup": {
            "name": "mock_backup",
            "location": 52,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "dict",
                    "Union[str, Pattern]",
                    "List[str]"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_gtk_version": [],
                "mock_backup": []
            }
        },
        "test_do_not_run": {
            "name": "test_do_not_run",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [],
                "mock_backup": []
            }
        },
        "test_backup_directories": {
            "name": "test_backup_directories",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_gtk_version": []
            }
        },
        "test_migrate_tags": {
            "name": "test_migrate_tags",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_gtk_version": []
            }
        }
    },
    "vimiv-qt-master/tests/unit/utils/test_thumbnail_manager.py": {
        "manager": {
            "name": "manager",
            "location": 18,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "qtbot": [
                    "bool",
                    "list",
                    "str"
                ],
                "tmp_path": [
                    "str",
                    "List[str]"
                ],
                "mocker": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "test_create_n_thumbnails": {
            "name": "test_create_n_thumbnails",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "tmp_path": [
                    "str"
                ],
                "manager": [
                    "str"
                ],
                "n_paths": [
                    "str"
                ]
            }
        },
        "test_create_thumbnails_for_non_existing_path": {
            "name": "test_create_thumbnails_for_non_existing_path",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Callable"
                ],
                "manager": []
            }
        },
        "test_create_thumbnails_for_non_image_path": {
            "name": "test_create_thumbnails_for_non_image_path",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [],
                "tmp_path": [],
                "manager": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        },
        "test_do_not_create_thumbnail_for_thumbnail": {
            "name": "test_do_not_create_thumbnail_for_thumbnail",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [],
                "manager": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "check_thumbails_created": {
            "name": "check_thumbails_created",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "int",
                    "Union[str, int]",
                    "str",
                    "Iterator",
                    "bytes",
                    "bytearray"
                ],
                "manager": [
                    "str",
                    "int"
                ],
                "n_paths": [
                    "str",
                    "int"
                ]
            }
        },
        "check_thumbails_created.wait_thread": {
            "name": "wait_thread",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/tests/unit/utils/test_trash_manager.py": {
        "trash": {
            "name": "trash",
            "location": 19,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "bytes",
                    "str",
                    "bool"
                ],
                "tmp_path": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Dict[cmk.utils.type_defs.HostName, str]",
                    "Tuple[int, int]"
                ]
            }
        },
        "deleted_file": {
            "name": "deleted_file",
            "location": 33,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Iterable[str]",
                    "Optional[Callable[[Any], None]]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "test_delete_file": {
            "name": "test_delete_file",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "deleted_file": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_undelete_file": {
            "name": "test_undelete_file",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "deleted_file": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial"
                ]
            }
        },
        "test_create_trashinfo": {
            "name": "test_create_trashinfo",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "deleted_file": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "BinaryIO"
                ]
            }
        },
        "test_do_not_overwrite_trash_file": {
            "name": "test_do_not_overwrite_trash_file",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "deleted_file": [
                    "pathlib.Path"
                ]
            }
        },
        "test_fail_undelete_non_existing_file": {
            "name": "test_fail_undelete_non_existing_file",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_fail_undelete_non_existing_original_directory": {
            "name": "test_fail_undelete_non_existing_original_directory",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_undelete_symlink": {
            "name": "test_undelete_symlink",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "create_tmpfile": {
            "name": "create_tmpfile",
            "location": 101,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "basename": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/utils/test_trie.py": {
        "trie": {
            "name": "trie",
            "location": 19,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "mocklogger": {
            "name": "mocklogger",
            "location": 24,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "test_setitem": {
            "name": "test_setitem",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trie": [
                    "str",
                    "bytes",
                    "dict",
                    "int"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, str]]",
                    "Dict[str, str]",
                    "Iterable[str]",
                    "Pattern"
                ],
                "value": [
                    "str",
                    "Callable[[KT, VT], bool]",
                    "dict"
                ]
            }
        },
        "test_check_warns_for_hidden_key": {
            "name": "test_check_warns_for_hidden_key",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trie": [],
                "mocklogger": []
            }
        },
        "test_iter": {
            "name": "test_iter",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trie": [
                    "Dict[str, Any]",
                    "List[dict]",
                    "dict"
                ]
            }
        },
        "test_fullmatch": {
            "name": "test_fullmatch",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trie": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_partialmatch": {
            "name": "test_partialmatch",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trie": []
            }
        },
        "test_nomatch": {
            "name": "test_nomatch",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trie": [
                    "Callable"
                ]
            }
        },
        "test_contains_match": {
            "name": "test_contains_match",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trie": [
                    "Iterable[Any]",
                    "Sequence[Any]"
                ]
            }
        },
        "test_contains_nomatch": {
            "name": "test_contains_nomatch",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trie": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_delitem_destroys_empty_nodes": {
            "name": "test_delitem_destroys_empty_nodes",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trie": []
            }
        },
        "test_delitem_keeps_nonempty_nodes": {
            "name": "test_delitem_keeps_nonempty_nodes",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trie": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_delitem_raises_keyerror_with_full_path": {
            "name": "test_delitem_raises_keyerror_with_full_path",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trie": [
                    "int"
                ]
            }
        },
        "test_iter.random_str": {
            "name": "random_str",
            "location": 51,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "k": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/utils/test_utils.py": {
        "cached_method_cls": {
            "name": "cached_method_cls",
            "location": 22,
            "return": [
                "",
                "typing.Generator[CachedMethodCls]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "test_add_html": {
            "name": "test_add_html",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_add_html_multiple": {
            "name": "test_add_html_multiple",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_strip_html": {
            "name": "test_strip_html",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_wrap_style_span": {
            "name": "test_wrap_style_span",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_format_html_table": {
            "name": "test_format_html_table",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "n_rows": [
                    "int",
                    "Tuple[int, int]",
                    "Sequence[int]"
                ]
            }
        },
        "test_replace_unless_escaped": {
            "name": "test_replace_unless_escaped",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "escaped": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_contains_any": {
            "name": "test_contains_any",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sequence": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ],
                "elems": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ],
                "expected": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "test_quotedjoin": {
            "name": "test_quotedjoin",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "iterable": [],
                "joinchar": [
                    "str"
                ]
            }
        },
        "test_glob_escape": {
            "name": "test_glob_escape",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "char": [
                    "str",
                    "int"
                ]
            }
        },
        "test_clamp_with_min_and_max": {
            "name": "test_clamp_with_min_and_max",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clamp_with_max": {
            "name": "test_clamp_with_max",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clamp_with_min": {
            "name": "test_clamp_with_min",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_clamp_with_none": {
            "name": "test_clamp_with_none",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_parameter_names": {
            "name": "test_parameter_names",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "Dict[str, Any]",
                    "dict",
                    "qtpy.QtCore.QEvent"
                ]
            }
        },
        "test_slot": {
            "name": "test_slot",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "type_hint": [
                    "Type[Any]",
                    "Collection[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "test_slot_ignore_self": {
            "name": "test_slot_ignore_self",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_slot_add_returntype": {
            "name": "test_slot_add_returntype",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_slot_fails_without_type_annotations": {
            "name": "test_slot_fails_without_type_annotations",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_flatten": {
            "name": "test_flatten",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_recursive_split": {
            "name": "test_recursive_split",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_remove_prefix": {
            "name": "test_remove_prefix",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_remove_prefix_not_found": {
            "name": "test_remove_prefix_not_found",
            "location": 215,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_escape_unescape_chars": {
            "name": "test_escape_unescape_chars",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "formattext": [
                    "str"
                ],
                "char": [
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "test_escape_unescape_backslash": {
            "name": "test_escape_unescape_backslash",
            "location": 230,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_escape_unescape_multiple_chars": {
            "name": "test_escape_unescape_multiple_chars",
            "location": 238,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_run_escape_unescape": {
            "name": "_run_escape_unescape",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "chars": [
                    "str",
                    "List[List[str]]"
                ],
                "expected": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_cached_method_result": {
            "name": "test_cached_method_result",
            "location": 252,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cached_method_cls": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_cached_calls_expensive_once": {
            "name": "test_cached_calls_expensive_once",
            "location": 259,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cached_method_cls": [
                    "Dict[str, str]",
                    "float"
                ]
            }
        },
        "test_qbytearray_to_str": {
            "name": "test_qbytearray_to_str",
            "location": 265,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_run_qprocess": {
            "name": "test_run_qprocess",
            "location": 271,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_run_qprocess_in_other_dir": {
            "name": "test_run_qprocess_in_other_dir",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "test_fail_run_qprocess_raises_oserror": {
            "name": "test_fail_run_qprocess_raises_oserror",
            "location": 285,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "command": [],
                "args": []
            }
        },
        "test_is_optional_type": {
            "name": "test_is_optional_type",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "typ": [
                    "Callable"
                ]
            }
        },
        "test_type_of_optional": {
            "name": "test_type_of_optional",
            "location": 298,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "typ": []
            }
        },
        "test_fail_type_of_optional": {
            "name": "test_fail_type_of_optional",
            "location": 303,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_call_throttled_function_once": {
            "name": "test_call_throttled_function_once",
            "location": 309,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "str"
                ],
                "n_calls": []
            }
        },
        "test_is_hex_true": {
            "name": "test_is_hex_true",
            "location": 328,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "test_is_hex_false": {
            "name": "test_is_hex_false",
            "location": 333,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "test_slot.test": {
            "name": "test",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_slot_ignore_self.test": {
            "name": "test",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "test_slot_add_returntype.test": {
            "name": "test",
            "location": 173,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "test_recursive_split.updater": {
            "name": "updater",
            "location": 195,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "test_call_throttled_function_once.local_task": {
            "name": "local_task",
            "location": 314,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "call_id": [
                    "dict",
                    "List[int]",
                    "str",
                    "List[dict]",
                    "Union[str, List[str]]",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_call_throttled_function_once.check_calls": {
            "name": "check_calls",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "cached_method_cls.CachedMethodCls.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "cached_method_cls.CachedMethodCls.method": {
            "name": "method",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_slot.Dummy.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_slot_fails_without_type_annotations.dummy": {
            "name": "dummy",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/utils/test_xdg.py": {
        "unset_xdg_env": {
            "name": "unset_xdg_env",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "dict"
                ]
            }
        },
        "mock_xdg": {
            "name": "mock_xdg",
            "location": 25,
            "return": [
                "",
                "typing.Generator[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_xdg_defaults": {
            "name": "test_xdg_defaults",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "unset_xdg_env": [
                    "int"
                ]
            }
        },
        "test_xdg_from_env": {
            "name": "test_xdg_from_env",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_xdg": []
            }
        },
        "test_vimiv_xdg_dirs": {
            "name": "test_vimiv_xdg_dirs",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_xdg": [
                    "str"
                ],
                "paths": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/tests/unit/utils/_module_for_lazy.py": {
        "function_of_interest": {
            "name": "function_of_interest",
            "location": 14,
            "return": [
                "int",
                "dict",
                "type",
                "Type"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/app.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.quit": {
            "name": "quit",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Application.preexit": {
            "name": "preexit",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "returncode": [
                    "str",
                    "int",
                    "vimiv.commands.argtypes.Direction",
                    "Tuple[Tuple[str, ...]]",
                    "float"
                ]
            }
        },
        "Application.exit": {
            "name": "exit",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "returncode": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Application._set_icon": {
            "name": "_set_icon",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.get_icon": {
            "name": "get_icon",
            "location": 70,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "T",
                    "AsyncGenerator",
                    "Optional[Dict]",
                    "float",
                    "Type",
                    "int"
                ]
            }
        },
        "Application._icon_from_project_directory": {
            "name": "_icon_from_project_directory",
            "location": 80,
            "return": [
                "str",
                "QIcon"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/checkversion.py": {
        "check_python_version": {
            "name": "check_python_version",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "check_pyqt_version": {
            "name": "check_pyqt_version",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "join_version_tuple": {
            "name": "join_version_tuple",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "version": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "_exit_version": {
            "name": "_exit_version",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "software": [
                    "bytes",
                    "bool",
                    "str",
                    "Optional[float]"
                ],
                "required": [
                    "bytes",
                    "bool",
                    "str",
                    "Optional[float]"
                ],
                "installed": [
                    "bytes",
                    "bool",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "_exit": {
            "name": "_exit",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/parser.py": {
        "get_argparser": {
            "name": "get_argparser",
            "location": 21,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "positive_int": {
            "name": "positive_int",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "Tuple[str, str, str]",
                    "int",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "Union[int, str]",
                    "str"
                ]
            }
        },
        "geometry": {
            "name": "geometry",
            "location": 130,
            "return": [
                "QSize",
                "List[int]",
                "List[dict]",
                "str",
                "bytes"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "int",
                    "str",
                    "Union[bool, str]",
                    "bytes"
                ]
            }
        },
        "existing_file": {
            "name": "existing_file",
            "location": 147,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "existing_path": {
            "name": "existing_path",
            "location": 161,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "loglevel": {
            "name": "loglevel",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "get_qt_args": {
            "name": "get_qt_args",
            "location": 190,
            "return": [
                "list",
                "int",
                "List[int]",
                "str",
                "bytes"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "vimiv-qt-master/vimiv/startup.py": {
        "main": {
            "name": "main",
            "location": 42,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "setup_pre_app": {
            "name": "setup_pre_app",
            "location": 56,
            "return": [
                "str",
                "List[str]",
                "Tuple[Any, Any, Any]",
                "dict",
                "int",
                "bytes",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "argv": [
                    "bool",
                    "dict",
                    "bytes",
                    "List[Dict[str, str]]",
                    "str"
                ]
            }
        },
        "setup_post_app": {
            "name": "setup_post_app",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "init_directories": {
            "name": "init_directories",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "init_paths": {
            "name": "init_paths",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "init_ui": {
            "name": "init_ui",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "update_settings": {
            "name": "update_settings",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "run_startup_commands": {
            "name": "run_startup_commands",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "setup_post_app.print_output": {
            "name": "print_output",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/version.py": {
        "info": {
            "name": "info",
            "location": 27,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "paths": {
            "name": "paths",
            "location": 50,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "gpl_boilerplate": {
            "name": "gpl_boilerplate",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "detailed_info": {
            "name": "detailed_info",
            "location": 65,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "_python_version": {
            "name": "_python_version",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_git_info": {
            "name": "_git_info",
            "location": 76,
            "return": [
                "None",
                "Optional[str]",
                "typing.Text",
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/widgets.py": {
        "ScrollToCenterMixin.scrollTo": {
            "name": "scrollTo",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "Optional[Collection[int]]"
                ],
                "_hint": [
                    "None",
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "ScrollWheelCumulativeMixin.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "ScrollWheelCumulativeMixin.wheelEvent": {
            "name": "wheelEvent",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "float",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "GetNumVisibleMixin._visible_range": {
            "name": "_visible_range",
            "location": 73,
            "return": [
                "tuple[None]",
                "int",
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "List[int]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "contains": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "GetNumVisibleMixin._n_visible_items": {
            "name": "_n_visible_items",
            "location": 89,
            "return": [
                "int",
                "bool",
                "List[Dict]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlatTreeView.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "bool",
                    "float"
                ]
            }
        },
        "FlatTreeView._select_row": {
            "name": "_select_row",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "Iterable['Event']"
                ]
            }
        },
        "FlatTreeView._select_index": {
            "name": "_select_index",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FlatTreeView.row": {
            "name": "row",
            "location": 131,
            "return": [
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SliderWithValue.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "left_color": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Callable",
                    "Union[float, Tuple[float, float]]"
                ],
                "handle_color": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Callable",
                    "Union[float, Tuple[float, float]]"
                ],
                "right_color": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Callable",
                    "Union[float, Tuple[float, float]]"
                ]
            }
        },
        "SliderWithValue.paintEvent": {
            "name": "paintEvent",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PyQt5.QtCore.QObject",
                    "PySide2.QtGui.QResizeEvent",
                    "PyQt5.QtGui.QKeyEvent"
                ]
            }
        },
        "SliderWithValue._init_style": {
            "name": "_init_style",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PopUp.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "str",
                    "Callable"
                ],
                "parent": [
                    "None",
                    "PyQt5.QtWidgets.QWidget",
                    "str",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "PopUp.reject": {
            "name": "reject",
            "location": 232,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollWheelCumulativeMixin.__init__.reset_scroll_step": {
            "name": "reset_scroll_step",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/__init__.py": {},
    "vimiv-qt-master/vimiv/__main__.py": {},
    "vimiv-qt-master/vimiv/api/commands.py": {
        "register": {
            "name": "register",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mode": [
                    "bool",
                    "List[str]",
                    "str",
                    "Set[Union[Any, Any]]",
                    "Iterable[List[Any]]"
                ],
                "hide": [
                    "bool",
                    "List[str]",
                    "str",
                    "Set[Union[Any, Any]]",
                    "Iterable[List[Any]]"
                ],
                "store": [
                    "bool",
                    "List[str]",
                    "str",
                    "Set[Union[Any, Any]]",
                    "Iterable[List[Any]]"
                ],
                "edit": [
                    "bool",
                    "List[str]",
                    "str",
                    "Set[Union[Any, Any]]",
                    "Iterable[List[Any]]"
                ],
                "name": [
                    "None",
                    "bool",
                    "List[str]",
                    "str",
                    "Set[Union[Any, Any]]",
                    "Iterable[List[Any]]"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 117,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], bool]",
                    "bool"
                ],
                "mode": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "items": {
            "name": "items",
            "location": 161,
            "return": [
                "set[list]",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "mode": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "utils.diskstaDisk",
                    "Iterable[Tuple[Hashable, Any]]"
                ]
            }
        },
        "exists": {
            "name": "exists",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "mode": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_command_name": {
            "name": "_get_command_name",
            "location": 348,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Exception",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "register.decorator": {
            "name": "decorator",
            "location": 110,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "argparse.Namespace",
                    "Callable",
                    "Exception",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "_CommandArguments.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cmdname": [
                    "raiden.utils.Signature",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.Nonce",
                    "raiden.utils.BalanceHash"
                ],
                "description": [
                    "raiden.utils.Signature",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.Nonce",
                    "raiden.utils.BalanceHash"
                ],
                "function": [
                    "str"
                ]
            }
        },
        "_CommandArguments.print_help": {
            "name": "print_help",
            "location": 200,
            "return": [
                "typing.NoReturn",
                "None"
            ],
            "arguments": {
                "self": [],
                "_file": [
                    "None",
                    "str",
                    "IO[str]",
                    "List[str]",
                    "BinaryIO",
                    "bool",
                    "list"
                ]
            }
        },
        "_CommandArguments.parse_args": {
            "name": "parse_args",
            "location": 204,
            "return": [
                "str",
                "bool",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "_CommandArguments.error": {
            "name": "error",
            "location": 213,
            "return": [
                "typing.NoReturn",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "_CommandArguments._add_argument": {
            "name": "_add_argument",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "str",
                    "raiden.utils.Address"
                ],
                "typ": [
                    "bool",
                    "dict"
                ]
            }
        },
        "_CommandArguments._argument_name": {
            "name": "_argument_name",
            "location": 233,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "str",
                    "Callable",
                    "Type[T]",
                    "bool"
                ],
                "argument": [
                    "Mapping[str, str]",
                    "str",
                    "Exception"
                ],
                "optional": [
                    "str",
                    "Mapping[str, utils.mssql_counters.Section]",
                    "Set[str]",
                    "type"
                ]
            }
        },
        "_CommandArguments._gen_kwargs": {
            "name": "_gen_kwargs",
            "location": 239,
            "return": [
                "str",
                "dict[typing.Text, typing.Text]",
                "dict[typing.Text, str]",
                "dict[typing.Text, typing.Union[typing.Text,None]]",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Exception",
                    "Callable[..., Awaitable[None]]",
                    "Type"
                ],
                "argument": [
                    "Type[T]",
                    "Set[str]",
                    "str",
                    "Iterable[str]"
                ],
                "optional": [
                    "int",
                    "bool",
                    "type"
                ],
                "typ": [
                    "str",
                    "List[int]",
                    "dict",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "_CommandArguments.paths_type": {
            "name": "paths_type",
            "location": 261,
            "return": [
                "List[Tuple[int]]",
                "str",
                "List[T]",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Type[Any]",
                    "Callable[..., T]",
                    "List[Dict[str, Any]]"
                ],
                "globstr": [
                    "str"
                ]
            }
        },
        "_Command.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Union[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "mode": [
                    "str",
                    "List[str]",
                    "bool",
                    "Callable"
                ],
                "hide": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "store": [
                    "bool",
                    "str",
                    "Type[T]",
                    "Set[str]"
                ],
                "edit": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "name": [
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "_Command.__call__": {
            "name": "__call__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "count": [
                    "int",
                    "float"
                ]
            }
        },
        "_Command.argparser": {
            "name": "argparser",
            "location": 328,
            "return": [
                "_CommandArguments",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Command._parse_count": {
            "name": "_parse_count",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "str",
                    "List[float]",
                    "List[Tuple[int, int]]",
                    "List[int]"
                ],
                "kwargs": []
            }
        },
        "_Command.__repr__": {
            "name": "__repr__",
            "location": 344,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/api/completion.py": {
        "get_model": {
            "name": "get_model",
            "location": 69,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "mode": [
                    "vimiv.api.modes.Mode",
                    "int",
                    "bool"
                ]
            }
        },
        "escape": {
            "name": "escape",
            "location": 88,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "unescape": {
            "name": "unescape",
            "location": 93,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "FilterProxyModel.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterProxyModel.refilter": {
            "name": "refilter",
            "location": 121,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "FilterProxyModel._set_completion_regex": {
            "name": "_set_completion_regex",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "command": [
                    "str",
                    "List[str]",
                    "Dict[str, List[str]]",
                    "dict",
                    "Final"
                ]
            }
        },
        "FilterProxyModel._set_fuzzy_completion_regex": {
            "name": "_set_fuzzy_completion_regex",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "command": [
                    "str"
                ]
            }
        },
        "FilterProxyModel.reset": {
            "name": "reset",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterProxyModel.sourceModel": {
            "name": "sourceModel",
            "location": 176,
            "return": [
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "int",
                    "Tuple[float, float]"
                ],
                "column_widths": [
                    "tuple[int]",
                    "int",
                    "Tuple[float]",
                    "list"
                ],
                "valid_modes": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "BaseModel.__str__": {
            "name": "__str__",
            "location": 207,
            "return": [
                "float",
                "list",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.on_enter": {
            "name": "on_enter",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "BaseModel.on_text_changed": {
            "name": "on_text_changed",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "BaseModel.set_data": {
            "name": "set_data",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[List[Any]]",
                    "bool"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/api/keybindings.py": {
        "register": {
            "name": "register",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "keybinding": [
                    "Union[str, Iterable[str]]",
                    "str",
                    "vimiv.api.modes.Mode",
                    "bool",
                    "int"
                ],
                "command": [
                    "Union[str, Iterable[str]]",
                    "str",
                    "vimiv.api.modes.Mode",
                    "bool",
                    "int"
                ],
                "mode": [
                    "Union[str, Iterable[str]]",
                    "str",
                    "vimiv.api.modes.Mode",
                    "bool",
                    "int"
                ]
            }
        },
        "bind": {
            "name": "bind",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "keybinding": [
                    "str",
                    "Union[bytes, bytearray]",
                    "bytearray",
                    "int"
                ],
                "command": [
                    "bool",
                    "vimiv.api.modes.Mode",
                    "str",
                    "bytes"
                ],
                "mode": [
                    "bool",
                    "vimiv.api.modes.Mode",
                    "str",
                    "bytes"
                ],
                "override": [
                    "bool",
                    "vimiv.api.modes.Mode",
                    "str",
                    "bytes"
                ]
            }
        },
        "unbind": {
            "name": "unbind",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "keybinding": [
                    "str",
                    "Union[str, int]",
                    "int",
                    "List[str]"
                ],
                "mode": [
                    "str",
                    "bool",
                    "int",
                    "vimiv.api.modes.Mode"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 133,
            "return": [
                "_BindingsTrie",
                "int",
                "Callable[[T], List[T]]",
                "bool",
                "MutableMapping",
                "str"
            ],
            "arguments": {
                "mode": [
                    "vimiv.api.modes.Mode",
                    "str",
                    "List[Tuple[int, int]]",
                    "int"
                ]
            }
        },
        "items": {
            "name": "items",
            "location": 138,
            "return": [
                "typing.Iterator[typing.Tuple[vimiv.api.modes.Mode, typing.Iterable[typing.Tuple[builtins.str, builtins.str]]]]",
                "typing.Generator[tuple]"
            ],
            "arguments": {}
        },
        "check": {
            "name": "check",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "register.decorator": {
            "name": "decorator",
            "location": 55,
            "return": [
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "vimiv.utils.customtypes.FuncT",
                    "Callable[[T], Any]"
                ]
            }
        },
        "_BindingsTrie.__setitem__": {
            "name": "__setitem__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keybinding": [
                    "trezor.utils.Writer",
                    "str"
                ],
                "command": [
                    "trezor.utils.Writer",
                    "str"
                ]
            }
        },
        "_BindingsTrie.__getitem__": {
            "name": "__getitem__",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "keybinding": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "_BindingsTrie.__delitem__": {
            "name": "__delitem__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keybinding": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "_BindingsTrie.keysequence": {
            "name": "keysequence",
            "location": 113,
            "return": [
                "tuple",
                "str",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "Hashable",
                    "str",
                    "Optional[int]",
                    "List[T]",
                    "bool"
                ],
                "keys": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "items.sort": {
            "name": "sort",
            "location": 148,
            "return": [
                "list",
                "List[int]",
                "str"
            ],
            "arguments": {
                "bindings": [
                    "Iterable[Tuple[str, str]]",
                    "list",
                    "List[Tuple[int, int]]",
                    "Iterable[Any]",
                    "List[dict]"
                ]
            }
        },
        "_BindingsTrie.keysequence.generator": {
            "name": "generator",
            "location": 116,
            "return": [
                "typing.Iterator[builtins.str]",
                "typing.Generator"
            ],
            "arguments": {
                "keys": [
                    "Optional[Any]",
                    "Callable",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/api/modes.py": {
        "get_by_name": {
            "name": "get_by_name",
            "location": 188,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "widget": {
            "name": "widget",
            "location": 220,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "current": {
            "name": "current",
            "location": 303,
            "return": [
                "_MainMode",
                "Sequence[str]",
                "int"
            ],
            "arguments": {}
        },
        "Mode.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "last": [
                    "None",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Mode.enter": {
            "name": "enter",
            "location": 88,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode.close": {
            "name": "close",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode.toggle": {
            "name": "toggle",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode.identifier": {
            "name": "identifier",
            "location": 133,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode.last": {
            "name": "last",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "float",
                    "Callable"
                ]
            }
        },
        "Mode.reset_last": {
            "name": "reset_last",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode.pathlist": {
            "name": "pathlist",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode.current_path": {
            "name": "current_path",
            "location": 164,
            "return": [
                "int",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode._set_last": {
            "name": "_set_last",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Mode.__eq__": {
            "name": "__eq__",
            "location": 171,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mode.__hash__": {
            "name": "__hash__",
            "location": 176,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode.name": {
            "name": "name",
            "location": 180,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode.__repr__": {
            "name": "__repr__",
            "location": 184,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ModeWidget.current": {
            "name": "current",
            "location": 213,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ModeWidget.pathlist": {
            "name": "pathlist",
            "location": 216,
            "return": [
                "typing.List[builtins.str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "widget.decorator": {
            "name": "decorator",
            "location": 239,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "component_init": [
                    "Callable",
                    "bool",
                    "dict",
                    "type"
                ]
            }
        },
        "_MainMode._set_last": {
            "name": "_set_last",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        },
        "_CommandMode._set_last": {
            "name": "_set_last",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "PyQt5.QtWidgets.QComboBox",
                    "int",
                    "bool"
                ]
            }
        },
        "_ManipulateMode.enter": {
            "name": "enter",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "widget.decorator.inner": {
            "name": "inner",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "component": [
                    "Callable",
                    "BaseException"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/api/objreg.py": {
        "register": {
            "name": "register",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "component_init": [
                    "Callable",
                    "bool",
                    "dict",
                    "type"
                ]
            }
        },
        "_call_with_instance": {
            "name": "_call_with_instance",
            "location": 68,
            "return": [
                "Union[int, float]",
                "str",
                "float"
            ],
            "arguments": {
                "func": [
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "__get_class": {
            "name": "__get_class",
            "location": 77,
            "return": [
                "None",
                "str",
                "bool",
                "Optional[str]",
                "T"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "str",
                    "BaseException",
                    "T",
                    "Exception"
                ]
            }
        },
        "register.inside": {
            "name": "inside",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "component": [
                    "bool",
                    "tuple",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/api/prompt.py": {
        "ask_question": {
            "name": "ask_question",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Question.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, str]",
                "int",
                "dict",
                "MutableMapping[str, Any]",
                "Mapping[int, str]",
                "Dict[str, set]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/api/settings.py": {
        "get": {
            "name": "get",
            "location": 28,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_value": {
            "name": "get_value",
            "location": 39,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "reset": {
            "name": "reset",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "items": {
            "name": "items",
            "location": 56,
            "return": [
                "set[list]",
                "int",
                "List[int]",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {}
        },
        "Setting.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Union[str, List[str]]",
                    "bool"
                ],
                "default_value": [
                    "str",
                    "bool",
                    "Optional[Union[int, str]]",
                    "List[str]",
                    "vimiv.utils.customtypes.Number"
                ],
                "desc": [
                    "typing.Text",
                    "bool",
                    "Sequence",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "suggestions": [
                    "None",
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Set[str]"
                ],
                "hidden": [
                    "bool",
                    "Sequence",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Setting.typ": {
            "name": "typ",
            "location": 103,
            "return": [
                "builtins.type",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Setting.default": {
            "name": "default",
            "location": 107,
            "return": [
                "list",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Setting.value": {
            "name": "value",
            "location": 115,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "int",
                    "T"
                ]
            }
        },
        "Setting.set_to_default": {
            "name": "set_to_default",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Setting.suggestions": {
            "name": "suggestions",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Setting.convert": {
            "name": "convert",
            "location": 132,
            "return": [
                "int",
                "bool",
                "tuple",
                "raiden.utils.BlockHash",
                "str",
                "Union[int, Tuple[int, ...]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[list, str]"
                ]
            }
        },
        "Setting.convertstr": {
            "name": "convertstr",
            "location": 140,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "BoolSetting.toggle": {
            "name": "toggle",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolSetting.suggestions": {
            "name": "suggestions",
            "location": 152,
            "return": [
                "bool",
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolSetting.convertstr": {
            "name": "convertstr",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "BoolSetting.__str__": {
            "name": "__str__",
            "location": 163,
            "return": [
                "bool",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolSetting.__bool__": {
            "name": "__bool__",
            "location": 166,
            "return": [
                "str",
                "Type",
                "Dict[str, Any]",
                "PyQt5.QtGui.QPixmap"
            ],
            "arguments": {
                "self": []
            }
        },
        "PromptSetting.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PromptSetting.suggestions": {
            "name": "suggestions",
            "location": 200,
            "return": [
                "bool",
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PromptSetting.convertstr": {
            "name": "convertstr",
            "location": 203,
            "return": [
                "bool",
                "Options"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PromptSetting.__str__": {
            "name": "__str__",
            "location": 211,
            "return": [
                "typing.Text",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "PromptSetting.__bool__": {
            "name": "__bool__",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberSetting.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "vimiv.utils.customtypes.Number",
                    "bool",
                    "Optional[float]"
                ],
                "default_value": [
                    "str",
                    "List[str]",
                    "vimiv.utils.customtypes.Number",
                    "bool",
                    "Optional[float]"
                ],
                "desc": [
                    "typing.Text",
                    "str",
                    "List[str]",
                    "vimiv.utils.customtypes.Number",
                    "bool",
                    "Optional[float]"
                ],
                "suggestions": [
                    "None",
                    "str",
                    "List[str]",
                    "vimiv.utils.customtypes.Number",
                    "bool",
                    "Optional[float]"
                ],
                "hidden": [
                    "bool",
                    "str",
                    "List[str]",
                    "vimiv.utils.customtypes.Number",
                    "Optional[float]"
                ],
                "min_value": [
                    "None",
                    "bool",
                    "int",
                    "Optional[Mapping]"
                ],
                "max_value": [
                    "None",
                    "int",
                    "Optional[int]",
                    "float",
                    "vimiv.utils.customtypes.Number"
                ]
            }
        },
        "NumberSetting.__iadd__": {
            "name": "__iadd__",
            "location": 248,
            "return": [
                "NumberSetting",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[object]",
                    "float",
                    "Union[qutebrowser.utils.usertypes.Unset, List]",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "NumberSetting.__imul__": {
            "name": "__imul__",
            "location": 253,
            "return": [
                "NumberSetting",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[object]",
                    "float",
                    "Union[qutebrowser.utils.usertypes.Unset, List]",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "NumberSetting.convert": {
            "name": "convert",
            "location": 258,
            "return": [
                "str",
                "int",
                "float",
                "raiden.utils.BlockHash",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "Optional[Union[int, float]]"
                ]
            }
        },
        "IntSetting.__str__": {
            "name": "__str__",
            "location": 267,
            "return": [
                "typing.Text",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatSetting.__str__": {
            "name": "__str__",
            "location": 276,
            "return": [
                "typing.Text",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailSizeSetting.convert": {
            "name": "convert",
            "location": 290,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ThumbnailSizeSetting.step": {
            "name": "step",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "up": [
                    "bool",
                    "T"
                ]
            }
        },
        "ThumbnailSizeSetting.suggestions": {
            "name": "suggestions",
            "location": 302,
            "return": [
                "list[str]",
                "List[str]",
                "str",
                "Union[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailSizeSetting.__str__": {
            "name": "__str__",
            "location": 305,
            "return": [
                "typing.Text",
                "bytes",
                "int",
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrSetting.__str__": {
            "name": "__str__",
            "location": 314,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PromptSetting.Options.__str__": {
            "name": "__str__",
            "location": 188,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/api/signals.py": {},
    "vimiv-qt-master/vimiv/api/status.py": {
        "module": {
            "name": "module",
            "location": 68,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_log_unknown_module": {
            "name": "_log_unknown_module",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "reason": [
                    "str",
                    "Tuple[Tuple[str, ...]]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "clear": {
            "name": "clear",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "reason": [
                    "str",
                    "int",
                    "vimiv.commands.argtypes.Direction",
                    "Tuple[Tuple[str, ...]]",
                    "float"
                ]
            }
        },
        "_Module.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "List[List[T]]"
                ]
            }
        },
        "_Module.__call__": {
            "name": "__call__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Module.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "cmk.utils.type_defs.UserId",
                "int",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "module.decorator": {
            "name": "decorator",
            "location": 81,
            "return": [
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "function": [
                    "Callable[..., Awaitable[None]]",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/api/working_directory.py": {
        "init": {
            "name": "init",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WorkingDirectoryHandler.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkingDirectoryHandler.images": {
            "name": "images",
            "location": 118,
            "return": [
                "str",
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkingDirectoryHandler.chdir": {
            "name": "chdir",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "reload_current": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WorkingDirectoryHandler._monitor": {
            "name": "_monitor",
            "location": 138,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "bytes"
                ]
            }
        },
        "WorkingDirectoryHandler._on_monitor_fs_changed": {
            "name": "_on_monitor_fs_changed",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "KT",
                    "int"
                ]
            }
        },
        "WorkingDirectoryHandler._load_directory": {
            "name": "_load_directory",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "WorkingDirectoryHandler._reload_directory": {
            "name": "_reload_directory",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "WorkingDirectoryHandler._on_new_image": {
            "name": "_on_new_image",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[int]",
                    "str",
                    "list"
                ]
            }
        },
        "WorkingDirectoryHandler._on_file_changed": {
            "name": "_on_file_changed",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "WorkingDirectoryHandler._maybe_emit_image_changed": {
            "name": "_maybe_emit_image_changed",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkingDirectoryHandler._emit_changes": {
            "name": "_emit_changes",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "images": [
                    "bool",
                    "Mapping[str, Callable[[], object]]",
                    "str"
                ],
                "directories": [
                    "int"
                ]
            }
        },
        "WorkingDirectoryHandler._get_content": {
            "name": "_get_content",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "bool"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/api/_mark.py": {
        "Mark.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mark.tagdir": {
            "name": "tagdir",
            "location": 65,
            "return": [
                "List[str]",
                "str",
                "Set[str]",
                "faustypes.settings.params.Param"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mark.watcher": {
            "name": "watcher",
            "location": 70,
            "return": [
                "QFileSystemWatcher",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mark.is_marked": {
            "name": "is_marked",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Mark.mark": {
            "name": "mark",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "str",
                    "bool",
                    "int",
                    "Tuple[int, int]",
                    "Optional[bool]"
                ],
                "action": [
                    "str",
                    "bool"
                ]
            }
        },
        "Mark.mark_clear": {
            "name": "mark_clear",
            "location": 113,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mark.mark_restore": {
            "name": "mark_restore",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mark.tag_write": {
            "name": "tag_write",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Mark.tag_delete": {
            "name": "tag_delete",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Mark.tag_load": {
            "name": "tag_load",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Mark.tag_open": {
            "name": "tag_open",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable[..., T]"
                ]
            }
        },
        "Mark.mark_indicator": {
            "name": "mark_indicator",
            "location": 230,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mark.mark_count": {
            "name": "mark_count",
            "location": 237,
            "return": [
                "typing.Text",
                "trezor.utils.Writer",
                "Dict[str, int]",
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mark.paths": {
            "name": "paths",
            "location": 245,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mark.indicator": {
            "name": "indicator",
            "location": 250,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mark.highlight": {
            "name": "highlight",
            "location": 259,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ],
                "marked": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Mark._toggle_mark": {
            "name": "_toggle_mark",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Mark._on_file_changed": {
            "name": "_on_file_changed",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Mark._mark": {
            "name": "_mark",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Mark._unmark": {
            "name": "_unmark",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 331,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "read_only": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str",
                    "Tuple[int]",
                    "list"
                ]
            }
        },
        "Tag.__enter__": {
            "name": "__enter__",
            "location": 355,
            "return": [
                "Tag",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__exit__": {
            "name": "__exit__",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__repr__": {
            "name": "__repr__",
            "location": 361,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.write": {
            "name": "write",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "List[str]",
                    "str",
                    "Sequence[Any]"
                ]
            }
        },
        "Tag.read": {
            "name": "read",
            "location": 371,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.dirname": {
            "name": "dirname",
            "location": 380,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "Tag.path": {
            "name": "path",
            "location": 385,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Tag._write_header": {
            "name": "_write_header",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag._write_comment": {
            "name": "_write_comment",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "Callable[[str, Any], Tuple[bytes, int]]",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Mark.tag_delete.safe_delete": {
            "name": "safe_delete",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "operation": [
                    "Callable",
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/api/_modules.py": {
        "enter": {
            "name": "enter",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "mode": [
                    "str"
                ]
            }
        },
        "toggle": {
            "name": "toggle",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "copy_name": {
            "name": "copy_name",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "abspath": [
                    "bool",
                    "str"
                ],
                "primary": [
                    "bool"
                ]
            }
        },
        "copy_image": {
            "name": "copy_image",
            "location": 95,
            "return": [
                "None",
                "int",
                "Union[tuple, list]",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "primary": [
                    "bool",
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "width": [
                    "None",
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "height": [
                    "None",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "size": [
                    "None",
                    "int",
                    "Optional[int]",
                    "float",
                    "bool",
                    "str"
                ],
                "count": [
                    "None",
                    "int",
                    "Union[float, int]",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "paste_name": {
            "name": "paste_name",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "primary": [
                    "bool",
                    "str"
                ]
            }
        },
        "rename": {
            "name": "rename",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "cmk.utils.type_defs.ConfigSerial",
                    "cmk.utils.type_defs.HostName"
                ],
                "base": [
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "str"
                ],
                "start": [
                    "int",
                    "str",
                    "Union[bool, List, Tuple]",
                    "bool"
                ],
                "separator": [
                    "typing.Text",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "str"
                ],
                "overwrite": [
                    "bool",
                    "str"
                ],
                "skip_image_check": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "mark_rename": {
            "name": "mark_rename",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "base": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "start": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "overwrite": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "separator": [
                    "typing.Text",
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "print_stdout": {
            "name": "print_stdout",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "sep": [
                    "str",
                    "typing.Text"
                ],
                "end": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "active_name": {
            "name": "active_name",
            "location": 266,
            "return": [
                "Dict[str, str]",
                "list",
                "type"
            ],
            "arguments": {}
        },
        "pwd": {
            "name": "pwd",
            "location": 272,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "filesize": {
            "name": "filesize",
            "location": 281,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "modified": {
            "name": "modified",
            "location": 287,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "read_only": {
            "name": "read_only",
            "location": 298,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/api/__init__.py": {
        "current_path": {
            "name": "current_path",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "None"
                ]
            }
        },
        "pathlist": {
            "name": "pathlist",
            "location": 45,
            "return": [
                "list",
                "List[str]",
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "mode": [
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "bytes",
                    "list",
                    "List[Tuple[float, float]]"
                ]
            }
        },
        "open_paths": {
            "name": "open_paths",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "add_external_format": {
            "name": "add_external_format",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "file_format": [
                    "int",
                    "str",
                    "BinaryIO",
                    "Callable[[int, int], None]",
                    "Iterable",
                    "bool"
                ],
                "test_func": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ],
                "load_func": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/commands/aliases.py": {
        "get": {
            "name": "get",
            "location": 26,
            "return": [
                "str",
                "dict[dict, dict]",
                "bool",
                "dict"
            ],
            "arguments": {
                "mode": [
                    "vimiv.api.modes.Mode",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "alias": {
            "name": "alias",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "command": [
                    "str",
                    "List[str]"
                ],
                "mode": [
                    "typing.Text",
                    "str",
                    "Union[str, None]",
                    "Dict[str, str]",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/commands/argtypes.py": {
        "DirectionWithPage.is_page_step": {
            "name": "is_page_step",
            "location": 40,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectionWithPage.is_half_page_step": {
            "name": "is_half_page_step",
            "location": 44,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectionWithPage.is_reverse": {
            "name": "is_reverse",
            "location": 48,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageScaleFloat.__new__": {
            "name": "__new__",
            "location": 71,
            "return": [
                "float",
                "int",
                "ImageScale",
                "Callable",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Union[Any, Any]]",
                    "Pattern[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict",
                    "int",
                    "bytes",
                    "T",
                    "Union[int, float, str]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/commands/delete_command.py": {
        "delete": {
            "name": "delete",
            "location": 20,
            "return": [
                "None",
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "paths": [
                    "str"
                ],
                "ask": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "undelete": {
            "name": "undelete",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "basenames": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/commands/external.py": {
        "ExternalRunner.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalRunner.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalRunner.run": {
            "name": "run",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ExternalRunner.spawn": {
            "name": "spawn",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Optional[\"UtilityFunction\"]",
                    "int"
                ],
                "shell": [
                    "typing.Text",
                    "str",
                    "Optional[\"UtilityFunction\"]",
                    "int"
                ],
                "shellarg": [
                    "typing.Text",
                    "str",
                    "Optional[\"UtilityFunction\"]",
                    "int"
                ]
            }
        },
        "_ExternalRunnerImpl.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ExternalRunnerImpl.__call__": {
            "name": "__call__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Exception"
                ]
            }
        },
        "_ExternalRunnerImpl._on_finished": {
            "name": "_on_finished",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exitcode": [
                    "int",
                    "Callable",
                    "str"
                ],
                "exitstatus": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_ExternalRunnerImpl._process_pipe": {
            "name": "_process_pipe",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ExternalRunnerImpl._on_error": {
            "name": "_on_error",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Exception"
                ]
            }
        },
        "_ExternalRunnerImpl._on_quit": {
            "name": "_on_quit",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/commands/help_command.py": {
        "help_command": {
            "name": "help_command",
            "location": 19,
            "return": [
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "topic": [
                    "dict"
                ]
            }
        },
        "_general_help": {
            "name": "_general_help",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_command_help": {
            "name": "_command_help",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "str",
                    "vimiv.api.commands._Command"
                ]
            }
        },
        "_setting_help": {
            "name": "_setting_help",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "setting": [
                    "Set[str]",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "_wildcard_help": {
            "name": "_wildcard_help",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_format_help": {
            "name": "_format_help",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/commands/history.py": {
        "History.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prefixes": [
                    "int"
                ],
                "max_items": [
                    "int"
                ]
            }
        },
        "History.reset": {
            "name": "reset",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "History.write": {
            "name": "write",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "History.migrate_nonmode_based_history": {
            "name": "migrate_nonmode_based_history",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "History.filename": {
            "name": "filename",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "Iterable[Tuple[str, str]]",
                    "List[str]"
                ]
            }
        },
        "History._read": {
            "name": "_read",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "HistoryDeque.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prefixes": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "commands": [
                    "str",
                    "Tuple[str]",
                    "bool"
                ],
                "max_items": [
                    "int",
                    "str",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "HistoryDeque.update": {
            "name": "update",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "HistoryDeque.reset": {
            "name": "reset",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryDeque.cycle": {
            "name": "cycle",
            "location": 132,
            "return": [
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str",
                    "Optional[str]",
                    "Dict[Any, Type[str]]"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "Dict[Any, Type[str]]"
                ]
            }
        },
        "HistoryDeque.substr_cycle": {
            "name": "substr_cycle",
            "location": 145,
            "return": [
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str",
                    "Optional[str]",
                    "Dict[Any, Type[str]]"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "Dict[Any, Type[str]]"
                ]
            }
        },
        "HistoryDeque._cycle_tmpdeque": {
            "name": "_cycle_tmpdeque",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "int",
                    "bool"
                ],
                "text": [
                    "str",
                    "Dict[str, str]"
                ],
                "mode": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "float"
                ],
                "match": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/commands/misccommands.py": {
        "log": {
            "name": "log",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "level": [
                    "str",
                    "List[str]",
                    "Mapping[str, Any]",
                    "int"
                ],
                "message": [
                    "List[str]",
                    "str",
                    "int",
                    "cmk.utils.type_defs.ServiceCheckResult",
                    "Dict[str, float]"
                ]
            }
        },
        "sleep": {
            "name": "sleep",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "duration": [
                    "float",
                    "int",
                    "str",
                    "vimiv.commands.argtypes.Direction"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/commands/runners.py": {
        "text_non_whitespace": {
            "name": "text_non_whitespace",
            "location": 42,
            "return": [
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "func": [
                    "list",
                    "tuple",
                    "str",
                    "Optional[int]",
                    "Union[int, None]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ],
                "mode": [
                    "str",
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Sequence[Dict[str, str]]"
                ],
                "count": [
                    "typing.Text",
                    "str",
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "_run_single": {
            "name": "_run_single",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Dict[str, Any]"
                ],
                "mode": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "count": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "command": {
            "name": "command",
            "location": 102,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "text": [
                    "Optional[List[str]]",
                    "bool",
                    "IO",
                    "str",
                    "Callable"
                ],
                "mode": [
                    "None",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "repeat_command": {
            "name": "repeat_command",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "None"
                ]
            }
        },
        "_run_command": {
            "name": "_run_command",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "type",
                    "Callable",
                    "Callable[..., None]"
                ],
                "cmdname": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "args": [],
                "mode": [
                    "str",
                    "int"
                ]
            }
        },
        "_parse": {
            "name": "_parse",
            "location": 174,
            "return": [
                "tuple[typing.Text]",
                "str",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "alias": {
            "name": "alias",
            "location": 196,
            "return": [
                "Container[T]",
                "int"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "mode": [
                    "str",
                    "int",
                    "Dict[str, int]"
                ]
            }
        },
        "text_non_whitespace.inner": {
            "name": "inner",
            "location": 45,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "str",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "run.update_part": {
            "name": "update_part",
            "location": 69,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/commands/search.py": {
        "use_incremental": {
            "name": "use_incremental",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "PyQt5.QtCore.QUrl"
                ]
            }
        },
        "search_next": {
            "name": "search_next",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "search_prev": {
            "name": "search_prev",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, Any]",
                    "Optional[Callable]"
                ]
            }
        },
        "_sort_for_search": {
            "name": "_sort_for_search",
            "location": 146,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "Pattern[str]",
                    "list",
                    "List[str]"
                ],
                "index": [
                    "str",
                    "Pattern[str]",
                    "list",
                    "List[str]"
                ],
                "reverse": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "_get_next_match": {
            "name": "_get_next_match",
            "location": 162,
            "return": [
                "tuple[list]",
                "str",
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "count": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "Tuple[str, str, str, str, str, str, str, str]",
                    "int"
                ],
                "paths": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "_matches": {
            "name": "_matches",
            "location": 177,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "list"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "pattern": [
                    "str"
                ]
            }
        },
        "Search.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Search.__call__": {
            "name": "__call__",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "Union[List, str]",
                    "Union[str, int]"
                ],
                "mode": [
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ],
                "count": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "reverse": [
                    "bool",
                    "int",
                    "str"
                ],
                "incremental": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        },
        "Search.repeat": {
            "name": "repeat",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "reverse": [
                    "str",
                    "bool"
                ]
            }
        },
        "Search._run": {
            "name": "_run",
            "location": 84,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "mode": [
                    "str",
                    "Tuple[str]",
                    "int"
                ],
                "count": [
                    "str"
                ],
                "reverse": [
                    "str",
                    "Callable[[str], bool]",
                    "bool",
                    "int"
                ],
                "incremental": [
                    "str",
                    "int",
                    "List[List[float]]"
                ]
            }
        },
        "Search.clear": {
            "name": "clear",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Search.connect_signals": {
            "name": "connect_signals",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Search._on_directory_changed": {
            "name": "_on_directory_changed",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_images": [
                    "str",
                    "int",
                    "Tuple[int, int, int]"
                ],
                "_directories": [
                    "str",
                    "int",
                    "Tuple[int, int, int]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/commands/wildcards.py": {
        "expand_internal": {
            "name": "expand_internal",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "list",
                    "List[str]"
                ],
                "mode": [
                    "str",
                    "int",
                    "list",
                    "List[str]"
                ]
            }
        },
        "escape_path": {
            "name": "escape_path",
            "location": 65,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "expand": {
            "name": "expand",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ],
                "wildcard": [
                    "str",
                    "Callable"
                ],
                "callback": [
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "Wildcard.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "wildcard": [
                    "str",
                    "Tuple[List[str], Optional[str]]",
                    "Callable",
                    "int"
                ],
                "description": [
                    "str",
                    "Tuple[List[str], Optional[str]]",
                    "Callable",
                    "int"
                ],
                "callback": [
                    "str",
                    "Tuple[List[str], Optional[str]]",
                    "Callable",
                    "int"
                ]
            }
        },
        "Wildcard.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "vimiv.api.modes.Mode",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/commands/__init__.py": {
        "number_for_command": {
            "name": "number_for_command",
            "location": 12,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "number": [
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "count": [
                    "None",
                    "Optional[bool]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/completion/completer.py": {
        "Completer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "commandline": [
                    "int",
                    "bool",
                    "float"
                ],
                "completion": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Completer.proxy_model": {
            "name": "proxy_model",
            "location": 37,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completer.model": {
            "name": "model",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completer.has_completions": {
            "name": "has_completions",
            "location": 45,
            "return": [
                "bool",
                "Union[List[str], str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completer.reset": {
            "name": "reset",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completer._init_models": {
            "name": "_init_models",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Completer.initialize": {
            "name": "initialize",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Completer._on_text_changed": {
            "name": "_on_text_changed",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Completer._update_proxy_model": {
            "name": "_update_proxy_model",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "dict"
                ]
            }
        },
        "Completer._complete": {
            "name": "_complete",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Completer._show_unless_empty": {
            "name": "_show_unless_empty",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/completion/completionmodels.py": {
        "init": {
            "name": "init",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "CommandModel.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandModel.on_enter": {
            "name": "on_enter",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "CommandModel.formatted_commands": {
            "name": "formatted_commands",
            "location": 31,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "vimiv.api.modes.Mode",
                    "raiden.utils.Any"
                ]
            }
        },
        "CommandModel.formatted_aliases": {
            "name": "formatted_aliases",
            "location": 39,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "Optional[str]",
                "Container[\"Taxon\"]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "vimiv.api.modes.Mode",
                    "str",
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "ExternalCommandModel.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalCommandModel.on_enter": {
            "name": "on_enter",
            "location": 54,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "_text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ExternalCommandModel._get_executables": {
            "name": "_get_executables",
            "location": 69,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathModel.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Dict[str, Any]",
                    "List[int]"
                ],
                "valid_modes": [
                    "str",
                    "bool",
                    "type"
                ]
            }
        },
        "PathModel.on_enter": {
            "name": "on_enter",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "PathModel.on_text_changed": {
            "name": "on_text_changed",
            "location": 103,
            "return": [
                "None",
                "Set[cmk.utils.type_defs.HostName]",
                "set",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "PathModel._create_row": {
            "name": "_create_row",
            "location": 122,
            "return": [
                "str",
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "PathModel._get_directory": {
            "name": "_get_directory",
            "location": 125,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "SettingsModel.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsOptionModel.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "setting": [
                    "vimiv.api.settings.Setting",
                    "dict",
                    "Dict[int, Dict[str, Any]]",
                    "Set[int]",
                    "Type[Tuple[int, int]]",
                    "Set[cmk.utils.type_defs.CheckPluginName]"
                ]
            }
        },
        "SettingsOptionModel._update_data": {
            "name": "_update_data",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsOptionModel._on_changed": {
            "name": "_on_changed",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "TrashModel.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrashModel.on_enter": {
            "name": "on_enter",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TagModel.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TagModel.on_enter": {
            "name": "on_enter",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "HelpModel.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HelpModel.on_enter": {
            "name": "on_enter",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "HelpModel.formatted_commands": {
            "name": "formatted_commands",
            "location": 264,
            "return": [
                "str",
                "list[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "vimiv.api.modes.Mode",
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/completion/__init__.py": {},
    "vimiv-qt-master/vimiv/config/configcommands.py": {
        "set_command": {
            "name": "set_command",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "list",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "bind": {
            "name": "bind",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keybinding": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "command": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "mode": [
                    "None",
                    "str",
                    "Callable[[T], bool]",
                    "Type"
                ]
            }
        },
        "unbind": {
            "name": "unbind",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keybinding": [
                    "str",
                    "bool",
                    "int",
                    "vimiv.api.modes.Mode"
                ],
                "mode": [
                    "str",
                    "None"
                ]
            }
        },
        "nop": {
            "name": "nop",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/config/configfile.py": {
        "parse": {
            "name": "parse",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cli_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_default_parser": {
            "name": "get_default_parser",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_update_setting": {
            "name": "_update_setting",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "parser": [
                    "str",
                    "tuple",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "_add_statusbar_formatters": {
            "name": "_add_statusbar_formatters",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configsection": [
                    "Dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ]
            }
        },
        "_get_section_option": {
            "name": "_get_section_option",
            "location": 115,
            "return": [
                "tuple",
                "str",
                "bool",
                "int",
                "recidiviz.utils.regions.Region",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "_add_aliases": {
            "name": "_add_aliases",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configsection": [
                    "Dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ]
            }
        },
        "_read_plugins": {
            "name": "_read_plugins",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pluginsection": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "_add_metadata": {
            "name": "_add_metadata",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configsection": [
                    "Dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/config/external_configparser.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "getenv": {
            "name": "getenv",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "variable": [
                    "str",
                    "Exception"
                ]
            }
        },
        "ExternalInterpolation.before_get": {
            "name": "before_get",
            "location": 58,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "_parser": [
                    "Callable[[str], T]",
                    "Optional[str]"
                ],
                "_section": [
                    "Callable[[str], T]",
                    "Optional[str]"
                ],
                "_option": [
                    "Callable[[str], T]",
                    "Optional[str]"
                ],
                "value": [
                    "bool",
                    "Type[T]",
                    "Dict[Any, int]"
                ],
                "_defaults": [
                    "Callable[[str], T]",
                    "Optional[str]"
                ]
            }
        },
        "ExternalInterpolation.update": {
            "name": "update",
            "location": 64,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "str",
                    "int",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/config/keyfile.py": {
        "parse": {
            "name": "parse",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cli_path": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_default_parser": {
            "name": "get_default_parser",
            "location": 34,
            "return": [
                "KeyfileParser"
            ],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_read_mode": {
            "name": "_read_mode",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "bindings": [
                    "int",
                    "Iterable[Tuple[str, str]]",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "mode": [
                    "vimiv.api.modes.Mode",
                    "str"
                ]
            }
        },
        "_delete_binding": {
            "name": "_delete_binding",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keybinding": [
                    "str",
                    "vimiv.api.modes.Mode",
                    "Optional[str]"
                ],
                "mode": [
                    "str",
                    "vimiv.api.modes.Mode",
                    "Optional[str]"
                ]
            }
        },
        "KeyfileParser.optionxform": {
            "name": "optionxform",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "optionstr": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/config/styles.py": {
        "abspath": {
            "name": "abspath",
            "location": 116,
            "return": [
                "lightbus.config.Config",
                "str",
                "cerise.config.Config",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "apply": {
            "name": "apply",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj": [],
                "append": [
                    "typing.Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 156,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "create_default": {
            "name": "create_default",
            "location": 165,
            "return": [
                "Style",
                "int",
                "str",
                "configparser.ConfigParser",
                "bytes"
            ],
            "arguments": {
                "dark": [
                    "bool",
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ],
                "save_to_file": [
                    "bool",
                    "Optional[str]",
                    "Union[Callable, str]",
                    "str"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 221,
            "return": [
                "Style",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 257,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "style": [
                    "dict",
                    "Mapping[str, Dict[str, Any]]",
                    "Mapping[str, Any]",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "_crash_read": {
            "name": "_crash_read",
            "location": 278,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Style.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Style.__getitem__": {
            "name": "__getitem__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "Style.__setitem__": {
            "name": "__setitem__",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[str]",
                    "tuple",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "item": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Style.key": {
            "name": "key",
            "location": 84,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Style.is_color_option": {
            "name": "is_color_option",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Style.check_valid_color": {
            "name": "check_valid_color",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "color": [
                    "str",
                    "int"
                ]
            }
        },
        "Style.add_alpha": {
            "name": "add_alpha",
            "location": 110,
            "return": [
                "Mapping[str, Any]",
                "str",
                "Dict[str, Any]",
                "Iterable[int]"
            ],
            "arguments": {
                "color": [
                    "str"
                ],
                "alpha": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/config/_style_options.py": {},
    "vimiv-qt-master/vimiv/config/__init__.py": {
        "parse_config": {
            "name": "parse_config",
            "location": 17,
            "return": [
                "None",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "cli_path": [
                    "Optional[str]",
                    "str"
                ],
                "basename": [
                    "str",
                    "Sequence[str]",
                    "bool"
                ],
                "read": [
                    "Callable[[str], None]",
                    "str"
                ],
                "dump": [
                    "Callable[[str], None]",
                    "str"
                ]
            }
        },
        "read_log_exception": {
            "name": "read_log_exception",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "configparser.ConfigParser",
                    "os.PathLike"
                ],
                "logger": [
                    "vimiv.utils.log.LazyLogger",
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/commandline.py": {
        "CommandLine.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine.init": {
            "name": "init",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine.pathlist": {
            "name": "pathlist",
            "location": 79,
            "return": [
                "str",
                "List[dict]",
                "torch.nn.utils.rnn.PackedSequence",
                "utils.Node",
                "bytearray",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine.current": {
            "name": "current",
            "location": 82,
            "return": [
                "str",
                "List[dict]",
                "torch.nn.utils.rnn.PackedSequence",
                "utils.Node",
                "bytearray",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine.enter": {
            "name": "enter",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "CommandLine.leave": {
            "name": "leave",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine._on_return_pressed": {
            "name": "_on_return_pressed",
            "location": 94,
            "return": [
                "None",
                "str",
                "\"DGEList\""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine._split_prefix": {
            "name": "_split_prefix",
            "location": 109,
            "return": [
                "tuple",
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "CommandLine._on_text_edited": {
            "name": "_on_text_edited",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "CommandLine._incremental_search": {
            "name": "_incremental_search",
            "location": 131,
            "return": [
                "None",
                "Union[tuple, list]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine._on_cursor_position_changed": {
            "name": "_on_cursor_position_changed",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_old": [
                    "int",
                    "bool",
                    "List[Dict[str, Any]]",
                    "float"
                ],
                "new": [
                    "int",
                    "bool",
                    "List[Dict[str, Any]]",
                    "float"
                ]
            }
        },
        "CommandLine.history": {
            "name": "history",
            "location": 149,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "int"
                ]
            }
        },
        "CommandLine.history_substr_search": {
            "name": "history_substr_search",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "int",
                    "List[int]",
                    "bool",
                    "Tuple[int]",
                    "str"
                ]
            }
        },
        "CommandLine.history_clear": {
            "name": "history_clear",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "bool",
                    "vimiv.api.modes.Mode",
                    "str",
                    "Type[\"SerializationDialect\"]",
                    "int"
                ]
            }
        },
        "CommandLine.focusOutEvent": {
            "name": "focusOutEvent",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/commandwidget.py": {
        "CommandWidget.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mainwindow": [
                    "int",
                    "Optional[int]",
                    "Dict[int, int]",
                    "str"
                ]
            }
        },
        "CommandWidget.command": {
            "name": "command",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "CommandWidget.search": {
            "name": "search",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "reverse": [
                    "bool",
                    "int",
                    "str",
                    "List[int]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "CommandWidget._enter_command_mode": {
            "name": "_enter_command_mode",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "CommandWidget.leave_commandline": {
            "name": "leave_commandline",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandWidget.update_geometry": {
            "name": "update_geometry",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "window_width": [
                    "int",
                    "List[str]"
                ],
                "window_height": [
                    "int",
                    "str",
                    "type"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/completionwidget.py": {
        "CompletionView.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "bool",
                    "float"
                ]
            }
        },
        "CompletionView.complete": {
            "name": "complete",
            "location": 58,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inverse": [
                    "bool",
                    "Tuple[int, int]",
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "CompletionView.resizeEvent": {
            "name": "resizeEvent",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PyQt5.QtCore.QObject",
                    "PyQt5.QtGui.QKeyEvent"
                ]
            }
        },
        "CompletionView.update_column_widths": {
            "name": "update_column_widths",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/eventhandler.py": {
        "keyevent_to_sequence": {
            "name": "keyevent_to_sequence",
            "location": 208,
            "return": [
                "tuple",
                "cmk.utils.type_defs.UserId",
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "event": [
                    "PyQt5.QtGui.QKeyEvent",
                    "dict"
                ]
            }
        },
        "mouseevent_to_sequence": {
            "name": "mouseevent_to_sequence",
            "location": 228,
            "return": [
                "tuple[typing.Text]",
                "dict",
                "Dict[str, Any]",
                "Callable",
                "str",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "event": [
                    "PyQt5.QtGui.QMouseEvent",
                    "Dict[str, Any]",
                    "str"
                ],
                "prefix": [
                    "typing.Text",
                    "str",
                    "Dict[str, Any]",
                    "PyQt5.QtGui.QMouseEvent"
                ]
            }
        },
        "_get_modifier_names": {
            "name": "_get_modifier_names",
            "location": 242,
            "return": [
                "list",
                "List[str]",
                "str",
                "bool",
                "Set[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]",
                    "Union[str, dict]",
                    "Mapping"
                ]
            }
        },
        "_get_base_keysequence": {
            "name": "_get_base_keysequence",
            "location": 257,
            "return": [
                "tuple[typing.Text]",
                "str",
                "tuple",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "PyQt5.QtGui.QKeyEvent",
                    "Dict[str, str]",
                    "Sequence",
                    "bytes",
                    "dict",
                    "Optional[\"TrackingData\"]"
                ]
            }
        },
        "TempKeyStorage.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempKeyStorage.text": {
            "name": "text",
            "location": 41,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Set[str]",
                "Deque[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempKeyStorage.add_keys": {
            "name": "add_keys",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempKeyStorage.get_text": {
            "name": "get_text",
            "location": 52,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempKeyStorage.get_keys": {
            "name": "get_keys",
            "location": 56,
            "return": [
                "tuple",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempKeyStorage.clear": {
            "name": "clear",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempKeyStorage.on_timeout": {
            "name": "on_timeout",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempKeyStorage._on_timeout_changed": {
            "name": "_on_timeout_changed",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "PartialHandler.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartialHandler.clear_keys": {
            "name": "clear_keys",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartialHandler.text": {
            "name": "text",
            "location": 108,
            "return": [
                "str",
                "Type[BaseException]",
                "Type[T]",
                "Iterable[str]",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandlerMixin.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 121,
            "return": [
                "None",
                "T",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "List[dict]",
                    "utils.pluginmgr.Command"
                ]
            }
        },
        "EventHandlerMixin.mousePressEvent": {
            "name": "mousePressEvent",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PyQt5.QtGui.QMouseEvent",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "EventHandlerMixin.mouseDoubleClickEvent": {
            "name": "mouseDoubleClickEvent",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PyQt5.QtGui.QMouseEvent",
                    "Dict[str, Any]"
                ]
            }
        },
        "EventHandlerMixin._process_event": {
            "name": "_process_event",
            "location": 162,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "str"
                ],
                "mode": [
                    "None",
                    "str",
                    "purplship.core.utils.Element",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "EventHandlerMixin.unprocessed_keys": {
            "name": "unprocessed_keys",
            "location": 203,
            "return": [
                "str",
                "Union[str, Dict[str, str]]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/gui/image.py": {
        "ScrollableImage.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage.current": {
            "name": "current",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ScrollableImage.pathlist": {
            "name": "pathlist",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ScrollableImage.focalpoint": {
            "name": "focalpoint",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage.visible_rect": {
            "name": "visible_rect",
            "location": 108,
            "return": [
                "hackathon.utils.utils.DataMessage",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage._load_pixmap": {
            "name": "_load_pixmap",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "PyQt5.QtGui.QPixmap",
                    "str",
                    "bool"
                ],
                "keep_zoom": [
                    "Callable[[str], bool]",
                    "Type",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "ScrollableImage._load_movie": {
            "name": "_load_movie",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "movie": [
                    "str",
                    "PyQt5.QtGui.QMovie",
                    "List[str]"
                ],
                "keep_zoom": [
                    "str",
                    "int"
                ]
            }
        },
        "ScrollableImage._load_svg": {
            "name": "_load_svg",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "keep_zoom": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]",
                    "list",
                    "set"
                ]
            }
        },
        "ScrollableImage._update_scene": {
            "name": "_update_scene",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Mapping",
                    "Optional[TextIO]"
                ],
                "rect": [
                    "int",
                    "str"
                ],
                "keep_zoom": [
                    "str"
                ]
            }
        },
        "ScrollableImage._update_focalpoint": {
            "name": "_update_focalpoint",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage._on_images_cleared": {
            "name": "_on_images_cleared",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage.scroll": {
            "name": "scroll",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "float",
                    "vimiv.commands.argtypes.Direction",
                    "int"
                ],
                "count": [
                    "int",
                    "Tuple[int]",
                    "bool"
                ]
            }
        },
        "ScrollableImage.center": {
            "name": "center",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage.scroll_edge": {
            "name": "scroll_edge",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "List['cirq.Qid']"
                ]
            }
        },
        "ScrollableImage.zoom": {
            "name": "zoom",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "int"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "ScrollableImage.scale": {
            "name": "scale",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "ImageScaleFloat",
                    "int",
                    "torch.nn.utils.rnn.PackedSequence",
                    "timeview.gui.model.View"
                ],
                "count": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ScrollableImage._scale_to_fit": {
            "name": "_scale_to_fit",
            "location": 265,
            "return": [
                "None",
                "str",
                "dict",
                "Iterable[Hashable]"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "None",
                    "int",
                    "str"
                ],
                "height": [
                    "None",
                    "int",
                    "float",
                    "str"
                ],
                "limit": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "ScrollableImage._scale_to_float": {
            "name": "_scale_to_float",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "ScrollableImage.zoom_level": {
            "name": "zoom_level",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage._get_zoom_level": {
            "name": "_get_zoom_level",
            "location": 303,
            "return": [
                "typing.Text",
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage._get_image_size": {
            "name": "_get_image_size",
            "location": 308,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage.play_or_pause": {
            "name": "play_or_pause",
            "location": 315,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage.straighten": {
            "name": "straighten",
            "location": 323,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage.transformation_info": {
            "name": "transformation_info",
            "location": 335,
            "return": [
                "typing.Text",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableImage.resizeEvent": {
            "name": "resizeEvent",
            "location": 341,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PyQt5.QtCore.QObject",
                    "PySide2.QtGui.QResizeEvent",
                    "PyQt5.QtGui.QKeyEvent"
                ]
            }
        },
        "ScrollableImage.mousePressEvent": {
            "name": "mousePressEvent",
            "location": 349,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PySide2.QtWidgets.QGraphicsSceneHoverEvent",
                    "List[dict]"
                ]
            }
        },
        "ScrollableImage.mouseReleaseEvent": {
            "name": "mouseReleaseEvent",
            "location": 355,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PySide2.QtWidgets.QGraphicsSceneHoverEvent",
                    "List[dict]",
                    "Optional[Tuple]"
                ]
            }
        },
        "ScrollableImage.wheelEvent": {
            "name": "wheelEvent",
            "location": 360,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PyQt5.QtGui.QMouseEvent",
                    "dict",
                    "str"
                ]
            }
        },
        "ScrollableImage.focusOutEvent": {
            "name": "focusOutEvent",
            "location": 374,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "MutableMapping[str, Any]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/keybindings_popup.py": {
        "KeybindingsPopUp.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "int",
                    "Optional[List[str]]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "bool"
                ],
                "parent": [
                    "None",
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "KeybindingsPopUp.text": {
            "name": "text",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeybindingsPopUp.description": {
            "name": "description",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeybindingsPopUp.column_count": {
            "name": "column_count",
            "location": 97,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeybindingsPopUp.column_bindings": {
            "name": "column_bindings",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeybindingsPopUp.column_text": {
            "name": "column_text",
            "location": 110,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "str",
                    "Set[str]",
                    "list",
                    "Iterable[Any]"
                ],
                "highlight": [
                    "str",
                    "int",
                    "Optional[Callable[[Any, Any], None]]",
                    "Dict[str, str]"
                ],
                "bindings": [
                    "List[Tuple[str, str]]",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "KeybindingsPopUp.highlighted_search_str": {
            "name": "highlighted_search_str",
            "location": 132,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "KeybindingsPopUp.update_search_matches": {
            "name": "update_search_matches",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "bindings": [
                    "str",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "KeybindingsPopUp._update_text": {
            "name": "_update_text",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "None",
                    "bool",
                    "Callable",
                    "str",
                    "Dict[Hashable, Any]",
                    "List[str]"
                ]
            }
        },
        "KeybindingsPopUp._update_description": {
            "name": "_update_description",
            "location": 169,
            "return": [
                "None",
                "Union[tuple, list]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "str",
                    "List[float]",
                    "dict",
                    "Set[str]"
                ],
                "highlight": [
                    "str",
                    "List[float]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/keyhintwidget.py": {
        "KeyhintWidget.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "bool",
                    "float"
                ]
            }
        },
        "KeyhintWidget.update_geometry": {
            "name": "update_geometry",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_window_width": [
                    "bool",
                    "str",
                    "BinaryIO"
                ],
                "window_bottom": [
                    "int",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "KeyhintWidget._update_geometry": {
            "name": "_update_geometry",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyhintWidget._on_partial_matches": {
            "name": "_on_partial_matches",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "List[str]"
                ],
                "matches": [
                    "Iterator[Tuple[str, str]]",
                    "List[Tuple[str, str]]",
                    "Sequence[dict]",
                    "list",
                    "List[str]",
                    "Iterator[tuple]"
                ]
            }
        },
        "KeyhintWidget._on_partial_cleared": {
            "name": "_on_partial_cleared",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyhintWidget._on_delay_changed": {
            "name": "_on_delay_changed",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "KeyhintWidget.show": {
            "name": "show",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/library.py": {
        "strip": {
            "name": "strip",
            "location": 628,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "Library.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mainwindow": []
            }
        },
        "Library._on_new_search": {
            "name": "_on_new_search",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "_matches": [],
                "mode": [],
                "_incremental": []
            }
        },
        "Library._on_show_hidden_changed": {
            "name": "_on_show_hidden_changed",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_value": []
            }
        },
        "Library._on_enter": {
            "name": "_on_enter",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library._on_closed": {
            "name": "_on_closed",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library._select_path": {
            "name": "_select_path",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Library.open_selected": {
            "name": "open_selected",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "close": [
                    "bool"
                ]
            }
        },
        "Library._open_path": {
            "name": "_open_path",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "close": []
            }
        },
        "Library._open_directory": {
            "name": "_open_directory",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "reload_current": [
                    "bool"
                ]
            }
        },
        "Library._open_image": {
            "name": "_open_image",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "close": []
            }
        },
        "Library.scroll": {
            "name": "scroll",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [],
                "open_selected": [
                    "bool"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Library.goto": {
            "name": "goto",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [],
                "open_selected": [
                    "bool"
                ],
                "count": [
                    "None"
                ]
            }
        },
        "Library.update_width": {
            "name": "update_width",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.current": {
            "name": "current",
            "location": 304,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.pathlist": {
            "name": "pathlist",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Library.store_position": {
            "name": "store_position",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.load_directory": {
            "name": "load_directory",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library._get_stored_position": {
            "name": "_get_stored_position",
            "location": 329,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library._select_row": {
            "name": "_select_row",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [],
                "open_selected_image": [
                    "bool"
                ],
                "emit": [
                    "bool"
                ]
            }
        },
        "Library._scroll_wheel_callback": {
            "name": "_scroll_wheel_callback",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_steps_x": [],
                "steps_y": []
            }
        },
        "LibraryModel.__init__": {
            "name": "__init__",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "library": []
            }
        },
        "LibraryModel._update_content": {
            "name": "_update_content",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "images": [],
                "directories": []
            }
        },
        "LibraryModel._on_directory_changed": {
            "name": "_on_directory_changed",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "images": [],
                "directories": []
            }
        },
        "LibraryModel._on_new_search": {
            "name": "_on_new_search",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_index": [],
                "matches": [],
                "mode": [],
                "_incremental": []
            }
        },
        "LibraryModel._on_search_cleared": {
            "name": "_on_search_cleared",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryModel._mark_highlight": {
            "name": "_mark_highlight",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "marked": [
                    "bool"
                ]
            }
        },
        "LibraryModel.remove_all_rows": {
            "name": "remove_all_rows",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryModel.is_highlighted": {
            "name": "is_highlighted",
            "location": 457,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LibraryModel._add_rows": {
            "name": "_add_rows",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paths": [],
                "are_directories": [
                    "bool"
                ]
            }
        },
        "LibraryDelegate.__init__": {
            "name": "__init__",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryDelegate.createEditor": {
            "name": "createEditor",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryDelegate.paint": {
            "name": "paint",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "painter": [],
                "option": [],
                "index": []
            }
        },
        "LibraryDelegate._draw_text": {
            "name": "_draw_text",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "painter": [],
                "option": [],
                "index": []
            }
        },
        "LibraryDelegate._draw_background": {
            "name": "_draw_background",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "painter": [],
                "option": [],
                "index": []
            }
        },
        "LibraryDelegate._get_foreground_color": {
            "name": "_get_foreground_color",
            "location": 568,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "text": []
            }
        },
        "LibraryDelegate._get_background_color": {
            "name": "_get_background_color",
            "location": 582,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "state": []
            }
        },
        "LibraryDelegate.elided": {
            "name": "elided",
            "location": 602,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "font_metrics": [],
                "width": []
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/mainwindow.py": {
        "MainWindow.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow._init_manipulate": {
            "name": "_init_manipulate",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.fullscreen": {
            "name": "fullscreen",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.version": {
            "name": "version",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "copy": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "tuple"
                ]
            }
        },
        "MainWindow.keybindings": {
            "name": "keybindings",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "int",
                    "str",
                    "tuple",
                    "float",
                    "Optional[List[Any]]",
                    "Optional[Exception]"
                ]
            }
        },
        "MainWindow.welcome_to_qt": {
            "name": "welcome_to_qt",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.resizeEvent": {
            "name": "resizeEvent",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PyQt5.QtCore.QObject",
                    "PyQt5.QtGui.QKeyEvent"
                ]
            }
        },
        "MainWindow.show": {
            "name": "show",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.bottom": {
            "name": "bottom",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.add_overlay": {
            "name": "add_overlay",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "int",
                    "List[int]",
                    "Union[bool, str, int]"
                ],
                "resize": [
                    "bool",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "MainWindow._update_overlay_geometry": {
            "name": "_update_overlay_geometry",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.focusNextPrevChild": {
            "name": "focusNextPrevChild",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_next_child": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MainWindow._set_title": {
            "name": "_set_title",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow._run_prompt": {
            "name": "_run_prompt",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "str"
                ]
            }
        },
        "ImageThumbnailStack.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageThumbnailStack._enter_thumbnail": {
            "name": "_enter_thumbnail",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageThumbnailStack._enter_image": {
            "name": "_enter_image",
            "location": 199,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/manipulate.py": {
        "Manipulate.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mainwindow": [
                    "Optional[bytes]",
                    "str",
                    "IO"
                ]
            }
        },
        "Manipulate._mainwindow": {
            "name": "_mainwindow",
            "location": 60,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulate.next_tab": {
            "name": "next_tab",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "Manipulate.prev_tab": {
            "name": "prev_tab",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "Manipulate.current": {
            "name": "current",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Manipulate.pathlist": {
            "name": "pathlist",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Manipulate._add_group": {
            "name": "_add_group",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "List[int]",
                    "List[str]",
                    "list",
                    "int"
                ]
            }
        },
        "Manipulate.update_geometry": {
            "name": "update_geometry",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "window_width": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "window_height": [
                    "int",
                    "Iterable[Any]",
                    "Optional[float]",
                    "Union[int, float]"
                ]
            }
        },
        "Manipulate.show": {
            "name": "show",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulate._close": {
            "name": "_close",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManipulateImage.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "bool",
                    "float"
                ],
                "manipulator": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "ManipulateImage.update_geometry": {
            "name": "update_geometry",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes",
                    "List[int]",
                    "bool"
                ],
                "bottom_right": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ManipulateImage._update_pixmap": {
            "name": "_update_pixmap",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ManipulateImage._rescale": {
            "name": "_rescale",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mainwindow": [
                    "int"
                ]
            }
        },
        "Message.update_geometry": {
            "name": "update_geometry",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "window_width": [
                    "int",
                    "float",
                    "Optional[float]",
                    "str"
                ],
                "_window_height": [
                    "bool",
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "Message._on_message": {
            "name": "_on_message",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "int",
                    "Callable",
                    "str"
                ],
                "message": [
                    "int"
                ]
            }
        },
        "Message._clear_message": {
            "name": "_clear_message",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message._set_severity_style": {
            "name": "_set_severity_style",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/metadatawidget.py": {
        "MetadataWidget.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "bool",
                    "float"
                ]
            }
        },
        "MetadataWidget.handler": {
            "name": "handler",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataWidget.metadata": {
            "name": "metadata",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "None",
                    "str",
                    "Optional[qutebrowser.api.apitypes.Tab]",
                    "Optional[str]"
                ]
            }
        },
        "MetadataWidget.metadata_list_keys": {
            "name": "metadata_list_keys",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "n_cols": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "dict",
                    "Optional[str]"
                ],
                "to_term": [
                    "bool",
                    "Optional[str]",
                    "Optional[cmk.utils.type_defs.CheckPluginNameStr]",
                    "str"
                ]
            }
        },
        "MetadataWidget.update_geometry": {
            "name": "update_geometry",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "window_width": [
                    "int",
                    "float"
                ],
                "window_bottom": [
                    "int",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "MetadataWidget._update_geometry": {
            "name": "_update_geometry",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataWidget._update_text": {
            "name": "_update_text",
            "location": 152,
            "return": [
                "None",
                "int",
                "Union[tuple, list]",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataWidget._on_image_opened": {
            "name": "_on_image_opened",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/prompt.py": {
        "Prompt.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Prompt.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "typing.Text",
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt.bindings_table": {
            "name": "bindings_table",
            "location": 72,
            "return": [
                "str",
                "PyQt5.QtCore.QUrl"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Prompt.run": {
            "name": "run",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt.update_geometry": {
            "name": "update_geometry",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_width": [
                    "int",
                    "str",
                    "bool",
                    "List[Optional['Cell']]",
                    "Iterable[Dict]"
                ],
                "bottom": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "Prompt.leave": {
            "name": "leave",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "PyQt5.QtGui.QKeyEvent",
                    "Union[str, Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "Prompt.focusOutEvent": {
            "name": "focusOutEvent",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PyQt5.QtCore.QObject",
                    "PyQt5.QtGui.QKeyEvent"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/statusbar.py": {
        "StatusBar.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusBar.__iter__": {
            "name": "__iter__",
            "location": 63,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusBar.create_label": {
            "name": "create_label",
            "location": 69,
            "return": [
                "QLabel",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Type[tuple]",
                    "Dict[str, bool]",
                    "List[Dict[str, Any]]",
                    "list",
                    "bool"
                ],
                "layout": [
                    "purplship.core.utils.xml.Element",
                    "str"
                ],
                "alignment": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "StatusBar._update_status": {
            "name": "_update_status",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusBar._get_text": {
            "name": "_get_text",
            "location": 85,
            "return": [
                "raiden.utils.BlockNumber",
                "raiden.utils.TokenAmount",
                "cmk.utils.type_defs.UserId",
                "bool",
                "utils.Vote",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "cmk.utils.type_defs.HostName",
                    "str"
                ],
                "mode": [
                    "str",
                    "IO"
                ]
            }
        },
        "StatusBar._escape_subsequent_space_for_html": {
            "name": "_escape_subsequent_space_for_html",
            "location": 99,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ],
                "text": [
                    "str",
                    "bool",
                    "Dict[str, dict]"
                ]
            }
        },
        "StatusBar._on_show_changed": {
            "name": "_on_show_changed",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/straightenwidget.py": {
        "StraightenWidget.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "StraightenWidget._add_rotate_binding": {
            "name": "_add_rotate_binding",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StraightenWidget.rotate": {
            "name": "rotate",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StraightenWidget._perform_rotate": {
            "name": "_perform_rotate",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StraightenWidget.update_geometry": {
            "name": "update_geometry",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StraightenWidget.status_info": {
            "name": "status_info",
            "location": 102,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StraightenWidget.paintEvent": {
            "name": "paintEvent",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_event": []
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/synchronize.py": {},
    "vimiv-qt-master/vimiv/gui/thumbnail.py": {
        "ThumbnailView.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.__iter__": {
            "name": "__iter__",
            "location": 121,
            "return": [
                "typing.Iterator[\"ThumbnailItem\"]",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.current_index": {
            "name": "current_index",
            "location": 125,
            "return": [
                "int",
                "bool",
                "float",
                "Dict[str, Dict[str, int]]",
                "pygame.math.Vector2"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.current_column": {
            "name": "current_column",
            "location": 129,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.current_row": {
            "name": "current_row",
            "location": 133,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.n_columns": {
            "name": "n_columns",
            "location": 137,
            "return": [
                "int",
                "bool",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.n_rows": {
            "name": "n_rows",
            "location": 142,
            "return": [
                "int",
                "str",
                "bool",
                "List[float]",
                "bytearray",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.item": {
            "name": "item",
            "location": 146,
            "return": [
                "int",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "str"
                ]
            }
        },
        "ThumbnailView.clear": {
            "name": "clear",
            "location": 149,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView._on_new_images_opened": {
            "name": "_on_new_images_opened",
            "location": 155,
            "return": [
                "None",
                "str",
                "Dict[str, Any]",
                "Optional[bool]",
                "Set[VT]"
            ],
            "arguments": {
                "self": [],
                "paths": []
            }
        },
        "ThumbnailView._on_thumbnail_created": {
            "name": "_on_thumbnail_created",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "Dict[str, Dict[str, int]]",
                    "str",
                    "T"
                ],
                "icon": [
                    "PyQt5.QtGui.QIcon",
                    "int"
                ]
            }
        },
        "ThumbnailView._on_new_search": {
            "name": "_on_new_search",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "Union[int, float]",
                    "slice"
                ],
                "matches": [
                    "List[str]",
                    "str"
                ],
                "mode": [
                    "str",
                    "Tuple[str, str]"
                ],
                "_incremental": [
                    "bool",
                    "List[str]",
                    "list",
                    "float",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "ThumbnailView._on_search_cleared": {
            "name": "_on_search_cleared",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView._mark_highlight": {
            "name": "_mark_highlight",
            "location": 219,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "marked": [
                    "bool",
                    "Dict[str, Any]",
                    "Set[str]",
                    "str",
                    "int"
                ]
            }
        },
        "ThumbnailView.open_selected": {
            "name": "open_selected",
            "location": 235,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.scroll": {
            "name": "scroll",
            "location": 258,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str",
                    "int",
                    "vimiv.commands.argtypes.Direction",
                    "Tuple[Tuple[str, ...]]",
                    "float"
                ],
                "count": [
                    "int",
                    "str",
                    "List[int]",
                    "List[float]"
                ]
            }
        },
        "ThumbnailView._scroll_updown": {
            "name": "_scroll_updown",
            "location": 281,
            "return": [
                "list",
                "trezor.utils.Writer",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "int",
                    "str",
                    "qutebrowser.api.apitypes.Tab"
                ],
                "direction": [
                    "int",
                    "Callable",
                    "str"
                ],
                "step": [
                    "[[]]",
                    "Set[int]",
                    "int",
                    "str"
                ]
            }
        },
        "ThumbnailView.goto": {
            "name": "goto",
            "location": 301,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "List[int]",
                    "float",
                    "str"
                ],
                "count": [
                    "None",
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        },
        "ThumbnailView.end_of_line": {
            "name": "end_of_line",
            "location": 324,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.first_of_line": {
            "name": "first_of_line",
            "location": 331,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.zoom": {
            "name": "zoom",
            "location": 338,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "slice",
                    "IO",
                    "str"
                ]
            }
        },
        "ThumbnailView.rescale_items": {
            "name": "rescale_items",
            "location": 351,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView._select_path": {
            "name": "_select_path",
            "location": 359,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ThumbnailView._select_index": {
            "name": "_select_index",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "T",
                    "PySide2.QtCore.QModelIndex",
                    "str",
                    "List[str]"
                ],
                "emit": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "ThumbnailView._on_size_changed": {
            "name": "_on_size_changed",
            "location": 379,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "ThumbnailView.item_size": {
            "name": "item_size",
            "location": 384,
            "return": [
                "List[int]",
                "List[dict]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView._thumbnail_basename": {
            "name": "_thumbnail_basename",
            "location": 390,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView._thumbnail_name": {
            "name": "_thumbnail_name",
            "location": 400,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView._thumbnail_extension": {
            "name": "_thumbnail_extension",
            "location": 409,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.current": {
            "name": "current",
            "location": 417,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.pathlist": {
            "name": "pathlist",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ThumbnailView.size": {
            "name": "size",
            "location": 430,
            "return": [
                "typing.Text",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.current_index_statusbar": {
            "name": "current_index_statusbar",
            "location": 436,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.total": {
            "name": "total",
            "location": 441,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailView.resizeEvent": {
            "name": "resizeEvent",
            "location": 445,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PyQt5.QtCore.QObject",
                    "PySide2.QtGui.QResizeEvent",
                    "PyQt5.QtGui.QKeyEvent"
                ]
            }
        },
        "ThumbnailView._scroll_wheel_callback": {
            "name": "_scroll_wheel_callback",
            "location": 450,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "steps_x": [
                    "Sequence[int]",
                    "Collection[int]"
                ],
                "steps_y": [
                    "float"
                ]
            }
        },
        "ThumbnailDelegate.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtWidgets.QWidget",
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "ThumbnailDelegate.paint": {
            "name": "paint",
            "location": 479,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "painter": [
                    "dict",
                    "Optional[Container[str]]",
                    "List[Tuple[str, str]]",
                    "int",
                    "Dict[str, Any]"
                ],
                "option": [
                    "dict",
                    "Optional[Container[str]]",
                    "List[Tuple[str, str]]",
                    "int",
                    "Dict[str, Any]"
                ],
                "model_index": [
                    "dict",
                    "Set[str]",
                    "Sequence[str]"
                ]
            }
        },
        "ThumbnailDelegate._draw_background": {
            "name": "_draw_background",
            "location": 491,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "painter": [
                    "bool",
                    "cmk.utils.type_defs.HostName",
                    "raiden.utils.ChainID",
                    "raiden.utils.OneToNAddress"
                ],
                "option": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Generator"
                ],
                "item": [
                    "bool",
                    "suitable.api.Api",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "dss.config.Replica"
                ]
            }
        },
        "ThumbnailDelegate._draw_pixmap": {
            "name": "_draw_pixmap",
            "location": 509,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "painter": [
                    "int",
                    "Sequence",
                    "List[int]",
                    "Tuple[int, int]",
                    "str"
                ],
                "option": [
                    "dict",
                    "list",
                    "Dict[str, Any]",
                    "T"
                ],
                "item": [
                    "type",
                    "Mapping[Any, Any]",
                    "Tuple['cirq.Qid']",
                    "Union[Dict, List]",
                    "Tuple[str, list]",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "ThumbnailDelegate._draw_mark": {
            "name": "_draw_mark",
            "location": 543,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "painter": [
                    "dict"
                ],
                "option": [
                    "int",
                    "float",
                    "str"
                ],
                "x": [
                    "int",
                    "Tuple[int, int]"
                ],
                "y": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "ThumbnailDelegate._get_background_color": {
            "name": "_get_background_color",
            "location": 561,
            "return": [
                "int",
                "str",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Sized"
                ],
                "state": [
                    "str",
                    "Sized"
                ]
            }
        },
        "ThumbnailItem.__init__": {
            "name": "__init__",
            "location": 584,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "int",
                    "Optional[float]",
                    "Optional[dict]"
                ],
                "index": [
                    "str",
                    "int",
                    "Optional[float]",
                    "Optional[dict]"
                ]
            }
        },
        "ThumbnailItem.default_icon": {
            "name": "default_icon",
            "location": 591,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "ThumbnailItem.create_default_icon": {
            "name": "create_default_icon",
            "location": 601,
            "return": [
                "QIcon",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "int",
                    "Type[tuple]",
                    "str",
                    "Callable[[None], None]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/transformwidget.py": {
        "TransformWidget.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "purplship.core.utils.serializable.Serializable[purplship.core.utils.xml.Element]"
                ]
            }
        },
        "TransformWidget.update_geometry": {
            "name": "update_geometry",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformWidget.status_info": {
            "name": "status_info",
            "location": 57,
            "return": [
                "typing.Text",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformWidget.leave": {
            "name": "leave",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "accept": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "TransformWidget.reset_transformations": {
            "name": "reset_transformations",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformWidget.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int",
                    "Mapping",
                    "dict"
                ]
            }
        },
        "TransformWidget.focusOutEvent": {
            "name": "focusOutEvent",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/gui/version_popup.py": {
        "VersionPopUp.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "bool",
                    "Tuple[str]",
                    "PyQt5.QtWidgets.QWidget"
                ]
            }
        },
        "VersionPopUp._init_content": {
            "name": "_init_content",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionPopUp.copy_to_clipboard": {
            "name": "copy_to_clipboard",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/gui/__init__.py": {},
    "vimiv-qt-master/vimiv/imutils/current_pixmap.py": {
        "CurrentPixmap.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentPixmap.editable": {
            "name": "editable",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/imutils/edit_handler.py": {
        "EditHandler.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditHandler.changed": {
            "name": "changed",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditHandler.pixmap": {
            "name": "pixmap",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EditHandler.reset": {
            "name": "reset",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditHandler.clear": {
            "name": "clear",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditHandler._change_current": {
            "name": "_change_current",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "str"
                ]
            }
        },
        "EditHandler._init_manipulate": {
            "name": "_init_manipulate",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditHandler._on_manipulate_accepted": {
            "name": "_on_manipulate_accepted",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/imutils/exif.py": {
        "check_exif_dependancy": {
            "name": "check_exif_dependancy",
            "location": 181,
            "return": [
                "str",
                "_ExifHandlerPiexif",
                "Callable",
                "_ExifHandlerBase"
            ],
            "arguments": {
                "handler": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_ExifHandlerBase.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_filename": [
                    "typing.Text",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "_ExifHandlerBase.copy_exif": {
            "name": "copy_exif",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_dest": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_reset_orientation": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "_ExifHandlerBase.exif_date_time": {
            "name": "exif_date_time",
            "location": 54,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ExifHandlerBase.get_formatted_exif": {
            "name": "get_formatted_exif",
            "location": 58,
            "return": [
                "ExifDictT",
                "None"
            ],
            "arguments": {
                "self": [],
                "_desired_keys": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "_ExifHandlerBase.get_keys": {
            "name": "get_keys",
            "location": 62,
            "return": [
                "typing.Iterable[builtins.str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ExifHandlerBase.raise_exception": {
            "name": "raise_exception",
            "location": 67,
            "return": [
                "typing.NoReturn",
                "None"
            ],
            "arguments": {
                "cls": [
                    "Exception",
                    "Dict[str, Any]",
                    "Type",
                    "str",
                    "dict",
                    "Callable[..., T]"
                ],
                "operation": [
                    "Exception",
                    "Dict[str, Any]",
                    "Type",
                    "str",
                    "dict",
                    "Callable[..., T]"
                ]
            }
        },
        "_ExifHandlerPiexif.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        },
        "_ExifHandlerPiexif.get_formatted_exif": {
            "name": "get_formatted_exif",
            "location": 96,
            "return": [
                "dict",
                "str",
                "dict[, tuple[typing.Text]]",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "desired_keys": [
                    "str"
                ]
            }
        },
        "_ExifHandlerPiexif.get_keys": {
            "name": "get_keys",
            "location": 148,
            "return": [
                "typing.Generator",
                "str",
                "bool",
                "set",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ExifHandlerPiexif.copy_exif": {
            "name": "copy_exif",
            "location": 156,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "dest": [
                    "int",
                    "str"
                ],
                "reset_orientation": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "_ExifHandlerPiexif.exif_date_time": {
            "name": "exif_date_time",
            "location": 172,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExifHandler.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "ExifHandler.get_formatted_exif": {
            "name": "get_formatted_exif",
            "location": 225,
            "return": [
                "dict[typing.Text, tuple]",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "desired_keys": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "ExifHandler.get_keys": {
            "name": "get_keys",
            "location": 256,
            "return": [
                "typing.Generator",
                "bool",
                "int",
                "str",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExifHandler.copy_exif": {
            "name": "copy_exif",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dest": [
                    "str",
                    "int",
                    "vimiv.commands.argtypes.Direction"
                ],
                "reset_orientation": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "ExifHandler.exif_date_time": {
            "name": "exif_date_time",
            "location": 281,
            "return": [
                "typing.Text",
                "int",
                "raiden.utils.BlockHash",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/imutils/filelist.py": {
        "next_path": {
            "name": "next_path",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "list",
                    "Sequence[str]",
                    "List[str]",
                    "str"
                ],
                "keep_zoom": [
                    "bool",
                    "int",
                    "list",
                    "Sequence[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "prev_path": {
            "name": "prev_path",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "list",
                    "Sequence[str]",
                    "List[str]",
                    "str"
                ],
                "keep_zoom": [
                    "bool",
                    "int",
                    "list",
                    "Sequence[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "goto": {
            "name": "goto",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int",
                    "List[int]"
                ],
                "count": [
                    "None",
                    "int",
                    "List[int]",
                    "list",
                    "str"
                ]
            }
        },
        "current": {
            "name": "current",
            "location": 94,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "basename": {
            "name": "basename",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "name": {
            "name": "name",
            "location": 108,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {}
        },
        "extension": {
            "name": "extension",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "get_index": {
            "name": "get_index",
            "location": 122,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "total": {
            "name": "total",
            "location": 130,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "exif_date_time": {
            "name": "exif_date_time",
            "location": 136,
            "return": [
                "typing.Text",
                "str",
                "Optional[int]",
                "Iterable[dict]"
            ],
            "arguments": {}
        },
        "pathlist": {
            "name": "pathlist",
            "location": 149,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "_set_index": {
            "name": "_set_index",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "bool",
                    "float"
                ],
                "previous": [
                    "None",
                    "bool",
                    "float"
                ]
            }
        },
        "_set_paths": {
            "name": "_set_paths",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "int"
                ]
            }
        },
        "_load_single": {
            "name": "_load_single",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "django.core.files.storage.Storage"
                ]
            }
        },
        "_load_paths": {
            "name": "_load_paths",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "focused_path": [
                    "str"
                ]
            }
        },
        "_clear": {
            "name": "_clear",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SignalHandler.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalHandler._on_load_images": {
            "name": "_on_load_images",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "SignalHandler._on_new_search": {
            "name": "_on_new_search",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "Union[int, float]",
                    "slice"
                ],
                "_matches": [
                    "bool",
                    "List[str]",
                    "list",
                    "float",
                    "Optional[bool]",
                    "int"
                ],
                "mode": [
                    "bool",
                    "vimiv.api.modes.Mode",
                    "Type",
                    "float",
                    "List[Tuple[int, ...]]",
                    "int"
                ],
                "incremental": [
                    "bool",
                    "vimiv.api.modes.Mode",
                    "Type",
                    "float",
                    "List[Tuple[int, ...]]",
                    "int"
                ]
            }
        },
        "SignalHandler._on_slideshow_event": {
            "name": "_on_slideshow_event",
            "location": 215,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalHandler._on_images_changed": {
            "name": "_on_images_changed",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "new_paths": [
                    "str",
                    "FrozenSet[str]"
                ],
                "added": [
                    "List[str]",
                    "str"
                ],
                "removed": [
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/imutils/immanipulate.py": {
        "Manipulation.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "Optional[\"CustomerResourceIdentifier\"]",
                    "Optional[str]"
                ],
                "value": [
                    "int",
                    "Optional[str]",
                    "float",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "lower": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "bool"
                ],
                "upper": [
                    "int",
                    "bytes",
                    "float",
                    "str"
                ],
                "init_value": [
                    "int",
                    "Optional[str]",
                    "float",
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Manipulation.value": {
            "name": "value",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "Manipulation.changed": {
            "name": "changed",
            "location": 108,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[str]",
                "Iterable['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulation.reset": {
            "name": "reset",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulation.focus": {
            "name": "focus",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulation.unfocus": {
            "name": "unfocus",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulation._on_value_changed": {
            "name": "_on_value_changed",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_value": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "Manipulation.__repr__": {
            "name": "__repr__",
            "location": 129,
            "return": [
                "typing.Text",
                "str",
                "type",
                "Mapping[str, Any]",
                "Dict[str, Iterable[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulation.__copy__": {
            "name": "__copy__",
            "location": 132,
            "return": [
                "Manipulation",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManipulationGroup.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManipulationGroup.__iter__": {
            "name": "__iter__",
            "location": 155,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManipulationGroup.__copy__": {
            "name": "__copy__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManipulationGroup.__repr__": {
            "name": "__repr__",
            "location": 163,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManipulationGroup.changed": {
            "name": "changed",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManipulationGroup.apply": {
            "name": "apply",
            "location": 174,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "List[str]",
                    "T",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "ManipulationGroup.title": {
            "name": "title",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManipulationGroup._apply": {
            "name": "_apply",
            "location": 192,
            "return": [
                "builtins.bytes",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "BriConGroup.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BriConGroup.title": {
            "name": "title",
            "location": 219,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BriConGroup._apply": {
            "name": "_apply",
            "location": 222,
            "return": [
                "bool",
                "Tuple[str, int, str]",
                "float",
                "outcome.Outcome[str, utils.typeshed.pathlike]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "brightness": [
                    "bytes"
                ],
                "contrast": [
                    "bytes"
                ]
            }
        },
        "HSLGroup.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HSLGroup.title": {
            "name": "title",
            "location": 242,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HSLGroup._apply": {
            "name": "_apply",
            "location": 245,
            "return": [
                "str",
                "Mapping[str, int]",
                "bool",
                "List[str]",
                "Callable[[str, str], float]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "tuple",
                    "Union[bytes, str]"
                ],
                "hue": [
                    "bool",
                    "tuple",
                    "Union[bytes, str]"
                ],
                "saturation": [
                    "bool",
                    "tuple",
                    "Union[bytes, str]"
                ],
                "lightness": [
                    "bool",
                    "tuple",
                    "Union[bytes, str]"
                ]
            }
        },
        "Manipulations.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulations.group": {
            "name": "group",
            "location": 284,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "manipulation": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Manipulations.apply_groups": {
            "name": "apply_groups",
            "location": 291,
            "return": [
                "QPixmap",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Manipulations.apply": {
            "name": "apply",
            "location": 315,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "Dict[str, Dict[str, int]]",
                    "dict",
                    "str",
                    "Dict[str, str]"
                ],
                "manipulation": [
                    "Dict[str, Dict[str, int]]",
                    "dict",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Manipulations._apply_group": {
            "name": "_apply_group",
            "location": 319,
            "return": [
                "str",
                "raiden.utils.Any"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Optional[bytes]",
                    "Dict[str, Any]",
                    "bytes",
                    "List[Dict[str, Any]]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "Manipulator.__init__": {
            "name": "__init__",
            "location": 359,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "current_pixmap": [
                    "str",
                    "int"
                ]
            }
        },
        "Manipulator._changed": {
            "name": "_changed",
            "location": 377,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulator.accept": {
            "name": "accept",
            "location": 386,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulator.discard": {
            "name": "discard",
            "location": 399,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulator.next": {
            "name": "next",
            "location": 406,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Manipulator.prev": {
            "name": "prev",
            "location": 415,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Manipulator._navigate_in_tab": {
            "name": "_navigate_in_tab",
            "location": 422,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "List[List[str]]",
                    "str",
                    "bool"
                ]
            }
        },
        "Manipulator._reset": {
            "name": "_reset",
            "location": 430,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulator.increase": {
            "name": "increase",
            "location": 440,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float"
                ],
                "count": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "Manipulator.decrease": {
            "name": "decrease",
            "location": 455,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float"
                ],
                "count": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "Manipulator.goto": {
            "name": "goto",
            "location": 470,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "str",
                    "Union[bytes, str]",
                    "T",
                    "bool"
                ],
                "count": [
                    "None",
                    "dict",
                    "str",
                    "Union[bytes, str]",
                    "T",
                    "bool"
                ]
            }
        },
        "Manipulator._apply_manipulation": {
            "name": "_apply_manipulation",
            "location": 482,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manipulation": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Manipulator._run_manipulation_thread": {
            "name": "_run_manipulation_thread",
            "location": 491,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manipulation": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "Manipulator.focus_group_index": {
            "name": "focus_group_index",
            "location": 503,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Type",
                    "str"
                ]
            }
        },
        "Manipulator._focus": {
            "name": "_focus",
            "location": 509,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "focused_manipulation": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Manipulator._processing_indicator": {
            "name": "_processing_indicator",
            "location": 518,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulator._enter": {
            "name": "_enter",
            "location": 524,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manipulator._on_updated": {
            "name": "_on_updated",
            "location": 546,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Manipulator._save_changes": {
            "name": "_save_changes",
            "location": 555,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/imutils/imtransform.py": {
        "register_transform_command": {
            "name": "register_transform_command",
            "location": 23,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "register_transform_command.decorator": {
            "name": "decorator",
            "location": 26,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Transform.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "current_pixmap": [
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "Transform.current": {
            "name": "current",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transform.original": {
            "name": "original",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Transform.angle": {
            "name": "angle",
            "location": 82,
            "return": [
                "float",
                "utils.Node",
                "trezor.utils.Writer",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transform.rotate_command": {
            "name": "rotate_command",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "counter_clockwise": [
                    "list",
                    "int",
                    "str"
                ],
                "count": [
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "Transform.flip": {
            "name": "flip",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vertical": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Transform.resize": {
            "name": "resize",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "Iterator[int]",
                    "Union[int, str]"
                ],
                "height": [
                    "Optional[str]",
                    "django.utils.timezone.datetime",
                    "Optional[int]",
                    "Optional[bool]",
                    "int",
                    "str"
                ]
            }
        },
        "Transform.rescale": {
            "name": "rescale",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dx": [
                    "float",
                    "str",
                    "int"
                ],
                "dy": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Transform.apply": {
            "name": "apply",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Transform.straighten": {
            "name": "straighten",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Transform._apply": {
            "name": "_apply",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transformed": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Transform._ensure_editable": {
            "name": "_ensure_editable",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Transform.changed": {
            "name": "changed",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transform.matrix": {
            "name": "matrix",
            "location": 191,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transform.size": {
            "name": "size",
            "location": 202,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes",
                "raiden.utils.Secret"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transform.undo_transformations": {
            "name": "undo_transformations",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Transform.largest_rect_in_rotated": {
            "name": "largest_rect_in_rotated",
            "location": 213,
            "return": [
                "float",
                "utils.Node",
                "List[int]",
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "register_transform_command.decorator.inner": {
            "name": "inner",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/imutils/slideshow.py": {
        "toggle": {
            "name": "toggle",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "count": [
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "float",
                    "Callable"
                ]
            }
        },
        "delay": {
            "name": "delay",
            "location": 52,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "running_indicator": {
            "name": "running_indicator",
            "location": 61,
            "return": [
                "typing.Text",
                "str",
                "Union[int, float]",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer._set_delay": {
            "name": "_set_delay",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/imutils/_file_handler.py": {
        "write_pixmap": {
            "name": "write_pixmap",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pixmap": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "original_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "_can_write": {
            "name": "_can_write",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pixmap": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "_write": {
            "name": "_write",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pixmap": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "original_path": [
                    "str",
                    "Union[slice, List[slice], List[int]]",
                    "List[str]"
                ]
            }
        },
        "ImageFileHandler.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFileHandler._on_new_image_opened": {
            "name": "_on_new_image_opened",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "keep_zoom": [
                    "str"
                ]
            }
        },
        "ImageFileHandler._on_images_cleared": {
            "name": "_on_images_cleared",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFileHandler.reload": {
            "name": "reload",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFileHandler._maybe_write": {
            "name": "_maybe_write",
            "location": 70,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ],
                "parallel": [
                    "bool",
                    "str"
                ]
            }
        },
        "ImageFileHandler._on_quit": {
            "name": "_on_quit",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFileHandler._load": {
            "name": "_load",
            "location": 91,
            "return": [
                "None",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ],
                "keep_zoom": [
                    "str",
                    "bool"
                ]
            }
        },
        "ImageFileHandler.write": {
            "name": "write",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]",
                    "Sequence[Any]"
                ]
            }
        },
        "ImageFileHandler.write_pixmap": {
            "name": "write_pixmap",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "str"
                ],
                "path": [
                    "str",
                    "None"
                ],
                "original_path": [
                    "None",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "str"
                ],
                "parallel": [
                    "bool",
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Tuple[str]",
                    "Optional[bool]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/imutils/__init__.py": {
        "init": {
            "name": "init",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/plugins/demo.py": {
        "hello_world": {
            "name": "hello_world",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "str"
                ]
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/plugins/imageformats.py": {
        "test_cr2": {
            "name": "test_cr2",
            "location": 36,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "header": [
                    "bytes",
                    "str",
                    "bool"
                ],
                "_f": [
                    "BinaryIO",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "test_avif": {
            "name": "test_avif",
            "location": 40,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "header": [
                    "BinaryIO",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "list"
                ],
                "_f": [
                    "BinaryIO",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "test_jp2": {
            "name": "test_jp2",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "header": [
                    "BinaryIO",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "list"
                ],
                "_f": [
                    "BinaryIO",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/plugins/print.py": {
        "init": {
            "name": "init",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "_info": [
                    "str",
                    "bool",
                    "int",
                    "list",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "PrintHandler.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintHandler.print": {
            "name": "print",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preview": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "PrintHandler.handle_print": {
            "name": "handle_print",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "widget": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "dialog": [
                    "str",
                    "Union[str, IO[bytes]]"
                ]
            }
        },
        "PrintHandler._on_pixmap_loaded": {
            "name": "_on_pixmap_loaded",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "bool",
                    "Dict[str, int]",
                    "float",
                    "str"
                ]
            }
        },
        "PrintHandler._on_svg_loaded": {
            "name": "_on_svg_loaded",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "PrintHandler._on_movie_loaded": {
            "name": "_on_movie_loaded",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "movie": [
                    "bool",
                    "Dict[str, int]",
                    "float",
                    "str"
                ]
            }
        },
        "PrintWidget.print": {
            "name": "print",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "printer": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "auto_apply_orientation": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "PrintWidget.paint": {
            "name": "paint",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "printer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PrintWidget.size": {
            "name": "size",
            "location": 114,
            "return": [
                "PyQt5.QtCore.QSize",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintPixmap.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PrintPixmap.paint": {
            "name": "paint",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "printer": [
                    "List['cirq.Qid']",
                    "float"
                ]
            }
        },
        "PrintPixmap.size": {
            "name": "size",
            "location": 135,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes",
                "raiden.utils.Secret"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintSvg.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "svg_widget": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PrintSvg.paint": {
            "name": "paint",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "printer": [
                    "int",
                    "float"
                ]
            }
        },
        "PrintSvg.size": {
            "name": "size",
            "location": 156,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes",
                "raiden.utils.Secret"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintMovie.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "movie": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PrintMovie.paint": {
            "name": "paint",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "printer": [
                    "Callable"
                ]
            }
        },
        "PrintMovie.size": {
            "name": "size",
            "location": 187,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintHandler.handle_print.handler": {
            "name": "handler",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/plugins/__init__.py": {
        "load": {
            "name": "load",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cleanup": {
            "name": "cleanup",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_plugins": {
            "name": "add_plugins",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_plugins": {
            "name": "get_plugins",
            "location": 141,
            "return": [
                "int",
                "apistar.types.WSGIEnviron",
                "dict",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "_load_plugin": {
            "name": "_load_plugin",
            "location": 146,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "info": [
                    "str"
                ],
                "directory": [
                    "str"
                ]
            }
        },
        "_get_plugins": {
            "name": "_get_plugins",
            "location": 169,
            "return": [
                "list",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "int"
                ]
            }
        },
        "_is_plugin": {
            "name": "_is_plugin",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/utils/crash_handler.py": {
        "_assign_interrupt_handler": {
            "name": "_assign_interrupt_handler",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "handler": [
                    "int",
                    "List[List[T]]"
                ]
            }
        },
        "CrashHandler.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "CrashHandler._setup_wakeup_fd": {
            "name": "_setup_wakeup_fd",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrashHandler._setup_timer": {
            "name": "_setup_timer",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int"
                ]
            }
        },
        "CrashHandler.handle_exception": {
            "name": "handle_exception",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_handler": [
                    "str",
                    "bool",
                    "Type['Model']"
                ],
                "exc_type": [
                    "str",
                    "bool",
                    "Type['Model']"
                ],
                "exc_value": [
                    "str",
                    "bool",
                    "Type['Model']"
                ],
                "traceback": [
                    "str",
                    "bool",
                    "Type['Model']"
                ]
            }
        },
        "CrashHandler.handle_interrupt": {
            "name": "handle_interrupt",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "str",
                    "vimiv.commands.argtypes.Direction",
                    "int"
                ],
                "_frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CrashHandler.handle_interrupt_forcefully": {
            "name": "handle_interrupt_forcefully",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "str",
                    "int",
                    "vimiv.commands.argtypes.Direction",
                    "Tuple[Tuple[str, ...]]",
                    "float"
                ],
                "_frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/utils/customtypes.py": {},
    "vimiv-qt-master/vimiv/utils/debug.py": {
        "timed": {
            "name": "timed",
            "location": 19,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "function": [
                    "vimiv.utils.customtypes.FuncT",
                    "bool",
                    "float",
                    "Optional[Callable]",
                    "List[str]",
                    "Callable[..., T]",
                    "Callable"
                ]
            }
        },
        "profile": {
            "name": "profile",
            "location": 36,
            "return": [
                "typing.Iterator[None]",
                "typing.Generator"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "timed.inner": {
            "name": "inner",
            "location": 23,
            "return": [
                "float",
                "Optional[Callable[[str], bool]]"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/utils/files.py": {
        "listdir": {
            "name": "listdir",
            "location": 22,
            "return": [
                "list",
                "str",
                "List[str]",
                "Set[str]",
                "IO[str]",
                "int",
                "Pattern"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "show_hidden": [
                    "bool",
                    "str",
                    "raiden.utils.Address"
                ]
            }
        },
        "supported": {
            "name": "supported",
            "location": 39,
            "return": [
                "tuple[list]",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_size": {
            "name": "get_size",
            "location": 58,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_size_file": {
            "name": "get_size_file",
            "location": 77,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "sizeof_fmt": {
            "name": "sizeof_fmt",
            "location": 85,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "num": [
                    "float",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "get_size_directory": {
            "name": "get_size_directory",
            "location": 103,
            "return": [
                "str",
                "Optional[str]",
                "typing.Text"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "is_image": {
            "name": "is_image",
            "location": 117,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "listfiles": {
            "name": "listfiles",
            "location": 129,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "bool",
                    "int"
                ],
                "abspath": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "add_image_format": {
            "name": "add_image_format",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]"
                ],
                "check": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "test_svg": {
            "name": "test_svg",
            "location": 174,
            "return": [],
            "arguments": {
                "h": [
                    "bytes",
                    "str"
                ],
                "_f": [
                    "Optional[BinaryIO]",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "test_ico": {
            "name": "test_ico",
            "location": 181,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "h": [
                    "str",
                    "int"
                ],
                "_f": [
                    "Optional[BinaryIO]",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "test_jpg": {
            "name": "test_jpg",
            "location": 190,
            "return": [
                "typing.Text",
                "Optional[str]",
                "None",
                "str",
                "List[str]"
            ],
            "arguments": {
                "h": [
                    "bytes",
                    "str"
                ],
                "_f": [
                    "Optional[BinaryIO]",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "test_jpg_fallback": {
            "name": "test_jpg_fallback",
            "location": 202,
            "return": [
                "typing.Text",
                "None"
            ],
            "arguments": {
                "h": [
                    "bytes",
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "_f": [
                    "Optional[BinaryIO]",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "add_image_format.test": {
            "name": "test",
            "location": 154,
            "return": [
                "None",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "List[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "h": [
                    "bytes",
                    "BinaryIO",
                    "str"
                ],
                "f": [
                    "bytes",
                    "BinaryIO",
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/utils/imagereader.py": {
        "get_reader": {
            "name": "get_reader",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "BaseReader.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "file_format": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BaseReader.is_vectorgraphic": {
            "name": "is_vectorgraphic",
            "location": 35,
            "return": [
                "bool",
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseReader.is_animation": {
            "name": "is_animation",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseReader.get_pixmap": {
            "name": "get_pixmap",
            "location": 43,
            "return": [
                "PyQt5.QtGui.QPixmap",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseReader.get_image": {
            "name": "get_image",
            "location": 46,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "list",
                    "List[int]"
                ]
            }
        },
        "BaseReader.supports": {
            "name": "supports",
            "location": 53,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "file_format": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "QtReader.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "file_format": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "QtReader.supports": {
            "name": "supports",
            "location": 69,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "file_format": [
                    "str"
                ]
            }
        },
        "QtReader.is_animation": {
            "name": "is_animation",
            "location": 73,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtReader.get_pixmap": {
            "name": "get_pixmap",
            "location": 76,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtReader.get_image": {
            "name": "get_image",
            "location": 85,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "ExternalReader.supports": {
            "name": "supports",
            "location": 97,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[float]",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "file_format": [
                    "str"
                ]
            }
        },
        "ExternalReader.get_pixmap": {
            "name": "get_pixmap",
            "location": 100,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/utils/lazy.py": {
        "import_module": {
            "name": "import_module",
            "location": 63,
            "return": [
                "bool",
                "Optional[str]",
                "Callable[..., None]",
                "Dict[str, Union[str, int]]",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "fullname": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Module.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "Module.factory": {
            "name": "factory",
            "location": 31,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "fullname": [
                    "str"
                ]
            }
        },
        "Module.module": {
            "name": "module",
            "location": 49,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Module.__getattr__": {
            "name": "__getattr__",
            "location": 55,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "type"
                ]
            }
        },
        "Module.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/utils/log.py": {
        "debug": {
            "name": "debug",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "info": {
            "name": "info",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "warning": {
            "name": "warning",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Tuple[Tuple[int, ...]]"
                ]
            }
        },
        "critical": {
            "name": "critical",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "int",
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "module_logger": {
            "name": "module_logger",
            "location": 120,
            "return": [
                "LazyLogger",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "LazyLogger.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "level": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "LazyLogger.log": {
            "name": "log",
            "location": 155,
            "return": [
                "None",
                "Iterator[List[T]]",
                "Iterator[bytes]",
                "Iterable[Sequence[T]]",
                "Generator",
                "Iterator[int]"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "str"
                ],
                "msg": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "LazyLogger.debug": {
            "name": "debug",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "LazyLogger.info": {
            "name": "info",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "LazyLogger.warning": {
            "name": "warning",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "LazyLogger.error": {
            "name": "error",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Tuple[Tuple[int, ...]]"
                ]
            }
        },
        "LazyLogger.critical": {
            "name": "critical",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "StatusbarLogHandler.handle": {
            "name": "handle",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord",
                    "int",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/utils/migration.py": {
        "gtk_version_installed": {
            "name": "gtk_version_installed",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 34,
            "return": [
                "Awaitable",
                "None"
            ],
            "arguments": {}
        },
        "backup": {
            "name": "backup",
            "location": 45,
            "return": [
                "XdgDirectories",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "migrate_tags": {
            "name": "migrate_tags",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "gtk_data_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "run_welcome_popup": {
            "name": "run_welcome_popup",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "None",
                    "PyQt5.QtWidgets.QWidget",
                    "Optional[\"TreeNode\"]"
                ]
            }
        },
        "WelcomePopUp.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "PyQt5.QtWidgets.QWidget",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/utils/thumbnail_manager.py": {
        "ThumbnailManager.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fail_pixmap": [
                    "int",
                    "bool",
                    "float"
                ],
                "large": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "ThumbnailManager.create_thumbnails_async": {
            "name": "create_thumbnails_async",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "ThumbnailCreator.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict",
                    "bool"
                ],
                "path": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "manager": [
                    "dict",
                    "bool"
                ]
            }
        },
        "ThumbnailCreator.run": {
            "name": "run",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThumbnailCreator._get_thumbnail_path": {
            "name": "_get_thumbnail_path",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "dict"
                ]
            }
        },
        "ThumbnailCreator._get_source_uri": {
            "name": "_get_source_uri",
            "location": 123,
            "return": [
                "str",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "ThumbnailCreator._get_thumbnail_filename": {
            "name": "_get_thumbnail_filename",
            "location": 126,
            "return": [
                "list",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[\"Path\"]"
                ]
            }
        },
        "ThumbnailCreator._get_source_mtime": {
            "name": "_get_source_mtime",
            "location": 131,
            "return": [
                "int",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "ThumbnailCreator._create_thumbnail": {
            "name": "_create_thumbnail",
            "location": 134,
            "return": [
                "QPixmap",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "thumbnail_path": [
                    "str"
                ]
            }
        },
        "ThumbnailCreator._get_thumbnail_attributes": {
            "name": "_get_thumbnail_attributes",
            "location": 166,
            "return": [
                "dict[typing.Text, str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "image": [
                    "str"
                ]
            }
        },
        "ThumbnailCreator._maybe_recreate_thumbnail": {
            "name": "_maybe_recreate_thumbnail",
            "location": 184,
            "return": [
                "QPixmap",
                "str",
                "bytes",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "bytes"
                ],
                "thumbnail_path": [
                    "str"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/utils/trash_manager.py": {
        "init": {
            "name": "init",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "delete": {
            "name": "delete",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "undelete": {
            "name": "undelete",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "basename": [
                    "str",
                    "Union[str, float]"
                ]
            }
        },
        "trash_info": {
            "name": "trash_info",
            "location": 79,
            "return": [
                "tuple",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "files_directory": {
            "name": "files_directory",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_get_trash_filename": {
            "name": "_get_trash_filename",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_get_info_filename": {
            "name": "_get_info_filename",
            "location": 122,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "trash_filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_create_info_file": {
            "name": "_create_info_file",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "trash_filename": [
                    "str",
                    "List[int]",
                    "Optional[str]"
                ],
                "original_filename": [
                    "str"
                ]
            }
        },
        "TrashInfoParser.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrashInfoParser.optionxform": {
            "name": "optionxform",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "optionstr": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "vimiv-qt-master/vimiv/utils/trie.py": {
        "Trie.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trie.__setitem__": {
            "name": "__setitem__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Union[list, str]",
                    "List[str]",
                    "Set[str]"
                ],
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "Trie.__getitem__": {
            "name": "__getitem__",
            "location": 50,
            "return": [
                "Trie",
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "Trie.__contains__": {
            "name": "__contains__",
            "location": 57,
            "return": [
                "bool",
                "int",
                "dict",
                "Dict[str, Any]",
                "Mapping",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "tuple"
                ]
            }
        },
        "Trie.__iter__": {
            "name": "__iter__",
            "location": 60,
            "return": [
                "IterResultT",
                "typing.Generator",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trie.__delitem__": {
            "name": "__delitem__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "type",
                    "Union[int, slice]",
                    "int"
                ]
            }
        },
        "Trie.update": {
            "name": "update",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trie.match": {
            "name": "match",
            "location": 88,
            "return": [
                "TrieMatch",
                "str",
                "bool",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ]
            }
        },
        "Trie._getnodes": {
            "name": "_getnodes",
            "location": 106,
            "return": [
                "list[Trie]",
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "bytes"
                ]
            }
        },
        "Trie.check": {
            "name": "check",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrieMatch.is_full_match": {
            "name": "is_full_match",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrieMatch.is_partial_match": {
            "name": "is_partial_match",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrieMatch.is_no_match": {
            "name": "is_no_match",
            "location": 148,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vimiv-qt-master/vimiv/utils/xdg.py": {
        "_standardpath": {
            "name": "_standardpath",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "location": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "makedirs": {
            "name": "makedirs",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "user_data_dir": {
            "name": "user_data_dir",
            "location": 39,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "user_config_dir": {
            "name": "user_config_dir",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "user_cache_dir": {
            "name": "user_cache_dir",
            "location": 47,
            "return": [
                "set",
                "str"
            ],
            "arguments": {}
        },
        "vimiv_data_dir": {
            "name": "vimiv_data_dir",
            "location": 51,
            "return": [
                "dict",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "vimiv_cache_dir": {
            "name": "vimiv_cache_dir",
            "location": 55,
            "return": [
                "dict",
                "Dict[str, Any]",
                "PyQt5.QtCore.QEvent",
                "str"
            ],
            "arguments": {}
        },
        "vimiv_config_dir": {
            "name": "vimiv_config_dir",
            "location": 59,
            "return": [
                "dict",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "vimiv-qt-master/vimiv/utils/__init__.py": {
        "add_html": {
            "name": "add_html",
            "location": 31,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "PyQt5.QtWidgets.QWidget"
                ]
            }
        },
        "wrap_style_span": {
            "name": "wrap_style_span",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "style": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "format_html_table": {
            "name": "format_html_table",
            "location": 53,
            "return": [
                "str",
                "Set[str]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "content": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "strip_html": {
            "name": "strip_html",
            "location": 65,
            "return": [
                "int",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "escape_html": {
            "name": "escape_html",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "escape_glob": {
            "name": "escape_glob",
            "location": 85,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "replace_unless_escaped": {
            "name": "replace_unless_escaped",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ],
                "repl": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "contains_any": {
            "name": "contains_any",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "sequence": [
                    "Sequence[Hashable]",
                    "str",
                    "List[str]"
                ],
                "elems": [
                    "Set[int]",
                    "Callable[..., None]"
                ]
            }
        },
        "quotedjoin": {
            "name": "quotedjoin",
            "location": 116,
            "return": [
                "list",
                "int",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "list",
                    "List[str]"
                ],
                "joinchar": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "clamp": {
            "name": "clamp",
            "location": 120,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "int"
                ],
                "minimum": [
                    "float",
                    "T",
                    "Optional[str]",
                    "Optional[object]",
                    "bool",
                    "Hashable",
                    "Optional[int]"
                ],
                "maximum": [
                    "float",
                    "T",
                    "Optional[str]",
                    "Optional[object]",
                    "bool",
                    "Hashable",
                    "Optional[int]"
                ]
            }
        },
        "is_hex": {
            "name": "is_hex",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "parameter_names": {
            "name": "parameter_names",
            "location": 140,
            "return": [
                "str",
                "Optional[str]",
                "cmk.utils.type_defs.HostName",
                "Dict[str, Any]"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "Callable[[], object]",
                    "int"
                ]
            }
        },
        "class_that_defined_method": {
            "name": "class_that_defined_method",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Set[str]",
                    "dict",
                    "Callable[..., T]",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        },
        "is_method": {
            "name": "is_method",
            "location": 159,
            "return": [
                "Optional[BaseException]",
                "Optional[Callable[[bool], None]]",
                "Optional[str]",
                "Optional[Dict]",
                "Optional[Type[Exception]]",
                "Optional[Exception]",
                "Optional[Type[BaseException]]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "int",
                    "list",
                    "Container[str]",
                    "bool",
                    "Optional[bytes]"
                ]
            }
        },
        "cached_method": {
            "name": "cached_method",
            "location": 168,
            "return": [
                "int",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "func": [
                    "Type",
                    "Callable"
                ]
            }
        },
        "slot": {
            "name": "slot",
            "location": 194,
            "return": [
                "tuple"
            ],
            "arguments": {
                "function": [
                    "Exception"
                ]
            }
        },
        "_slot_args": {
            "name": "_slot_args",
            "location": 211,
            "return": [
                "str",
                "bool",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "function": [
                    "str",
                    "type",
                    "Dict[str, Any]",
                    "Sequence[type]"
                ],
                "annotations": [
                    "Dict[str, Any]",
                    "T",
                    "Iterable[Dict[str, Any]]",
                    "Dict[str, Union[str, Set]]"
                ]
            }
        },
        "_slot_kwargs": {
            "name": "_slot_kwargs",
            "location": 231,
            "return": [
                "Callable",
                "Type"
            ],
            "arguments": {
                "annotations": [
                    "str",
                    "List[List[str]]",
                    "Callable[..., None]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "asyncrun": {
            "name": "asyncrun",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [
                    "Callable"
                ]
            }
        },
        "asyncfunc": {
            "name": "asyncfunc",
            "location": 259,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pool": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 312,
            "return": [
                "int",
                "bool",
                "List[str]",
                "List[Tuple[str, Any]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "list_of_lists": [
                    "List[Union[int, float]]",
                    "Sequence[T]",
                    "List[int]",
                    "str",
                    "mode.utils.Deque[T]"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 317,
            "return": [
                "bool",
                "Union[str, int]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "bool"
                ],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "recursive_split": {
            "name": "recursive_split",
            "location": 326,
            "return": [
                "List[str]",
                "str",
                "set",
                "float"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "separator": [
                    "str",
                    "Optional[str]"
                ],
                "updater": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "remove_prefix": {
            "name": "remove_prefix",
            "location": 341,
            "return": [
                "str",
                "dict",
                "type"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "escape_chars": {
            "name": "escape_chars",
            "location": 348,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "chars": [
                    "str",
                    "bool"
                ],
                "escape_char": [
                    "str",
                    "bool"
                ]
            }
        },
        "unescape_chars": {
            "name": "unescape_chars",
            "location": 367,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "chars": [
                    "str"
                ],
                "escape_char": [
                    "str"
                ]
            }
        },
        "create_pixmap": {
            "name": "create_pixmap",
            "location": 386,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "color": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ],
                "frame_color": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ],
                "size": [
                    "int",
                    "bytes",
                    "str",
                    "utils.types.Vec3D"
                ],
                "frame_size": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "qbytearray_to_str": {
            "name": "qbytearray_to_str",
            "location": 415,
            "return": [
                "Optional[float]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "qbytearray": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "run_qprocess": {
            "name": "run_qprocess",
            "location": 419,
            "return": [
                "str",
                "float",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "is_optional_type": {
            "name": "is_optional_type",
            "location": 443,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "typ": []
            }
        },
        "type_of_optional": {
            "name": "type_of_optional",
            "location": 450,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "str",
                    "BaseException"
                ]
            }
        },
        "throttled": {
            "name": "throttled",
            "location": 463,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "format_html_table.format_row": {
            "name": "format_row",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "first": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "escape_glob.escape_char": {
            "name": "escape_char",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "match": [
                    "str",
                    "int"
                ]
            }
        },
        "cached_method.inner": {
            "name": "inner",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnnotationNotFound.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "AnyStr",
                    "Optional[Any]",
                    "bool"
                ],
                "function": [
                    "str",
                    "AnyStr",
                    "Optional[Any]",
                    "bool"
                ]
            }
        },
        "GenericRunnable.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "GenericRunnable.run": {
            "name": "run",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "asyncfunc.decorator": {
            "name": "decorator",
            "location": 262,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "Pool.get": {
            "name": "get",
            "location": 287,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Pool.wait": {
            "name": "wait",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": [
                    "int",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "Pool.clear": {
            "name": "clear",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "throttled.decorator": {
            "name": "decorator",
            "location": 470,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Throttle.__init__": {
            "name": "__init__",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[[Any], T]",
                    "int",
                    "bool",
                    "str",
                    "List[Tuple[str, str]]",
                    "Sequence[dict]"
                ]
            }
        },
        "Throttle.__call__": {
            "name": "__call__",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Throttle.unthrottle": {
            "name": "unthrottle",
            "location": 519,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "Throttle.stop_all": {
            "name": "stop_all",
            "location": 525,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Callable"
                ]
            }
        },
        "asyncfunc.decorator.inner": {
            "name": "inner",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "throttled.decorator.inner": {
            "name": "inner",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Throttle.__init__.process": {
            "name": "process",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
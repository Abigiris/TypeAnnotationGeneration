{
    "visualbert-master/unsupervised_visualbert/data/gqa/process_raw_data_scripts/process_data.py": {},
    "visualbert-master/unsupervised_visualbert/data/gqa/process_raw_data_scripts/process_data_all.py": {},
    "visualbert-master/unsupervised_visualbert/data/gqa/process_raw_data_scripts/process_submit_data.py": {},
    "visualbert-master/unsupervised_visualbert/data/mscoco_imgfeat/extract_coco_image.py": {
        "load_image_ids": {
            "name": "load_image_ids",
            "location": 42,
            "return": [
                "str",
                "List[tuple]"
            ],
            "arguments": {
                "img_root": [
                    "str"
                ],
                "split_dir": [
                    "str",
                    "bool",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "generate_tsv": {
            "name": "generate_tsv",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "prototxt": [
                    "int",
                    "str"
                ],
                "weights": [
                    "int",
                    "str"
                ],
                "image_ids": [
                    "str",
                    "int",
                    "Sequence[Tuple[str, Any]]",
                    "List[str]",
                    "Tuple[int, int]",
                    "List[Dict[str, str]]"
                ],
                "outfile": [
                    "str",
                    "int",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "get_detections_from_im": {
            "name": "get_detections_from_im",
            "location": 83,
            "return": [
                "str",
                "bool",
                "IO"
            ],
            "arguments": {
                "net": [
                    "str",
                    "int"
                ],
                "im_file": [
                    "str",
                    "Dict[str,str]",
                    "List[int]",
                    "int"
                ],
                "image_id": [
                    "str",
                    "Dict[str,int]",
                    "int"
                ],
                "conf_thresh": [
                    "float",
                    "int",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 137,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        }
    },
    "visualbert-master/unsupervised_visualbert/data/nlvr2/nlvr/nlvr2/data/filter_data.py": {
        "filter_examples": {
            "name": "filter_examples",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes",
                    "Tuple[str,str,int]",
                    "int"
                ],
                "balanced": [
                    "int",
                    "List[str]",
                    "List[object]",
                    "List",
                    "str"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/data/nlvr2/nlvr/nlvr2/eval/compute_category_accuracy.py": {},
    "visualbert-master/unsupervised_visualbert/data/nlvr2/nlvr/nlvr2/eval/compute_filtered_accuracy.py": {},
    "visualbert-master/unsupervised_visualbert/data/nlvr2/nlvr/nlvr2/eval/metrics.py": {},
    "visualbert-master/unsupervised_visualbert/data/nlvr2/nlvr/nlvr2/util/download_images.py": {
        "save_image": {
            "name": "save_image",
            "location": 40,
            "return": [
                "Exception",
                "Optional[int]",
                "bool",
                "str",
                "int",
                "Optional[List[str]]",
                "Optional[Dict[str,str]]",
                "Optional[bool]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "url": [
                    "str",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ],
                "img_hash": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "wrong_hash_file": [
                    "int",
                    "str",
                    "BinaryIO",
                    "Callable[[int, int], None]"
                ]
            }
        },
        "Timeout.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sec": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Timeout.__enter__": {
            "name": "__enter__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.__exit__": {
            "name": "__exit__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.raise_timeout": {
            "name": "raise_timeout",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/data/nlvr2/process_raw_data_scripts/process_dataset.py": {},
    "visualbert-master/unsupervised_visualbert/data/nlvr2_imgfeat/extract_nlvr2_image.py": {
        "load_image_ids": {
            "name": "load_image_ids",
            "location": 45,
            "return": [
                "str",
                "List[tuple]"
            ],
            "arguments": {
                "img_root": [
                    "str",
                    "bool"
                ],
                "split_dir": [
                    "str",
                    "bool",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "generate_tsv": {
            "name": "generate_tsv",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "prototxt": [
                    "int",
                    "str"
                ],
                "weights": [
                    "int",
                    "str"
                ],
                "image_ids": [
                    "str",
                    "int",
                    "Sequence[Tuple[str, Any]]",
                    "List[str]",
                    "Tuple[int, int]",
                    "List[Dict[str, str]]"
                ],
                "outfile": [
                    "str",
                    "int",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "get_detections_from_im": {
            "name": "get_detections_from_im",
            "location": 98,
            "return": [
                "str",
                "bool",
                "IO"
            ],
            "arguments": {
                "net": [
                    "str",
                    "int"
                ],
                "im_file": [
                    "str",
                    "Dict[str,str]",
                    "List[int]",
                    "int"
                ],
                "image_id": [
                    "str",
                    "Dict[str,int]",
                    "int"
                ],
                "conf_thresh": [
                    "float",
                    "int",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 152,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        }
    },
    "visualbert-master/unsupervised_visualbert/data/vg_gqa_imgfeat/extract_gqa_image.py": {
        "load_image_ids": {
            "name": "load_image_ids",
            "location": 35,
            "return": [
                "str",
                "List[tuple]"
            ],
            "arguments": {
                "img_root": [
                    "Optional[List[str]]",
                    "str",
                    "List[str]",
                    "None",
                    "Optional[Callable[[Any],None]]",
                    "Callable[Any,None]"
                ]
            }
        },
        "generate_tsv": {
            "name": "generate_tsv",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "prototxt": [
                    "int",
                    "str"
                ],
                "weights": [
                    "int",
                    "str"
                ],
                "image_ids": [
                    "str",
                    "int",
                    "Sequence[Tuple[str, Any]]",
                    "List[str]",
                    "Tuple[int, int]",
                    "List[Dict[str, str]]"
                ],
                "outfile": [
                    "str",
                    "int",
                    "List",
                    "Optional[int]"
                ]
            }
        },
        "get_detections_from_im": {
            "name": "get_detections_from_im",
            "location": 74,
            "return": [
                "str",
                "bool",
                "IO"
            ],
            "arguments": {
                "net": [
                    "str",
                    "int"
                ],
                "im_file": [
                    "str",
                    "Dict[str,str]",
                    "List[int]",
                    "int"
                ],
                "image_id": [
                    "str",
                    "Dict[str,int]",
                    "int"
                ],
                "conf_thresh": [
                    "float",
                    "int",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 128,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        }
    },
    "visualbert-master/unsupervised_visualbert/src/param.py": {
        "get_optimizer": {
            "name": "get_optimizer",
            "location": 13,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "optim": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 35,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "parse_args.Unbuffered.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "parse_args.Unbuffered.write": {
            "name": "write",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "parse_args.Unbuffered.flush": {
            "name": "flush",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/utils.py": {
        "load_obj_tsv": {
            "name": "load_obj_tsv",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ],
                "topk": [
                    "Optional[str]",
                    "None",
                    "bytes",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "load_obj_tsv_save_to_h5": {
            "name": "load_obj_tsv_save_to_h5",
            "location": 57,
            "return": [
                "List",
                "str",
                "Sequence",
                "Callable",
                "Union[Dict,Tuple]",
                "bytes"
            ],
            "arguments": {
                "fname": [
                    "str"
                ],
                "save_h5_name": [
                    "str",
                    "Dict[str,Any]"
                ],
                "save_json_name": [
                    "str",
                    "Optional[str]"
                ],
                "all_examples": [
                    "str",
                    "int",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "create_slim_h5": {
            "name": "create_slim_h5",
            "location": 115,
            "return": [
                "List",
                "Dict",
                "Callable",
                "OrderedDict[str,Any]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ],
                "save_h5_name": [
                    "str",
                    "Dict[str,Any]"
                ],
                "save_json_name": [
                    "str"
                ],
                "all_examples": [
                    "str",
                    "int",
                    "bytes",
                    "Dict"
                ],
                "img_ids_to_keep": [
                    "str",
                    "csv.DictWriter"
                ]
            }
        },
        "load_lxmert_sgg": {
            "name": "load_lxmert_sgg",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "model": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "load_lxmert_sgg_pretrain": {
            "name": "load_lxmert_sgg_pretrain",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "model": [
                    "str",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "load_lxmert_to_sgg": {
            "name": "load_lxmert_to_sgg",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "model": [
                    "str",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "load_state_dict_flexible": {
            "name": "load_state_dict_flexible",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "state_dict": [
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/entry.py": {
        "get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 27,
            "return": [
                "bytes",
                "list[tuple[typing.Union[int,str]]]",
                "list[None]"
            ],
            "arguments": {
                "list_of_np_array": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "pad_np_arrays": {
            "name": "pad_np_arrays",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "list_of_np_array": [
                    "list[typing.Union[\"PipeChain\",str]]"
                ],
                "padding_value": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "dtype": [
                    "bool",
                    "list[int]",
                    "list[float]",
                    "list['GridQid']",
                    "str"
                ],
                "cuda": [
                    "bool"
                ]
            }
        },
        "convert_sents_to_features": {
            "name": "convert_sents_to_features",
            "location": 79,
            "return": [
                "list[InputFeatures]"
            ],
            "arguments": {
                "sents": [
                    "str",
                    "list[int]"
                ],
                "max_seq_length": [
                    "int"
                ],
                "tokenizer": [
                    "int"
                ]
            }
        },
        "convert_sents_to_features_tensors": {
            "name": "convert_sents_to_features_tensors",
            "location": 116,
            "return": [
                "tuple[typing.Union[int,list[int],range,list[],float,memoryview,str]]"
            ],
            "arguments": {
                "sents": [
                    "str",
                    "list[int]"
                ],
                "max_seq_length": [
                    "int"
                ],
                "tokenizer": [
                    "int"
                ]
            }
        },
        "convert_tags_to_tensorts": {
            "name": "convert_tags_to_tensorts",
            "location": 156,
            "return": [
                "tuple[None]",
                "tuple[]"
            ],
            "arguments": {
                "tags": [
                    "str",
                    "list[str]"
                ],
                "cuda": [
                    "bool"
                ]
            }
        },
        "convert_sent_features_to_features": {
            "name": "convert_sent_features_to_features",
            "location": 169,
            "return": [
                "list[InputFeatures]"
            ],
            "arguments": {
                "sents": [
                    "list[int]",
                    "str"
                ],
                "max_seq_length": [
                    "int"
                ],
                "tokenizer": [
                    "dict[, ]"
                ]
            }
        },
        "set_visual_config": {
            "name": "set_visual_config",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "VISUAL_CONFIG": [
                    "tuple[typing.Union[dict[str, str],list[str]]]"
                ]
            }
        },
        "InputFeatures.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "int",
                    "str",
                    "None"
                ],
                "input_mask": [
                    "int",
                    "str"
                ],
                "segment_ids": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "LXRTEncoder.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "max_seq_length": [
                    "int",
                    "None",
                    "str"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "LXRTEncoder.multi_gpu": {
            "name": "multi_gpu",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LXRTEncoder.dim": {
            "name": "dim",
            "location": 247,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LXRTEncoder.forward": {
            "name": "forward",
            "location": 250,
            "return": [
                "int",
                "bytes",
                "tuple[typing.Union[int,int]]"
            ],
            "arguments": {
                "self": [],
                "sents": [
                    "int",
                    "float"
                ],
                "feats": [
                    "int",
                    "str"
                ],
                "visual_attention_mask": [
                    "None",
                    "int",
                    "str"
                ],
                "input_already_tokenized": [
                    "bool"
                ],
                "visual_feats_seg_ids": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "LXRTEncoder.save": {
            "name": "save",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "LXRTEncoder.load": {
            "name": "load",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "tuple[str]"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/file_utils.py": {
        "url_to_filename": {
            "name": "url_to_filename",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "requests.Response"
                ],
                "etag": [
                    "str",
                    "bytes",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "filename_to_url": {
            "name": "filename_to_url",
            "location": 55,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "cache_dir": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "cached_path": {
            "name": "cached_path",
            "location": 81,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "Dict",
                "IO",
                "None"
            ],
            "arguments": {
                "url_or_filename": [
                    "str",
                    "IO",
                    "int",
                    "None",
                    "Optional[pathlib.PurePosixPath]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "cache_dir": [
                    "bool",
                    "None",
                    "str",
                    "List",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "split_s3_path": {
            "name": "split_s3_path",
            "location": 111,
            "return": [
                "Tuple",
                "str",
                "pathlib.Path",
                "Optional[str]",
                "Set[str]",
                "Dict[str,str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "s3_request": {
            "name": "s3_request",
            "location": 124,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Dict",
                    "Dict[str,Any]",
                    "Type",
                    "Type[T]",
                    "T"
                ]
            }
        },
        "s3_etag": {
            "name": "s3_etag",
            "location": 144,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ]
            }
        },
        "s3_get": {
            "name": "s3_get",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "pathlib.Path"
                ],
                "temp_file": [
                    "IO",
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "pathlib.Path",
                    "Union[str,bytes]",
                    "Iterable[str]"
                ]
            }
        },
        "http_get": {
            "name": "http_get",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "apistar.http.Path"
                ],
                "temp_file": [
                    "IO",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_from_cache": {
            "name": "get_from_cache",
            "location": 172,
            "return": [
                "str",
                "pathlib.Path",
                "Union[pathlib.Path,str]",
                "List[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "cache_dir": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[TextIO]",
                    "TextIO"
                ]
            }
        },
        "read_set_from_file": {
            "name": "read_set_from_file",
            "location": 232,
            "return": [
                "Set",
                "str",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "get_file_extension": {
            "name": "get_file_extension",
            "location": 244,
            "return": [
                "str",
                "List",
                "List[str]",
                "List[pathlib.Path]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "dot": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "os.PathLike"
                ],
                "lower": [
                    "bool",
                    "int",
                    "TextIO",
                    "IO",
                    "str"
                ]
            }
        },
        "s3_request.wrapper": {
            "name": "wrapper",
            "location": 131,
            "return": [
                "int",
                "Callable[[int], None]",
                "bool",
                "float"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/h5_data.py": {
        "chunks": {
            "name": "chunks",
            "location": 15,
            "return": [
                "list[]"
            ],
            "arguments": {
                "lst": [],
                "n": [
                    "int",
                    "list[]",
                    "list[T]"
                ]
            }
        },
        "CustomBatchSampler.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasets": [],
                "batch_size": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "upsample_ratios": [],
                "reduce_to_non_batch_sampler": [
                    "bool"
                ]
            }
        },
        "CustomBatchSampler.prepare_indexes": {
            "name": "prepare_indexes",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomBatchSampler.__iter__": {
            "name": "__iter__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomBatchSampler.__len__": {
            "name": "__len__",
            "location": 129,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcateDataset.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasets": [
                    "int",
                    "float"
                ]
            }
        },
        "ConcateDataset.__getitem__": {
            "name": "__getitem__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "ConcateDataset.__len__": {
            "name": "__len__",
            "location": 151,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcateH5.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list_of_h5": [
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]"
                ]
            }
        },
        "ConcateH5.__getitem__": {
            "name": "__getitem__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "list[]",
                    "bool",
                    "list[int]",
                    "tuple[]"
                ]
            }
        },
        "ConcateH5.__len__": {
            "name": "__len__",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFeatureDataset.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h5_features": [
                    "str",
                    "bool",
                    "float"
                ],
                "h5_boxes": [
                    "str",
                    "bool",
                    "float"
                ],
                "h5_objects_id": [
                    "int",
                    "str",
                    "set[str]",
                    "dict[str, typing.Any]",
                    "list[int]"
                ],
                "h5_objects_conf": [
                    "str",
                    "bool",
                    "float"
                ],
                "h5_attrs_id": [
                    "int",
                    "str",
                    "set[str]",
                    "dict[str, typing.Any]",
                    "list[int]"
                ],
                "h5_attrs_conf": [
                    "str",
                    "bool",
                    "float"
                ],
                "h5_wh": [
                    "str",
                    "bool",
                    "float"
                ],
                "ids_to_index": [
                    "int",
                    "str",
                    "list[str]",
                    "None"
                ],
                "h5_num_boxes": [
                    "None",
                    "bool",
                    "float",
                    "dict[str, typing.Any]",
                    "typing.Container",
                    "dict[, ]"
                ],
                "version_3": [
                    "bool"
                ]
            }
        },
        "ImageFeatureDataset.__getitem__": {
            "name": "__getitem__",
            "location": 184,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "img_id": [
                    "str"
                ]
            }
        },
        "ImageFeatureDataset.get_everything_except_features": {
            "name": "get_everything_except_features",
            "location": 211,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "img_id": [
                    "str"
                ]
            }
        },
        "ImageFeatureDataset.create": {
            "name": "create",
            "location": 226,
            "return": [],
            "arguments": {
                "cls": [],
                "sources": [],
                "Split2ImgFeatPath_h5": [
                    "str",
                    "list[str]"
                ],
                "load_custom_h5_version2": [
                    "bool"
                ],
                "load_custom_h5_version3": [
                    "bool"
                ],
                "text_only": [
                    "bool"
                ],
                "on_memory": [
                    "bool"
                ]
            }
        },
        "ImageFeatureDataset.load_custom_h5": {
            "name": "load_custom_h5",
            "location": 292,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "h5_file_name": [
                    "str"
                ],
                "on_memory": [
                    "bool"
                ],
                "text_only": [
                    "bool"
                ]
            }
        },
        "ImageFeatureDataset.load_custom_h5_version2": {
            "name": "load_custom_h5_version2",
            "location": 318,
            "return": [
                "tuple[typing.Union[str,list[str],list[],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]],list[int],list[tuple[]]]]"
            ],
            "arguments": {
                "h5_file_name": [
                    "str"
                ],
                "on_memory": [
                    "bool"
                ],
                "text_only": [
                    "bool"
                ]
            }
        },
        "ImageFeatureDataset.load_custom_h5_version3": {
            "name": "load_custom_h5_version3",
            "location": 362,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "h5_file_name": [
                    "str"
                ],
                "on_memory": [
                    "bool"
                ],
                "keep_top_1": [
                    "bool"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/modeling.py": {
        "load_tf_weights_in_bert": {
            "name": "load_tf_weights_in_bert",
            "location": 51,
            "return": [],
            "arguments": {
                "model": [],
                "tf_checkpoint_path": []
            }
        },
        "gelu": {
            "name": "gelu",
            "location": 112,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "swish": {
            "name": "swish",
            "location": 134,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_cat_with_none": {
            "name": "_cat_with_none",
            "location": 753,
            "return": [],
            "arguments": {
                "feat_1": [],
                "feat_2": [],
                "dim": []
            }
        },
        "_split_with_none": {
            "name": "_split_with_none",
            "location": 760,
            "return": [],
            "arguments": {
                "lang_feats": [],
                "visn_feats": [],
                "joint_feats": []
            }
        },
        "GeLU.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeLU.forward": {
            "name": "forward",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "VisualConfig.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "l_layers": [],
                "x_layers": [],
                "r_layers": []
            }
        },
        "VisualConfig.set_visual_dims": {
            "name": "set_visual_dims",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "feat_dim": [],
                "pos_dim": []
            }
        },
        "BertConfig.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_size_or_config_json_file": [],
                "hidden_size": [],
                "num_hidden_layers": [],
                "num_attention_heads": [],
                "intermediate_size": [],
                "hidden_act": [],
                "hidden_dropout_prob": [],
                "attention_probs_dropout_prob": [],
                "max_position_embeddings": [],
                "type_vocab_size": [],
                "initializer_range": []
            }
        },
        "BertConfig.from_dict": {
            "name": "from_dict",
            "location": 253,
            "return": [],
            "arguments": {
                "cls": [],
                "json_object": []
            }
        },
        "BertConfig.from_json_file": {
            "name": "from_json_file",
            "location": 261,
            "return": [],
            "arguments": {
                "cls": [],
                "json_file": []
            }
        },
        "BertConfig.__repr__": {
            "name": "__repr__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertConfig.to_dict": {
            "name": "to_dict",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertConfig.to_json_string": {
            "name": "to_json_string",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertEmbeddings.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertEmbeddings.forward": {
            "name": "forward",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attribute_ids": [],
                "symbolic_embedding": []
            }
        },
        "BertEmbeddings.special_embedding": {
            "name": "special_embedding",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "tokenized_words": []
            }
        },
        "BertAttention.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "ctx_dim": []
            }
        },
        "BertAttention.transpose_for_scores": {
            "name": "transpose_for_scores",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "BertAttention.forward": {
            "name": "forward",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "context": [],
                "attention_mask": []
            }
        },
        "BertAttOutput.__init__": {
            "name": "__init__",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertAttOutput.forward": {
            "name": "forward",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "input_tensor": []
            }
        },
        "BertCrossattLayer.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertCrossattLayer.forward": {
            "name": "forward",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "input_tensor": [],
                "ctx_tensor": [],
                "ctx_att_mask": []
            }
        },
        "BertSelfattLayer.__init__": {
            "name": "__init__",
            "location": 433,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertSelfattLayer.forward": {
            "name": "forward",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "input_tensor": [],
                "attention_mask": []
            }
        },
        "BertIntermediate.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertIntermediate.forward": {
            "name": "forward",
            "location": 454,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertOutput.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertOutput.forward": {
            "name": "forward",
            "location": 467,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "input_tensor": []
            }
        },
        "BertLayer.__init__": {
            "name": "__init__",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertLayer.forward": {
            "name": "forward",
            "location": 480,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "attention_mask": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.__init__": {
            "name": "__init__",
            "location": 501,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.initialize_visual_position_type_embeddings": {
            "name": "initialize_visual_position_type_embeddings",
            "location": 543,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.initialize_symbolic_embeddings": {
            "name": "initialize_symbolic_embeddings",
            "location": 550,
            "return": [],
            "arguments": {
                "self": [],
                "tokenized_words": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.forward": {
            "name": "forward",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "visual_embeddings": [],
                "visual_embeddings_type": [],
                "position_embeddings_visual": [],
                "image_text_alignment": [],
                "confidence": [],
                "position_ids": [],
                "boxes": [],
                "visual_tags": [],
                "visual_tags_box": [],
                "visual_tags_type": [],
                "visual_tags_segment_ids": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.unfreeze_obj_feat": {
            "name": "unfreeze_obj_feat",
            "location": 650,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXRTXLayer.__init__": {
            "name": "__init__",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "LXRTXLayer.cross_att": {
            "name": "cross_att",
            "location": 683,
            "return": [],
            "arguments": {
                "self": [],
                "lang_input": [],
                "lang_attention_mask": [],
                "visn_input": [],
                "visn_attention_mask": []
            }
        },
        "LXRTXLayer.self_att": {
            "name": "self_att",
            "location": 689,
            "return": [],
            "arguments": {
                "self": [],
                "lang_input": [],
                "lang_attention_mask": [],
                "visn_input": [],
                "visn_attention_mask": []
            }
        },
        "LXRTXLayer.output_fc": {
            "name": "output_fc",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "lang_input": [],
                "visn_input": []
            }
        },
        "LXRTXLayer.forward": {
            "name": "forward",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "lang_feats": [],
                "lang_attention_mask": [],
                "visn_feats": [],
                "visn_attention_mask": []
            }
        },
        "VisualFeatEncoder.__init__": {
            "name": "__init__",
            "location": 720,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "VisualFeatEncoder.forward": {
            "name": "forward",
            "location": 735,
            "return": [],
            "arguments": {
                "self": [],
                "visn_input": []
            }
        },
        "LXRTEncoder.__init__": {
            "name": "__init__",
            "location": 770,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "LXRTEncoder.forward": {
            "name": "forward",
            "location": 824,
            "return": [],
            "arguments": {
                "self": [],
                "lang_feats": [],
                "lang_attention_mask": [],
                "visn_feats": [],
                "visn_attention_mask": [],
                "bypass_visual_feat": [],
                "bypass_mask": [],
                "layer_limit": []
            }
        },
        "BertPooler.__init__": {
            "name": "__init__",
            "location": 907,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertPooler.forward": {
            "name": "forward",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertPredictionHeadTransform.__init__": {
            "name": "__init__",
            "location": 922,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertPredictionHeadTransform.forward": {
            "name": "forward",
            "location": 931,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertLMPredictionHead.__init__": {
            "name": "__init__",
            "location": 938,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "bert_model_embedding_weights": []
            }
        },
        "BertLMPredictionHead.forward": {
            "name": "forward",
            "location": 950,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertVisualAnswerHead.__init__": {
            "name": "__init__",
            "location": 957,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "num_answers": []
            }
        },
        "BertVisualAnswerHead.forward": {
            "name": "forward",
            "location": 967,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertVisualObjHead.__init__": {
            "name": "__init__",
            "location": 972,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "visual_losses": []
            }
        },
        "BertVisualObjHead.forward": {
            "name": "forward",
            "location": 991,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertPreTrainingHeads.__init__": {
            "name": "__init__",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "bert_model_embedding_weights": []
            }
        },
        "BertPreTrainingHeads.forward": {
            "name": "forward",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_output": [],
                "pooled_output": [],
                "calculate_seq_score": []
            }
        },
        "BertPreTrainedModel.__init__": {
            "name": "__init__",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertPreTrainedModel.init_bert_weights": {
            "name": "init_bert_weights",
            "location": 1035,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "BertPreTrainedModel.from_pretrained": {
            "name": "from_pretrained",
            "location": 1049,
            "return": [],
            "arguments": {
                "cls": [],
                "pretrained_model_name_or_path": [],
                "state_dict": [],
                "cache_dir": [],
                "from_tf": []
            }
        },
        "LXRTModel.__init__": {
            "name": "__init__",
            "location": 1187,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "LXRTModel.forward": {
            "name": "forward",
            "location": 1197,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "visual_feats": [],
                "visual_attention_mask": [],
                "position_embeddings_visual": [],
                "visual_tags": [],
                "visual_tags_mask": [],
                "visual_tags_box": [],
                "visual_tags_type": [],
                "visual_tags_segment_ids": [],
                "visual_feats_seg_ids": []
            }
        },
        "LXRTPretraining.__init__": {
            "name": "__init__",
            "location": 1299,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "args": [],
                "task_mask_lm": [],
                "task_matched": [],
                "task_obj_predict": [],
                "visual_losses": [],
                "task_qa": [],
                "num_answers": []
            }
        },
        "LXRTPretraining.special_initialize_pretraining_head": {
            "name": "special_initialize_pretraining_head",
            "location": 1335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXRTPretraining.forward": {
            "name": "forward",
            "location": 1339,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "masked_lm_labels": [],
                "visual_feats": [],
                "pos": [],
                "obj_labels": [],
                "matched_label": [],
                "ans": [],
                "visual_tags": [],
                "visual_tags_mask": [],
                "visual_tags_box": [],
                "visual_tags_type": [],
                "visual_tags_objective": [],
                "visual_tags_mismatch": [],
                "visual_tags_segment_ids": [],
                "visual_feats_seg_ids": [],
                "return_cross_relationship_score": []
            }
        },
        "LXRTFeatureExtraction.__init__": {
            "name": "__init__",
            "location": 1472,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "mode": []
            }
        },
        "LXRTFeatureExtraction.forward": {
            "name": "forward",
            "location": 1483,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "visual_feats": [],
                "visual_attention_mask": [],
                "return_both": [],
                "visual_feats_seg_ids": []
            }
        },
        "BertPreTrainedModel.from_pretrained.load": {
            "name": "load",
            "location": 1160,
            "return": [],
            "arguments": {
                "module": [],
                "prefix": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/optimization.py": {
        "warmup_cosine": {
            "name": "warmup_cosine",
            "location": 26,
            "return": [
                "float",
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes"
                ],
                "warmup": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "warmup_constant": {
            "name": "warmup_constant",
            "location": 31,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes"
                ],
                "warmup": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "warmup_linear": {
            "name": "warmup_linear",
            "location": 38,
            "return": [
                "int",
                "float",
                "List[int]",
                "str",
                "torch.Tensor"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ],
                "warmup": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "BertAdam.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bool",
                    "Sequence[str]",
                    "List[str]"
                ],
                "lr": [
                    "Optional[List[Any]]",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "warmup": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Optional[bool]",
                    "Optional[List[Any]]"
                ],
                "t_total": [
                    "int",
                    "float",
                    "torch.Tensor"
                ],
                "schedule": [
                    "Text",
                    "int",
                    "Tuple[Iterable[str],Iterable[str],Dict[str,Any]]",
                    "Optional[float]",
                    "str",
                    "bool"
                ],
                "b1": [
                    "float",
                    "str",
                    "int"
                ],
                "b2": [
                    "float",
                    "str",
                    "int"
                ],
                "e": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "weight_decay": [
                    "float",
                    "List[str]",
                    "Sequence[str]",
                    "str",
                    "Dict[str,Dict[str,int]]"
                ],
                "max_grad_norm": [
                    "float",
                    "List[str]",
                    "Sequence[str]",
                    "str",
                    "Dict[str,Dict[str,int]]"
                ]
            }
        },
        "BertAdam.get_lr": {
            "name": "get_lr",
            "location": 89,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertAdam.step": {
            "name": "step",
            "location": 104,
            "return": [
                "int",
                "None",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "closure": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/symbolic_vocabulary.py": {
        "SymbolicVocab.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]"
                ],
                "attribute_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]"
                ],
                "cls_token": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "sep_token": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "mask_token": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "take_fisrt": [
                    "bool",
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[Callable]",
                    "Optional[Set[str]]"
                ]
            }
        },
        "SymbolicVocab.__len__": {
            "name": "__len__",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolicVocab.obj_id2word": {
            "name": "obj_id2word",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str"
                ]
            }
        },
        "SymbolicVocab.attr_id2word": {
            "name": "attr_id2word",
            "location": 48,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str"
                ]
            }
        },
        "SymbolicVocab.get_symbolic_list": {
            "name": "get_symbolic_list",
            "location": 51,
            "return": [
                "List",
                "str",
                "Set",
                "Set[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "List[str]",
                    "List"
                ]
            }
        },
        "SymbolicVocab.get_seg_id": {
            "name": "get_seg_id",
            "location": 57,
            "return": [
                "int",
                "str",
                "Dict[str,Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "word_id": [
                    "int",
                    "bytes",
                    "List[int]",
                    "Dict"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/lxrt/tokenization.py": {
        "load_vocab": {
            "name": "load_vocab",
            "location": 48,
            "return": [],
            "arguments": {
                "vocab_file": [
                    "str"
                ]
            }
        },
        "whitespace_tokenize": {
            "name": "whitespace_tokenize",
            "location": 63,
            "return": [
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_is_whitespace": {
            "name": "_is_whitespace",
            "location": 351,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "_is_control": {
            "name": "_is_control",
            "location": 363,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "_is_punctuation": {
            "name": "_is_punctuation",
            "location": 375,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "BertTokenizer.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_file": [
                    "bool",
                    "str",
                    "list[dict[str, str]]"
                ],
                "do_lower_case": [
                    "bool"
                ],
                "max_len": [
                    "None",
                    "int",
                    "str"
                ],
                "do_basic_tokenize": [
                    "bool"
                ],
                "never_split": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "BertTokenizer.tokenize": {
            "name": "tokenize",
            "location": 105,
            "return": [
                "dict[str, str]",
                "str",
                "float",
                "typing.Match",
                "None",
                "list[]",
                "typing.Pattern"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BertTokenizer.convert_tokens_to_ids": {
            "name": "convert_tokens_to_ids",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "list[]"
                ]
            }
        },
        "BertTokenizer.convert_ids_to_tokens": {
            "name": "convert_ids_to_tokens",
            "location": 128,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str"
                ]
            }
        },
        "BertTokenizer.from_pretrained": {
            "name": "from_pretrained",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "pretrained_model_name_or_path": [
                    "str"
                ],
                "cache_dir": [
                    "None",
                    "str"
                ]
            }
        },
        "BasicTokenizer.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do_lower_case": [
                    "bool"
                ],
                "never_split": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "BasicTokenizer.tokenize": {
            "name": "tokenize",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "BasicTokenizer._run_strip_accents": {
            "name": "_run_strip_accents",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BasicTokenizer._run_split_on_punc": {
            "name": "_run_split_on_punc",
            "location": 220,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BasicTokenizer._tokenize_chinese_chars": {
            "name": "_tokenize_chinese_chars",
            "location": 242,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BasicTokenizer._is_chinese_char": {
            "name": "_is_chinese_char",
            "location": 255,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cp": [
                    "int"
                ]
            }
        },
        "BasicTokenizer._clean_text": {
            "name": "_clean_text",
            "location": 277,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "WordpieceTokenizer.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "str",
                    "list[str]",
                    "bytes",
                    "dict[str, int]",
                    "bool",
                    "float"
                ],
                "unk_token": [
                    "typing.Text"
                ],
                "max_input_chars_per_word": [
                    "int"
                ]
            }
        },
        "WordpieceTokenizer.tokenize": {
            "name": "tokenize",
            "location": 299,
            "return": [
                "list[typing.Optional[str]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/box.py": {
        "heuristic_filter": {
            "name": "heuristic_filter",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "box_a": [],
                "box_b": [],
                "image_size": [],
                "threshhold": [
                    "float"
                ]
            }
        },
        "determine_box_position_type": {
            "name": "determine_box_position_type",
            "location": 30,
            "return": [
                "tuple[typing.Text]",
                "tuple[typing.Union[typing.Text,int]]",
                "int"
            ],
            "arguments": {
                "box_a": [],
                "box_b": [],
                "image_size": []
            }
        },
        "add_to_the_left_to_the_right_relation": {
            "name": "add_to_the_left_to_the_right_relation",
            "location": 54,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "box_a": [],
                "box_b": [],
                "image_size": [],
                "y_overlap_ratio_thresh": [],
                "x_overlap_ratio_thresh": []
            }
        },
        "boxlist_iou": {
            "name": "boxlist_iou",
            "location": 81,
            "return": [],
            "arguments": {
                "boxlist1": [],
                "boxlist2": []
            }
        },
        "bbox_intersections": {
            "name": "bbox_intersections",
            "location": 124,
            "return": [],
            "arguments": {
                "box_a": [],
                "box_b": []
            }
        },
        "bbox_overlaps": {
            "name": "bbox_overlaps",
            "location": 148,
            "return": [],
            "arguments": {
                "box_a": [],
                "box_b": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/lxmert_data.py": {
        "make_uid": {
            "name": "make_uid",
            "location": 146,
            "return": [],
            "arguments": {
                "img_id": [],
                "dset": [],
                "sent_idx": []
            }
        },
        "load_vocabs": {
            "name": "load_vocabs",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "random_word": {
            "name": "random_word",
            "location": 170,
            "return": [],
            "arguments": {
                "tokens": [],
                "tokenizer": []
            }
        },
        "InputExample.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [],
                "sent": [],
                "visual_feats": [],
                "obj_labels": [],
                "attr_labels": [],
                "is_matched": [],
                "label": [],
                "sent_b": [],
                "use_visual_tag_flag": [],
                "mlm_labels": [],
                "token_ids": [],
                "max_seq_len": []
            }
        },
        "InputFeatures.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "input_mask": [],
                "segment_ids": [],
                "lm_label_ids": [],
                "visual_feats": [],
                "obj_labels": [],
                "is_matched": [],
                "ans": [],
                "visual_tags": [],
                "visual_tags_objective": [],
                "visual_tags_mask": [],
                "visual_tags_box": [],
                "visual_tags_mismatch": [],
                "obj_labels_transformed_mismatch": [],
                "visual_tags_box_mismatch": [],
                "use_visual_tag_flag": [],
                "visual_tags_segment_ids": [],
                "visual_feats_seg_ids": []
            }
        },
        "LXMERTDataset.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "splits": [],
                "qa_sets": []
            }
        },
        "LXMERTDataset.__len__": {
            "name": "__len__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMERTTorchDataset.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "topk": [],
                "sgg_dataset": [],
                "image_only": [],
                "text_only": [],
                "use_visual_tag_flag": [],
                "limit_source": [],
                "available_split_for_cc": []
            }
        },
        "LXMERTTorchDataset.compress": {
            "name": "compress",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMERTTorchDataset.compress_list_of_strings": {
            "name": "compress_list_of_strings",
            "location": 395,
            "return": [],
            "arguments": {
                "self": [],
                "list_of_string": [],
                "name": []
            }
        },
        "LXMERTTorchDataset.decompress_string_index": {
            "name": "decompress_string_index",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "shared_array": [],
                "record_position": []
            }
        },
        "LXMERTTorchDataset.decompress_getitem__": {
            "name": "decompress_getitem__",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LXMERTTorchDataset.__len__": {
            "name": "__len__",
            "location": 425,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMERTTorchDataset.random_feat": {
            "name": "random_feat",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMERTTorchDataset.random_tags": {
            "name": "random_tags",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMERTTorchDataset.__getitem__": {
            "name": "__getitem__",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "LXMERTTorchDataset.random_mask_features": {
            "name": "random_mask_features",
            "location": 558,
            "return": [],
            "arguments": {
                "self": [],
                "feats": [],
                "boxes": []
            }
        },
        "LXMERTTorchDataset.convert_example_to_features": {
            "name": "convert_example_to_features",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "example": [],
                "max_seq_length": [],
                "tokenizer": []
            }
        },
        "LXMERTTorchDataset.create_in_batch_random_feat": {
            "name": "create_in_batch_random_feat",
            "location": 756,
            "return": [],
            "arguments": {
                "self": [],
                "example": [],
                "example_index": [],
                "all_examples": []
            }
        },
        "LXMERTTorchDataset.custom_collact_fn": {
            "name": "custom_collact_fn",
            "location": 773,
            "return": [],
            "arguments": {
                "self": [],
                "examples": []
            }
        },
        "LXMERTEvaluator.__init__": {
            "name": "__init__",
            "location": 893,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": []
            }
        },
        "LXMERTEvaluator.evaluate": {
            "name": "evaluate",
            "location": 918,
            "return": [],
            "arguments": {
                "self": [],
                "uid2ans": [],
                "pprint": []
            }
        },
        "LXMERTEvaluator.dump_result": {
            "name": "dump_result",
            "location": 948,
            "return": [],
            "arguments": {
                "self": [],
                "uid2ans": [],
                "path": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/lxmert_pretrain.py": {
        "get_tuple": {
            "name": "get_tuple",
            "location": 57,
            "return": [
                "DataTuple"
            ],
            "arguments": {
                "splits": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "bytes"
                ],
                "bs": [
                    "int",
                    "float"
                ],
                "shuffle": [
                    "bool"
                ],
                "drop_last": [
                    "bool"
                ],
                "topk": [
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "limit_source": [
                    "list[]"
                ],
                "restrict_source": [
                    "None",
                    "bool",
                    "set[str]"
                ]
            }
        },
        "get_tuple_hybrid": {
            "name": "get_tuple_hybrid",
            "location": 86,
            "return": [],
            "arguments": {
                "splits": [
                    "str",
                    "None",
                    "bytes",
                    "typing.Callable[[], str]"
                ],
                "bs": [
                    "str",
                    "None",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "shuffle": [
                    "bool"
                ],
                "drop_last": [
                    "bool"
                ],
                "num_workers": [
                    "int"
                ],
                "topk": [
                    "int"
                ],
                "image_only_splits": [
                    "None",
                    "float",
                    "tuple[typing.Union[str,int]]",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "list[list[typing.Callable[, ]]]",
                    "list[int]"
                ],
                "text_only_splits": [
                    "str",
                    "None"
                ],
                "limit_source": [
                    "list[]"
                ],
                "restrict_source": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "TrainingMeter.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingMeter.update": {
            "name": "update",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss_dict": [
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, float]",
                    "dict[, ]",
                    "dict[str, int]"
                ]
            }
        },
        "TrainingMeter.report": {
            "name": "report",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingMeter.clean": {
            "name": "clean",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LXMERT.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_seq_length": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "LXMERT.forward": {
            "name": "forward",
            "location": 233,
            "return": [
                "tuple[typing.Union[dict[str, typing.Any],tuple[],None]]"
            ],
            "arguments": {
                "self": [],
                "examples": [
                    "dict[str, torch.Tensor]"
                ]
            }
        },
        "LXMERT.train_batch": {
            "name": "train_batch",
            "location": 258,
            "return": [
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "optim": [],
                "batch": [
                    "list[numpy.ndarray]",
                    "typing.OrderedDict",
                    "dict[, ]"
                ]
            }
        },
        "LXMERT.valid_batch": {
            "name": "valid_batch",
            "location": 277,
            "return": [
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "dict[, ]",
                    "list[numpy.ndarray]"
                ]
            }
        },
        "LXMERT.train": {
            "name": "train",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_tuple": [
                    "str",
                    "bool"
                ],
                "eval_tuple": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "LXMERT.evaluate_epoch": {
            "name": "evaluate_epoch",
            "location": 379,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "eval_tuple": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[torch.Tensor]",
                    "typing.Callable[, ]"
                ],
                "iters": [
                    "int"
                ]
            }
        },
        "LXMERT.evaluate_epoch_text": {
            "name": "evaluate_epoch_text",
            "location": 414,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "eval_tuple": [
                    "str"
                ],
                "iters": [
                    "int"
                ]
            }
        },
        "LXMERT.save": {
            "name": "save",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "LXMERT.load": {
            "name": "load",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "bool"
                ],
                "t_total": [
                    "int",
                    "float",
                    "None",
                    "typing.Iterator",
                    "tuple[int]"
                ]
            }
        },
        "LXMERT.load_lxmert": {
            "name": "load_lxmert",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "tuple[str]"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/qa_answer_table.py": {
        "load_lxmert_qa": {
            "name": "load_lxmert_qa",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "list[str]",
                    "str",
                    "typing.AbstractSet"
                ],
                "model": [],
                "label2ans": [
                    "dict[, ]"
                ]
            }
        },
        "load_lxmert_from_pretrain_noqa": {
            "name": "load_lxmert_from_pretrain_noqa",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "model": []
            }
        },
        "load_lxmert_for_vcr_finetune_from_vcr_pretrain": {
            "name": "load_lxmert_for_vcr_finetune_from_vcr_pretrain",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "model": []
            }
        },
        "load_lxmert_from_pretrain_vcr_pretrain": {
            "name": "load_lxmert_from_pretrain_vcr_pretrain",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "model": []
            }
        },
        "load_lxmert_from_sgg_and_lxmert_pretrain": {
            "name": "load_lxmert_from_sgg_and_lxmert_pretrain",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "list[str]",
                    "str",
                    "typing.AbstractSet"
                ],
                "model": [],
                "label2ans": [
                    "dict[str, str]"
                ]
            }
        },
        "load_state_dict_flexible": {
            "name": "load_state_dict_flexible",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "state_dict": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "AnswerTable.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dsets": [
                    "None",
                    "list[str]",
                    "bool",
                    "set[]"
                ]
            }
        },
        "AnswerTable.convert_ans": {
            "name": "convert_ans",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "ans": []
            }
        },
        "AnswerTable.ans2id": {
            "name": "ans2id",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "ans": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "AnswerTable.id2ans": {
            "name": "id2ans",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "ans_id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "AnswerTable.ans2id_map": {
            "name": "ans2id_map",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnswerTable.id2ans_map": {
            "name": "id2ans_map",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnswerTable.used": {
            "name": "used",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ans": [
                    "str"
                ]
            }
        },
        "AnswerTable.all_answers": {
            "name": "all_answers",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnswerTable.num_answers": {
            "name": "num_answers",
            "location": 84,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/tag_data_utilis.py": {
        "pad_np_arrays": {
            "name": "pad_np_arrays",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "list_of_np_array": [
                    "numpy.ndarray"
                ],
                "padding_value": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "numpy.random.RandomState"
                ],
                "dtype": [
                    "bool",
                    "List[int]",
                    "List[float]",
                    "str",
                    "List[G]",
                    "List[GridQid]",
                    "int"
                ]
            }
        },
        "transfer_object_labels_to_symbolic_ids": {
            "name": "transfer_object_labels_to_symbolic_ids",
            "location": 44,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "obj_labels": [
                    "list",
                    "int",
                    "numpy.ndarray",
                    "Sequence[T]",
                    "List[str]",
                    "Optional[str]"
                ],
                "attribute_labels": [
                    "str",
                    "bytes",
                    "bool",
                    "Dict"
                ],
                "symbolic_vocab": [
                    "str",
                    "int",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "list"
                ],
                "obj_confs": [
                    "None",
                    "List",
                    "torch.LongTensor",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "attr_confs": [
                    "str",
                    "None",
                    "Callable",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "convert_semantic_objective": {
            "name": "convert_semantic_objective",
            "location": 81,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "labels": [
                    "str",
                    "int",
                    "bool",
                    "Union[int,str]",
                    "torch.optim.Optimizer",
                    "float"
                ],
                "symbolic_vocab": [
                    "int",
                    "str",
                    "bool"
                ],
                "obj": [
                    "bool",
                    "List[Callable]"
                ],
                "attr": [
                    "bool",
                    "List[Callable]"
                ],
                "tokenizer": [
                    "bool",
                    "List[Callable]",
                    "None"
                ]
            }
        },
        "create_tags_pretrain": {
            "name": "create_tags_pretrain",
            "location": 92,
            "return": [
                "Tuple[Union[list[int],list[str],None]]",
                "str",
                "List[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "obj_labels": [
                    "str"
                ],
                "attr_labels": [
                    "str"
                ],
                "obj_confs": [
                    "str"
                ],
                "attr_confs": [
                    "str"
                ],
                "tokenizer": [
                    "dict",
                    "Set[Tuple[Any, Any]]",
                    "List[dict]"
                ],
                "symbolic_vocab": [
                    "str"
                ],
                "visual_tags_box": [
                    "List",
                    "List[str]",
                    "str",
                    "bool",
                    "Type",
                    "Dict",
                    "Iterable[str]",
                    "Type[Callable[Any,None]]"
                ],
                "feat_mask": [
                    "Dict[str,str]",
                    "str",
                    "Tuple[str,str]",
                    "int",
                    "Tuple[Union[str,str]]",
                    "frozenset[Union[bytes,str]]",
                    "frozenset",
                    "Pattern[str]",
                    "Pattern"
                ],
                "use_bert_input": [
                    "bool",
                    "int",
                    "List",
                    "Dict[str,str]",
                    "List[str]"
                ]
            }
        },
        "create_tags": {
            "name": "create_tags",
            "location": 146,
            "return": [
                "Tuple[Union[list[int],list[str],None]]",
                "str",
                "List[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "obj_labels": [
                    "str"
                ],
                "attr_labels": [
                    "str"
                ],
                "obj_confs": [
                    "str"
                ],
                "attr_confs": [
                    "str"
                ],
                "tokenizer": [
                    "str",
                    "Optional[str]"
                ],
                "symbolic_vocab": [
                    "str"
                ],
                "visual_tags_box": [
                    "List",
                    "List[str]",
                    "str",
                    "bool",
                    "Type",
                    "Dict",
                    "Iterable[str]",
                    "Type[Callable[Any,None]]"
                ],
                "use_bert_input": [
                    "bool",
                    "int",
                    "List",
                    "Dict[str,str]",
                    "List[str]"
                ],
                "record_index": [
                    "None"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/pretrain/text_data.py": {
        "string_to_sequence": {
            "name": "string_to_sequence",
            "location": 461,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ],
                "dtype": []
            }
        },
        "sequence_to_string": {
            "name": "sequence_to_string",
            "location": 464,
            "return": [
                "str"
            ],
            "arguments": {
                "seq": [
                    "list[int]",
                    "list[dict[, ]]"
                ]
            }
        },
        "GeneralCorpusNP.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ann_file": [
                    "str",
                    "None",
                    "bool"
                ],
                "pretrained_model_name": [
                    "str",
                    "list[typing.Any]",
                    "None",
                    "typing.TextIO",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "tokenizer": [
                    "None",
                    "str",
                    "typing.Any",
                    "bool"
                ],
                "seq_len": [
                    "int"
                ],
                "min_seq_len": [
                    "int"
                ],
                "encoding": [
                    "typing.Text"
                ],
                "on_memory": [
                    "bool"
                ]
            }
        },
        "GeneralCorpusNP.load_corpus": {
            "name": "load_corpus",
            "location": 46,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralCorpusNP.load_corpus_with_passages_preprocess": {
            "name": "load_corpus_with_passages_preprocess",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralCorpusNP.__len__": {
            "name": "__len__",
            "location": 127,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralCorpusNP.retrieve_a_piece": {
            "name": "retrieve_a_piece",
            "location": 132,
            "return": [
                "tuple[typing.Union[str,list[],list[bool],frozenset,list[list[typing.Any]],set[str],int]]"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "seq_len": [
                    "int"
                ]
            }
        },
        "GeneralCorpusNP.exhaustively_retrieve_a_piece": {
            "name": "exhaustively_retrieve_a_piece",
            "location": 174,
            "return": [
                "list[tuple[int]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "seq_len": [
                    "int"
                ]
            }
        },
        "GeneralCorpusNP.presegment_sentence": {
            "name": "presegment_sentence",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralCorpusNP.retrieve_a_piece_preseged": {
            "name": "retrieve_a_piece_preseged",
            "location": 240,
            "return": [
                "tuple[typing.Union[str,bytes,tuple[typing.Union[typing.Any,typing.Any]],dict[str, typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "list[str]",
                    "dict[, ]"
                ],
                "seq_len": []
            }
        },
        "GeneralCorpusNP.__getitem__": {
            "name": "__getitem__",
            "location": 249,
            "return": [
                "InputExample"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list[int]",
                    "int"
                ]
            }
        },
        "GeneralCorpusNP.convert_example_to_features": {
            "name": "convert_example_to_features",
            "location": 336,
            "return": [
                "InputFeatures"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "int",
                    "tuple[]"
                ],
                "max_seq_length": [
                    "int",
                    "float"
                ],
                "tokenizer": [],
                "hybrid_num": [
                    "int"
                ]
            }
        },
        "GeneralCorpusNP.random_word_wwm": {
            "name": "random_word_wwm",
            "location": 415,
            "return": [
                "tuple[typing.Union[list[typing.Text],list[int]]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "list[str]",
                    "str",
                    "tuple[typing.Union[int,str]]"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/tasks/vqa.py": {
        "get_data_tuple": {
            "name": "get_data_tuple",
            "location": 24,
            "return": [
                "DataTuple",
                "Dict",
                "bytes",
                "List[str]",
                "int",
                "str",
                "Dict[str,digipathos.data.dataseDataset]"
            ],
            "arguments": {
                "splits": [
                    "str",
                    "bool",
                    "Tuple"
                ],
                "bs": [
                    "int"
                ],
                "shuffle": [
                    "int",
                    "bool"
                ],
                "drop_last": [
                    "int",
                    "bool"
                ]
            }
        },
        "VQA.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VQA.train": {
            "name": "train",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_tuple": [
                    "int",
                    "Callable",
                    "str"
                ],
                "eval_tuple": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "VQA.predict": {
            "name": "predict",
            "location": 141,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "eval_tuple": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dump": [
                    "float",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "VQA.evaluate": {
            "name": "evaluate",
            "location": 166,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "eval_tuple": [
                    "Iterable[T]",
                    "int",
                    "str"
                ],
                "dump": [
                    "int",
                    "Callable",
                    "None",
                    "str"
                ]
            }
        },
        "VQA.oracle_score": {
            "name": "oracle_score",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data_tuple": [
                    "int",
                    "str",
                    "bool",
                    "torch.Tensor"
                ]
            }
        },
        "VQA.save": {
            "name": "save",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "VQA.load": {
            "name": "load",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/tasks/vqa_data.py": {
        "VQADataset.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "splits": [
                    "str",
                    "bytes"
                ]
            }
        },
        "VQADataset.num_answers": {
            "name": "num_answers",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VQADataset.__len__": {
            "name": "__len__",
            "location": 84,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcateH5.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list_of_h5": [
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]"
                ]
            }
        },
        "ConcateH5.__getitem__": {
            "name": "__getitem__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "list[]",
                    "bool",
                    "list[int]",
                    "tuple[]"
                ]
            }
        },
        "ConcateH5.__len__": {
            "name": "__len__",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VQATorchDataset.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "str",
                    "int"
                ],
                "args": []
            }
        },
        "VQATorchDataset.load_custom_h5": {
            "name": "load_custom_h5",
            "location": 186,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": [],
                "h5_file": [
                    "str"
                ]
            }
        },
        "VQATorchDataset.__len__": {
            "name": "__len__",
            "location": 195,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VQATorchDataset.__getitem__": {
            "name": "__getitem__",
            "location": 198,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "typing.Sequence[str]",
                    "int"
                ]
            }
        },
        "VQAEvaluator.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "float"
                ]
            }
        },
        "VQAEvaluator.evaluate": {
            "name": "evaluate",
            "location": 259,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "quesid2ans": []
            }
        },
        "VQAEvaluator.dump_result": {
            "name": "dump_result",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quesid2ans": [
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "path": [
                    "str"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/tasks/vqa_model.py": {
        "VQAModel.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_answers": [
                    "int",
                    "List[dict]",
                    "bool",
                    "MutableMapping",
                    "List[Dict]",
                    "MutableMapping[str,str]"
                ]
            }
        },
        "VQAModel.multi_gpu": {
            "name": "multi_gpu",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VQAModel.forward": {
            "name": "forward",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]]",
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "feat": [
                    "Dict[str,Any]",
                    "bool",
                    "numpy.ndarray",
                    "Dict",
                    "int",
                    "numpy.random.RandomState"
                ],
                "pos": [
                    "Dict[str,Any]",
                    "bool",
                    "numpy.ndarray",
                    "Dict",
                    "int",
                    "numpy.random.RandomState"
                ],
                "sent": [
                    "Dict",
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "None",
                    "Iterable[T_co]",
                    "numpy.ndarray"
                ],
                "tags": [
                    "str",
                    "bool",
                    "Tuple",
                    "List"
                ]
            }
        }
    },
    "visualbert-master/unsupervised_visualbert/src/tools/convert_nlvr2_lxmert_style.py": {},
    "visualbert-master/unsupervised_visualbert/src/tools/convert_tsv_to_h5.py": {},
    "visualbert-master/unsupervised_visualbert/src/tools/create_cc_data_lxmert_style.py": {},
    "visualbert-master/unsupervised_visualbert/src/tools/create_open_image_data_lxmert_style.py": {},
    "visualbert-master/unsupervised_visualbert/src/tools/sharearray.py": {
        "valid_id": {
            "name": "valid_id",
            "location": 38,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "_memmapped_view": {
            "name": "_memmapped_view",
            "location": 44,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_build_path": {
            "name": "_build_path",
            "location": 48,
            "return": [],
            "arguments": {
                "id": [],
                "prefix": [],
                "shm_path": []
            }
        },
        "free": {
            "name": "free",
            "location": 54,
            "return": [],
            "arguments": {
                "id": [],
                "shm_path": [],
                "prefix": []
            }
        },
        "cache": {
            "name": "cache",
            "location": 68,
            "return": [],
            "arguments": {
                "id": [],
                "array_or_callback": [],
                "shm_path": [],
                "prefix": [],
                "timeout": [],
                "verbose": [],
                "log_func": []
            }
        },
        "cache_with_delete_previous": {
            "name": "cache_with_delete_previous",
            "location": 225,
            "return": [],
            "arguments": {
                "id": [],
                "array_or_callback": [],
                "shm_path": [],
                "prefix": [],
                "timeout": [],
                "verbose": [],
                "log_func": [],
                "delete": [],
                "wait": []
            }
        },
        "decorator": {
            "name": "decorator",
            "location": 395,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "decorator.decorate": {
            "name": "decorate",
            "location": 420,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "decorator.decorate.wrapped": {
            "name": "wrapped",
            "location": 422,
            "return": [],
            "arguments": {}
        },
        "cache.print_": {
            "name": "print_",
            "location": 169,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "cache_with_delete_previous.print_": {
            "name": "print_",
            "location": 328,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/bert_data_utils.py": {
        "parse_npz_img_feat": {
            "name": "parse_npz_img_feat",
            "location": 398,
            "return": [
                "str"
            ],
            "arguments": {
                "feat": [
                    "str"
                ]
            }
        },
        "get_image_feat_reader": {
            "name": "get_image_feat_reader",
            "location": 402,
            "return": [
                "faster_RCNN_feat_reader",
                "padded_faster_RCNN_with_bbox_feat_reader",
                "padded_faster_RCNN_feat_reader",
                "dim_3_reader",
                "CHW_feat_reader",
                "HWC_feat_reader"
            ],
            "arguments": {
                "ndim": [
                    "tuple[typing.Union[str,int]]"
                ],
                "channel_first": [
                    "int"
                ],
                "image_feat": [],
                "max_loc": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "compute_answer_scores": {
            "name": "compute_answer_scores",
            "location": 421,
            "return": [],
            "arguments": {
                "answers": [
                    "list[int]"
                ],
                "num_of_answers": [
                    "bool",
                    "float",
                    "str",
                    "None"
                ],
                "unk_idx": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[typing.Union[int,str]]"
                ]
            }
        },
        "read_in_image_feats": {
            "name": "read_in_image_feats",
            "location": 431,
            "return": [
                "list[typing.Union[str,int,list[str]]]"
            ],
            "arguments": {
                "image_dirs": [
                    "str"
                ],
                "image_readers": [
                    "str",
                    "int",
                    "dict[int, set[str]]",
                    "None"
                ],
                "image_file_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "get_one_image_feature": {
            "name": "get_one_image_feature",
            "location": 440,
            "return": [
                "tuple[typing.Union[None,str,int]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "reader": [],
                "image_feature_cap": [
                    "int"
                ]
            }
        },
        "get_one_image_feature_npz_screening_parameters": {
            "name": "get_one_image_feature_npz_screening_parameters",
            "location": 458,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "path": [
                    "list[str]",
                    "str"
                ],
                "reader": [],
                "image_screening_parameters": [
                    "dict[str, typing.Any]"
                ],
                "return_confidence": [
                    "bool"
                ]
            }
        },
        "screen_feature": {
            "name": "screen_feature",
            "location": 494,
            "return": [
                "tuple[typing.Union[d,int,str]]"
            ],
            "arguments": {
                "image_feat": [
                    "tuple[typing.Union[d,d,d]]",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "None",
                    "list[int]"
                ],
                "cls_boxes": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "None"
                ],
                "max_conf": [
                    "bool",
                    "float"
                ],
                "image_screening_parameters": [
                    "dict[, ]",
                    "dict[typing.Hashable, int]"
                ],
                "mandatory_keep": [
                    "None",
                    "tuple[typing.Union[float,float]]",
                    "tuple[numpy.dtype]",
                    "list[int]"
                ]
            }
        },
        "InputExample.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unique_id": [
                    "None",
                    "str",
                    "dict[bytes, int]",
                    "int",
                    "bytes",
                    "set[int]"
                ],
                "text_a": [
                    "None",
                    "list[str]",
                    "bool",
                    "str"
                ],
                "text_b": [
                    "None",
                    "str",
                    "bool"
                ],
                "is_correct": [
                    "bool"
                ],
                "lm_labels": [
                    "None",
                    "str",
                    "typing.Any",
                    "bool",
                    "bytes"
                ],
                "max_seq_length": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "InputExample.perform_truncate": {
            "name": "perform_truncate",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_seq_length": [
                    "int",
                    "float"
                ]
            }
        },
        "InputFeatures.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unique_id": [
                    "int",
                    "None",
                    "str",
                    "set[int]"
                ],
                "tokens": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "input_ids": [
                    "int",
                    "None",
                    "str",
                    "set[int]"
                ],
                "input_mask": [
                    "bool",
                    "bytes"
                ],
                "input_type_ids": [
                    "str",
                    "int",
                    "None"
                ],
                "is_correct": [
                    "bool",
                    "bytes"
                ],
                "lm_label_ids": [
                    "None",
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "InputFeatures.convert_one_example_to_features": {
            "name": "convert_one_example_to_features",
            "location": 85,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "example": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "tokenizer": []
            }
        },
        "InputFeatures.convert_examples_to_features": {
            "name": "convert_examples_to_features",
            "location": 143,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool"
                ],
                "examples": [
                    "str",
                    "list[str]"
                ],
                "tokenizer": [
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "InputFeatures.convert_one_example_to_features_pretraining": {
            "name": "convert_one_example_to_features_pretraining",
            "location": 168,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "set[str]",
                    "tuple[typing.Union[int,int,str]]"
                ],
                "example": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "tokenizer": [],
                "probability": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "InputFeatures.convert_to_allennlp_feild": {
            "name": "convert_to_allennlp_feild",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputFeatures.convert_to_pytorch_tensor": {
            "name": "convert_to_pytorch_tensor",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputFeatures.insert_field_into_dict": {
            "name": "insert_field_into_dict",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_dict": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "InputFeatures.insert_tensor_into_dict": {
            "name": "insert_tensor_into_dict",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "InputFeatures.convert_list_features_to_allennlp_list_feild": {
            "name": "convert_list_features_to_allennlp_list_feild",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "list_features": [
                    "dict[str, bool]"
                ],
                "instance_dict": []
            }
        },
        "faster_RCNN_feat_reader.read": {
            "name": "read",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "image_feat_path": [
                    "str"
                ]
            }
        },
        "CHW_feat_reader.read": {
            "name": "read",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "image_feat_path": [
                    "str"
                ]
            }
        },
        "dim_3_reader.read": {
            "name": "read",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "image_feat_path": [
                    "str"
                ]
            }
        },
        "HWC_feat_reader.read": {
            "name": "read",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "image_feat_path": [
                    "str"
                ]
            }
        },
        "padded_faster_RCNN_feat_reader.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_loc": [
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "padded_faster_RCNN_feat_reader.read": {
            "name": "read",
            "location": 363,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "image_feat_path": [
                    "str"
                ]
            }
        },
        "padded_faster_RCNN_with_bbox_feat_reader.__init__": {
            "name": "__init__",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_loc": [
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "padded_faster_RCNN_with_bbox_feat_reader.read": {
            "name": "read",
            "location": 388,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "image_feat_path": [
                    "str"
                ]
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/bert_field.py": {
        "BertField.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "int",
                    "List[int]",
                    "Dict[str, torch.LongTensor]"
                ],
                "embs": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "padding_value": [
                    "int",
                    "bool",
                    "Dict",
                    "Dict[str,str]"
                ],
                "token_indexers": [
                    "bool",
                    "None",
                    "str",
                    "List[bytes]",
                    "List",
                    "Set[str]"
                ]
            }
        },
        "BertField.sequence_length": {
            "name": "sequence_length",
            "location": 38,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 43,
            "return": [
                "Dict[Text,]",
                "int",
                "str",
                "bool",
                "Tuple[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertField.as_tensor": {
            "name": "as_tensor",
            "location": 47,
            "return": [
                "Dict[Text,]",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "padding_lengths": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "BertField.empty_field": {
            "name": "empty_field",
            "location": 58,
            "return": [
                "BertField",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertField.batch_tensors": {
            "name": "batch_tensors",
            "location": 62,
            "return": [
                "int",
                "Tuple[Any, Any, Any]",
                "torch.FloatTensor",
                "str"
            ],
            "arguments": {
                "self": [],
                "tensor_list": [
                    "int",
                    "List[dict[str,torch.Tensor]]",
                    "float",
                    "List[Dict[str,torch.Tensor]]",
                    "List[list[T]]",
                    "numpy.ndarray",
                    "List[List[T]]"
                ]
            }
        },
        "BertField.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntArrayField.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "Union[str,float]",
                    "bool"
                ],
                "padding_value": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "IntArrayField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 89,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntArrayField.as_tensor": {
            "name": "as_tensor",
            "location": 94,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "padding_lengths": [
                    "Collection[int]",
                    "List[float]",
                    "List[int]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "deoplete.util.UserContext"
                ]
            }
        },
        "IntArrayField.empty_field": {
            "name": "empty_field",
            "location": 112,
            "return": [
                "IntArrayField",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntArrayField.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntArrayTensorField.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "Union[str,float]",
                    "bool"
                ],
                "padding_value": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "IntArrayTensorField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 136,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntArrayTensorField.as_tensor": {
            "name": "as_tensor",
            "location": 141,
            "return": [
                "int",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "padding_lengths": [
                    "Collection[int]",
                    "List[float]",
                    "List[int]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "deoplete.util.UserContext"
                ]
            }
        },
        "IntArrayTensorField.empty_field": {
            "name": "empty_field",
            "location": 158,
            "return": [
                "IntArrayTensorField",
                "str",
                "List[str]",
                "Iterable[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntArrayTensorField.__str__": {
            "name": "__str__",
            "location": 163,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayTensorField.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "Union[str,float]",
                    "bool"
                ],
                "padding_value": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "ArrayTensorField.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 172,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayTensorField.as_tensor": {
            "name": "as_tensor",
            "location": 177,
            "return": [
                "int",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "padding_lengths": [
                    "Collection[int]",
                    "List[float]",
                    "List[int]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "deoplete.util.UserContext"
                ]
            }
        },
        "ArrayTensorField.empty_field": {
            "name": "empty_field",
            "location": 194,
            "return": [
                "ArrayTensorField",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayTensorField.__str__": {
            "name": "__str__",
            "location": 200,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/box_utils.py": {
        "load_image": {
            "name": "load_image",
            "location": 12,
            "return": [
                "int",
                "str",
                "Callable[[KT], VT]",
                "Sequence"
            ],
            "arguments": {
                "img_fn": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "resize_image": {
            "name": "resize_image",
            "location": 31,
            "return": [
                "str",
                "Tuple[Union[list[int],int,tuple[int]]]"
            ],
            "arguments": {
                "image": [
                    "bool",
                    "float",
                    "List[str]",
                    "numpy.ndarray"
                ],
                "desired_width": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "List[str]"
                ],
                "desired_height": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "random_pad": [
                    "bool",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "to_tensor_and_normalize": {
            "name": "to_tensor_and_normalize",
            "location": 72,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "image": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/coco_dataset.py": {
        "COCODataset.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "visual_genome_chunk": [
                    "bool"
                ]
            }
        },
        "COCODataset.get_image_features_by_training_index": {
            "name": "get_image_features_by_training_index",
            "location": 105,
            "return": [
                "tuple[None]",
                "tuple[typing.Union[list[int],list[float],None]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int"
                ]
            }
        },
        "COCODataset.__len__": {
            "name": "__len__",
            "location": 166,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "COCODataset.__getitem__": {
            "name": "__getitem__",
            "location": 169,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict[int, int]",
                    "int"
                ]
            }
        },
        "COCODataset.__getitem_detector__": {
            "name": "__getitem_detector__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "list[str]",
                    "typing.Sequence[T]",
                    "typing.Callable[[], float]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "COCODataset.splits": {
            "name": "splits",
            "location": 343,
            "return": [],
            "arguments": {
                "cls": [
                    "Exception",
                    "bool",
                    "typing.Type"
                ],
                "args": []
            }
        },
        "COCODataset.collate_fn": {
            "name": "collate_fn",
            "location": 447,
            "return": [
                "str",
                "list[int]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/flickr_dataset.py": {
        "Flickr30kFeatureDataset.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "args": [],
                "dictionary": [
                    "None",
                    "str",
                    "bool",
                    "typing.Mapping",
                    "dict[str, str]"
                ],
                "data_root": [
                    "typing.Text"
                ],
                "chunk": [
                    "None",
                    "str",
                    "bool",
                    "typing.Mapping",
                    "dict[str, str]"
                ],
                "entries": [
                    "None",
                    "str",
                    "list[dict[, ]]",
                    "typing.Callable[[], str]",
                    "typing.Sequence[]"
                ]
            }
        },
        "Flickr30kFeatureDataset.splits": {
            "name": "splits",
            "location": 93,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": [
                    "list[]",
                    "list[str]",
                    "tuple[]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "args": []
            }
        },
        "Flickr30kFeatureDataset.tokenize": {
            "name": "tokenize",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_length": [
                    "int"
                ]
            }
        },
        "Flickr30kFeatureDataset.tensorize": {
            "name": "tensorize",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_box": [
                    "int"
                ],
                "max_entities": [
                    "int"
                ],
                "max_length": [
                    "int"
                ]
            }
        },
        "Flickr30kFeatureDataset.__getitem__": {
            "name": "__getitem__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "tuple[typing.Union[int,slice,int,slice]]",
                    "tuple[]",
                    "bytes",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "Flickr30kFeatureDataset.__len__": {
            "name": "__len__",
            "location": 272,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flickr30kFeatureDataset.collate_fn": {
            "name": "collate_fn",
            "location": 276,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/mask_utils.py": {
        "_spaced_points": {
            "name": "_spaced_points",
            "location": 7,
            "return": [
                "bytearray",
                "float",
                "numpy.ndarray",
                "List[int]",
                "str"
            ],
            "arguments": {
                "low": [
                    "int",
                    "numpy.array",
                    "Sequence[T]",
                    "List[int]"
                ],
                "high": [
                    "int",
                    "numpy.array",
                    "Sequence[T]",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "numpy.array",
                    "Sequence[T]",
                    "List[int]"
                ]
            }
        },
        "make_mask": {
            "name": "make_mask",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mask_size": [
                    "int",
                    "float",
                    "Union[Tuple[int,int],int]",
                    "Tuple[Union[int,int]]"
                ],
                "box": [
                    "str",
                    "float",
                    "Optional[int]",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]",
                    "bool"
                ],
                "polygons_list": [
                    "int"
                ]
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/nlvr_dataset.py": {
        "NLVRDataset.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "NLVRDataset.get_image_features_by_training_index": {
            "name": "get_image_features_by_training_index",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Callable[str,bool]",
                    "Callable[[str],bool]",
                    "bool"
                ],
                "which_one": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "NLVRDataset.__len__": {
            "name": "__len__",
            "location": 90,
            "return": [
                "int",
                "List",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NLVRDataset.__getitem__": {
            "name": "__getitem__",
            "location": 93,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Callable[None,bool]",
                    "bool",
                    "Callable[[None],bool]",
                    "Iterable[int]",
                    "torch.autograd.Variable",
                    "List[numpy.ndarray]",
                    "Callable[...,Awaitable]"
                ]
            }
        },
        "NLVRDataset.splits": {
            "name": "splits",
            "location": 146,
            "return": [
                "Tuple[None]",
                "Callable[[T],bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "None",
                    "str",
                    "Optional[bool]",
                    "Optional[libkol.Item]",
                    "bool"
                ],
                "args": []
            }
        },
        "NLVRDataset.collate_fn": {
            "name": "collate_fn",
            "location": 195,
            "return": [
                "int",
                "Callable",
                "str",
                "List[int]",
                "Dict[str,list[int]]",
                "Dict[str,str]",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]]",
                "Dict[str,float]",
                "Dict"
            ],
            "arguments": {
                "data": [
                    "List",
                    "Dict",
                    "Union[Dict,List]",
                    "Union[None,Dict[str,Any],List[Any]]"
                ]
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/vcr.py": {
        "VCR.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "str",
                    "None"
                ],
                "mode": [
                    "int",
                    "str"
                ],
                "only_use_relevant_dets": [
                    "bool"
                ],
                "add_image_as_a_box": [
                    "bool"
                ],
                "conditioned_answer_choice": [
                    "int"
                ],
                "do_lower_case": [
                    "bool"
                ],
                "bert_model_name": [
                    "typing.Text"
                ],
                "max_seq_length": [
                    "int"
                ],
                "pretraining": [
                    "bool"
                ],
                "pretraining_include_qa_and_qar": [
                    "bool"
                ],
                "complete_shuffle": [
                    "bool"
                ],
                "use_alignment": [
                    "bool"
                ],
                "add_all_features": [
                    "bool"
                ],
                "answer_labels_path": [
                    "None",
                    "str",
                    "int"
                ],
                "vcr_annots_dir": [
                    "None",
                    "str",
                    "int"
                ],
                "vcr_image_dir": [
                    "None",
                    "str"
                ]
            }
        },
        "VCR.is_train": {
            "name": "is_train",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCR.splits": {
            "name": "splits",
            "location": 176,
            "return": [
                "tuple[typing.Union[set[str],str,dict[str, str],list[str],list[],typing.Pattern,bytes]]"
            ],
            "arguments": {
                "cls": [
                    "list[]",
                    "dict[, ]",
                    "tuple[]",
                    "list[str]",
                    "int",
                    "str",
                    "list[T]"
                ]
            }
        },
        "VCR.__len__": {
            "name": "__len__",
            "location": 187,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCR._get_dets_to_use": {
            "name": "_get_dets_to_use",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "list[str]"
                ],
                "only_use_answer": [
                    "bool"
                ],
                "only_use_qar": [
                    "bool"
                ]
            }
        },
        "VCR.__getitem__": {
            "name": "__getitem__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float"
                ]
            }
        },
        "VCR.get_alignment_original": {
            "name": "get_alignment_original",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_text_mixed": [
                    "list[str]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "text_alignment": [
                    "list[str]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "old_det_to_new_ind": [
                    "str",
                    "None",
                    "int"
                ],
                "box_record": [
                    "str",
                    "list[]",
                    "list[float]",
                    "tuple[str]"
                ],
                "offset": [
                    "str"
                ]
            }
        },
        "VCR.getitem_bert_part": {
            "name": "getitem_bert_part",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "examples": [
                    "list[float]"
                ],
                "item": [
                    "bool",
                    "typing.Iterable[str]",
                    "bytes"
                ],
                "instance_dict": [
                    "dict[, ]"
                ],
                "which": [
                    "bool"
                ]
            }
        },
        "VCR.collate_fn": {
            "name": "collate_fn",
            "location": 434,
            "return": [
                "float"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "VCRLoader.from_dataset": {
            "name": "from_dataset",
            "location": 464,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "data": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "batch_size": [
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "num_gpus": [
                    "int"
                ]
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/vcr_data_utils.py": {
        "_fix_tokenization": {
            "name": "_fix_tokenization",
            "location": 14,
            "return": [
                "Tuple[Union[list,dict[,Union[str,int,bytes]]]]",
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tokenized_sent": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "float",
                    "int"
                ],
                "obj_to_type": [
                    "str",
                    "Type",
                    "bool",
                    "List[int]",
                    "Type[Any]",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ],
                "det_hist": [
                    "Type[SerializationDialect]",
                    "None",
                    "bool",
                    "Hashable",
                    "Dict",
                    "Type"
                ]
            }
        },
        "fix_item": {
            "name": "fix_item",
            "location": 41,
            "return": [
                "Tuple[list]",
                "Sequence[cirq.Qid]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "item": [
                    "Dict[str, Any]"
                ],
                "answer_label": [
                    "List",
                    "None",
                    "List[Entity]",
                    "Iterable"
                ],
                "rationales": [
                    "bool",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "retokenize_with_alignment": {
            "name": "retokenize_with_alignment",
            "location": 54,
            "return": [
                "Tuple[list]",
                "bool",
                "Dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "span": [
                    "str",
                    "int",
                    "Callable"
                ],
                "tokenizer": [
                    "Tuple",
                    "int",
                    "IO",
                    "Dict[str,list[str]]",
                    "Iterable[str]",
                    "IO[str]",
                    "bool",
                    "Dict[str,List[str]]"
                ]
            }
        },
        "process_ctx_ans_for_bert": {
            "name": "process_ctx_ans_for_bert",
            "location": 65,
            "return": [
                "tuple[typing.Optional[InputExample]]",
                "tuple[InputExample]"
            ],
            "arguments": {
                "ctx_raw": [],
                "ans_raw": [],
                "tokenizer": [
                    "str"
                ],
                "counter": [],
                "endingonly": [],
                "max_seq_length": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[bool,int,str]"
                ],
                "is_correct": []
            }
        },
        "data_iter": {
            "name": "data_iter",
            "location": 108,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "data_fn": [
                    "bytes",
                    "str",
                    "Dict"
                ],
                "tokenizer": [
                    "str"
                ],
                "max_seq_length": [
                    "str"
                ],
                "endingonly": [
                    "str"
                ]
            }
        },
        "data_iter_item": {
            "name": "data_iter_item",
            "location": 124,
            "return": [
                "List",
                "Dict",
                "float",
                "str",
                "List[object]"
            ],
            "arguments": {
                "item": [
                    "List[int]",
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,bool]",
                    "Callable"
                ],
                "tokenizer": [
                    "Callable",
                    "Exception",
                    "str"
                ],
                "max_seq_length": [
                    "Callable",
                    "Exception",
                    "str"
                ],
                "endingonly": [
                    "Callable",
                    "Exception",
                    "str"
                ],
                "include_qar": [
                    "bool",
                    "str",
                    "Callable[...,T]"
                ],
                "only_qar": [
                    "bool",
                    "str",
                    "Callable[...,T]"
                ]
            }
        },
        "data_iter_test": {
            "name": "data_iter_test",
            "location": 149,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "data_fn": [
                    "str",
                    "bytes",
                    "Dict",
                    "Dict[str,Any]",
                    "memoryview"
                ],
                "tokenizer": [
                    "bool",
                    "Callable",
                    "Dict",
                    "int"
                ],
                "max_seq_length": [
                    "bool",
                    "Callable",
                    "Dict",
                    "int"
                ],
                "endingonly": [
                    "bool",
                    "Callable",
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/vqa_dataset.py": {
        "compute_answer_scores": {
            "name": "compute_answer_scores",
            "location": 29,
            "return": [],
            "arguments": {
                "answers": [
                    "list[int]"
                ],
                "num_of_answers": [
                    "bool",
                    "float",
                    "str",
                    "None"
                ],
                "unk_idx": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[typing.Union[int,str]]"
                ]
            }
        },
        "read_in_image_feats": {
            "name": "read_in_image_feats",
            "location": 40,
            "return": [
                "list[typing.Union[str,int,list[str]]]"
            ],
            "arguments": {
                "image_dirs": [
                    "str"
                ],
                "image_readers": [
                    "str",
                    "int",
                    "dict[int, set[str]]",
                    "None"
                ],
                "image_file_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 307,
            "return": [
                "list[]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "load_str_list": {
            "name": "load_str_list",
            "location": 316,
            "return": [
                "list[]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "VQADataset.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "chunk_train": [
                    "None",
                    "int",
                    "float"
                ],
                "chunk_val": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "VQADataset.__len__": {
            "name": "__len__",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VQADataset.get_image_features_by_training_index": {
            "name": "get_image_features_by_training_index",
            "location": 102,
            "return": [
                "tuple[typing.Optional[str]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "list[]",
                    "list[str]",
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "VQADataset.__getitem__": {
            "name": "__getitem__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "BaseException",
                    "str",
                    "bool"
                ]
            }
        },
        "VQADataset.collate_fn": {
            "name": "collate_fn",
            "location": 238,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "VQADataset.splits": {
            "name": "splits",
            "location": 245,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "float"
                ],
                "args": []
            }
        },
        "VQADataset.generate_test_file": {
            "name": "generate_test_file",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[, ]",
                    "str",
                    "set[]"
                ],
                "out_file": [
                    "str"
                ]
            }
        },
        "VocabDict.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_file": [
                    "str",
                    "typing.IO",
                    "list[]",
                    "int"
                ]
            }
        },
        "VocabDict.idx2word": {
            "name": "idx2word",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "n_w": [
                    "int"
                ]
            }
        },
        "VocabDict.word2idx": {
            "name": "word2idx",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "w": [
                    "list[]",
                    "list[float]",
                    "tuple[typing.Union[int,int,int]]",
                    "list[numpy.array]",
                    "int",
                    "list[tuple[typing.Union[int,typing.Any]]]"
                ]
            }
        },
        "VocabDict.tokenize_and_index": {
            "name": "tokenize_and_index",
            "location": 343,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "list[]",
                    "int",
                    "str",
                    "float",
                    "list[int]",
                    "list[float]"
                ]
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/__init__.py": {},
    "visualbert-master/visualbert/dataloaders/flickr_ban/dataset.py": {
        "is_howmany": {
            "name": "is_howmany",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "q": [
                    "str"
                ],
                "a": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "bytes"
                ],
                "label2ans": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "bytes"
                ]
            }
        },
        "answer_filter": {
            "name": "answer_filter",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "answers": [
                    "list[str]"
                ],
                "label2ans": [],
                "max_num": [
                    "int"
                ]
            }
        },
        "_create_entry": {
            "name": "_create_entry",
            "location": 106,
            "return": [
                "dict[typing.Text, typing.Union[str,None,bool,dict[str, typing.Any],dict[, ]]]"
            ],
            "arguments": {
                "img": [
                    "str",
                    "None",
                    "bool"
                ],
                "question": [
                    "str"
                ],
                "answer": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "_load_dataset": {
            "name": "_load_dataset",
            "location": 119,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dataroot": [
                    "str",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "img_id2val": [
                    "str"
                ],
                "label2ans": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_load_visualgenome": {
            "name": "_load_visualgenome",
            "location": 154,
            "return": [],
            "arguments": {
                "dataroot": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "img_id2val": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ],
                "label2ans": [
                    "str",
                    "list[str]"
                ],
                "adaptive": [
                    "bool"
                ]
            }
        },
        "_find_coco_id": {
            "name": "_find_coco_id",
            "location": 216,
            "return": [
                "typing.Text",
                "None"
            ],
            "arguments": {
                "vgv": [
                    "str",
                    "list[int]",
                    "list[str]"
                ],
                "vgv_id": [
                    "int",
                    "str"
                ]
            }
        },
        "_load_flickr30k": {
            "name": "_load_flickr30k",
            "location": 223,
            "return": [],
            "arguments": {
                "dataroot": [
                    "str",
                    "list[str]",
                    "set[str]"
                ],
                "img_id2idx": [],
                "bbox": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "pos_boxes": [
                    "bool",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "dict[int, str]",
                    "str"
                ],
                "limit": [
                    "None",
                    "bool",
                    "bytes",
                    "str"
                ],
                "cache_name": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "_load_flickr30k_full_entity": {
            "name": "_load_flickr30k_full_entity",
            "location": 329,
            "return": [],
            "arguments": {
                "dataroot": [
                    "str"
                ],
                "img_id2idx": [
                    "dict[str, str]"
                ],
                "bbox": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "pos_boxes": [
                    "str",
                    "bool",
                    "list[int]"
                ],
                "limit": [
                    "None",
                    "bool",
                    "bytes",
                    "str"
                ],
                "cache_name": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "_load_flickr30k_our": {
            "name": "_load_flickr30k_our",
            "location": 438,
            "return": [],
            "arguments": {
                "dataroot": [
                    "str",
                    "list[str]",
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "features": [
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "limit": [
                    "None",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_create_flickr_entry": {
            "name": "_create_flickr_entry",
            "location": 540,
            "return": [
                "dict[typing.Text, typing.Union[int,str,bytes,None,list[str],tuple[str]]]"
            ],
            "arguments": {
                "img": [
                    "int",
                    "str",
                    "bytes"
                ],
                "sentence": [
                    "int",
                    "str",
                    "bytes"
                ],
                "entity_indices": [
                    "int",
                    "str",
                    "bytes"
                ],
                "target_indices": [
                    "int",
                    "str",
                    "bytes"
                ],
                "entity_ids": [],
                "entity_types": [
                    "str",
                    "list[str]",
                    "tuple[str]"
                ],
                "original_target": [
                    "None",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "tfidf_from_questions": {
            "name": "tfidf_from_questions",
            "location": 558,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "names": [
                    "str",
                    "set[str]"
                ],
                "dictionary": [],
                "dataroot": [
                    "typing.Text"
                ],
                "target": [
                    "list[typing.Text]"
                ]
            }
        },
        "Dictionary.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word2idx": [
                    "None",
                    "dict[, ]",
                    "list[str]",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "idx2word": [
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "Dictionary.ntoken": {
            "name": "ntoken",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.padding_idx": {
            "name": "padding_idx",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.tokenize": {
            "name": "tokenize",
            "location": 71,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str"
                ],
                "add_word": [
                    "list[tuple[typing.Union[bool,str]]]",
                    "str",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "Dictionary.dump_to_file": {
            "name": "dump_to_file",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Dictionary.load_from_file": {
            "name": "load_from_file",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Dictionary.add_word": {
            "name": "add_word",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bytes",
                    "list[]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "Dictionary.__len__": {
            "name": "__len__",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "tfidf_from_questions.populate": {
            "name": "populate",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "inds": [],
                "df": [],
                "text": []
            }
        },
        "tfidf_from_questions.normalize": {
            "name": "normalize",
            "location": 605,
            "return": [],
            "arguments": {
                "inds": [],
                "vals": []
            }
        }
    },
    "visualbert-master/visualbert/dataloaders/flickr_ban/utils.py": {
        "assert_eq": {
            "name": "assert_eq",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "real": [
                    "bytes",
                    "Callable",
                    "torch.Tensor",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[List[str]]",
                    "bool"
                ],
                "expected": [
                    "bytes",
                    "Callable",
                    "torch.Tensor",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "assert_array_eq": {
            "name": "assert_array_eq",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "real": [
                    "TextIO",
                    "List[allennlp.data.iterators.data_iterator.TensorDict]",
                    "int"
                ],
                "expected": [
                    "TextIO",
                    "List[allennlp.data.iterators.data_iterator.TensorDict]",
                    "int"
                ]
            }
        },
        "assert_tensor_eq": {
            "name": "assert_tensor_eq",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "real": [
                    "TextIO",
                    "List[allennlp.data.iterators.data_iterator.TensorDict]",
                    "int"
                ],
                "expected": [
                    "TextIO",
                    "List[allennlp.data.iterators.data_iterator.TensorDict]",
                    "int"
                ],
                "eps": [
                    "float",
                    "TextIO",
                    "List[allennlp.data.iterators.data_iterator.TensorDict]",
                    "int"
                ]
            }
        },
        "load_folder": {
            "name": "load_folder",
            "location": 39,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str"
                ],
                "suffix": [
                    "str",
                    "bool"
                ]
            }
        },
        "load_imageid": {
            "name": "load_imageid",
            "location": 47,
            "return": [
                "Set[int]",
                "str",
                "int"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "int",
                    "os.PathLike",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]"
                ]
            }
        },
        "pil_loader": {
            "name": "pil_loader",
            "location": 56,
            "return": [
                "str",
                "bytearray",
                "torch.Tensor",
                "Optional[Any]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "weights_init": {
            "name": "weights_init",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "Dict",
                    "torch.Tensor",
                    "torch.nn.utils.rnn.PackedSequence"
                ]
            }
        },
        "init_net": {
            "name": "init_net",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]"
                ],
                "net_file": [
                    "Dict[str,Any]",
                    "Set[str]",
                    "List[str]",
                    "Dict[str,str]",
                    "Optional[str]",
                    "Dict",
                    "str",
                    "None"
                ]
            }
        },
        "create_dir": {
            "name": "create_dir",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "print_model": {
            "name": "print_model",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int"
                ],
                "logger": [
                    "Exception",
                    "float",
                    "int",
                    "Optional[\"GraphLogger\"]",
                    "Union[str, int]"
                ]
            }
        },
        "save_model": {
            "name": "save_model",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "model": [
                    "bool",
                    "cmk.utils.type_defs.Item",
                    "str",
                    "Dict[str, Dict]",
                    "List[str]"
                ],
                "epoch": [
                    "bool",
                    "str",
                    "List[str]",
                    "cmk.utils.type_defs.Item",
                    "Dict[str,dict]",
                    "Dict[str,Dict]"
                ],
                "optimizer": [
                    "None",
                    "str",
                    "bool",
                    "Optional[Union[Any,Any]]"
                ]
            }
        },
        "rho_select": {
            "name": "rho_select",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "pad": [
                    "float",
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "torch.Tensor"
                ],
                "lengths": [
                    "float",
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "torch.Tensor"
                ]
            }
        },
        "trim_collate": {
            "name": "trim_collate",
            "location": 121,
            "return": [
                "torch.FloatTensor",
                "Dict",
                "trezor.utils.Writer",
                "List"
            ],
            "arguments": {
                "batch": [
                    "bool"
                ]
            }
        },
        "create_glove_embedding_init": {
            "name": "create_glove_embedding_init",
            "location": 202,
            "return": [
                "Tuple[Union[list,list[str],str,int,list[bool]]]",
                "bool",
                "allennlp.data.dataseDataset",
                "float"
            ],
            "arguments": {
                "idx2word": [
                    "List[str]",
                    "list",
                    "float",
                    "int",
                    "List[T]",
                    "List[int]",
                    "List[Tuple]"
                ],
                "glove_file": [
                    "str"
                ]
            }
        },
        "remove_annotations": {
            "name": "remove_annotations",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "get_sent_data": {
            "name": "get_sent_data",
            "location": 225,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "find_sublist": {
            "name": "find_sublist",
            "location": 238,
            "return": [
                "int",
                "Set",
                "str"
            ],
            "arguments": {
                "arr": [
                    "str",
                    "int"
                ],
                "sub": [
                    "Sequence[T]",
                    "str",
                    "Optional[str]",
                    "list",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "find_sublist_full": {
            "name": "find_sublist_full",
            "location": 253,
            "return": [
                "Tuple[int]",
                "int",
                "Set",
                "str"
            ],
            "arguments": {
                "arr": [
                    "str",
                    "int"
                ],
                "sub": [
                    "Sequence[T]",
                    "str",
                    "Optional[str]",
                    "list",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "calculate_iou": {
            "name": "calculate_iou",
            "location": 268,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj1": [
                    "str",
                    "bytearray"
                ],
                "obj2": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "calculate_area": {
            "name": "calculate_area",
            "location": 275,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "get_intersection": {
            "name": "get_intersection",
            "location": 278,
            "return": [
                "str",
                "List[int]",
                "bool",
                "List"
            ],
            "arguments": {
                "obj1": [
                    "Optional[int]",
                    "int"
                ],
                "obj2": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "get_match_index": {
            "name": "get_match_index",
            "location": 288,
            "return": [
                "List",
                "Set[str]",
                "str",
                "List[Tuple[int,str]]",
                "List[str]",
                "List[Tuple[str,str]]",
                "List[Tuple[int,int,Any]]"
            ],
            "arguments": {
                "src_bboxes": [
                    "str"
                ],
                "dst_bboxes": [
                    "str",
                    "List[tuple[Union[int,int]]]",
                    "Dict[str,numpy.ndarray]",
                    "List[Tuple[int,int]]",
                    "Optional[str]",
                    "numpy.ndarray"
                ]
            }
        },
        "batched_index_select": {
            "name": "batched_index_select",
            "location": 298,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "t": [
                    "numpy.ndarray",
                    "List[int]",
                    "T",
                    "numpy.array",
                    "int"
                ],
                "dim": [
                    "Tuple[Union[int,int]]",
                    "torch.Tensor",
                    "str",
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "numpy.ndarray"
                ],
                "inds": [
                    "int",
                    "Union[int, float]",
                    "List[int]"
                ]
            }
        },
        "Logger.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Logger.append": {
            "name": "append",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "T"
                ],
                "val": [
                    "str"
                ]
            }
        },
        "Logger.log": {
            "name": "log",
            "location": 186,
            "return": [
                "str",
                "numpy.ndarray",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "extra_msg": [
                    "Text",
                    "str",
                    "int",
                    "Optional[int]",
                    "bool",
                    "torch.Tensor"
                ]
            }
        },
        "Logger.write": {
            "name": "write",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO[Any]",
                    "int"
                ]
            }
        }
    },
    "visualbert-master/visualbert/models/model.py": {
        "VisualBERTDetector.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "class_embs": [],
                "bert_model_name": [],
                "cnn_loss_ratio": [],
                "special_visual_initialize": [],
                "text_only": [],
                "visual_embedding_dim": [],
                "hard_cap_seq_len": [],
                "cut_first": [],
                "embedding_strategy": [],
                "random_initialize": [],
                "training_head_type": [],
                "bypass_transformer": [],
                "pretrained_detector": [],
                "output_attention_weights": []
            }
        },
        "VisualBERTDetector._collect_obj_reps": {
            "name": "_collect_obj_reps",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "span_tags": [],
                "object_reps": []
            }
        },
        "VisualBERTDetector.embed_span": {
            "name": "embed_span",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "span": [],
                "span_tags": [],
                "span_mask": [],
                "object_reps": []
            }
        },
        "VisualBERTDetector.forward": {
            "name": "forward",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "images": [],
                "objects": [],
                "segms": [],
                "boxes": [],
                "box_mask": [],
                "question": [],
                "question_tags": [],
                "question_mask": [],
                "answers": [],
                "answer_tags": [],
                "answer_mask": [],
                "metadata": [],
                "label": [],
                "bert_input_ids": [],
                "bert_input_mask": [],
                "bert_input_type_ids": [],
                "masked_lm_labels": [],
                "is_random_next": [],
                "image_text_alignment": [],
                "output_all_encoded_layers": []
            }
        },
        "VisualBERTDetector.get_metrics": {
            "name": "get_metrics",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "VisualBERTFixedImageEmbedding.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "class_embs": [],
                "bert_model_name": [],
                "cnn_loss_ratio": [],
                "special_visual_initialize": [],
                "text_only": [],
                "training_head_type": [],
                "visual_embedding_dim": [],
                "hard_cap_seq_len": [],
                "cut_first": [],
                "embedding_strategy": [],
                "random_initialize": [],
                "bypass_transformer": [],
                "output_attention_weights": []
            }
        },
        "VisualBERTFixedImageEmbedding.forward": {
            "name": "forward",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "bert_input_ids": [],
                "bert_input_mask": [],
                "bert_input_type_ids": [],
                "image_dim_variable": [],
                "image_feat_variable": [],
                "image_text_alignment": [],
                "visual_embeddings_type": [],
                "label": [],
                "flickr_position": [],
                "masked_lm_labels": [],
                "is_random_next": [],
                "output_all_encoded_layers": []
            }
        },
        "VisualBERTFixedImageEmbedding.get_metrics": {
            "name": "get_metrics",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "VisualBERTFixedImageEmbedding.compute_score_with_logits": {
            "name": "compute_score_with_logits",
            "location": 309,
            "return": [],
            "arguments": {
                "logits": [],
                "labels": []
            }
        },
        "SimpleReportMetric.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleReportMetric.__call__": {
            "name": "__call__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "number": []
            }
        },
        "SimpleReportMetric.get_metric": {
            "name": "get_metric",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        }
    },
    "visualbert-master/visualbert/models/model_wrapper.py": {
        "ModelWrapper.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "train_dataset_length": [
                    "Callable",
                    "str",
                    "Tuple",
                    "List[str]",
                    "Sequence[str]",
                    "int",
                    "denite.util.UserContext"
                ]
            }
        },
        "ModelWrapper.train": {
            "name": "train",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelWrapper.eval": {
            "name": "eval",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelWrapper.step": {
            "name": "step",
            "location": 52,
            "return": [
                "Dict",
                "List",
                "bytes",
                "Dict[str,Any]",
                "None",
                "str",
                "Dict[str,Union[int,None]]",
                "Dict[str,int]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Dict[str,torch.LongTensor]",
                    "numpy.array",
                    "List[list[allennlp.data.fields.production_rule_field.ProductionRuleArray]]",
                    "List[allennlp.semparse.worlds.WikiTablesWorld]",
                    "int",
                    "numpy.ndarray",
                    "None",
                    "List[List[allennlp.data.fields.production_rule_field.ProductionRuleArray]]",
                    "Optional[int]"
                ],
                "eval_mode": [
                    "bool",
                    "Union[str,Iterable[str]]",
                    "str",
                    "Iterable[allennlp.data.instance.Instance]",
                    "int",
                    "Iterable[allennlp.data.Instance]"
                ]
            }
        },
        "ModelWrapper.initialize_opimizer": {
            "name": "initialize_opimizer",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "train_dataset_length": [
                    "int",
                    "torch.Tensor",
                    "numpy.random.RandomState",
                    "bool"
                ]
            }
        },
        "ModelWrapper.initialize_model": {
            "name": "initialize_model",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "ModelWrapper.load_state_dict": {
            "name": "load_state_dict",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict_to_load": [
                    "asgard.models.user.User",
                    "tracim.models.User",
                    "models.user.User",
                    "models.User",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "ModelWrapper.state_dict": {
            "name": "state_dict",
            "location": 154,
            "return": [
                "Dict[Text,]",
                "Dict",
                "Callable",
                "Dict[int,str]",
                "str",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelWrapper.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialization_dir": [
                    "str"
                ],
                "epoch": [
                    "bool",
                    "str",
                    "List[str]",
                    "int"
                ],
                "val_metric_per_epoch": [
                    "str",
                    "int",
                    "List[int]",
                    "bool",
                    "tensorflow.python.keras.models.Model"
                ],
                "is_best": [
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "ModelWrapper.save_checkpoint_step": {
            "name": "save_checkpoint_step",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialization_dir": [
                    "str",
                    "bytes",
                    "int"
                ],
                "step": [
                    "str",
                    "bool",
                    "Dict",
                    "None",
                    "Optional[annofabcli.common.dataclasses.WaitOptions]",
                    "Optional[int]"
                ],
                "epoch": [
                    "str",
                    "bool",
                    "Dict",
                    "None",
                    "Optional[annofabcli.common.dataclasses.WaitOptions]",
                    "Optional[int]"
                ],
                "is_best": [
                    "bool",
                    "str"
                ]
            }
        },
        "ModelWrapper.restore_checkpoint": {
            "name": "restore_checkpoint",
            "location": 197,
            "return": [
                "str",
                "Tuple[str, str]",
                "django.db.models.Model"
            ],
            "arguments": {
                "self": [],
                "serialization_dir": [
                    "str",
                    "lms.lmsdb.models.Comment",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "epoch_to_load": [
                    "str",
                    "lms.lmsdb.models.Comment",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "ModelWrapper.restore_checkpoint_pretrained": {
            "name": "restore_checkpoint_pretrained",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restore_bin": [
                    "bytes",
                    "Dict",
                    "Set[cmk.utils.type_defs.HostName]",
                    "Sequence[cirq.Qid]",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "ModelWrapper.freeze_detector": {
            "name": "freeze_detector",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelWrapper.read_and_insert_args": {
            "name": "read_and_insert_args",
            "location": 235,
            "return": [
                "AttrDict",
                "List[str]",
                "Optional[Iterable[str]]",
                "Iterable[str]",
                "Tuple[str]",
                "Callable[[None],None]"
            ],
            "arguments": {
                "args": [],
                "confg": [
                    "str"
                ]
            }
        }
    },
    "visualbert-master/visualbert/models/train.py": {
        "_to_gpu": {
            "name": "_to_gpu",
            "location": 122,
            "return": [],
            "arguments": {
                "td": []
            }
        },
        "_to_fp16": {
            "name": "_to_fp16",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "td": [
                    "dict[, ]"
                ]
            }
        },
        "get_dataset_loader": {
            "name": "get_dataset_loader",
            "location": 148,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "args": [],
                "dataset_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Unbuffered.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "float"
                ]
            }
        },
        "Unbuffered.write": {
            "name": "write",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "Unbuffered.flush": {
            "name": "flush",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "visualbert-master/visualbert/models/__init__.py": {},
    "visualbert-master/visualbert/pytorch_pretrained_bert/file_utils.py": {
        "url_to_filename": {
            "name": "url_to_filename",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "requests.Response"
                ],
                "etag": [
                    "str",
                    "bytes",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "filename_to_url": {
            "name": "filename_to_url",
            "location": 48,
            "return": [
                "str",
                "Tuple"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "cache_dir": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "cached_path": {
            "name": "cached_path",
            "location": 74,
            "return": [
                "str",
                "Optional[str]",
                "Dict",
                "int"
            ],
            "arguments": {
                "url_or_filename": [
                    "str",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ],
                "cache_dir": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "List",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "split_s3_path": {
            "name": "split_s3_path",
            "location": 104,
            "return": [
                "Tuple",
                "str",
                "pathlib.Path",
                "Optional[str]",
                "Set[str]",
                "Dict[str,str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "s3_request": {
            "name": "s3_request",
            "location": 117,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Dict",
                    "Dict[str,Any]",
                    "Type",
                    "Type[T]",
                    "T"
                ]
            }
        },
        "s3_etag": {
            "name": "s3_etag",
            "location": 137,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ]
            }
        },
        "s3_get": {
            "name": "s3_get",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "pathlib.Path"
                ],
                "temp_file": [
                    "IO",
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "pathlib.Path",
                    "Union[str,bytes]",
                    "Iterable[str]"
                ]
            }
        },
        "http_get": {
            "name": "http_get",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "apistar.http.Path"
                ],
                "temp_file": [
                    "IO",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_from_cache": {
            "name": "get_from_cache",
            "location": 165,
            "return": [
                "str",
                "pathlib.Path",
                "Union[pathlib.Path,str]",
                "List[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "cache_dir": [
                    "None",
                    "str",
                    "Optional[str]",
                    "TextIO",
                    "Optional[pathlib.Path]",
                    "Optional[TextIO]"
                ]
            }
        },
        "read_set_from_file": {
            "name": "read_set_from_file",
            "location": 224,
            "return": [
                "Set",
                "str",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "get_file_extension": {
            "name": "get_file_extension",
            "location": 236,
            "return": [
                "str",
                "List",
                "List[str]",
                "List[pathlib.Path]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "dot": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "os.PathLike"
                ],
                "lower": [
                    "bool",
                    "int",
                    "TextIO",
                    "IO",
                    "str"
                ]
            }
        },
        "s3_request.wrapper": {
            "name": "wrapper",
            "location": 124,
            "return": [
                "int",
                "Callable[[int], None]",
                "bool",
                "float"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "visualbert-master/visualbert/pytorch_pretrained_bert/fine_tuning.py": {
        "random_word": {
            "name": "random_word",
            "location": 272,
            "return": [
                "tuple[typing.Union[str,list[str],dict[, ],dict[str, torch.Tensor],list[int]]]"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "dict[str, torch.Tensor]"
                ],
                "tokenizer": [
                    "list[]"
                ],
                "probability": [
                    "float"
                ]
            }
        },
        "convert_example_to_features": {
            "name": "convert_example_to_features",
            "location": 311,
            "return": [
                "InputFeatures"
            ],
            "arguments": {
                "example": [
                    "str",
                    "int",
                    "None"
                ],
                "max_seq_length": [
                    "bool",
                    "float"
                ],
                "tokenizer": []
            }
        },
        "main": {
            "name": "main",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_truncate_seq_pair": {
            "name": "_truncate_seq_pair",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "tokens_a": [],
                "tokens_b": [],
                "max_length": [
                    "int",
                    "float"
                ]
            }
        },
        "accuracy": {
            "name": "accuracy",
            "location": 641,
            "return": [],
            "arguments": {
                "out": [
                    "str",
                    "int",
                    "float"
                ],
                "labels": [
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "BERTDataset.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus_path": [
                    "str"
                ],
                "tokenizer": [
                    "bool",
                    "typing.Iterator",
                    "tuple[int]",
                    "str",
                    "bytes"
                ],
                "seq_len": [
                    "bool",
                    "typing.Iterator",
                    "tuple[int]",
                    "str",
                    "bytes"
                ],
                "encoding": [
                    "typing.Text"
                ],
                "corpus_lines": [
                    "None",
                    "bool",
                    "float"
                ],
                "on_memory": [
                    "bool"
                ]
            }
        },
        "BERTDataset.__len__": {
            "name": "__len__",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BERTDataset.__getitem__": {
            "name": "__getitem__",
            "location": 117,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bytes",
                    "str",
                    "None",
                    "bool",
                    "typing.Mapping"
                ]
            }
        },
        "BERTDataset.random_sent": {
            "name": "random_sent",
            "location": 146,
            "return": [
                "tuple[typing.Union[list[],tuple[typing.Union[typing.Literal,typing.Literal]],str,int,list[int],tuple[],float,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BERTDataset.get_corpus_line": {
            "name": "get_corpus_line",
            "location": 164,
            "return": [
                "tuple[]",
                "tuple[typing.Union[int,typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "None"
                ]
            }
        },
        "BERTDataset.get_random_line": {
            "name": "get_random_line",
            "location": 201,
            "return": [
                "list[str]",
                "typing.Type",
                "typing.Iterator",
                "bytes",
                "int",
                "None",
                "dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BERTDataset.get_next_line": {
            "name": "get_next_line",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InputExample.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "guid": [
                    "bool",
                    "tuple[]",
                    "list[str]",
                    "None",
                    "set[str]",
                    "list[R]"
                ],
                "tokens_a": [
                    "str",
                    "int",
                    "bytes"
                ],
                "tokens_b": [
                    "None",
                    "int",
                    "str",
                    "typing.Callable[[], int]"
                ],
                "is_next": [
                    "None",
                    "bool",
                    "tuple[]",
                    "list[str]",
                    "set[str]",
                    "list[R]"
                ],
                "lm_labels": [
                    "None",
                    "bytes",
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        },
        "InputFeatures.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "str",
                    "int",
                    "None"
                ],
                "input_mask": [
                    "int",
                    "str",
                    "None"
                ],
                "segment_ids": [
                    "str",
                    "int",
                    "None"
                ],
                "is_next": [
                    "int",
                    "str",
                    "None"
                ],
                "lm_label_ids": [
                    "int",
                    "set[int]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "visualbert-master/visualbert/pytorch_pretrained_bert/modeling.py": {
        "gelu": {
            "name": "gelu",
            "location": 56,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "swish": {
            "name": "swish",
            "location": 64,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "compute_score_with_logits_flickr": {
            "name": "compute_score_with_logits_flickr",
            "location": 1648,
            "return": [],
            "arguments": {
                "logits": [],
                "labels": [],
                "recall": []
            }
        },
        "transform_to_batch_sequence": {
            "name": "transform_to_batch_sequence",
            "location": 1678,
            "return": [],
            "arguments": {
                "tensor": []
            }
        },
        "transform_to_batch_sequence_dim": {
            "name": "transform_to_batch_sequence_dim",
            "location": 1688,
            "return": [],
            "arguments": {
                "tensor": []
            }
        },
        "masked_unk_softmax": {
            "name": "masked_unk_softmax",
            "location": 1698,
            "return": [],
            "arguments": {
                "x": [],
                "dim": [],
                "mask_idx": []
            }
        },
        "compute_score_with_logits": {
            "name": "compute_score_with_logits",
            "location": 1705,
            "return": [],
            "arguments": {
                "logits": [],
                "labels": []
            }
        },
        "batched_index_select": {
            "name": "batched_index_select",
            "location": 1713,
            "return": [],
            "arguments": {
                "t": [],
                "dim": [],
                "inds": []
            }
        },
        "BertConfig.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_size_or_config_json_file": [],
                "hidden_size": [],
                "num_hidden_layers": [],
                "num_attention_heads": [],
                "intermediate_size": [],
                "hidden_act": [],
                "hidden_dropout_prob": [],
                "attention_probs_dropout_prob": [],
                "max_position_embeddings": [],
                "type_vocab_size": [],
                "initializer_range": []
            }
        },
        "BertConfig.from_dict": {
            "name": "from_dict",
            "location": 132,
            "return": [],
            "arguments": {
                "cls": [],
                "json_object": []
            }
        },
        "BertConfig.from_json_file": {
            "name": "from_json_file",
            "location": 140,
            "return": [],
            "arguments": {
                "cls": [],
                "json_file": []
            }
        },
        "BertConfig.__repr__": {
            "name": "__repr__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertConfig.to_dict": {
            "name": "to_dict",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertConfig.to_json_string": {
            "name": "to_json_string",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertEmbeddings.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertEmbeddings.forward": {
            "name": "forward",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": []
            }
        },
        "BertSelfAttention.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertSelfAttention.transpose_for_scores": {
            "name": "transpose_for_scores",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "BertSelfAttention.forward": {
            "name": "forward",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "attention_mask": []
            }
        },
        "BertSelfOutput.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertSelfOutput.forward": {
            "name": "forward",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "input_tensor": []
            }
        },
        "BertAttention.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertAttention.forward": {
            "name": "forward",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "input_tensor": [],
                "attention_mask": []
            }
        },
        "BertIntermediate.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertIntermediate.forward": {
            "name": "forward",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertOutput.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertOutput.forward": {
            "name": "forward",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "input_tensor": []
            }
        },
        "BertLayer.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertLayer.forward": {
            "name": "forward",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "attention_mask": []
            }
        },
        "BertEncoder.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertEncoder.forward": {
            "name": "forward",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "attention_mask": [],
                "output_all_encoded_layers": []
            }
        },
        "BertPooler.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertPooler.forward": {
            "name": "forward",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertPredictionHeadTransform.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertPredictionHeadTransform.forward": {
            "name": "forward",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertLMPredictionHead.__init__": {
            "name": "__init__",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "bert_model_embedding_weights": []
            }
        },
        "BertLMPredictionHead.forward": {
            "name": "forward",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_states": []
            }
        },
        "BertOnlyMLMHead.__init__": {
            "name": "__init__",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "bert_model_embedding_weights": []
            }
        },
        "BertOnlyMLMHead.forward": {
            "name": "forward",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_output": []
            }
        },
        "BertOnlyNSPHead.__init__": {
            "name": "__init__",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertOnlyNSPHead.forward": {
            "name": "forward",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "pooled_output": []
            }
        },
        "BertPreTrainingHeads.__init__": {
            "name": "__init__",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "bert_model_embedding_weights": []
            }
        },
        "BertPreTrainingHeads.forward": {
            "name": "forward",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_output": [],
                "pooled_output": []
            }
        },
        "PreTrainedBertModel.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "PreTrainedBertModel.init_bert_weights": {
            "name": "init_bert_weights",
            "location": 473,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "PreTrainedBertModel.from_pretrained": {
            "name": "from_pretrained",
            "location": 487,
            "return": [],
            "arguments": {
                "cls": [],
                "pretrained_model_name": [],
                "state_dict": [],
                "cache_dir": [],
                "random_initialize": []
            }
        },
        "BertModel.__init__": {
            "name": "__init__",
            "location": 643,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertModel.forward": {
            "name": "forward",
            "location": 650,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "output_all_encoded_layers": []
            }
        },
        "BertForPreTraining.__init__": {
            "name": "__init__",
            "location": 732,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertForPreTraining.forward": {
            "name": "forward",
            "location": 738,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "masked_lm_labels": [],
                "next_sentence_label": []
            }
        },
        "BertForMaskedLM.__init__": {
            "name": "__init__",
            "location": 800,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertForMaskedLM.forward": {
            "name": "forward",
            "location": 806,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "masked_lm_labels": []
            }
        },
        "BertForNextSentencePrediction.__init__": {
            "name": "__init__",
            "location": 862,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertForNextSentencePrediction.forward": {
            "name": "forward",
            "location": 868,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "next_sentence_label": []
            }
        },
        "BertForSequenceClassification.__init__": {
            "name": "__init__",
            "location": 926,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "num_labels": []
            }
        },
        "BertForSequenceClassification.forward": {
            "name": "forward",
            "location": 934,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "labels": []
            }
        },
        "BertForMultipleChoice.__init__": {
            "name": "__init__",
            "location": 991,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "num_choices": []
            }
        },
        "BertForMultipleChoice.forward": {
            "name": "forward",
            "location": 999,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "labels": []
            }
        },
        "BertForTokenClassification.__init__": {
            "name": "__init__",
            "location": 1061,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "num_labels": []
            }
        },
        "BertForTokenClassification.forward": {
            "name": "forward",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "labels": []
            }
        },
        "BertForQuestionAnswering.__init__": {
            "name": "__init__",
            "location": 1129,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertForQuestionAnswering.forward": {
            "name": "forward",
            "location": 1137,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "start_positions": [],
                "end_positions": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.__init__": {
            "name": "__init__",
            "location": 1172,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.special_intialize": {
            "name": "special_intialize",
            "location": 1191,
            "return": [],
            "arguments": {
                "self": [],
                "method_type": []
            }
        },
        "BertEmbeddingsWithVisualEmbedding.forward": {
            "name": "forward",
            "location": 1198,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "visual_embeddings": [],
                "visual_embeddings_type": [],
                "position_embeddings_visual": [],
                "image_text_alignment": [],
                "confidence": []
            }
        },
        "BertVisualModel.__init__": {
            "name": "__init__",
            "location": 1261,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BertVisualModel.forward": {
            "name": "forward",
            "location": 1275,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "visual_embeddings": [],
                "position_embeddings_visual": [],
                "visual_embeddings_type": [],
                "image_text_alignment": [],
                "confidence": [],
                "output_all_encoded_layers": []
            }
        },
        "TrainVisualBERTObjective.__init__": {
            "name": "__init__",
            "location": 1336,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "training_head_type": [],
                "visual_embedding_dim": [],
                "hard_cap_seq_len": [],
                "cut_first": [],
                "embedding_strategy": [],
                "bypass_transformer": [],
                "output_attention_weights": []
            }
        },
        "TrainVisualBERTObjective.forward": {
            "name": "forward",
            "location": 1373,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "input_mask": [],
                "visual_embeddings": [],
                "position_embeddings_visual": [],
                "image_mask": [],
                "image_text_alignment": [],
                "confidence": [],
                "visual_embeddings_type": [],
                "label": [],
                "flickr_position": [],
                "masked_lm_labels": [],
                "image_lm_lables": [],
                "is_random_next": [],
                "output_all_encoded_layers": []
            }
        },
        "FlickrAttention.__init__": {
            "name": "__init__",
            "location": 1603,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "FlickrAttention.transpose_for_scores": {
            "name": "transpose_for_scores",
            "location": 1619,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "FlickrAttention.forward": {
            "name": "forward",
            "location": 1624,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "key": [],
                "attention_mask": []
            }
        },
        "PreTrainedBertModel.from_pretrained.load": {
            "name": "load",
            "location": 579,
            "return": [],
            "arguments": {
                "module": [],
                "prefix": []
            }
        },
        "BertLayerNorm.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_size": [],
                "eps": []
            }
        },
        "BertLayerNorm.forward": {
            "name": "forward",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "visualbert-master/visualbert/pytorch_pretrained_bert/optimization.py": {
        "_LRSchedule.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warmup": [
                    "float"
                ],
                "t_total": [
                    "int"
                ]
            }
        },
        "_LRSchedule.get_lr": {
            "name": "get_lr",
            "location": 55,
            "return": [
                "float",
                "int",
                "str",
                "tuple[typing.Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "dict[str, str]",
                    "float",
                    "list[str]",
                    "int",
                    "str",
                    "typing.Type"
                ],
                "nowarn": [
                    "bool"
                ]
            }
        },
        "_LRSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 75,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "progress": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ConstantLR.get_lr_": {
            "name": "get_lr_",
            "location": 84,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "progress": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "WarmupCosineSchedule.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warmup": [
                    "float"
                ],
                "t_total": [
                    "int"
                ],
                "cycles": [
                    "float"
                ]
            }
        },
        "WarmupCosineSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 105,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "progress": [
                    "str"
                ]
            }
        },
        "WarmupCosineWithHardRestartsSchedule.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warmup": [
                    "float"
                ],
                "t_total": [
                    "int"
                ],
                "cycles": [
                    "float"
                ]
            }
        },
        "WarmupCosineWithHardRestartsSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 123,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "progress": [
                    "str"
                ]
            }
        },
        "WarmupCosineWithWarmupRestartsSchedule.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warmup": [
                    "float"
                ],
                "t_total": [
                    "int"
                ],
                "cycles": [
                    "float"
                ]
            }
        },
        "WarmupCosineWithWarmupRestartsSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 143,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "progress": [
                    "str",
                    "list[\"DictDataLoader\"]",
                    "bool"
                ]
            }
        },
        "WarmupConstantSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 158,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "progress": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "WarmupLinearSchedule.get_lr_": {
            "name": "get_lr_",
            "location": 170,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "progress": [
                    "int"
                ]
            }
        },
        "BertAdam.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bool",
                    "typing.Sequence[str]",
                    "list[str]"
                ],
                "lr": [],
                "warmup": [
                    "int"
                ],
                "t_total": [
                    "int"
                ],
                "schedule": [
                    "typing.Text"
                ],
                "b1": [
                    "float"
                ],
                "b2": [
                    "float"
                ],
                "e": [
                    "float"
                ],
                "weight_decay": [
                    "float"
                ],
                "max_grad_norm": [
                    "float"
                ]
            }
        },
        "BertAdam.get_lr": {
            "name": "get_lr",
            "location": 227,
            "return": [
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertAdam.step": {
            "name": "step",
            "location": 239,
            "return": [
                "None",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "closure": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "visualbert-master/visualbert/pytorch_pretrained_bert/tokenization.py": {
        "load_vocab": {
            "name": "load_vocab",
            "location": 51,
            "return": [],
            "arguments": {
                "vocab_file": [
                    "str"
                ]
            }
        },
        "whitespace_tokenize": {
            "name": "whitespace_tokenize",
            "location": 66,
            "return": [
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_is_whitespace": {
            "name": "_is_whitespace",
            "location": 336,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "_is_control": {
            "name": "_is_control",
            "location": 348,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "_is_punctuation": {
            "name": "_is_punctuation",
            "location": 360,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "BertTokenizer.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_file": [
                    "str",
                    "int"
                ],
                "do_lower_case": [
                    "bool"
                ],
                "max_len": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "BertTokenizer.tokenize": {
            "name": "tokenize",
            "location": 90,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BertTokenizer.convert_tokens_to_ids": {
            "name": "convert_tokens_to_ids",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "list[]"
                ]
            }
        },
        "BertTokenizer.convert_tokens_to_ids_no_warning": {
            "name": "convert_tokens_to_ids_no_warning",
            "location": 110,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "list[str]",
                    "str",
                    "list[]"
                ]
            }
        },
        "BertTokenizer.convert_ids_to_tokens": {
            "name": "convert_ids_to_tokens",
            "location": 118,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str"
                ]
            }
        },
        "BertTokenizer.from_pretrained": {
            "name": "from_pretrained",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, str]"
                ],
                "pretrained_model_name": [
                    "str"
                ],
                "cache_dir": [
                    "None",
                    "str"
                ]
            }
        },
        "BasicTokenizer.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do_lower_case": [
                    "bool"
                ]
            }
        },
        "BasicTokenizer.tokenize": {
            "name": "tokenize",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "BasicTokenizer._run_strip_accents": {
            "name": "_run_strip_accents",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BasicTokenizer._run_split_on_punc": {
            "name": "_run_split_on_punc",
            "location": 207,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "list[]"
                ]
            }
        },
        "BasicTokenizer._tokenize_chinese_chars": {
            "name": "_tokenize_chinese_chars",
            "location": 227,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BasicTokenizer._is_chinese_char": {
            "name": "_is_chinese_char",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cp": [
                    "int"
                ]
            }
        },
        "BasicTokenizer._clean_text": {
            "name": "_clean_text",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "WordpieceTokenizer.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "str",
                    "list[str]",
                    "bytes",
                    "dict[str, int]",
                    "bool",
                    "float"
                ],
                "unk_token": [
                    "typing.Text"
                ],
                "max_input_chars_per_word": [
                    "int"
                ]
            }
        },
        "WordpieceTokenizer.tokenize": {
            "name": "tokenize",
            "location": 284,
            "return": [
                "list[typing.Optional[str]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "visualbert-master/visualbert/pytorch_pretrained_bert/__init__.py": {},
    "visualbert-master/visualbert/pytorch_pretrained_bert/__main__.py": {
        "main": {
            "name": "main",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "visualbert-master/visualbert/utils/detector.py": {
        "_load_resnet": {
            "name": "_load_resnet",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pretrained": [
                    "bool",
                    "str",
                    "raiden.utils.Dict"
                ]
            }
        },
        "_load_resnet_imagenet": {
            "name": "_load_resnet_imagenet",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pretrained": [
                    "bool",
                    "str"
                ]
            }
        },
        "SimpleDetector.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pretrained": [
                    "bool",
                    "str",
                    "float",
                    "Tuple[float,float]",
                    "int",
                    "utils.diskstaSection",
                    "annofabapi.models.Inspection"
                ],
                "average_pool": [
                    "bool",
                    "int",
                    "Dict[str,Any]",
                    "Union[str,int]"
                ],
                "semantic": [
                    "bool",
                    "float",
                    "bytes",
                    "ticketing.models.ticket_bundle.TicketBundle",
                    "torch.Tensor",
                    "models.scenes.scenes_base.Scene"
                ],
                "final_dim": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SimpleDetector.forward": {
            "name": "forward",
            "location": 99,
            "return": [
                "Dict[Text,Union[int,dict[Union[Any,Any],str],set[str],str,list,Match,None,float,dict[str,tuple[Union[str,Any,int,bool]]],list[str]]]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "images": [
                    "int",
                    "str",
                    "Dict",
                    "Callable",
                    "bool"
                ],
                "boxes": [
                    "bool",
                    "Optional[int]",
                    "torch.Tensor"
                ],
                "box_mask": [
                    "int",
                    "str",
                    "dict",
                    "bool",
                    "Callable"
                ],
                "classes": [
                    "str",
                    "Units",
                    "bool",
                    "torch.Tensor",
                    "int"
                ],
                "segms": [
                    "Tuple[Union[float,float]]",
                    "List[str]",
                    "Optional[int]",
                    "Optional[Tuple[float,float]]",
                    "bool",
                    "torch.Tensor"
                ]
            }
        }
    },
    "visualbert-master/visualbert/utils/pytorch_misc.py": {
        "time_batch": {
            "name": "time_batch",
            "location": 21,
            "return": [
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {
                "gen": [
                    "str"
                ],
                "reset_every": [
                    "int"
                ]
            }
        },
        "pad_sequence": {
            "name": "pad_sequence",
            "location": 49,
            "return": [],
            "arguments": {
                "sequence": [
                    "int",
                    "dict[int, numpy.ndarray]",
                    "float"
                ],
                "lengths": []
            }
        },
        "extra_leading_dim_in_sequence": {
            "name": "extra_leading_dim_in_sequence",
            "location": 64,
            "return": [],
            "arguments": {
                "f": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "x": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "mask": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "clip_grad_norm": {
            "name": "clip_grad_norm",
            "location": 68,
            "return": [],
            "arguments": {
                "named_parameters": [
                    "str"
                ],
                "max_norm": [
                    "float",
                    "int"
                ],
                "clip": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "find_latest_checkpoint": {
            "name": "find_latest_checkpoint",
            "location": 110,
            "return": [
                "None",
                "tuple[str]"
            ],
            "arguments": {
                "serialization_dir": [
                    "str",
                    "None"
                ],
                "epoch_to_load": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "find_latest_checkpoint_step": {
            "name": "find_latest_checkpoint_step",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "serialization_dir": [
                    "str",
                    "None"
                ],
                "epoch_to_load": [
                    "None",
                    "str",
                    "bool",
                    "list[dict[, ]]"
                ]
            }
        },
        "save_checkpoint": {
            "name": "save_checkpoint",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "float",
                    "tuple[]"
                ],
                "optimizer": [],
                "serialization_dir": [
                    "str",
                    "None",
                    "int",
                    "float"
                ],
                "epoch": [
                    "str",
                    "None",
                    "bool"
                ],
                "val_metric_per_epoch": [
                    "float",
                    "int",
                    "None",
                    "str"
                ],
                "is_best": [
                    "None",
                    "bool",
                    "float"
                ],
                "learning_rate_scheduler": [
                    "None",
                    "int",
                    "typing.Any",
                    "typing.Mapping"
                ]
            }
        },
        "restore_best_checkpoint": {
            "name": "restore_best_checkpoint",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "str"
                ],
                "serialization_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "restore_checkpoint_flexible": {
            "name": "restore_checkpoint_flexible",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "set[int]",
                    "int",
                    "str"
                ],
                "fn": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "load_state_dict_flexible": {
            "name": "load_state_dict_flexible",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "state_dict": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "restore_checkpoint": {
            "name": "restore_checkpoint",
            "location": 267,
            "return": [
                "tuple[typing.Union[int,list[]]]",
                "tuple[int]"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "str",
                    "None"
                ],
                "optimizer": [],
                "serialization_dir": [
                    "str",
                    "None",
                    "bool"
                ],
                "epoch_to_load": [
                    "None",
                    "str",
                    "bool"
                ],
                "learning_rate_scheduler": [
                    "None",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "detokenize": {
            "name": "detokenize",
            "location": 334,
            "return": [
                "list[]",
                "str"
            ],
            "arguments": {
                "array": [
                    "list[]"
                ],
                "vocab": [
                    "list[]",
                    "float",
                    "list[dict[, ]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "print_para": {
            "name": "print_para",
            "location": 346,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "batch_index_iterator": {
            "name": "batch_index_iterator",
            "location": 373,
            "return": [
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {
                "len_l": [
                    "int"
                ],
                "batch_size": [
                    "int",
                    "float"
                ],
                "skip_end": [
                    "bool"
                ]
            }
        },
        "batch_iterator": {
            "name": "batch_iterator",
            "location": 391,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "seq": [],
                "batch_size": [
                    "int"
                ],
                "skip_end": [
                    "bool"
                ]
            }
        },
        "masked_unk_softmax": {
            "name": "masked_unk_softmax",
            "location": 395,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "dim": [
                    "tuple[int]",
                    "float"
                ],
                "mask_idx": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "compute_score_with_logits": {
            "name": "compute_score_with_logits",
            "location": 402,
            "return": [],
            "arguments": {
                "logits": [
                    "bytes",
                    "str"
                ],
                "labels": [
                    "bool",
                    "str"
                ]
            }
        },
        "Flattener.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flattener.forward": {
            "name": "forward",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "visualbert-master/visualbert/utils/__init__.py": {},
    "visualbert-master/visualbert/utils/get_image_features/extract_image_features_nlvr.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "get_detections_from_im": {
            "name": "get_detections_from_im",
            "location": 191,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "str"
                ],
                "model": [
                    "int",
                    "str"
                ],
                "im": [
                    "int",
                    "str"
                ],
                "image_id": [
                    "str",
                    "bool"
                ],
                "feat_blob_name": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "MIN_BOXES": [
                    "bool",
                    "float"
                ],
                "MAX_BOXES": [
                    "int"
                ],
                "conf_thresh": [
                    "float"
                ],
                "bboxes": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "extract_bboxes": {
            "name": "extract_bboxes",
            "location": 233,
            "return": [
                "dict[int, list[]]"
            ],
            "arguments": {
                "bottom_up_csv_file": [
                    "str"
                ]
            }
        },
        "recurse_find_image": {
            "name": "recurse_find_image",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "int"
                ],
                "image_list": [
                    "list[typing.Type]",
                    "list[str]",
                    "list[tuple[typing.Union[bool,str]]]"
                ],
                "image_ext": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "visualbert-master/visualbert/utils/get_image_features/get_mask.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "get_detections_from_im": {
            "name": "get_detections_from_im",
            "location": 187,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "str"
                ],
                "model": [
                    "int",
                    "str"
                ],
                "im": [
                    "int",
                    "str"
                ],
                "image_id": [
                    "str",
                    "bool"
                ],
                "feat_blob_name": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "MIN_BOXES": [
                    "bool",
                    "float"
                ],
                "MAX_BOXES": [
                    "int"
                ],
                "conf_thresh": [
                    "float"
                ],
                "bboxes": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "extract_bboxes": {
            "name": "extract_bboxes",
            "location": 240,
            "return": [
                "dict[int, list[]]"
            ],
            "arguments": {
                "bottom_up_csv_file": [
                    "str"
                ]
            }
        },
        "recurse_find_image": {
            "name": "recurse_find_image",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "int"
                ],
                "image_list": [
                    "list[typing.Type]",
                    "list[str]",
                    "list[tuple[typing.Union[bool,str]]]"
                ],
                "image_ext": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "visualbert-master/visualbert/utils/get_image_features/get_mask_utils.py": {
        "get_model": {
            "name": "get_model",
            "location": 54,
            "return": [],
            "arguments": {
                "use_keypoints": [
                    "bool"
                ]
            }
        },
        "detect_from_img": {
            "name": "detect_from_img",
            "location": 79,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "model": [
                    "set[int]",
                    "int"
                ],
                "im": [],
                "dets_pkl_fn": [
                    "None",
                    "str"
                ],
                "dets_json_fn": [
                    "None",
                    "str"
                ],
                "debug_img_fn": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "typing.Mapping"
                ]
            }
        },
        "vis_one_image": {
            "name": "vis_one_image",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "im": [
                    "int",
                    "list[str]",
                    "str",
                    "None"
                ],
                "im_name": [
                    "str"
                ],
                "boxes": [],
                "segm_contours": [],
                "obj_names": [
                    "str"
                ],
                "keypoints": [],
                "kp_thresh": [
                    "int"
                ],
                "dpi": [
                    "int"
                ],
                "box_alpha": [
                    "float"
                ],
                "show_class": [
                    "bool"
                ]
            }
        },
        "convert_detections": {
            "name": "convert_detections",
            "location": 296,
            "return": [
                "tuple[None]",
                "tuple[list[str]]"
            ],
            "arguments": {
                "im_file": [
                    "str",
                    "typing.TextIO",
                    "bool"
                ],
                "dets_pkl_fn": [
                    "str"
                ],
                "dets_json_fn": [
                    "str",
                    "None"
                ],
                "debug_img_fn": [
                    "None",
                    "bool",
                    "str",
                    "set[str]"
                ]
            }
        }
    }
}
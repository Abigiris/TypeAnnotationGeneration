{
    "voca-master/setup.py": {
        "read": {
            "name": "read",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "voca-master/ci/appveyor-bootstrap.py": {
        "download_file": {
            "name": "download_file",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "install_python": {
            "name": "install_python",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "arch": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "home": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "download_python": {
            "name": "download_python",
            "location": 81,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "version": [
                    "str"
                ],
                "arch": [
                    "str"
                ]
            }
        },
        "install_pip": {
            "name": "install_pip",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "home": [
                    "str"
                ]
            }
        },
        "install_packages": {
            "name": "install_packages",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "home": [
                    "str",
                    "bool",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "download_file.report": {
            "name": "report",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "float",
                    "Tuple[float, float]"
                ],
                "size": [
                    "int",
                    "float",
                    "Tuple[float, float]"
                ],
                "total": [
                    "str",
                    "int",
                    "List[Tuple[int, str]]",
                    "bytes"
                ]
            }
        }
    },
    "voca-master/ci/appveyor-download.py": {
        "make_auth_headers": {
            "name": "make_auth_headers",
            "location": 18,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "download_latest_artifacts": {
            "name": "download_latest_artifacts",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "account_project": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "build_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ensure_dirs": {
            "name": "ensure_dirs",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "download_url": {
            "name": "download_url",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "filename": [
                    "str",
                    "Callable[[str],None]"
                ],
                "headers": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "unpack_zipfile": {
            "name": "unpack_zipfile",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "List[Tuple[int,int]]"
                ]
            }
        }
    },
    "voca-master/ci/bootstrap.py": {},
    "voca-master/docs/conf.py": {},
    "voca-master/src/voca/app.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "should_log": [
                    "str",
                    "List[str]",
                    "List[dict]",
                    "List[Dict]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "voca-master/src/voca/caster_adapter.py": {
        "transform_tree": {
            "name": "transform_tree",
            "location": 205,
            "return": [
                "dict",
                "int",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "tree": [
                    "int"
                ]
            }
        },
        "add_to_registry": {
            "name": "add_to_registry",
            "location": 217,
            "return": [
                "Dict[str,Union[str,None]]",
                "int",
                "Mapping",
                "mypy.types.Type",
                "MutableMapping",
                "Set",
                "Tuple[int,int,int,int]"
            ],
            "arguments": {
                "mapping": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,float]",
                    "Dict[int,dict[str,Any]]",
                    "Dict[str,Any]",
                    "List[libkol.types.ItemQuantity]",
                    "Dict[int,Dict[str,Any]]"
                ],
                "registry": [
                    "Dict[str,Optional[str]]",
                    "Dict[str,Union[str,None]]",
                    "MutableMapping",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "_function": {
            "name": "_function",
            "location": 225,
            "return": [
                "FunctionAction"
            ],
            "arguments": {
                "f": [
                    "Type",
                    "Exception"
                ]
            }
        },
        "convert_spec": {
            "name": "convert_spec",
            "location": 277,
            "return": [
                "str"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "Optional[cmk.utils.type_defs.HostName]"
                ]
            }
        },
        "adapt_AppContext": {
            "name": "adapt_AppContext",
            "location": 308,
            "return": [
                "WindowContext",
                "str",
                "int",
                "utils.JobsType"
            ],
            "arguments": {
                "title": [
                    "str",
                    "List[str]",
                    "None",
                    "bytes"
                ],
                "executable": [
                    "int",
                    "None"
                ]
            }
        },
        "adapt_Dictation": {
            "name": "adapt_Dictation",
            "location": 312,
            "return": [
                "Dictation"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "convert_key_name": {
            "name": "convert_key_name",
            "location": 316,
            "return": [
                "bool",
                "Mapping[int, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "adapt_Key": {
            "name": "adapt_Key",
            "location": 324,
            "return": [
                "ActionSequence"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "adapt_Text": {
            "name": "adapt_Text",
            "location": 338,
            "return": [
                "ActionSequence"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "find_merge_rule_classes": {
            "name": "find_merge_rule_classes",
            "location": 342,
            "return": [
                "list"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "monkeypatch": {
            "name": "monkeypatch",
            "location": 364,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Iterable[str]",
                    "types.ModuleType"
                ],
                "name": [
                    "str",
                    "Iterable[str]",
                    "types.ModuleType"
                ],
                "new": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Mapping",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "List[str]",
                    "Union[str,List[str]]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "monkeypatch_each": {
            "name": "monkeypatch_each",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "patches": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "add_wrapper": {
            "name": "add_wrapper",
            "location": 377,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "Optional[bytes]",
                "Optional[Sequence[Any]]"
            ],
            "arguments": {
                "module": [
                    "str"
                ]
            }
        },
        "patch_all": {
            "name": "patch_all",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LazyLoader.__getattr__": {
            "name": "__getattr__",
            "location": 54,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ActionSequence.__add__": {
            "name": "__add__",
            "location": 97,
            "return": [
                "ActionSequence"
            ],
            "arguments": {
                "self": [
                    "_TActionSequence@@ActionSequence@@"
                ],
                "other": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ]
            }
        },
        "Dictation.make_definitions": {
            "name": "make_definitions",
            "location": 126,
            "return": [
                "Dict[(Any, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerRefST.make_definitions": {
            "name": "make_definitions",
            "location": 136,
            "return": [
                "Dict[(Any, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.make_definitions": {
            "name": "make_definitions",
            "location": 171,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyRepeat.__mul__": {
            "name": "__mul__",
            "location": 181,
            "return": [
                "RepeatedAction"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "int",
                    "Tuple"
                ]
            }
        },
        "MyRepeat.__rmul__": {
            "name": "__rmul__",
            "location": 184,
            "return": [
                "RepeatedAction"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CasterTransformer.n": {
            "name": "n",
            "location": 199,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "List",
                    "List[list[str]]",
                    "List[str]",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "Settings.__getitem__": {
            "name": "__getitem__",
            "location": 244,
            "return": [
                "Settings"
            ],
            "arguments": {
                "self": [
                    "_TSettings@@Settings@@"
                ],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Settings.__bool__": {
            "name": "__bool__",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecTransformer.name": {
            "name": "name",
            "location": 252,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.literal_name": {
            "name": "literal_name",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.angled_name": {
            "name": "angled_name",
            "location": 258,
            "return": [
                "List[str]",
                "mypy.types.CallableType",
                "Optional[Iterable[str]]",
                "Iterable[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.optional_component": {
            "name": "optional_component",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.phrase_component": {
            "name": "phrase_component",
            "location": 264,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.component": {
            "name": "component",
            "location": 267,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.spec": {
            "name": "spec",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.group": {
            "name": "group",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "AttributeHaver.__getattr__": {
            "name": "__getattr__",
            "location": 423,
            "return": [
                "AttributeHaver"
            ],
            "arguments": {
                "self": [
                    "_TAttributeHaver@@AttributeHaver@@"
                ],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "VirtualModule.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualPackage.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[int]",
                    "None"
                ],
                "contents": [
                    "bytes",
                    "Dict[str,Any]",
                    "List[list]",
                    "List[List]",
                    "str",
                    "cmk.utils.type_defs.AgentRawData",
                    "Tuple[Union[dict[str,Any],dict[str,Any]]]",
                    "Tuple[Union[str,str]]",
                    "Tuple[Dict[str,Any],Dict[str,Any]]",
                    "Tuple[str,str]"
                ]
            }
        }
    },
    "voca-master/src/voca/cli.py": {
        "log_cli_call": {
            "name": "log_cli_call",
            "location": 36,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "_detect_mic": {
            "name": "_detect_mic",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_listen": {
            "name": "_listen",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_manage": {
            "name": "_manage",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        },
        "_worker": {
            "name": "_worker",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "patch_caster": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "log_cli_call.wrap": {
            "name": "wrap",
            "location": 37,
            "return": [
                "list",
                "bool",
                "List[int]",
                "app.types.HTML",
                "List[Tuple[str, float]]",
                "float",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "voca-master/src/voca/config.py": {
        "get_config_dir": {
            "name": "get_config_dir",
            "location": 17,
            "return": [
                "pathlib.Path",
                "str",
                "List[int]"
            ],
            "arguments": {}
        }
    },
    "voca-master/src/voca/context.py": {},
    "voca-master/src/voca/listen.py": {
        "setup": {
            "name": "setup",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "content_type": [
                    "List[str]",
                    "str",
                    "Dict[str,list]",
                    "IO",
                    "Dict[str,List]",
                    "argparse.Namespace"
                ],
                "path": [
                    "List[str]",
                    "str",
                    "Dict[str,list]",
                    "IO",
                    "Dict[str,List]",
                    "argparse.Namespace"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MyClient.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[int,List]",
                    "int",
                    "bool",
                    "List"
                ],
                "mic": [
                    "int",
                    "bool",
                    "Sequence[Sequence[float]]",
                    "bytes",
                    "str"
                ],
                "protocols": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[int,List]",
                    "int",
                    "bool",
                    "List"
                ],
                "extensions": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[int,List]",
                    "int",
                    "bool",
                    "List"
                ],
                "heartbeat_freq": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[int,List]",
                    "int",
                    "bool",
                    "List"
                ],
                "byterate": [
                    "int",
                    "bool",
                    "Sequence[Sequence[float]]",
                    "bytes",
                    "str"
                ],
                "show_hypotheses": [
                    "bool",
                    "Sequence[Sequence[float]]",
                    "bytes",
                    "str"
                ],
                "save_adaptation_state_filename": [
                    "int",
                    "None",
                    "bool"
                ],
                "send_adaptation_state_filename": [
                    "int",
                    "None",
                    "bool"
                ],
                "audio_gate": [
                    "int",
                    "bool",
                    "Sequence[Sequence[float]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "MyClient.send_data": {
            "name": "send_data",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Mapping[str,Any]",
                    "Dict",
                    "Mapping"
                ]
            }
        },
        "MyClient.opened": {
            "name": "opened",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyClient.received_message": {
            "name": "received_message",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "int"
                ]
            }
        },
        "MyClient.closed": {
            "name": "closed",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "reason": [
                    "str",
                    "bool",
                    "None",
                    "List[str]"
                ]
            }
        },
        "MyClient.opened.mic_to_ws": {
            "name": "mic_to_ws",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "voca-master/src/voca/log.py": {
        "to_serializable": {
            "name": "to_serializable",
            "location": 40,
            "return": [
                "Optional[str]",
                "Dict[Text,]",
                "Optional[Dict[str,str]]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 48,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "dict"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "json_to_file": {
            "name": "json_to_file",
            "location": 53,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ConfigSerial",
                "virgene.config.Config"
            ],
            "arguments": {
                "file": [
                    "None",
                    "IO[Any]",
                    "Iterable[pathlib.Path]",
                    "IO",
                    "Sequence[str]",
                    "Optional[io.TextIOWrapper]",
                    "bool",
                    "IO[str]",
                    "List[str]"
                ]
            }
        },
        "_exception_lines": {
            "name": "_exception_lines",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "exc": [
                    "BaseException",
                    "Exception",
                    "Dict[str,Any]"
                ]
            }
        },
        "_extract_traceback": {
            "name": "_extract_traceback",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "exc": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_exception_data": {
            "name": "_exception_data",
            "location": 77,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "exc": [
                    "BaseException",
                    "Dict",
                    "pathlib.Path"
                ]
            }
        },
        "summarize_exception": {
            "name": "summarize_exception",
            "location": 83,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, Any)])])]"
            ],
            "arguments": {
                "exc": [
                    "BaseException",
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "log_call": {
            "name": "log_call",
            "location": 92,
            "return": [
                "mypy.types.Type",
                "bool",
                "Union[Tuple[Any, Any, T], Tuple[T, T, T]]",
                "str",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "wrapped_function": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[Callable]",
                    "str",
                    "Callable",
                    "Optional[Iterable[str]]",
                    "Mapping[str,Any]",
                    "Iterable[str]",
                    "int",
                    "Mapping"
                ],
                "action_type": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[Callable]",
                    "str",
                    "Callable",
                    "Optional[Iterable[str]]",
                    "Mapping[str,Any]",
                    "Iterable[str]",
                    "int",
                    "Mapping"
                ],
                "include_args": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Callable]",
                    "bool",
                    "Optional[Iterable[str]]",
                    "Mapping[str,Any]",
                    "int"
                ],
                "include_result": [
                    "bool",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Iterable[str]]",
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "log_async_call": {
            "name": "log_async_call",
            "location": 155,
            "return": [
                "mypy.types.UnionType",
                "mypy.types.Type",
                "Dict[str, Any]",
                "bool",
                "Union[Tuple[Any, Any, T], Tuple[T, T, T]]"
            ],
            "arguments": {
                "wrapped_function": [
                    "Optional[Callable]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "str",
                    "Optional[Iterable[str]]",
                    "Mapping[str,Any]",
                    "Iterable[str]",
                    "int",
                    "Mapping"
                ],
                "action_type": [
                    "Optional[Callable]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "str",
                    "Optional[Iterable[str]]",
                    "Mapping[str,Any]",
                    "Iterable[str]",
                    "int",
                    "Mapping"
                ],
                "include_args": [
                    "None",
                    "str",
                    "Optional[Callable]",
                    "Optional[str]",
                    "bool",
                    "Optional[Iterable[str]]",
                    "Mapping[str,Any]",
                    "int"
                ],
                "include_result": [
                    "bool",
                    "Optional[Callable]",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "get_log_filename": {
            "name": "get_log_filename",
            "location": 218,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "json_to_file._json_to_file": {
            "name": "_json_to_file",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "Dict[str, str]",
                    "callable",
                    "dict",
                    "int"
                ]
            }
        },
        "log_call.logging_wrapper": {
            "name": "logging_wrapper",
            "location": 130,
            "return": [],
            "arguments": {}
        }
    },
    "voca-master/src/voca/manager.py": {
        "handle_unexpected_worker_bytes": {
            "name": "handle_unexpected_worker_bytes",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "worker_cli": {
            "name": "worker_cli",
            "location": 40,
            "return": [
                "list"
            ],
            "arguments": {
                "should_log": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "module_names": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[Hashable]",
                    "Hashable",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "set_state": {
            "name": "set_state",
            "location": 70,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "Optional[cmk.utils.type_defs.SectionName]",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict",
                    "bytearray",
                    "Iterable[T]",
                    "Iterable",
                    "Union[bytes,bytearray,memoryview]"
                ],
                "state": [
                    "bytes",
                    "Dict",
                    "Dict[str,object]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "should_log": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "None",
                    "Optional[List[str]]"
                ],
                "module_names": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "None",
                    "Optional[List[str]]"
                ],
                "num_workers": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "None",
                    "Optional[List[str]]"
                ]
            }
        },
        "Pool.start": {
            "name": "start",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.get_process": {
            "name": "get_process",
            "location": 107,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.add_new_process": {
            "name": "add_new_process",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "voca-master/src/voca/mic.py": {
        "int_or_str": {
            "name": "int_or_str",
            "location": 16,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "audio_callback": {
            "name": "audio_callback",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "indata": [
                    "str",
                    "Optional[IO[str]]",
                    "bool",
                    "Callable",
                    "Sequence[Any]",
                    "float"
                ],
                "frames": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "time": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "status": [
                    "str",
                    "Dict[str,numpy.ndarray]",
                    "int",
                    "Mapping[str,str]",
                    "Mapping",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "update_plot": {
            "name": "update_plot",
            "location": 79,
            "return": [
                "Sequence[str]",
                "str",
                "Set[str]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "frame": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "voca-master/src/voca/parsing.py": {
        "extract": {
            "name": "extract",
            "location": 37,
            "return": [
                "Tuple",
                "str",
                "Optional[str]",
                "Optional[Callable]",
                "Sequence[str]"
            ],
            "arguments": {
                "tree": [
                    "Callable[[KT,VT],bool]",
                    "str",
                    "Callable[T,bool]"
                ]
            }
        },
        "extract_commands": {
            "name": "extract_commands",
            "location": 45,
            "return": [
                "BaseException",
                "tuple"
            ],
            "arguments": {
                "tree": []
            }
        },
        "_replace_match": {
            "name": "_replace_match",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "match": [
                    "Dict[str,Any]",
                    "Dict",
                    "Type",
                    "Mapping",
                    "Mapping[str,Any]",
                    "raiden.utils.Dict[str,raiden.utils.Any]"
                ]
            }
        },
        "normalize_pattern": {
            "name": "normalize_pattern",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Dict"
                ]
            }
        },
        "build_rules": {
            "name": "build_rules",
            "location": 66,
            "return": [
                "bool",
                "List"
            ],
            "arguments": {
                "registry": [
                    "int",
                    "Callable[[None,None],bool]",
                    "Callable[None,None,bool]",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "build_grammar": {
            "name": "build_grammar",
            "location": 79,
            "return": [
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "registry": [
                    "Dict",
                    "List",
                    "BaseException",
                    "Dict[str,Any]",
                    "Union[utils.CWLObjectType,MutableSequence[utils.CWLObjectType],None]",
                    "MutableSequence",
                    "None"
                ],
                "rules": [
                    "str",
                    "List[int]",
                    "Dict[str,Any]",
                    "List[str]",
                    "List",
                    "Callable"
                ]
            }
        },
        "combine_modules": {
            "name": "combine_modules",
            "location": 112,
            "return": [
                "float",
                "bool",
                "str",
                "IO[Any]",
                "hashdecoder.lib.types.hint_type"
            ],
            "arguments": {
                "modules": [
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "Dict[str,tuple[Union[str,str]]]",
                    "str",
                    "Dict[str,Tuple[str,str]]",
                    "Iterable[str]",
                    "types.ModuleType"
                ]
            }
        },
        "combine_registries": {
            "name": "combine_registries",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "registries": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Transformer.chord": {
            "name": "chord",
            "location": 26,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Transformer.key": {
            "name": "key",
            "location": 29,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "List[int]",
                    "bool",
                    "int",
                    "T"
                ]
            }
        }
    },
    "voca-master/src/voca/patching.py": {
        "skipping_finder": {
            "name": "skipping_finder",
            "location": 52,
            "return": [
                "Generator"
            ],
            "arguments": {
                "finder": [
                    "str",
                    "int"
                ]
            }
        },
        "skipping_module_in_sys_modules": {
            "name": "skipping_module_in_sys_modules",
            "location": 68,
            "return": [
                "Generator"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "types.ModuleType",
                    "Iterable[str]",
                    "mypy.types.Type"
                ]
            }
        },
        "finder_patch": {
            "name": "finder_patch",
            "location": 88,
            "return": [
                "Generator"
            ],
            "arguments": {
                "finder": [
                    "str"
                ]
            }
        },
        "ancestors": {
            "name": "ancestors",
            "location": 131,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "items": [
                    "List[T]",
                    "Dict",
                    "int",
                    "Iterable[T]",
                    "Union[int,slice]",
                    "Iterable",
                    "T"
                ]
            }
        },
        "get_package_map": {
            "name": "get_package_map",
            "location": 136,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "strings": [
                    "List[str]",
                    "str",
                    "Mapping[str,str]"
                ]
            }
        },
        "make_finder": {
            "name": "make_finder",
            "location": 152,
            "return": [
                "PathFinder",
                "str",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "mapping": [
                    "Dict[str,Any]",
                    "raiden.utils.Dict[str,raiden.utils.Any]",
                    "Type[T]"
                ]
            }
        },
        "PathLoader.create_module": {
            "name": "create_module",
            "location": 39,
            "return": [
                "module"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "str",
                    "mypy.types.Instance"
                ]
            }
        },
        "PathLoader.exec_module": {
            "name": "exec_module",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "Dict[str,tuple[Union[str,str]]]",
                    "str",
                    "Dict[str,Tuple[str,str]]",
                    "Iterable[str]",
                    "types.ModuleType"
                ]
            }
        },
        "skipping_finder.placeholder_find_spec": {
            "name": "placeholder_find_spec",
            "location": 55,
            "return": [
                "None",
                "Optional[str]",
                "Optional[float]",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "_fullname": [
                    "List[str]",
                    "Optional[str]",
                    "types.ModuleType",
                    "str",
                    "Tuple[str]",
                    "Iterable[str]"
                ],
                "_path": [
                    "List[str]",
                    "Optional[str]",
                    "types.ModuleType",
                    "str",
                    "Tuple[str]",
                    "Iterable[str]"
                ],
                "_target": [
                    "List[str]",
                    "Optional[str]",
                    "types.ModuleType",
                    "str",
                    "Tuple[str]",
                    "Iterable[str]"
                ]
            }
        },
        "PathFinder.find_spec": {
            "name": "find_spec",
            "location": 102,
            "return": [
                "Optional[Union[(Spec, importlib.machinery.ModuleSpec)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "bytes"
                ],
                "path": [
                    "str",
                    "List[str]"
                ],
                "target": [
                    "str"
                ]
            }
        }
    },
    "voca-master/src/voca/platforms.py": {
        "implementation": {
            "name": "implementation",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "implementation.wrap": {
            "name": "wrap",
            "location": 48,
            "return": [
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "T"
                ]
            }
        }
    },
    "voca-master/src/voca/streaming.py": {
        "TerminatedFrameReceiver.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "float",
                    "bool"
                ],
                "terminator": [
                    "int",
                    "float",
                    "bool"
                ],
                "max_frame_length": [
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "TerminatedFrameReceiver.__aiter__": {
            "name": "__aiter__",
            "location": 76,
            "return": [
                "TerminatedFrameReceiver",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "voca-master/src/voca/utils.py": {
        "pronunciation_to_value": {
            "name": "pronunciation_to_value",
            "location": 61,
            "return": [
                "str",
                "bool",
                "Exception"
            ],
            "arguments": {}
        },
        "value_to_pronunciation": {
            "name": "value_to_pronunciation",
            "location": 68,
            "return": [
                "Dict",
                "Set[str]",
                "List[str]",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Dict[str,List[Callable]]",
                "Dict[int,Dict[int,Any]]"
            ],
            "arguments": {}
        },
        "quote": {
            "name": "quote",
            "location": 124,
            "return": [
                "Text",
                "str",
                "int"
            ],
            "arguments": {
                "word": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "regex": {
            "name": "regex",
            "location": 132,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "word": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "async_runner": {
            "name": "async_runner",
            "location": 219,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "async_function": [
                    "Callable"
                ]
            }
        },
        "replace": {
            "name": "replace",
            "location": 231,
            "return": [
                "Optional[int]",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "List[str]",
                    "int",
                    "Tuple[frozenset]",
                    "[]",
                    "Tuple[FrozenSet[int]]"
                ]
            }
        },
        "plugin_module_paths": {
            "name": "plugin_module_paths",
            "location": 239,
            "return": [
                "List",
                "str",
                "List[str]",
                "Dict[str,Type]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_module_names": {
            "name": "get_module_names",
            "location": 247,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "transform_module": {
            "name": "transform_module",
            "location": 259,
            "return": [
                "bool",
                "List[str]",
                "int",
                "Optional[str]",
                "str",
                "Set[str]",
                "List",
                "Tuple[Union[Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any,Any]]"
            ],
            "arguments": {
                "module": [
                    "Iterable[str]",
                    "mypy.types.CallableType"
                ]
            }
        },
        "Registry.register": {
            "name": "register",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Registry.define": {
            "name": "define",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patterns": [
                    "Dict",
                    "None"
                ]
            }
        },
        "async_runner.build": {
            "name": "build",
            "location": 220,
            "return": [
                "bool",
                "Union[str, List[str]]"
            ],
            "arguments": {}
        },
        "ModuleLazyRaise.__getattr__": {
            "name": "__getattr__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Registry.register._register": {
            "name": "_register",
            "location": 47,
            "return": [
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "function": [
                    "str",
                    "Callable",
                    "Iterable[str]"
                ]
            }
        }
    },
    "voca-master/src/voca/worker.py": {
        "load_from_path": {
            "name": "load_from_path",
            "location": 64,
            "return": [
                "Tuple[Union[Literal,Literal]]",
                "str",
                "int",
                "Optional[Union[str,pathlib.Path]]",
                "Type",
                "List",
                "List[str]",
                "Mapping[str,Any]",
                "List[cmk.utils.type_defs.HostName]",
                "Iterable[str]"
            ],
            "arguments": {
                "import_path": [
                    "bool",
                    "str",
                    "None",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "Optional[List[str]]",
                    "pathlib.Path"
                ],
                "filename": [
                    "bool",
                    "str",
                    "None",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "Optional[List[str]]",
                    "pathlib.Path"
                ]
            }
        },
        "get_backup_module": {
            "name": "get_backup_module",
            "location": 73,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "import_path": [
                    "str",
                    "pathlib.Path"
                ],
                "backup_dir": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "Optional[pathlib.Path]",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "save_backup_module": {
            "name": "save_backup_module",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "import_path": [
                    "str"
                ],
                "backup_dir": [
                    "str"
                ]
            }
        },
        "get_module": {
            "name": "get_module",
            "location": 96,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "import_path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Callable[str,str]",
                    "pathlib.Path",
                    "Optional[Callable[[str],str]]"
                ],
                "backup_dir": [
                    "str",
                    "None",
                    "Union[pathlib.Path,str,None]",
                    "Optional[str]",
                    "Union[pathlib.Path,str]"
                ],
                "use_backup_modules": [
                    "bool",
                    "Callable[,None]"
                ]
            }
        },
        "collect_modules": {
            "name": "collect_modules",
            "location": 119,
            "return": [
                "List[Union[str,dict[str,Any],list]]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "import_paths": [
                    "str",
                    "bool",
                    "int",
                    "pathlib.Path"
                ],
                "use_backup_modules": [
                    "str",
                    "Optional[Union[str,pathlib.Path]]",
                    "bool",
                    "None",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "combine_registries": {
            "name": "combine_registries",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "registries": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "import_paths": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "Optional[str]",
                    "Dict"
                ],
                "use_backup_modules": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "Optional[str]",
                    "Dict"
                ]
            }
        }
    },
    "voca-master/src/voca/__init__.py": {},
    "voca-master/src/voca/__main__.py": {},
    "voca-master/src/voca/plugins/basic.py": {
        "type_chord": {
            "name": "type_chord",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "chord": [
                    "Dict"
                ]
            }
        }
    },
    "voca-master/src/voca/plugins/math.py": {},
    "voca-master/src/voca/plugins/no.py": {},
    "voca-master/src/voca/plugins/python.py": {},
    "voca-master/src/voca/plugins/stopstart.py": {},
    "voca-master/src/voca/plugins/terminator.py": {},
    "voca-master/src/voca/plugins/turtle_context.py": {},
    "voca-master/src/voca/plugins/vscode.py": {
        "findNthToken": {
            "name": "findNthToken",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "int",
                    "bool"
                ],
                "n": [
                    "bool",
                    "str",
                    "Union[float,Tuple[float,float]]",
                    "float",
                    "Tuple[Union[float,float]]"
                ],
                "direction": [
                    "bool",
                    "str",
                    "Union[float,Tuple[float,float]]",
                    "float",
                    "Tuple[Union[float,float]]"
                ]
            }
        }
    },
    "voca-master/src/voca/plugins/yes.py": {},
    "voca-master/src/voca/plugins/__init__.py": {},
    "voca-master/tests/conftest.py": {
        "_virtual_display": {
            "name": "_virtual_display",
            "location": 17,
            "return": [
                "typing.Generator[VirtualDisplay]"
            ],
            "arguments": {}
        },
        "_window_manager": {
            "name": "_window_manager",
            "location": 40,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "virtual_display": [
                    "Callable",
                    "Optional",
                    "str",
                    "bytes"
                ]
            }
        },
        "_turtle_window": {
            "name": "_turtle_window",
            "location": 50,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "window_manager": [
                    "bool",
                    "Dict[str,Any]",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "_idle_window": {
            "name": "_idle_window",
            "location": 60,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "window_manager": [
                    "bool",
                    "Dict[str,Any]",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "_hash_seed": {
            "name": "_hash_seed",
            "location": 70,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_config_dir": {
            "name": "_config_dir",
            "location": 83,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        }
    },
    "voca-master/tests/helpers.py": {
        "run": {
            "name": "run",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "capture_keypresses": {
            "name": "capture_keypresses",
            "location": 17,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {}
        },
        "make_command": {
            "name": "make_command",
            "location": 43,
            "return": [
                "Dict[(str, Union[(int, str, Dict[(str, Union[(List[Dict[(str, _T0)]], _T1)])])])]"
            ],
            "arguments": {
                "utterance": [
                    "List",
                    "int",
                    "str"
                ],
                "final": [
                    "bool",
                    "List",
                    "int",
                    "str"
                ]
            }
        },
        "capture_keypresses.capture": {
            "name": "capture",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "async_capture_keypresses.capture": {
            "name": "capture",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "list",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "voca-master/tests/test_caster_adapter.py": {
        "test_convert_spec": {
            "name": "test_convert_spec",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_simple_caster": {
            "name": "test_simple_caster",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_caster_extras": {
            "name": "test_caster_extras",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patch_caster": {
            "name": "test_patch_caster",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patch_dragonfly": {
            "name": "test_patch_dragonfly",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_f_keys": {
            "name": "test_f_keys",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_more_keys": {
            "name": "test_more_keys",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_using_castervoice_apps": {
            "name": "test_using_castervoice_apps",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "voca-master/tests/test_context.py": {},
    "voca-master/tests/test_mic.py": {
        "test_mic_list": {
            "name": "test_mic_list",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "voca-master/tests/test_patching.py": {
        "test_patch": {
            "name": "test_patch",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_package_map": {
            "name": "test_get_package_map",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "voca-master/tests/test_performance.py": {
        "test_manager_time": {
            "name": "test_manager_time",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_manager_time.handler": {
            "name": "handler",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "_signum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "voca-master/tests/test_platforms.py": {
        "get_platform": {
            "name": "get_platform",
            "location": 17,
            "return": [
                "bool",
                "Text"
            ],
            "arguments": {}
        },
        "test_implementation": {
            "name": "test_implementation",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dict_accessible": {
            "name": "test_dict_accessible",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "voca-master/tests/test_voca.py": {
        "test_main": {
            "name": "test_main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_strict": {
            "name": "test_strict",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eager": {
            "name": "test_eager",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_always": {
            "name": "test_context_always",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_never": {
            "name": "test_context_never",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_context_matches": {
            "name": "test_app_context_matches",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_context_does_not_match": {
            "name": "test_app_context_does_not_match",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_module": {
            "name": "test_config_module",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        }
    },
    "voca-master/tests/__init__.py": {}
}
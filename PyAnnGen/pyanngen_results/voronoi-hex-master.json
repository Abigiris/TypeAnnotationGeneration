{
    "voronoi-hex-master/board.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.make_border": {
            "name": "make_border",
            "location": 59,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "points": [
                    "int",
                    "Callable",
                    "str"
                ],
                "edges": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Board.__init__.reflect": {
            "name": "reflect",
            "location": 25,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "u": [
                    "numpy.ndarray",
                    "float",
                    "bytearray",
                    "Tuple[numpy.ndarray, numpy.ndarray]"
                ],
                "w": [
                    "numpy.ndarray",
                    "float",
                    "bytearray",
                    "Tuple[numpy.ndarray, numpy.ndarray]"
                ],
                "a": [
                    "numpy.ndarray",
                    "float",
                    "bytearray",
                    "Tuple[numpy.ndarray, numpy.ndarray]"
                ]
            }
        },
        "Board.make_border.first_index": {
            "name": "first_index",
            "location": 62,
            "return": [
                "int",
                "List[float]",
                "Tuple[int]"
            ],
            "arguments": {
                "array": [
                    "numpy.ndarray",
                    "float",
                    "int",
                    "T"
                ],
                "value": [
                    "numpy.ndarray",
                    "float",
                    "int",
                    "T"
                ]
            }
        },
        "Board.make_border.border_edges": {
            "name": "border_edges",
            "location": 88,
            "return": [
                "str",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "Optional[dict]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "pts": [
                    "int",
                    "my_types.Complex",
                    "numpy.ndarray",
                    "float",
                    "bool"
                ],
                "es": [
                    "int",
                    "my_types.Complex",
                    "numpy.ndarray",
                    "float",
                    "bool"
                ],
                "coord": [
                    "int",
                    "my_types.Complex",
                    "numpy.ndarray",
                    "float",
                    "bool"
                ],
                "side": [
                    "int",
                    "my_types.Complex",
                    "numpy.ndarray",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "voronoi-hex-master/game.py": {
        "Game.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "Game.player": {
            "name": "player",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.add_cycle_to_player_complex": {
            "name": "add_cycle_to_player_complex",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "bool",
                    "int"
                ],
                "c": [
                    "str",
                    "bytes",
                    "int",
                    "my_types.Cycle",
                    "Any",
                    "Optional[Any]",
                    "None",
                    "Callable[[bytes],bytes]",
                    "Callable[bytes,bytes]"
                ]
            }
        },
        "Game.string_from_homology": {
            "name": "string_from_homology",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "voronoi-hex-master/gui.py": {
        "Text.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "Callable[,None]",
                    "tkinter.Tk"
                ],
                "game": [
                    "bool",
                    "src.game.Game"
                ]
            }
        },
        "Text.update_text": {
            "name": "update_text",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graphics.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Graphics.polygon_from_cycle": {
            "name": "polygon_from_cycle",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "fill": [
                    "str",
                    "int",
                    "Callable[[str, str], None]",
                    "bool",
                    "float"
                ],
                "state": [
                    "Text",
                    "str",
                    "int",
                    "Callable[[str,str],None]",
                    "bool",
                    "float"
                ]
            }
        },
        "Graphics.polygons_from_cycles": {
            "name": "polygons_from_cycles",
            "location": 95,
            "return": [
                "str",
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "cs": [
                    "str",
                    "int",
                    "bytes",
                    "my_types.Cycle",
                    "bool"
                ],
                "fill": [
                    "str",
                    "int",
                    "bytes",
                    "my_types.Cycle",
                    "bool"
                ],
                "state": [
                    "str",
                    "int",
                    "bytes",
                    "my_types.Cycle",
                    "bool"
                ]
            }
        },
        "Graphics.generate_base_polygons": {
            "name": "generate_base_polygons",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "IO",
                    "board.Board",
                    "int",
                    "str",
                    "bytes"
                ],
                "team": [
                    "str",
                    "int",
                    "float",
                    "game.Player"
                ]
            }
        },
        "Graphics.update_territory": {
            "name": "update_territory",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "polygon": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "player": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Graphics.unit_coord_to_pixel": {
            "name": "unit_coord_to_pixel",
            "location": 112,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "coord": [
                    "float",
                    "int",
                    "str",
                    "Union[bool,None]",
                    "None"
                ]
            }
        },
        "CyclePolygon.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graphics": [
                    "str"
                ],
                "game": [],
                "c": [
                    "Sequence[str]"
                ]
            }
        },
        "CyclePolygon.claim": {
            "name": "claim",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "voronoi-hex-master/main.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "voronoi-hex-master/my_types.py": {},
    "voronoi-hex-master/settings.py": {},
    "voronoi-hex-master/simplicialHomology.py": {
        "kernel": {
            "name": "kernel",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "A": [
                    "numpy.ndarray",
                    "numpy.array",
                    "bool",
                    "int",
                    "list"
                ],
                "tol": [
                    "Callable[[T], T]",
                    "int"
                ]
            }
        },
        "cokernel": {
            "name": "cokernel",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "A": [
                    "float",
                    "numpy.ndarray",
                    "int",
                    "List[int]"
                ],
                "tol": [
                    "Callable[[T], T]",
                    "int"
                ]
            }
        },
        "toplexify": {
            "name": "toplexify",
            "location": 41,
            "return": [
                "list"
            ],
            "arguments": {
                "simplices": [
                    "List[Tuple[int, int]]",
                    "List[dict]",
                    "str",
                    "List[str]",
                    "list",
                    "Set[str]"
                ]
            }
        },
        "ksublists": {
            "name": "ksublists",
            "location": 55,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "lst": [
                    "int",
                    "str",
                    "bool"
                ],
                "n": [
                    "int",
                    "str",
                    "bool"
                ],
                "sublist": [
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "simpcluded": {
            "name": "simpcluded",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "spx": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "simplices": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ksimplices": {
            "name": "ksimplices",
            "location": 71,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "toplexes": [
                    "int",
                    "Mapping[str, float]",
                    "float",
                    "bool",
                    "list"
                ],
                "k": [
                    "int",
                    "Mapping[str, float]",
                    "float",
                    "bool",
                    "list"
                ],
                "relative": [
                    "Union[List[str], Tuple[str, ...]]",
                    "Optional[T]",
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "kflag": {
            "name": "kflag",
            "location": 87,
            "return": [
                "list"
            ],
            "arguments": {
                "subcomplex": [
                    "list",
                    "type",
                    "bool",
                    "List[int]"
                ],
                "k": [
                    "Callable",
                    "float",
                    "int",
                    "bytes"
                ],
                "verts": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "Optional",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "flag": {
            "name": "flag",
            "location": 104,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "subcomplex": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "maxdim": [
                    "bool",
                    "int",
                    "str",
                    "numpy.array",
                    "Optional[Union[int, Any]]"
                ]
            }
        },
        "vietorisRips": {
            "name": "vietorisRips",
            "location": 119,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "pts": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "diameter": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "maxdim": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "closure": {
            "name": "closure",
            "location": 137,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "toplexes": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "sstar": {
            "name": "sstar",
            "location": 148,
            "return": [
                "list"
            ],
            "arguments": {
                "toplexes": [
                    "int",
                    "Callable",
                    "str"
                ],
                "complx": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "Sequence[str]",
                    "Union[int, slice]",
                    "bytes"
                ]
            }
        },
        "star": {
            "name": "star",
            "location": 164,
            "return": [
                "list"
            ],
            "arguments": {
                "cplx": [
                    "str",
                    "List[str]",
                    "tuple",
                    "Optional[int]"
                ],
                "face": [
                    "str",
                    "List[str]",
                    "tuple",
                    "Optional[int]"
                ]
            }
        },
        "boundary": {
            "name": "boundary",
            "location": 169,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "toplexes": [
                    "str",
                    "Callable"
                ],
                "k": [
                    "str"
                ],
                "relative": [
                    "str",
                    "Callable"
                ],
                "km1chain": [
                    "Optional[Dict[str, numpy.ma.MaskedArray]]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Optional[Any]",
                    "Optional[Union[astropy.units.quantity.Quantity, numpy.ndarray]]"
                ]
            }
        },
        "simplicialHomology": {
            "name": "simplicialHomology",
            "location": 208,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "k": [
                    "int",
                    "numpy.ndarray"
                ],
                "X": [
                    "int",
                    "numpy.ndarray"
                ],
                "Y": [
                    "numpy.ndarray",
                    "Union[int, slice]",
                    "Union[pandas.Series, numpy.ndarray]",
                    "str"
                ],
                "rankOnly": [
                    "str",
                    "float",
                    "list",
                    "int",
                    "Optional",
                    "List[Dict[str, Any]]"
                ],
                "tol": [
                    "str",
                    "float",
                    "list",
                    "int",
                    "Optional",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "homology": {
            "name": "homology",
            "location": 224,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "b1": [
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ],
                "b2": [
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "tol": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ]
            }
        },
        "homologyRankOnly": {
            "name": "homologyRankOnly",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "b1": [
                    "int",
                    "float"
                ],
                "b2": [
                    "int",
                    "float",
                    "bytes",
                    "numpy.ndarray"
                ],
                "tol": [
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "localHomology": {
            "name": "localHomology",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "k": [
                    "str",
                    "Callable",
                    "Sequence[Mapping]",
                    "Dict[str, Any]",
                    "Optional[Sequence[T]]",
                    "Union[Sequence, 'SweepFixedValues']"
                ],
                "toplexes": [
                    "str",
                    "Callable",
                    "Sequence[Mapping]",
                    "Dict[str, Any]",
                    "Optional[Sequence[T]]",
                    "Union[Sequence, 'SweepFixedValues']"
                ],
                "simplices": [
                    "str",
                    "bool"
                ],
                "rankOnly": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "localHomologyMultithread": {
            "name": "localHomologyMultithread",
            "location": 271,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "k": [
                    "bool",
                    "List[int]",
                    "bytes",
                    "int"
                ],
                "cplx": [
                    "bool",
                    "int",
                    "Hashable",
                    "Optional[numpy.ndarray]"
                ],
                "numThreads": [
                    "Optional[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "localHomologyMultiproc": {
            "name": "localHomologyMultiproc",
            "location": 293,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "k": [
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "Dict[int, str]"
                ],
                "cplx": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Callable",
                    "bool",
                    "Optional[Mapping]"
                ],
                "numProcs": [
                    "int",
                    "bool",
                    "tuple",
                    "Dict[str, str]",
                    "str",
                    "Optional[int]"
                ],
                "localSimplices": [
                    "numpy.array",
                    "Optional[str]",
                    "Optional[Tuple[str, int]]",
                    "Optional[int]"
                ],
                "iterate": [
                    "Optional[List[str]]",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "rankOnly": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Callable",
                    "bool",
                    "Optional[Mapping]"
                ]
            }
        },
        "cone": {
            "name": "cone",
            "location": 332,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "toplexes": [
                    "int",
                    "Callable",
                    "str"
                ],
                "subcomplex": [
                    "int",
                    "Callable",
                    "str"
                ],
                "coneVertex": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "integerVertices": {
            "name": "integerVertices",
            "location": 337,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "cplx1": [
                    "float",
                    "dict",
                    "Optional[numpy.ndarray]"
                ],
                "cplx2": [
                    "float",
                    "dict",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "vertexHoplength": {
            "name": "vertexHoplength",
            "location": 354,
            "return": [
                "List[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "toplexes": [
                    "str",
                    "List[Tuple[int, Any]]",
                    "list",
                    "Dict[str, object]",
                    "List[int]",
                    "Iterable[int]"
                ],
                "vertices": [
                    "str",
                    "list",
                    "int",
                    "bytes"
                ],
                "maxHoplength": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "vertexLabels2simplices": {
            "name": "vertexLabels2simplices",
            "location": 381,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "toplexes": [
                    "str",
                    "Optional[Dict]",
                    "int",
                    "float",
                    "List[int]"
                ],
                "vertexLabels": [
                    "str",
                    "Optional[Dict]",
                    "int",
                    "float",
                    "List[int]"
                ],
                "nonConeLabel": [
                    "str",
                    "List[Tuple[int, int]]",
                    "Optional[int]",
                    "Optional[Dict[str, dict]]",
                    "Optional[IO[bytes]]"
                ],
                "coneName": [
                    "str",
                    "Optional[Dict]",
                    "list",
                    "Tuple[Literal, Literal]",
                    "int"
                ]
            }
        },
        "iteratedCone": {
            "name": "iteratedCone",
            "location": 400,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "toplexes": [
                    "Union[\"RangeSet[T]\", Iterable[Any]]"
                ],
                "subcomplex": [
                    "Union[\"RangeSet[T]\", Iterable[Any]]"
                ]
            }
        },
        "complex2perseus": {
            "name": "complex2perseus",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "toplexes": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "labels": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "jaccardIndexFaces": {
            "name": "jaccardIndexFaces",
            "location": 441,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "face1": [
                    "List[int]",
                    "str",
                    "list"
                ],
                "face2": [
                    "List[int]",
                    "str",
                    "list"
                ]
            }
        }
    },
    "voronoi-hex-master/topology.py": {
        "edges_from_cycle": {
            "name": "edges_from_cycle",
            "location": 13,
            "return": [
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "c": [
                    "my_types.Cycle",
                    "str",
                    "bytes",
                    "T"
                ]
            }
        },
        "edges_from_cycles": {
            "name": "edges_from_cycles",
            "location": 17,
            "return": [
                "bool",
                "str",
                "float",
                "int",
                "List[str]"
            ],
            "arguments": {
                "cs": [
                    "float",
                    "bool",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "verts_from_edges": {
            "name": "verts_from_edges",
            "location": 21,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "xs": [
                    "Tuple[Union[int,int]]",
                    "my_types.Complex",
                    "str",
                    "List[tuple[Union[str,str]]]",
                    "Tuple[int,int]",
                    "List[Tuple[str,str]]"
                ]
            }
        },
        "outer_edges_from_cycle": {
            "name": "outer_edges_from_cycle",
            "location": 25,
            "return": [
                "float",
                "T",
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "List",
                    "my_types.Cycle"
                ]
            }
        },
        "face_from_cycle": {
            "name": "face_from_cycle",
            "location": 29,
            "return": [
                "bool",
                "str",
                "float",
                "int",
                "List[str]"
            ],
            "arguments": {
                "c": [
                    "my_types.Cycle",
                    "Callable[[Any], T]",
                    "Iterable[Any]",
                    "Iterable",
                    "Callable"
                ]
            }
        },
        "faces_from_edges": {
            "name": "faces_from_edges",
            "location": 33,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "es": [
                    "Dict",
                    "Callable[...,Coroutine[Any,Any,Any]]",
                    "Callable[...,collections.abc.Coroutine]"
                ]
            }
        },
        "closure": {
            "name": "closure",
            "location": 38,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "xs": [
                    "bool",
                    "int"
                ]
            }
        },
        "betti": {
            "name": "betti",
            "location": 42,
            "return": [
                "dict",
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "index": [
                    "int",
                    "my_types.Complex"
                ],
                "xs": [
                    "int",
                    "my_types.Complex"
                ],
                "subspace": [
                    "Union[int,float]",
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "betti.lists_from_complex": {
            "name": "lists_from_complex",
            "location": 43,
            "return": [
                "List[list]",
                "List[str]",
                "List[T]",
                "str"
            ],
            "arguments": {
                "immutable": [
                    "my_types.Complex",
                    "str",
                    "Iterable[Any]",
                    "Iterable"
                ]
            }
        }
    }
}
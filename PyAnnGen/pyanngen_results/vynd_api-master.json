{
    "vynd_api-master/run.py": {
        "create_app": {
            "name": "create_app",
            "location": 9,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "config_filename": [
                    "bool",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "vynd_api-master/setup.py": {},
    "vynd_api-master/vynd_api/__init__.py": {},
    "vynd_api-master/vynd_api/api/api_blueprint.py": {},
    "vynd_api-master/vynd_api/api/settings.py": {
        "init_video_processor": {
            "name": "init_video_processor",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "vynd_api-master/vynd_api/api/__init__.py": {},
    "vynd_api-master/vynd_api/api/resources/add_new_video.py": {
        "AddNewVideo.post": {
            "name": "post",
            "location": 12,
            "return": [
                "List[Dict[str, Any]]",
                "Optional[Dict]",
                "Dict[int, dict]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/api/resources/face_updater.py": {
        "FaceUpdater.post": {
            "name": "post",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/api/resources/get_faces_in_image.py": {
        "GetFacesInImage.post": {
            "name": "post",
            "location": 16,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/api/resources/get_faces_in_video.py": {
        "GetFacesInVideo.extractArgs": {
            "name": "extractArgs",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, float]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetFacesInVideo.get": {
            "name": "get",
            "location": 13,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/api/resources/get_face_info.py": {
        "GetFaces.get": {
            "name": "get",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/api/resources/get_processed_videos.py": {
        "GetProcessedVideos.get": {
            "name": "get",
            "location": 11,
            "return": [
                "float",
                "bytes",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/api/resources/get_videos_of_face.py": {
        "GetVideosOfFace.get": {
            "name": "get",
            "location": 13,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/api/resources/process_key_frames.py": {
        "ProcessKeyFrames.post": {
            "name": "post",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[Dict]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/api/resources/reset_db.py": {
        "ResetDB.post": {
            "name": "post",
            "location": 15,
            "return": [
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/api/resources/__init__.py": {},
    "vynd_api-master/vynd_api/data/db_utils.py": {
        "np_to_binary": {
            "name": "np_to_binary",
            "location": 12,
            "return": [
                "Binary",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "nparray": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "list[dict[, ]]",
                    "str",
                    "cmk.utils.type_defs.EventRule",
                    "List[dict]"
                ]
            }
        },
        "np_to_json": {
            "name": "np_to_json",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "nparray": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "binary_to_np": {
            "name": "binary_to_np",
            "location": 18,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, List[str]]",
                "dict"
            ],
            "arguments": {
                "binary": [
                    "str",
                    "bytes",
                    "bool",
                    "raiden.utils.signer.Signer"
                ]
            }
        },
        "binary_to_b64": {
            "name": "binary_to_b64",
            "location": 21,
            "return": [
                "bytes"
            ],
            "arguments": {
                "binary": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/data/face_collection.py": {
        "FaceCollection.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FaceCollection.__create_name_index": {
            "name": "__create_name_index",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceCollection.insert_new_face": {
            "name": "insert_new_face",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ],
                "features": [
                    "np.ndarray"
                ],
                "face_image": [
                    "np.ndarray"
                ]
            }
        },
        "FaceCollection.insert_new_faces": {
            "name": "insert_new_faces",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "faces": [
                    "int",
                    "pymongo.database.Database",
                    "dict",
                    "str"
                ]
            }
        },
        "FaceCollection.get_face_by_id": {
            "name": "get_face_by_id",
            "location": 50,
            "return": [
                "bool",
                "Tuple[float, float]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "face_id": [
                    "str"
                ]
            }
        },
        "FaceCollection.get_videos_by_id": {
            "name": "get_videos_by_id",
            "location": 59,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "face_id": [
                    "str"
                ]
            }
        },
        "FaceCollection.get_videos_by_name": {
            "name": "get_videos_by_name",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FaceCollection.get_faces_info": {
            "name": "get_faces_info",
            "location": 69,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceCollection.get_faces_videos": {
            "name": "get_faces_videos",
            "location": 76,
            "return": [
                "list[]",
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "faces_ids": [
                    "str",
                    "int",
                    "Type[str]"
                ]
            }
        },
        "FaceCollection.add_keyframe_id": {
            "name": "add_keyframe_id",
            "location": 107,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "face_id": [
                    "str"
                ],
                "keyframe_id": [
                    "str"
                ]
            }
        },
        "FaceCollection.add_video_id": {
            "name": "add_video_id",
            "location": 119,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "face_id": [
                    "str"
                ],
                "video_id": [
                    "str"
                ]
            }
        },
        "FaceCollection.add_video_id_to_faces": {
            "name": "add_video_id_to_faces",
            "location": 131,
            "return": [
                "bool",
                "dict",
                "Optional[str]",
                "List[str]",
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "List[Tuple[str, str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "face_ids": [
                    "str"
                ],
                "video_id": [
                    "str"
                ]
            }
        },
        "FaceCollection.update_name": {
            "name": "update_name",
            "location": 144,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Tuple[int, List[str]]",
                "Optional[List[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "face_id": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "FaceCollection.update_features": {
            "name": "update_features",
            "location": 156,
            "return": [
                "bool",
                "Optional[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "face_id": [
                    "str"
                ],
                "features": [
                    "np.ndarray"
                ]
            }
        },
        "FaceCollection.update_face_image": {
            "name": "update_face_image",
            "location": 168,
            "return": [
                "bool",
                "str",
                "Dict[str, str]",
                "IO",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "face_id": [
                    "str"
                ],
                "face_image": [
                    "np.ndarray"
                ]
            }
        },
        "FaceCollection.delete_face": {
            "name": "delete_face",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "face_id": [
                    "str"
                ]
            }
        },
        "FaceCollection.get_all_faces_features": {
            "name": "get_all_faces_features",
            "location": 189,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceCollection.get_all_faces_video_ids": {
            "name": "get_all_faces_video_ids",
            "location": 196,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceCollection.delete_all_faces": {
            "name": "delete_all_faces",
            "location": 199,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceCollection.get_number_of_records": {
            "name": "get_number_of_records",
            "location": 207,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/data/keyframe_collection.py": {
        "KeyFrameCollection.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "KeyFrameCollection.insert_new_keyframe": {
            "name": "insert_new_keyframe",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ],
                "timestamp": [
                    "int"
                ]
            }
        },
        "KeyFrameCollection.get_keyframe_by_id": {
            "name": "get_keyframe_by_id",
            "location": 30,
            "return": [
                "bool",
                "Tuple[float, float]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "keyframe_id": [
                    "str"
                ]
            }
        },
        "KeyFrameCollection.add_face": {
            "name": "add_face",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "keyframe_id": [
                    "str"
                ],
                "face_id": [
                    "str"
                ]
            }
        },
        "KeyFrameCollection.delete_keyframe": {
            "name": "delete_keyframe",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "keyframe_id": [
                    "str"
                ]
            }
        },
        "KeyFrameCollection.delete_all_keyframes": {
            "name": "delete_all_keyframes",
            "location": 60,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyFrameCollection.get_all_keyframes": {
            "name": "get_all_keyframes",
            "location": 68,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyFrameCollection.get_number_of_records": {
            "name": "get_number_of_records",
            "location": 71,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/data/video_collection.py": {
        "VideoCollection.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "VideoCollection.insert_new_video": {
            "name": "insert_new_video",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "video_extension": [
                    "Optional[str]"
                ]
            }
        },
        "VideoCollection.get_video_by_id": {
            "name": "get_video_by_id",
            "location": 24,
            "return": [
                "bool",
                "Tuple[float, float]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ]
            }
        },
        "VideoCollection.get_faces": {
            "name": "get_faces",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ]
            }
        },
        "VideoCollection.get_processed_videos": {
            "name": "get_processed_videos",
            "location": 37,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoCollection.get_videos_extensions": {
            "name": "get_videos_extensions",
            "location": 42,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "videos_ids": [
                    "List[str]"
                ]
            }
        },
        "VideoCollection.add_keyframe": {
            "name": "add_keyframe",
            "location": 48,
            "return": [
                "bool",
                "Optional[Any]",
                "int",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ],
                "keyframe_id": [
                    "str"
                ]
            }
        },
        "VideoCollection.add_face": {
            "name": "add_face",
            "location": 60,
            "return": [
                "bool",
                "Optional[Any]",
                "int",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ],
                "face_id": [
                    "str"
                ]
            }
        },
        "VideoCollection.add_faces": {
            "name": "add_faces",
            "location": 72,
            "return": [
                "bool",
                "Optional[Any]",
                "int",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ],
                "face_ids": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "VideoCollection.update_status": {
            "name": "update_status",
            "location": 80,
            "return": [
                "bool",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ],
                "new_status": [
                    "bool"
                ]
            }
        },
        "VideoCollection.delete_video": {
            "name": "delete_video",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ]
            }
        },
        "VideoCollection.delete_all_videos": {
            "name": "delete_all_videos",
            "location": 101,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoCollection.get_all_video": {
            "name": "get_all_video",
            "location": 109,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoCollection.get_number_of_records": {
            "name": "get_number_of_records",
            "location": 114,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/data/__init__.py": {},
    "vynd_api-master/vynd_api/entities/keyframe.py": {
        "KeyFrame.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keyframe_image": [
                    "numpy.ndarray",
                    "str"
                ],
                "timestamp": [
                    "Optional[int]"
                ]
            }
        },
        "KeyFrame.__save_json_image": {
            "name": "__save_json_image",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "keyframe_image": [
                    "str",
                    "dict",
                    "Optional[List[str]]",
                    "List[AnyStr]",
                    "bool",
                    "int"
                ]
            }
        },
        "KeyFrame.__process_keyframe_image": {
            "name": "__process_keyframe_image",
            "location": 30,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "keyframe_image": [
                    "bytes",
                    "dict",
                    "bool"
                ]
            }
        },
        "KeyFrame.__get_image": {
            "name": "__get_image",
            "location": 38,
            "return": [
                "int",
                "tuple",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyFrame.__set_image": {
            "name": "__set_image",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image": [
                    "numpy.ndarray",
                    "Union[str, IO[bytes]]"
                ]
            }
        },
        "KeyFrame.__get_base64_image": {
            "name": "__get_base64_image",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyFrame.__set_base64_image": {
            "name": "__set_base64_image",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "str",
                    "bytes",
                    "Tuple[List[str], List[str]]",
                    "bool",
                    "List[numpy.ndarray]"
                ]
            }
        },
        "KeyFrame.timestamp": {
            "name": "timestamp",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/entities/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ]
            }
        },
        "User.id": {
            "name": "id",
            "location": 8,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/entities/video.py": {
        "Video.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_frames": [
                    "List[vynd_api.entities.keyframe.KeyFrame]"
                ]
            }
        },
        "Video.add_keyframe": {
            "name": "add_keyframe",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keyframe_id": [
                    "str"
                ]
            }
        },
        "Video.add_face": {
            "name": "add_face",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "face_id": [
                    "str"
                ]
            }
        },
        "Video.video_id": {
            "name": "video_id",
            "location": 52,
            "return": [
                "",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "Video.key_frames": {
            "name": "key_frames",
            "location": 36,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.is_processed": {
            "name": "is_processed",
            "location": 56,
            "return": [
                "",
                "bool",
                "typing.Mapping",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "List[str]",
                    "float",
                    "Callable[[object], Any]"
                ]
            }
        },
        "Video.key_frames_ids": {
            "name": "key_frames_ids",
            "location": 44,
            "return": [
                "str",
                "int",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.faces_ids": {
            "name": "faces_ids",
            "location": 48,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/entities/__init__.py": {},
    "vynd_api-master/vynd_api/facedetection/bounding_box.py": {
        "BoundingBox.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coordinates": [
                    "Tuple[(int, int, int, int)]"
                ],
                "confidence": [
                    "float"
                ]
            }
        },
        "BoundingBox.coordinates": {
            "name": "coordinates",
            "location": 14,
            "return": [
                "str",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.confidence": {
            "name": "confidence",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/facedetection/cnn_face_detector.py": {
        "CNNDlibDetector.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset_value": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CNNDlibDetector.detect": {
            "name": "detect",
            "location": 32,
            "return": [
                "vynd_api.facedetection.face_detection_results.FaceDetectionResults"
            ],
            "arguments": {
                "self": [],
                "keyframe": [
                    "vynd_api.entities.keyframe.KeyFrame"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facedetection/faced.py": {
        "FacedDetector.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minimum_confidence": [
                    "float"
                ],
                "offset_value": [
                    "float"
                ],
                "pad_value": [
                    "int"
                ]
            }
        },
        "FacedDetector.detect": {
            "name": "detect",
            "location": 32,
            "return": [
                "vynd_api.facedetection.face_detection_results.FaceDetectionResults"
            ],
            "arguments": {
                "self": [],
                "keyframe": [
                    "vynd_api.entities.keyframe.KeyFrame"
                ]
            }
        },
        "FacedDetector.__pad_image": {
            "name": "__pad_image",
            "location": 67,
            "return": [
                "Optional[int]",
                "int",
                "numpy.ndarray",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "numpy.ndarray",
                    "list[str]",
                    "None",
                    "List[str]",
                    "bool",
                    "Optional[numpy.ndarray]"
                ],
                "pad_value": [
                    "int",
                    "numpy.ndarray",
                    "list[str]",
                    "None",
                    "List[str]",
                    "bool",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "FacedDetector.__rectangle_to_square_image": {
            "name": "__rectangle_to_square_image",
            "location": 76,
            "return": [
                "int",
                "str",
                "Callable",
                "numpy.ndarray",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "FacedDetector.__preprocess_predicted_bboxes": {
            "name": "__preprocess_predicted_bboxes",
            "location": 99,
            "return": [
                "list[BoundingBox]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "predicted_bboxes": [
                    "list[str]",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "image_width": [
                    "int",
                    "bool",
                    "bytes",
                    "numpy.ndarray"
                ],
                "image_height": [
                    "int",
                    "bool",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "FacedDetector.__get_face_images": {
            "name": "__get_face_images",
            "location": 121,
            "return": [
                "list[]",
                "bool",
                "str",
                "Optional[str]",
                "dict",
                "list"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "numpy.array",
                    "list[B]",
                    "int",
                    "numpy.ndarray",
                    "tuple[typing.Union[int,int,int]]",
                    "List[bounding_box.BoundingBox]",
                    "Tuple[int, int, int]"
                ],
                "final_bboxes": [
                    "list[B]",
                    "str",
                    "List[bounding_box.BoundingBox]",
                    "int",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "FacedDetector.__align_faces": {
            "name": "__align_faces",
            "location": 127,
            "return": [
                "bool",
                "int",
                "str",
                "IO[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "numpy.ndarray"
                ],
                "bboxes": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "FacedDetector.__bbox_to_rect": {
            "name": "__bbox_to_rect",
            "location": 132,
            "return": [
                "list[]",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "list[B]",
                    "str",
                    "List[bounding_box.BoundingBox]",
                    "int",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "bboxes": [
                    "list[B]",
                    "str",
                    "List[bounding_box.BoundingBox]",
                    "numpy.ndarray",
                    "numpy.array",
                    "int"
                ]
            }
        },
        "FacedDetector.__get_face_images.get_face": {
            "name": "get_face",
            "location": 122,
            "return": [
                "str",
                "List[int]",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "bbox": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facedetection/face_detection_results.py": {
        "FaceDetectionResults.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "vynd_api.facedetection.face_detection_status.FaceDetectionStatus"
                ],
                "detected_faces": [
                    "List[DetectedFace]"
                ]
            }
        },
        "FaceDetectionResults.detected_faces": {
            "name": "detected_faces",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceDetectionResults.status": {
            "name": "status",
            "location": 32,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/facedetection/face_detection_status.py": {},
    "vynd_api-master/vynd_api/facedetection/hog_detector.py": {
        "HogDetector.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset_value": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "HogDetector.detect": {
            "name": "detect",
            "location": 27,
            "return": [
                "vynd_api.facedetection.face_detection_results.FaceDetectionResults"
            ],
            "arguments": {
                "self": [],
                "keyframe": [
                    "vynd_api.entities.keyframe.KeyFrame"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facedetection/image_face_detector.py": {
        "ImageFaceDetector.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minimum_confidence": [
                    "float",
                    "int",
                    "Union[str, float]",
                    "bool"
                ],
                "offset_value": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "ImageFaceDetector.detect": {
            "name": "detect",
            "location": 16,
            "return": [
                "vynd_api.facedetection.face_detection_results.FaceDetectionResults"
            ],
            "arguments": {
                "self": [],
                "keyframe": [
                    "vynd_api.entities.keyframe.KeyFrame"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facedetection/video_face_detector.py": {
        "VideoFaceDetector.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_face_detector": [
                    "vynd_api.facedetection.image_face_detector.ImageFaceDetector"
                ]
            }
        },
        "VideoFaceDetector.get_detected_results": {
            "name": "get_detected_results",
            "location": 14,
            "return": [
                "List[vynd_api.facedetection.face_detection_results.FaceDetectionResults]"
            ],
            "arguments": {
                "self": [],
                "key_frames": [
                    "List[vynd_api.entities.keyframe.KeyFrame]"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facedetection/yolov3_detector.py": {
        "YOLOv3Detector.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset_value": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "YOLOv3Detector.__init_detector": {
            "name": "__init_detector",
            "location": 37,
            "return": [
                "int",
                "str",
                "bool",
                "list[]",
                "float"
            ],
            "arguments": {
                "self": [],
                "weights_path": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "cfg_path": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "YOLOv3Detector.__get_real_path": {
            "name": "__get_real_path",
            "location": 43,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "YOLOv3Detector.detect": {
            "name": "detect",
            "location": 48,
            "return": [
                "vynd_api.facedetection.face_detection_results.FaceDetectionResults"
            ],
            "arguments": {
                "self": [],
                "keyframe": [
                    "vynd_api.entities.keyframe.KeyFrame"
                ]
            }
        },
        "YOLOv3Detector.__get_outputs_names": {
            "name": "__get_outputs_names",
            "location": 92,
            "return": [
                "list[typing.Union[str,tuple[typing.Union[str,typing.Any]]]]",
                "Set[str]",
                "str",
                "List[str]",
                "Iterable[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YOLOv3Detector.__post_process": {
            "name": "__post_process",
            "location": 100,
            "return": [
                "numpy.ndarray",
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "float",
                    "int",
                    "List[int]",
                    "list[int]",
                    "tuple",
                    "tuple[]"
                ],
                "outs": [
                    "typing.Any",
                    "Optional[Any]",
                    "None",
                    "int",
                    "Optional[int]",
                    "bool",
                    "str",
                    "typing.Sequence[typing.Sequence[str]]",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "typing.Iterable[]",
                    "Iterable"
                ],
                "conf_threshold": [
                    "str",
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "numpy.ndarray"
                ],
                "nms_threshold": [
                    "str",
                    "int",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "YOLOv3Detector.__refined_box": {
            "name": "__refined_box",
            "location": 141,
            "return": [
                "tuple[typing.Union[int,float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "bool",
                    "str",
                    "raiden.utils.TokenAmount"
                ],
                "top": [
                    "int",
                    "str",
                    "Iterable[int]"
                ],
                "width": [
                    "int",
                    "float",
                    "str"
                ],
                "height": [
                    "int",
                    "numpy.ndarray",
                    "float",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "str"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facedetection/__init__.py": {},
    "vynd_api-master/vynd_api/facedetection/facealignment/face_alignment.py": {
        "FaceAlignment.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceAlignment.get_aligned_faces": {
            "name": "get_aligned_faces",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "original_image": [
                    "np.ndarray"
                ],
                "rectangles": [
                    "list"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facedetection/facealignment/__init__.py": {},
    "vynd_api-master/vynd_api/facerecognition/video_face_recognizer.py": {
        "VideoFaceRecognizer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_faces_embedder": [
                    "vynd_api.facerecognition.faceembedding.image_faces_embedder.ImageFacesEmbedder"
                ],
                "face_collection": [
                    "int"
                ]
            }
        },
        "VideoFaceRecognizer.recognize": {
            "name": "recognize",
            "location": 20,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "face_detection_results": [
                    "List[vynd_api.facedetection.face_detection_results.FaceDetectionResults]"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facerecognition/__init__.py": {},
    "vynd_api-master/vynd_api/facerecognition/faceembedding/face_embedding.py": {},
    "vynd_api-master/vynd_api/facerecognition/faceembedding/face_embedding_results.py": {},
    "vynd_api-master/vynd_api/facerecognition/faceembedding/image_faces_embedder.py": {
        "ImageFacesEmbedder.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFacesEmbedder.faces_to_embeddings": {
            "name": "faces_to_embeddings",
            "location": 16,
            "return": [
                "List[vynd_api.facerecognition.faceembedding.face_embedding.FaceEmbedding]"
            ],
            "arguments": {
                "self": [],
                "detection_results": [
                    "vynd_api.facedetection.face_detection_results.FaceDetectionResults"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facerecognition/faceembedding/vggface_embedder.py": {
        "VGGFaceEmbedder.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGFaceEmbedder.faces_to_embeddings": {
            "name": "faces_to_embeddings",
            "location": 26,
            "return": [
                "List[vynd_api.facerecognition.faceembedding.face_embedding.FaceEmbedding]"
            ],
            "arguments": {
                "self": [],
                "detection_results": [
                    "vynd_api.facedetection.face_detection_results.FaceDetectionResults"
                ]
            }
        },
        "VGGFaceEmbedder.__open_session": {
            "name": "__open_session",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGFaceEmbedder.__close_session": {
            "name": "__close_session",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGFaceEmbedder.__initialize_tensors": {
            "name": "__initialize_tensors",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGFaceEmbedder.image_to_embedding": {
            "name": "image_to_embedding",
            "location": 55,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "np.ndarray"
                ]
            }
        },
        "VGGFaceEmbedder.__preprocess_image": {
            "name": "__preprocess_image",
            "location": 65,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facerecognition/faceembedding/__init__.py": {},
    "vynd_api-master/vynd_api/facerecognition/facegrouping/face_grouping.py": {
        "_get_face_connections": {
            "name": "_get_face_connections",
            "location": 5,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "face_embeddings": [
                    "List[vynd_api.facerecognition.faceembedding.face_embedding.FaceEmbedding]"
                ],
                "is_connected_fn": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "group_faces": {
            "name": "group_faces",
            "location": 15,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "face_embeddings": [
                    "List[vynd_api.facerecognition.faceembedding.face_embedding.FaceEmbedding]"
                ],
                "is_connected_fn": [
                    "bool",
                    "dict",
                    "str",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "group_faces.get_group": {
            "name": "get_group",
            "location": 19,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "i": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facerecognition/facegrouping/__init__.py": {},
    "vynd_api-master/vynd_api/facerecognition/facematching/face_match_status.py": {},
    "vynd_api-master/vynd_api/facerecognition/facematching/image_faces_matcher.py": {
        "GroupMatch.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "face_embeddings": [
                    "List[vynd_api.facerecognition.faceembedding.face_embedding.FaceEmbedding]"
                ],
                "match_status": [
                    "vynd_api.facerecognition.facematching.face_match_status.FaceMatchStatus"
                ],
                "matched_id": [
                    "Optional[str]"
                ]
            }
        },
        "ImageFacesMatcher.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "face_collection": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ImageFacesMatcher.match_faces": {
            "name": "match_faces",
            "location": 31,
            "return": [
                "List[GroupMatch]"
            ],
            "arguments": {
                "self": [],
                "face_embeddings": [
                    "List[vynd_api.facerecognition.faceembedding.face_embedding.FaceEmbedding]"
                ]
            }
        },
        "ImageFacesMatcher.__get_group_matches": {
            "name": "__get_group_matches",
            "location": 45,
            "return": [
                "list[]",
                "Optional[str]",
                "str",
                "list",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "all_faces": [
                    "bool",
                    "str"
                ]
            }
        },
        "ImageFacesMatcher.__get_group_matches.find_most_similar_face": {
            "name": "find_most_similar_face",
            "location": 47,
            "return": [
                "int",
                "None",
                "str"
            ],
            "arguments": {
                "group": [
                    "List[str]",
                    "bool",
                    "List[object]",
                    "Sized",
                    "Optional[List]",
                    "str"
                ]
            }
        },
        "ImageFacesMatcher.__get_group_matches.get_group_match": {
            "name": "get_group_match",
            "location": 61,
            "return": [
                "GroupMatch",
                "str",
                "Dict[str, numpy.ndarray]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "group": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/facerecognition/facematching/__init__.py": {},
    "vynd_api-master/vynd_api/models/download_vggface_model.py": {
        "download_vggface_model": {
            "name": "download_vggface_model",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vgg_exist": {
            "name": "vgg_exist",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "vynd_api-master/vynd_api/search/image_search.py": {
        "search_by_image": {
            "name": "search_by_image",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ],
                "face_collection": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_detection_and_recognition.py": {},
    "vynd_api-master/vynd_api/test/test_detect_and_crop.py": {
        "TestDetectAndCrop.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDetectAndCrop.test_detect_and_crop_from_local": {
            "name": "test_detect_and_crop_from_local",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_faced_detector.py": {
        "TestFacedDetector.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFacedDetector.test_non_rgb_input_status": {
            "name": "test_non_rgb_input_status",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFacedDetector.test_non_rgb_input_bboxes": {
            "name": "test_non_rgb_input_bboxes",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFacedDetector.test_valid_input_status": {
            "name": "test_valid_input_status",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFacedDetector.test_valid_input_bboxes": {
            "name": "test_valid_input_bboxes",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFacedDetector.test_valid_input_cropped_faces": {
            "name": "test_valid_input_cropped_faces",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFacedDetector.test_valid_input_cropped_faces.get_shape": {
            "name": "get_shape",
            "location": 90,
            "return": [
                "tuple[int]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "bbox": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_face_collection.py": {
        "TestFaceCollection.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFaceCollection.test_insert_face": {
            "name": "test_insert_face",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_face_grouping.py": {
        "get_images": {
            "name": "get_images",
            "location": 18,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {}
        },
        "save_results": {
            "name": "save_results",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "groups": [
                    "str",
                    "bool",
                    "list[str]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "TestFaceGrouping.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFaceGrouping.test_correct_grouping": {
            "name": "test_correct_grouping",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_image_face_matcher.py": {
        "TestImageFaceMatcher.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImageFaceMatcher.tearDown": {
            "name": "tearDown",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImageFaceMatcher.insert_new_face_in_db": {
            "name": "insert_new_face_in_db",
            "location": 44,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "img_path": [
                    "str"
                ]
            }
        },
        "TestImageFaceMatcher.test_image_face_matcher": {
            "name": "test_image_face_matcher",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_image_search.py": {
        "TestSearchByImage.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchByImage.tearDown": {
            "name": "tearDown",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchByImage.get_key_frames": {
            "name": "get_key_frames",
            "location": 36,
            "return": [
                "List[vynd_api.entities.keyframe.KeyFrame]"
            ],
            "arguments": {
                "self": [],
                "images": [
                    "str"
                ]
            }
        },
        "TestSearchByImage.test_union_faces_found": {
            "name": "test_union_faces_found",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchByImage.test_no_faces_found": {
            "name": "test_no_faces_found",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_keyframe_collection.py": {
        "TestKeyFrameCollection.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeyFrameCollection.test_keyframe_collection": {
            "name": "test_keyframe_collection",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_process_key_frames.py": {
        "TestProcessKeyFrames.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessKeyFrames.test_invalid_video_id": {
            "name": "test_invalid_video_id",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessKeyFrames.test_invalid_keyframes_type": {
            "name": "test_invalid_keyframes_type",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessKeyFrames.test_missing_form": {
            "name": "test_missing_form",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessKeyFrames.test_success": {
            "name": "test_success",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessKeyFrames.__make_post_request": {
            "name": "__make_post_request",
            "location": 79,
            "return": [
                "None",
                "bool",
                "dict",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None",
                    "dict",
                    "List[str]",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_utils.py": {
        "get_img_from_filename": {
            "name": "get_img_from_filename",
            "location": 11,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "get_all_local_images": {
            "name": "get_all_local_images",
            "location": 18,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {
                "dir": [
                    "str"
                ]
            }
        },
        "get_all_cropped_images": {
            "name": "get_all_cropped_images",
            "location": 32,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {}
        },
        "save_img": {
            "name": "save_img",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": [
                    "str"
                ],
                "image": [
                    "str",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "PIL.Image.Image",
                    "Tuple[int, int]"
                ],
                "img_name": [
                    "str"
                ]
            }
        },
        "url_to_img": {
            "name": "url_to_img",
            "location": 52,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "url_to_base64": {
            "name": "url_to_base64",
            "location": 57,
            "return": [
                "bytes"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_vggface_embedder.py": {
        "TestVGGFaceRecognizer.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVGGFaceRecognizer.test_vggface_recognizer": {
            "name": "test_vggface_recognizer",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_video_collection.py": {
        "TestVideoCollection.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVideoCollection.test_video_collection": {
            "name": "test_video_collection",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_video_face_detector.py": {
        "TestVideoFaceDetector.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVideoFaceDetector.test_video_face_detector": {
            "name": "test_video_face_detector",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/test/test_video_processor.py": {
        "TestVideoProcessor.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVideoProcessor.tearDown": {
            "name": "tearDown",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVideoProcessor.get_key_frames": {
            "name": "get_key_frames",
            "location": 39,
            "return": [
                "List[vynd_api.entities.keyframe.KeyFrame]"
            ],
            "arguments": {
                "self": [],
                "images": [
                    "str"
                ]
            }
        },
        "TestVideoProcessor.test_new_faces_inserted": {
            "name": "test_new_faces_inserted",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVideoProcessor.test_new_matches_found": {
            "name": "test_new_matches_found",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vynd_api-master/vynd_api/test/__init__.py": {},
    "vynd_api-master/vynd_api/utils/image_utils.py": {
        "base64_to_rgb": {
            "name": "base64_to_rgb",
            "location": 10,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "base64_text": [
                    "str",
                    "int"
                ]
            }
        },
        "rgb_to_base64": {
            "name": "rgb_to_base64",
            "location": 16,
            "return": [
                "bytes"
            ],
            "arguments": {
                "image": [
                    "int",
                    "PIL.Image",
                    "float",
                    "typing.Sized",
                    "Sized"
                ]
            }
        },
        "resize_image": {
            "name": "resize_image",
            "location": 19,
            "return": [
                "str",
                "dict",
                "tuple"
            ],
            "arguments": {
                "image": [
                    "int",
                    "typing.Callable[T, None]",
                    "numpy.ndarray",
                    "Callable[[T], None]"
                ],
                "new_shape": [
                    "tuple[int]",
                    "int",
                    "numpy.ndarray",
                    "Callable[[T], None]"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/utils/numpy_encoder.py": {
        "NumpyEncoder.default": {
            "name": "default",
            "location": 6,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/utils/recognition_utils.py": {
        "euclidian_distance": {
            "name": "euclidian_distance",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "embeddings1": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "embeddings2": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "cosine_similarity_distance": {
            "name": "cosine_similarity_distance",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "embeddings1": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "embeddings2": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/utils/vggface2_utlis.py": {
        "load_model": {
            "name": "load_model",
            "location": 8,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[List[int]]"
            ],
            "arguments": {
                "graph_path": [
                    "str"
                ]
            }
        },
        "normalize_image": {
            "name": "normalize_image",
            "location": 22,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/utils/__init__.py": {},
    "vynd_api-master/vynd_api/videoprocessing/video_processing_results.py": {},
    "vynd_api-master/vynd_api/videoprocessing/video_processor.py": {
        "VideoProcessor.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "face_collection": [
                    "bool",
                    "float"
                ],
                "keyframe_collection": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "video_collection": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "VideoProcessor.is_invalid_id": {
            "name": "is_invalid_id",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ]
            }
        },
        "VideoProcessor.__insert_keyframes": {
            "name": "__insert_keyframes",
            "location": 43,
            "return": [
                "list[]",
                "str",
                "Iterable[str]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "int",
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "keyframes": [
                    "str",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "VideoProcessor.__add_keyframes_to_video": {
            "name": "__add_keyframes_to_video",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int",
                    "None"
                ],
                "keyframe_ids": [
                    "str"
                ]
            }
        },
        "VideoProcessor.process": {
            "name": "process",
            "location": 52,
            "return": [
                "vynd_api.videoprocessing.video_processing_results.VideoProcessingResult"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ],
                "keyframes": [
                    "List[vynd_api.entities.keyframe.KeyFrame]"
                ]
            }
        },
        "VideoProcessor.__update_db": {
            "name": "__update_db",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "int",
                    "None",
                    "Optional[int]",
                    "raiden.utils.ChainID"
                ],
                "group_matches": [
                    "int",
                    "None",
                    "Optional[int]",
                    "raiden.utils.ChainID"
                ]
            }
        },
        "VideoProcessor.__add_new_faces": {
            "name": "__add_new_faces",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "typing.Any",
                    "Set[int]",
                    "None",
                    "set[int]"
                ],
                "group_matches": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "VideoProcessor.__get_new_face": {
            "name": "__get_new_face",
            "location": 91,
            "return": [
                "dict[typing.Text, list[typing.Union[int,str,None]]]",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "group_match": [
                    "int"
                ]
            }
        },
        "VideoProcessor.__add_video_to_faces_assocs": {
            "name": "__add_video_to_faces_assocs",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "int",
                    "bool",
                    "utils.zeroexutils.ZxSignedOrder"
                ],
                "group_matches": [
                    "int",
                    "bool"
                ]
            }
        },
        "VideoProcessor.__add_faces_to_video_assocs": {
            "name": "__add_faces_to_video_assocs",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ],
                "group_matches": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "vynd_api-master/vynd_api/videoprocessing/__init__.py": {}
}
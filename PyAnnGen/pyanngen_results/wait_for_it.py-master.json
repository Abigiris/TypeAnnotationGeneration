{
    "wait_for_it.py-master/test_wait_for_it.py": {
        "test_unreachable_server": {
            "name": "test_unreachable_server",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "httpserver": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_requests": {
            "name": "test_requests",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "httpserver": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_urllib": {
            "name": "test_urllib",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "float"
                ],
                "httpserver": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "wait_for_it.py-master/wait_for_it.py": {
        "check_service": {
            "name": "check_service",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "service_url": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "wait_for_service": {
            "name": "wait_for_service",
            "location": 42,
            "return": [
                "Tuple[(bool, float)]"
            ],
            "arguments": {
                "service_url": [
                    "int",
                    "str"
                ],
                "timeout": [
                    "int",
                    "Optional[str]",
                    "Iterator[int]",
                    "Optional[bool]",
                    "float"
                ],
                "retry_interval": [
                    "int",
                    "str"
                ]
            }
        },
        "create_parser": {
            "name": "create_parser",
            "location": 69,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 92,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    }
}
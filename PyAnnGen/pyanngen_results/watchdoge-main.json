{
    "watchdoge-main/api/api/app.py": {
        "shutdown_event": {
            "name": "shutdown_event",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_user": {
            "name": "create_user",
            "location": 59,
            "return": [
                "bool",
                "models.User",
                "transfer.models.Scope",
                "zerver.models.Realm"
            ],
            "arguments": {
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "bool",
                    "asgard.models.user.User"
                ],
                "db": [
                    "str",
                    "zerver.models.UserProfile",
                    "bool",
                    "asgard.models.user.User"
                ]
            }
        },
        "read_users": {
            "name": "read_users",
            "location": 67,
            "return": [
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture",
                "asgard.models.user.User"
            ],
            "arguments": {
                "skip": [
                    "sqlalchemy.orm.session.Session",
                    "ajapaik.ajapaik.models.Profile",
                    "daylighdb.models.User",
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ],
                "limit": [
                    "sqlalchemy.orm.session.Session",
                    "ajapaik.ajapaik.models.Profile",
                    "daylighdb.models.User",
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session",
                    "ajapaik.ajapaik.models.Profile",
                    "daylighdb.models.User",
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ]
            }
        },
        "get_balances": {
            "name": "get_balances",
            "location": 73,
            "return": [
                "str",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "skip": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "dict",
                    "sqlalchemy.orm.Session"
                ],
                "limit": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "dict",
                    "sqlalchemy.orm.Session"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "dict",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "get_assets": {
            "name": "get_assets",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "skip": [
                    "str",
                    "Callable",
                    "list",
                    "int",
                    "megatron.models.PlatformUser",
                    "django.contrib.auth.models.User"
                ],
                "limit": [
                    "str",
                    "Callable",
                    "list",
                    "int",
                    "megatron.models.PlatformUser",
                    "django.contrib.auth.models.User"
                ],
                "db": [
                    "str",
                    "Callable",
                    "list",
                    "int",
                    "megatron.models.PlatformUser",
                    "django.contrib.auth.models.User"
                ]
            }
        },
        "get_symbols": {
            "name": "get_symbols",
            "location": 83,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "skip": [
                    "bool",
                    "recidiviz.persistence.database.session.Session",
                    "Callable[..., Awaitable[Any]]",
                    "Set[str]",
                    "sqlalchemy.orm.Session",
                    "core.models.GroupingKey",
                    "Optional[str]"
                ],
                "limit": [
                    "bool",
                    "recidiviz.persistence.database.session.Session",
                    "Callable[..., Awaitable[Any]]",
                    "Set[str]",
                    "sqlalchemy.orm.Session",
                    "core.models.GroupingKey",
                    "Optional[str]"
                ],
                "db": [
                    "bool",
                    "recidiviz.persistence.database.session.Session",
                    "Callable[..., Awaitable[Any]]",
                    "Set[str]",
                    "sqlalchemy.orm.Session",
                    "core.models.GroupingKey",
                    "Optional[str]"
                ]
            }
        },
        "read_user": {
            "name": "read_user",
            "location": 88,
            "return": [
                "bob_emploi.frontend.api.diagnostic_pb2.DiagnosticCategory",
                "bool",
                "str",
                "daylighdb.models.Photo",
                "daylighdb.models.User"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "db": [
                    "str",
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ]
            }
        },
        "create_item_for_user": {
            "name": "create_item_for_user",
            "location": 96,
            "return": [
                "str",
                "models.User"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "schemas.ItemCreate",
                    "str"
                ],
                "item": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "schemas.ItemCreate",
                    "str"
                ],
                "db": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "schemas.ItemCreate",
                    "str"
                ]
            }
        },
        "read_items": {
            "name": "read_items",
            "location": 103,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "Iterable[str]"
            ],
            "arguments": {
                "skip": [
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]",
                    "Optional[str]"
                ],
                "limit": [
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]",
                    "Optional[str]"
                ],
                "db": [
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]",
                    "Optional[str]"
                ]
            }
        },
        "ping": {
            "name": "ping",
            "location": 108,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {}
        }
    },
    "watchdoge-main/api/api/crud.py": {
        "get_user": {
            "name": "get_user",
            "location": 6,
            "return": [
                "str",
                "Callable[[Dict], None]",
                "int"
            ],
            "arguments": {
                "db": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "grouper.models.base.session.Session",
                    "Optional[int]"
                ],
                "user_id": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "grouper.models.base.session.Session",
                    "Optional[int]"
                ]
            }
        },
        "get_user_by_email": {
            "name": "get_user_by_email",
            "location": 10,
            "return": [
                "bool",
                "str",
                "Callable",
                "List[domain.models.User]",
                "Callable[..., None]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "zerver.models.UserProfile",
                    "zerver.models.Message"
                ],
                "email": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "zerver.models.UserProfile",
                    "zerver.models.Message"
                ]
            }
        },
        "get_users": {
            "name": "get_users",
            "location": 14,
            "return": [
                "str",
                "Callable[[Dict], None]",
                "bool"
            ],
            "arguments": {
                "db": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "zerver.models.UserGroup",
                    "zerver.models.UserProfile"
                ],
                "skip": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "zerver.models.UserGroup",
                    "zerver.models.UserProfile"
                ],
                "limit": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "zerver.models.UserGroup",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 18,
            "return": [
                "bool",
                "Tuple[int, int]",
                "Set[models.Route]"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session"
                ],
                "user": [
                    "zerver.models.UserProfile",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "sqlalchemy.orm.Session",
                    "str",
                    "users.models.JustfixUser"
                ]
            }
        },
        "get_items": {
            "name": "get_items",
            "location": 27,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "db": [
                    "int",
                    "sqlalchemy.orm.Session"
                ],
                "skip": [
                    "int",
                    "sqlalchemy.orm.Session"
                ],
                "limit": [
                    "int",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "create_user_item": {
            "name": "create_user_item",
            "location": 31,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Set[models.Route]",
                "bool"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "models.user.PostingCard",
                    "list"
                ],
                "item": [
                    "str",
                    "sqlalchemy.exdeclarative.api.DeclarativeMeta",
                    "schemas.ItemCreate",
                    "int",
                    "bool",
                    "tracim.models.data.Workspace"
                ],
                "user_id": [
                    "str",
                    "sqlalchemy.exdeclarative.api.DeclarativeMeta",
                    "schemas.ItemCreate",
                    "int",
                    "bool",
                    "tracim.models.data.Workspace"
                ]
            }
        }
    },
    "watchdoge-main/api/api/__init__.py": {},
    "watchdoge-main/api/api/clients/binance_client.py": {
        "BinanceClient.__new__": {
            "name": "__new__",
            "location": 13,
            "return": [
                "str",
                "set[]",
                "bool",
                "baseplate.lib.metrics.Client",
                "Client"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinanceClient.__getattr__": {
            "name": "__getattr__",
            "location": 18,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str"
                ]
            }
        },
        "BinanceClient.__setattr__": {
            "name": "__setattr__",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str"
                ]
            }
        }
    },
    "watchdoge-main/api/api/clients/__init__.py": {},
    "watchdoge-main/api/api/helpers/base.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.configuration": {
            "name": "configuration",
            "location": 11,
            "return": [
                "",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "watchdoge-main/api/api/helpers/seeder.py": {
        "load_seed_data": {
            "name": "load_seed_data",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "watchdoge-main/api/api/helpers/symbol_helper.py": {
        "SymbolHelper.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ]
            }
        },
        "SymbolHelper.all_assets": {
            "name": "all_assets",
            "location": 15,
            "return": [
                "str",
                "Set[str]",
                "List[audiopyle.lib.models.plugin.VampyPlugin]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolHelper.all_symbols": {
            "name": "all_symbols",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolHelper.usd_symbols": {
            "name": "usd_symbols",
            "location": 23,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolHelper.refresh_assets": {
            "name": "refresh_assets",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolHelper.fetch_assets": {
            "name": "fetch_assets",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolHelper.save_assets": {
            "name": "save_assets",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolHelper.refresh_symbols": {
            "name": "refresh_symbols",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolHelper.fetch_symbols": {
            "name": "fetch_symbols",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolHelper.save_symbols": {
            "name": "save_symbols",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watchdoge-main/api/api/helpers/trade_downloader.py": {
        "Trade.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.create_csv_file": {
            "name": "create_csv_file",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "destination_dir": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "symbol": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Trade.get_record_id_from_df": {
            "name": "get_record_id_from_df",
            "location": 18,
            "return": [
                "list",
                "str",
                "bytes",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "list[]",
                    "str",
                    "list",
                    "bytes",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Trade.get_1m_weight_usage": {
            "name": "get_1m_weight_usage",
            "location": 21,
            "return": [
                "int",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "weight_usage": [
                    "str",
                    "bool"
                ]
            }
        },
        "Trade.add_local_time": {
            "name": "add_local_time",
            "location": 24,
            "return": [
                "list[typing.Union[int,typing.Text,list[]]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "Trade.download_trade_by_symbol": {
            "name": "download_trade_by_symbol",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str"
                ]
            }
        },
        "Trade.download_trades": {
            "name": "download_trades",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol_list": [
                    "Sequence[Optional[str]]",
                    "List[T]",
                    "str"
                ]
            }
        }
    },
    "watchdoge-main/api/api/helpers/__init__.py": {},
    "watchdoge-main/api/api/models/asset.py": {},
    "watchdoge-main/api/api/models/balance.py": {},
    "watchdoge-main/api/api/models/base.py": {
        "get_db": {
            "name": "get_db",
            "location": 23,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "watchdoge-main/api/api/models/daily_balance.py": {},
    "watchdoge-main/api/api/models/item.py": {},
    "watchdoge-main/api/api/models/symbol.py": {},
    "watchdoge-main/api/api/models/ticker.py": {},
    "watchdoge-main/api/api/models/trade.py": {},
    "watchdoge-main/api/api/models/user.py": {},
    "watchdoge-main/api/api/models/__init__.py": {},
    "watchdoge-main/api/api/sandbox/dal.py": {},
    "watchdoge-main/api/api/sandbox/fetchers/base_fetcher.py": {
        "BaseFetcher.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFetcher.run": {
            "name": "run",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFetcher.sync": {
            "name": "sync",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFetcher.get_user_balance": {
            "name": "get_user_balance",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFetcher.get_trades": {
            "name": "get_trades",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watchdoge-main/api/api/sandbox/fetchers/binance_fetcher.py": {
        "BinanceFetcher.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinanceFetcher._on_trade": {
            "name": "_on_trade",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "bool",
                    "typing.Type",
                    "Type[BaseException]",
                    "int"
                ]
            }
        },
        "BinanceFetcher._on_agg_trade": {
            "name": "_on_agg_trade",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "bool",
                    "typing.Type",
                    "Type[BaseException]",
                    "int"
                ]
            }
        }
    },
    "watchdoge-main/api/api/sandbox/fetchers/binance_v2_fetcher.py": {
        "process_m_message": {
            "name": "process_m_message",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "tuple['cirq.Qid']",
                    "int",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "BinanceV2Fetcher.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watchdoge-main/api/api/sandbox/fetchers/get_historical_klines.py": {
        "get_historical_klines": {
            "name": "get_historical_klines",
            "location": 10,
            "return": [
                "list[]",
                "str",
                "List[int]",
                "bytes",
                "int"
            ],
            "arguments": {
                "symbol": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "None",
                    "Optional[float]",
                    "list[str]",
                    "int",
                    "float"
                ],
                "interval": [
                    "str",
                    "bool",
                    "int"
                ],
                "start_str": [
                    "list[str]",
                    "List[str]",
                    "int",
                    "None",
                    "Optional[List[str]]",
                    "bool"
                ],
                "end_str": [
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ]
            }
        }
    },
    "watchdoge-main/api/api/sandbox/fetchers/kraken_fetcher.py": {},
    "watchdoge-main/api/api/sandbox/fetchers/websocket.py": {
        "process_message": {
            "name": "process_message",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int",
                    "tuple['cirq.Qid']",
                    "Tuple['cirq.Qid']"
                ]
            }
        }
    },
    "watchdoge-main/api/api/sandbox/fetchers/__init__.py": {},
    "watchdoge-main/api/api/sandbox/websocket/main.py": {
        "read_root": {
            "name": "read_root",
            "location": 19,
            "return": [
                "str",
                "dict",
                "Optional[\"permissions_doc\"]",
                "Dict[str, Optional[str]]"
            ],
            "arguments": {
                "request": [
                    "Exception",
                    "aiohttp.web.Request",
                    "_models.Request"
                ]
            }
        }
    },
    "watchdoge-main/api/api/schemas/asset.py": {},
    "watchdoge-main/api/api/schemas/balance.py": {},
    "watchdoge-main/api/api/schemas/item.py": {},
    "watchdoge-main/api/api/schemas/symbol.py": {},
    "watchdoge-main/api/api/schemas/trade.py": {},
    "watchdoge-main/api/api/schemas/user.py": {},
    "watchdoge-main/api/api/schemas/__init__.py": {},
    "watchdoge-main/api/api/tests/__init__.py": {},
    "watchdoge-main/api/api/tests/binance_rest/account.py": {
        "hashing": {
            "name": "hashing",
            "location": 18,
            "return": [
                "list",
                "Optional[Union[str, Any]]",
                "str"
            ],
            "arguments": {
                "query_string": [
                    "str"
                ]
            }
        },
        "get_timestamp": {
            "name": "get_timestamp",
            "location": 22,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "dispatch_request": {
            "name": "dispatch_request",
            "location": 26,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "http_method": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]",
                    "Optional",
                    "typing.Optional[]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "send_signed_request": {
            "name": "send_signed_request",
            "location": 40,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "http_method": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "url_path": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "Optional['Directory']"
                ],
                "payload": [
                    "dict[, ]",
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Dict]"
                ]
            }
        }
    },
    "watchdoge-main/api/api/tests/clients/binance_client_test.py": {
        "TestBinanceClient.test_instantiate_two": {
            "name": "test_instantiate_two",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watchdoge-main/api/api/tests/clients/__init__.py": {},
    "watchdoge-main/api/api/tests/helpers/symbol_helper_test.py": {
        "TestSymbolHelper.test_fetch_symbols": {
            "name": "test_fetch_symbols",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSymbolHelper.test_load_assets": {
            "name": "test_load_assets",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watchdoge-main/api/api/tests/python_binance/account.py": {},
    "watchdoge-main/api/api/workers/account_worker.py": {},
    "watchdoge-main/api/api/workers/market_worker.py": {
        "MarketWorker.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "str",
                    "models.user.PostingCard"
                ],
                "client": [
                    "core.models.MyUser",
                    "core.models.Recipe"
                ],
                "db": [
                    "core.models.MyUser",
                    "core.models.Recipe"
                ]
            }
        }
    },
    "watchdoge-main/api/api/workers/__init__.py": {},
    "watchdoge-main/web/tests/test_web.py": {
        "test_version": {
            "name": "test_version",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "watchdoge-main/web/tests/__init__.py": {},
    "watchdoge-main/web/web/main.py": {
        "read_root": {
            "name": "read_root",
            "location": 15,
            "return": [
                "str",
                "dict",
                "Optional[\"permissions_doc\"]",
                "Dict[str, Optional[str]]"
            ],
            "arguments": {
                "request": [
                    "Exception",
                    "aiohttp.web.Request",
                    "_models.Request"
                ]
            }
        }
    },
    "watchdoge-main/web/web/__init__.py": {}
}
{
    "web-app-from-scratch-master/scratch/application.py": {
        "Router.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.add_route": {
            "name": "add_route",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "handler": [
                    "Callable[(..., scratch.response.Response)]"
                ]
            }
        },
        "Router.lookup": {
            "name": "lookup",
            "location": 37,
            "return": [
                "Optional[Callable[([scratch.request.Request], scratch.response.Response)]]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.add_route": {
            "name": "add_route",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "handler": [
                    "Callable[(..., scratch.response.Response)]"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "Application.route": {
            "name": "route",
            "location": 53,
            "return": [
                "Callable[([Callable[(..., scratch.response.Response)]], Callable[(..., scratch.response.Response)])]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "Application.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [
                "scratch.response.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "scratch.request.Request"
                ]
            }
        },
        "Application.route.decorator": {
            "name": "decorator",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "handler": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "web-app-from-scratch-master/scratch/headers.py": {
        "Headers.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.add": {
            "name": "add",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "Tuple[str, str]"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "Headers.get_all": {
            "name": "get_all",
            "location": 14,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Headers.get": {
            "name": "get",
            "location": 17,
            "return": [
                "bool",
                "str",
                "None",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "Headers.get_int": {
            "name": "get_int",
            "location": 23,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Headers.__iter__": {
            "name": "__iter__",
            "location": 29,
            "return": [
                "Generator[(Tuple[(nothing, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "web-app-from-scratch-master/scratch/request.py": {
        "iter_lines": {
            "name": "iter_lines",
            "location": 75,
            "return": [
                "Generator[(bytes, None, bytes)]"
            ],
            "arguments": {
                "sock": [
                    "socket.socket"
                ],
                "bufsize": [
                    "int"
                ]
            }
        },
        "BodyReader.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "socket.socket"
                ]
            }
        },
        "BodyReader.readable": {
            "name": "readable",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyReader.read": {
            "name": "read",
            "location": 17,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Request.from_socket": {
            "name": "from_socket",
            "location": 38,
            "return": [
                "Request"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRequest]"
                ],
                "sock": [
                    "socket.socket"
                ]
            }
        }
    },
    "web-app-from-scratch-master/scratch/response.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str"
                ],
                "headers": [
                    "Optional[scratch.headers.Headers]"
                ],
                "body": [
                    "Optional[IO[bytes]]"
                ],
                "content": [
                    "Optional[str]"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "Response.send": {
            "name": "send",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "socket.socket"
                ]
            }
        }
    },
    "web-app-from-scratch-master/scratch/server.py": {
        "serve_static": {
            "name": "serve_static",
            "location": 120,
            "return": [
                "Callable[([scratch.request.Request], scratch.response.Response)]"
            ],
            "arguments": {
                "server_root": [
                    "str"
                ]
            }
        },
        "HTTPWorker.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_queue": [
                    "queue.Queue"
                ],
                "handlers": [
                    "List[Tuple[(str, Callable[([scratch.request.Request], scratch.response.Response)])]]"
                ]
            }
        },
        "HTTPWorker.stop": {
            "name": "stop",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPWorker.run": {
            "name": "run",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPWorker.handle_client": {
            "name": "handle_client",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_sock": [
                    "socket.socket"
                ],
                "client_addr": [
                    "Tuple[(str, int)]"
                ]
            }
        },
        "HTTPServer.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "bool",
                    "float"
                ],
                "port": [
                    "int",
                    "bool",
                    "float"
                ],
                "worker_count": [
                    "int",
                    "Dict[int, int]",
                    "Optional[int]"
                ]
            }
        },
        "HTTPServer.mount": {
            "name": "mount",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_prefix": [
                    "str"
                ],
                "handler": [
                    "Callable[([scratch.request.Request], scratch.response.Response)]"
                ]
            }
        },
        "HTTPServer.serve_forever": {
            "name": "serve_forever",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "serve_static.handler": {
            "name": "handler",
            "location": 125,
            "return": [
                "dict",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "str"
                ]
            }
        }
    },
    "web-app-from-scratch-master/scratch/__init__.py": {},
    "web-app-from-scratch-master/scratch/__main__.py": {
        "jsonresponse": {
            "name": "jsonresponse",
            "location": 18,
            "return": [
                "Callable[(..., scratch.response.Response)]"
            ],
            "arguments": {
                "handler": [
                    "Callable[(..., Union[(dict, Tuple[(str, dict)])])]"
                ]
            }
        },
        "get_users": {
            "name": "get_users",
            "location": 39,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, typing.Union[int,typing.Text]]]]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "flask.Request",
                    "dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "aiohttp.web.Request"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 45,
            "return": [
                "bool",
                "dict[typing.Text, dict[typing.Text, typing.Union[int,typing.Text]]]",
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "bytes",
                    "aiohttp.web.Request"
                ],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "jsonresponse.wrapper": {
            "name": "wrapper",
            "location": 20,
            "return": [
                "Response",
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        }
    },
    "web-app-from-scratch-master/tests/test_application.py": {
        "static_handler": {
            "name": "static_handler",
            "location": 12,
            "return": [
                "Response",
                "bytes",
                "Union[str, List[str]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "aiohttp.web.Request"
                ]
            }
        },
        "dynamic_handler": {
            "name": "dynamic_handler",
            "location": 17,
            "return": [
                "Response",
                "str",
                "Optional[str]",
                "Tuple[str, int, Dict[str, str]]",
                "flask.Response"
            ],
            "arguments": {
                "request": [
                    "int",
                    "fausweb.Request",
                    "str",
                    "typing.Iterable[int]",
                    "Iterable[int]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "age": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_applications_can_route_requests": {
            "name": "test_applications_can_route_requests",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_applications_can_route_requests_to_dynamic_paths": {
            "name": "test_applications_can_route_requests_to_dynamic_paths",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_applications_can_fail_to_route_invalid_paths": {
            "name": "test_applications_can_fail_to_route_invalid_paths",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "web-app-from-scratch-master/tests/test_headers.py": {
        "test_can_add_headers": {
            "name": "test_can_add_headers",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_are_case_insensitive": {
            "name": "test_headers_are_case_insensitive",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getting_a_missing_header_returns_none": {
            "name": "test_getting_a_missing_header_returns_none",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_get_headers_with_fallback": {
            "name": "test_can_get_headers_with_fallback",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_get_headers_as_ints": {
            "name": "test_can_get_headers_as_ints",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_get_headers_as_ints_with_fallback": {
            "name": "test_can_get_headers_as_ints_with_fallback",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getting_a_header_returns_its_last_value": {
            "name": "test_getting_a_header_returns_its_last_value",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_get_all_of_a_headers_values": {
            "name": "test_can_get_all_of_a_headers_values",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_is_iterable": {
            "name": "test_headers_is_iterable",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "web-app-from-scratch-master/tests/test_request.py": {
        "make_request": {
            "name": "make_request",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "test_requests": {
            "name": "test_requests",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "bool"
                ],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "headers": [
                    "str",
                    "bool",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "body": [
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "bool",
                    "dict",
                    "None",
                    "Dict[str, str]",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "test_invalid_requests": {
            "name": "test_invalid_requests",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "io.BytesIO",
                    "bool",
                    "list[]",
                    "list"
                ],
                "error": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "StubSocket.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "StubSocket.recv": {
            "name": "recv",
            "location": 13,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        }
    },
    "web-app-from-scratch-master/tests/test_response.py": {
        "make_output": {
            "name": "make_output",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "make_headers": {
            "name": "make_headers",
            "location": 29,
            "return": [
                "scratch.headers.Headers"
            ],
            "arguments": {}
        },
        "test_response": {
            "name": "test_response",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": [
                    "str",
                    "bytes",
                    "Tuple[int, int]"
                ],
                "output": [
                    "str",
                    "bool",
                    "set[]",
                    "int",
                    "set"
                ]
            }
        },
        "StubSocket.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubSocket.sendall": {
            "name": "sendall",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "StubSocket.sendfile": {
            "name": "sendfile",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "IO[bytes]"
                ]
            }
        },
        "StubSocket.getvalue": {
            "name": "getvalue",
            "location": 21,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "web-app-from-scratch-master/tests/test_router.py": {
        "test_router_can_add_routes": {
            "name": "test_router_can_add_routes",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_router_can_add_routes_with_dynamic_segments": {
            "name": "test_router_can_add_routes_with_dynamic_segments",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_router_fails_to_add_routes_with_duplicate_names": {
            "name": "test_router_fails_to_add_routes_with_duplicate_names",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_router_can_add_routes.get_example": {
            "name": "get_example",
            "location": 12,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_router_can_add_routes_with_dynamic_segments.get_example": {
            "name": "get_example",
            "location": 28,
            "return": [
                "Response"
            ],
            "arguments": {
                "name": []
            }
        },
        "test_router_fails_to_add_routes_with_duplicate_names.get_example": {
            "name": "get_example",
            "location": 47,
            "return": [
                "Response",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        }
    },
    "web-app-from-scratch-master/tests/__init__.py": {}
}
{
    "webhook-router-master/config-server/test.py": {
        "no_logs": {
            "name": "no_logs",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "webhook_server": {
            "name": "webhook_server",
            "location": 18,
            "return": [
                "typing.Generator[ConfigServer]"
            ],
            "arguments": {}
        },
        "user_auth": {
            "name": "user_auth",
            "location": 31,
            "return": [
                "Dict[Text,dict[Text,Text]]",
                "Dict",
                "int"
            ],
            "arguments": {}
        },
        "router_app": {
            "name": "router_app",
            "location": 39,
            "return": [
                "bool",
                "PatchedFlaskClient"
            ],
            "arguments": {
                "webhook_server": [
                    "str",
                    "Callable",
                    "flask.Flask"
                ],
                "user_auth": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "float"
                ]
            }
        },
        "test_route_uuid": {
            "name": "test_route_uuid",
            "location": 50,
            "return": [
                "Iterable[str]",
                "Generator"
            ],
            "arguments": {
                "webhook_server": [
                    "str"
                ],
                "router_app": [
                    "int",
                    "str"
                ]
            }
        },
        "test_create_route": {
            "name": "test_create_route",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [
                    "Dict"
                ]
            }
        },
        "test_get": {
            "name": "test_get",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [],
                "test_route_uuid": []
            }
        },
        "test_get_by_token": {
            "name": "test_get_by_token",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "test_route_uuid": [
                    "bool",
                    "int",
                    "flask.Flask"
                ]
            }
        },
        "test_patch": {
            "name": "test_patch",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [],
                "test_route_uuid": []
            }
        },
        "test_get_all": {
            "name": "test_get_all",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [
                    "Dict"
                ]
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [
                    "flask.testing.FlaskClient"
                ],
                "test_route_uuid": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_regenerate": {
            "name": "test_regenerate",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [],
                "test_route_uuid": []
            }
        },
        "test_add_user_link": {
            "name": "test_add_user_link",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [],
                "test_route_uuid": [
                    "str"
                ]
            }
        },
        "test_get_user_link": {
            "name": "test_get_user_link",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,dict]",
                    "Mapping",
                    "Dict[str,str]",
                    "flask.config.Config"
                ],
                "test_route_uuid": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,dict]",
                    "Mapping",
                    "Dict[str,str]",
                    "flask.config.Config"
                ]
            }
        },
        "test_remove_user_link": {
            "name": "test_remove_user_link",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [
                    "str"
                ],
                "test_route_uuid": [
                    "str"
                ]
            }
        },
        "test_get_route_stats": {
            "name": "test_get_route_stats",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [],
                "test_route_uuid": []
            }
        },
        "test_get_route_logs": {
            "name": "test_get_route_logs",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [
                    "Dict[str,str]"
                ],
                "test_route_uuid": [
                    "Dict[str,str]"
                ]
            }
        },
        "test_all_routes_stats": {
            "name": "test_all_routes_stats",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_all_routes_stats_with_no_stats": {
            "name": "test_all_routes_stats_with_no_stats",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "router_app": [
                    "flask.testing.FlaskClient"
                ]
            }
        }
    },
    "webhook-router-master/config-server/configserver/auth.py": {
        "test_auth": {
            "name": "test_auth",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "normal_auth": {
            "name": "normal_auth",
            "location": 20,
            "return": [
                "bool",
                "int",
                "dict",
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "google_oauth_clientID": [
                    "str",
                    "Set[int]"
                ]
            }
        }
    },
    "webhook-router-master/config-server/configserver/configserver.py": {
        "get_postgres_db": {
            "name": "get_postgres_db",
            "location": 143,
            "return": [
                "PostgresqlDatabase",
                "Dict",
                "Dict[str,Any]",
                "salon.models.Stylist",
                "str",
                "Iterable[str]",
                "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "int"
            ],
            "arguments": {}
        },
        "start_server": {
            "name": "start_server",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "debug": [
                    "str"
                ],
                "port": [
                    "int",
                    "str"
                ],
                "host": [
                    "int",
                    "str"
                ],
                "config_JSON": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ConfigServer.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_test_auth": [
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "bool",
                    "None"
                ],
                "db": [
                    "peewee.Database",
                    "str",
                    "homeassistanauth.models.User",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "config_JSON": [
                    "List[str]",
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "ConfigServer._setup_logging": {
            "name": "_setup_logging",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigServer.on_after_request": {
            "name": "on_after_request",
            "location": 115,
            "return": [
                "Dict",
                "str",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Optional[Dict[str,Any]]",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "response": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "int",
                    "MutableMapping",
                    "MutableMapping[str,Any]",
                    "logging.LogRecord",
                    "requests.models.Response"
                ]
            }
        },
        "ConfigServer._set_error_handler": {
            "name": "_set_error_handler",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_class": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "error_num": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "error_message": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "error_code": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ConfigServer._set_error_handlers": {
            "name": "_set_error_handlers",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigServer.close": {
            "name": "close",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigServer._set_error_handler.handler": {
            "name": "handler",
            "location": 124,
            "return": [
                "str",
                "Optional[Dict]",
                "mirakuru.http.HTTPConnection"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "webhook-router-master/config-server/configserver/ConnexionDespatcher.py": {
        "ConnexionDespatcher.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_test_auth": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "route_data_mapper": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "defaultdict",
                    "DefaultDict"
                ],
                "user_link_data_mapper": [
                    "str",
                    "Dict",
                    "bytes",
                    "List[annofabapi.models.SingleAnnotation]",
                    "List[S]"
                ],
                "statistic_queryier": [
                    "str",
                    "bool",
                    "List",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "logger": [
                    "str",
                    "Dict",
                    "None",
                    "logging.Logger",
                    "Optional[str]"
                ],
                "google_oauth_client_id": [
                    "int",
                    "str",
                    "List[int]",
                    "Dict[str,str]",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ConnexionDespatcher.resolve_name": {
            "name": "resolve_name",
            "location": 58,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ConnexionDespatcher.create_route": {
            "name": "create_route",
            "location": 111,
            "return": [
                "bool",
                "int",
                "float",
                "Set",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "new_route": [
                    "Dict",
                    "Optional[Dict]",
                    "None",
                    "Optional[Any]",
                    "Dict[int,dict]",
                    "Any",
                    "bool",
                    "Optional[bool]",
                    "prefecengine.state.State"
                ],
                "user": [
                    "List[str]",
                    "List",
                    "bytes",
                    "Pattern[str]",
                    "Pattern",
                    "Mapping[str,str]",
                    "Mapping",
                    "Dict[str,Type[Any]]",
                    "Dict[str,Type]"
                ]
            }
        },
        "ConnexionDespatcher.add_route_link": {
            "name": "add_route_link",
            "location": 134,
            "return": [
                "str",
                "Dict[str,str]",
                "float",
                "app.models.Tweet",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "models.UserAuth",
                    "zerver.models.Stream"
                ],
                "uuid": [
                    "Dict[str,str]",
                    "str",
                    "zerver.models.UserProfile",
                    "auth.user.User",
                    "server.models.User"
                ]
            }
        },
        "ConnexionDespatcher.get_all_routes_stats": {
            "name": "get_all_routes_stats",
            "location": 142,
            "return": [
                "List",
                "str",
                "Dict[str,str]",
                "int",
                "Dict[str,list[Any]]",
                "Tuple[bytes]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Dict[str,Any]",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "ConnexionDespatcher.get_route_link": {
            "name": "get_route_link",
            "location": 156,
            "return": [
                "int",
                "str",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "tracim.models.auth.User"
                ],
                "uuid": [
                    "str",
                    "zerver.models.UserProfile",
                    "None",
                    "Optional[zerver.models.UserProfile]",
                    "zerver.models.Stream"
                ]
            }
        },
        "ConnexionDespatcher.get_route_logs": {
            "name": "get_route_logs",
            "location": 162,
            "return": [
                "str",
                "salon.models.Stylist",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "ConnexionDespatcher.get_route_stats": {
            "name": "get_route_stats",
            "location": 168,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "ConnexionDespatcher.resolve_name.connextion_wrapper": {
            "name": "connextion_wrapper",
            "location": 74,
            "return": [
                "Tuple[int]",
                "bool",
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {}
        }
    },
    "webhook-router-master/config-server/configserver/errors.py": {},
    "webhook-router-master/config-server/configserver/logging.py": {
        "add_file_log_handler": {
            "name": "add_file_log_handler",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "List[dict[str,float]]",
                    "logging.Logger",
                    "List[Dict[str,float]]",
                    "logging.FileHandler",
                    "logging.StreamHandler"
                ]
            }
        },
        "ConfigServerLogger.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigServerLogger.log_http_request": {
            "name": "log_http_request",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "flask.Response",
                    "requests.Response"
                ]
            }
        },
        "ConfigServerLogger.log_swagger_request": {
            "name": "log_swagger_request",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "str",
                    "bool",
                    "int"
                ],
                "swagger_params": [
                    "str",
                    "bool",
                    "int"
                ],
                "response": [
                    "str",
                    "bool",
                    "int"
                ],
                "user": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "webhook-router-master/config-server/configserver/models.py": {
        "extract_route_dict": {
            "name": "extract_route_dict",
            "location": 20,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "Sequence[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "route": [
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "bool",
                    "Optional[Any]",
                    "None",
                    "Any"
                ]
            }
        }
    },
    "webhook-router-master/config-server/configserver/RouteDataMapper.py": {
        "RouteDataMapper.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_link_datamapper": [
                    "str",
                    "float",
                    "bool",
                    "excars.models.user.User",
                    "contests.models.User"
                ]
            }
        },
        "RouteDataMapper._get_route_from_uuid": {
            "name": "_get_route_from_uuid",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "RouteDataMapper._generate_new_token": {
            "name": "_generate_new_token",
            "location": 31,
            "return": [
                "Tuple",
                "int",
                "Optional[int]",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "RouteDataMapper.update": {
            "name": "update",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "new_info": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, List[Callable]]",
                    "dict",
                    "T",
                    "Dict[str, bool]",
                    "Dict[str, str]"
                ]
            }
        },
        "RouteDataMapper.delete": {
            "name": "delete",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "Dict",
                    "models.Telegram_Chat"
                ]
            }
        },
        "RouteDataMapper.get": {
            "name": "get",
            "location": 56,
            "return": [
                "int",
                "zerver.models.UserProfile",
                "abilian.core.models.subjects.User",
                "Sequence[str]",
                "Dict[int, dict]",
                "models.order_action.Parameters"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "RouteDataMapper.get_by_token": {
            "name": "get_by_token",
            "location": 59,
            "return": [
                "int",
                "Dict[str, bool]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "RouteDataMapper.add": {
            "name": "add",
            "location": 71,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Callable",
                    "str",
                    "models.UserAuth"
                ]
            }
        },
        "RouteDataMapper.regenerate_token": {
            "name": "regenerate_token",
            "location": 87,
            "return": [
                "Dict[Text,Union[dict[int,Any],dict,list[Union[Any,Any,Any]],str,KeysView,dict[str,float]]]",
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "int",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "webhook-router-master/config-server/configserver/RouteWhitelist.py": {},
    "webhook-router-master/config-server/configserver/StatisticQueryier.py": {
        "StatisticQueryier.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elasticurl": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "StatisticQueryier._logs_query": {
            "name": "_logs_query",
            "location": 21,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "None",
                    "List[Part]",
                    "Optional[docker.models.images.Image]",
                    "django.db.models.QuerySet",
                    "Optional[str]",
                    "Union[PartSet,List[Part]]"
                ],
                "success": [
                    "str",
                    "None",
                    "List[Part]",
                    "Optional[docker.models.images.Image]",
                    "django.db.models.QuerySet",
                    "Optional[str]",
                    "Union[PartSet,List[Part]]"
                ]
            }
        },
        "StatisticQueryier.get_route_logs": {
            "name": "get_route_logs",
            "location": 28,
            "return": [
                "List",
                "List[str]",
                "Optional[dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "bool"
                ]
            }
        },
        "StatisticQueryier.get_route_stats": {
            "name": "get_route_stats",
            "location": 37,
            "return": [
                "Dict[Text,Union[list[str],list,DefaultDict,str,bool,tuple[Union[str,str,str,str,str]]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "int",
                    "zerver.models.Stream",
                    "models.User",
                    "bool"
                ]
            }
        },
        "StatisticQueryier.get_many_routes_stats": {
            "name": "get_many_routes_stats",
            "location": 50,
            "return": [
                "List[dict[Text,]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "uuids": [
                    "list",
                    "int",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "webhook-router-master/config-server/configserver/UserLinkDataMapper.py": {
        "UserLinkDataMapper._try_get_link": {
            "name": "_try_get_link",
            "location": 16,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "uuid": [
                    "str"
                ]
            }
        },
        "UserLinkDataMapper.add_user_link": {
            "name": "add_user_link",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "zerver.models.UserProfile"
                ],
                "uuid": [
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "UserLinkDataMapper.has_user_link": {
            "name": "has_user_link",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "None",
                    "bool",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "zerver.models.UserProfile",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount",
                    "Optional[zerver.models.UserProfile]"
                ],
                "uuid": [
                    "str",
                    "None",
                    "bool",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "zerver.models.UserProfile",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount",
                    "Optional[zerver.models.UserProfile]"
                ]
            }
        },
        "UserLinkDataMapper.get_users_links": {
            "name": "get_users_links",
            "location": 38,
            "return": [
                "List",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "models.User"
                ]
            }
        },
        "UserLinkDataMapper.remove_user_link": {
            "name": "remove_user_link",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "Callable[,str]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[zerver.models.UserProfile]"
                ],
                "uuid": [
                    "str",
                    "zerver.models.UserProfile",
                    "Callable[,str]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[zerver.models.UserProfile]"
                ]
            }
        }
    },
    "webhook-router-master/config-server/configserver/__init__.py": {},
    "webhook-router-master/config-server/configserver/__main__.py": {},
    "webhook-router-master/firewall-config/test.py": {
        "firewallconfig_server": {
            "name": "firewallconfig_server",
            "location": 18,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "firewallconfig_server_other": {
            "name": "firewallconfig_server_other",
            "location": 29,
            "return": [
                "flask.Flask",
                "dict"
            ],
            "arguments": {}
        },
        "test_put_and_get_config": {
            "name": "test_put_and_get_config",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "firewallconfig_server": [
                    "str",
                    "int"
                ]
            }
        },
        "test_is_admin_true": {
            "name": "test_is_admin_true",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "firewallconfig_server": []
            }
        },
        "test_is_admin_false": {
            "name": "test_is_admin_false",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "firewallconfig_server_other": []
            }
        },
        "test_ConfigInterface": {
            "name": "test_ConfigInterface",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "InMemIO.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_data": [
                    "bytes",
                    "Dict",
                    "Dict[str,str]",
                    "str"
                ]
            }
        },
        "InMemIO.get": {
            "name": "get",
            "location": 11,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemIO.set": {
            "name": "set",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_data": [
                    "str",
                    "bool",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "webhook-router-master/firewall-config/firewallconfig/auth.py": {
        "test_auth": {
            "name": "test_auth",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "normal_auth": {
            "name": "normal_auth",
            "location": 20,
            "return": [
                "bool",
                "int",
                "dict",
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "google_oauth_clientID": [
                    "str",
                    "Set[int]"
                ]
            }
        }
    },
    "webhook-router-master/firewall-config/firewallconfig/errors.py": {},
    "webhook-router-master/firewall-config/firewallconfig/firewallconfig.py": {
        "eprint": {
            "name": "eprint",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Tuple[str]",
                    "bytes",
                    "Union[str,bytes]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Rule.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_port": [
                    "bool",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "None"
                ],
                "to_port": [
                    "bool",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "None"
                ],
                "cidr": [
                    "bool",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "None"
                ]
            }
        },
        "Rule.does_pass_rule": {
            "name": "does_pass_rule",
            "location": 24,
            "return": [
                "bool",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "ip_address": [
                    "str",
                    "bool",
                    "ipaddress.IPv4Address",
                    "int"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "ConfigInterface.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_json": [
                    "dict"
                ]
            }
        },
        "ConfigInterface.is_admin": {
            "name": "is_admin",
            "location": 38,
            "return": [
                "bool",
                "Optional[str]",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ConfigInterface.is_url_valid": {
            "name": "is_url_valid",
            "location": 41,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "urllib.parse.ParseResult"
                ]
            }
        },
        "FileInterface.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "FileInterface.get": {
            "name": "get",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInterface.set": {
            "name": "set",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "ConnextionDespacher.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ioInterface": [
                    "Dict",
                    "Step"
                ],
                "auth": [
                    "int",
                    "Callable",
                    "str",
                    "bool",
                    "slice",
                    "Union[Callable,str]"
                ]
            }
        },
        "ConnextionDespacher.auth_admin": {
            "name": "auth_admin",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnextionDespacher.auth_user": {
            "name": "auth_user",
            "location": 78,
            "return": [
                "bool",
                "Callable[[Any], bool]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnextionDespacher.get_config": {
            "name": "get_config",
            "location": 81,
            "return": [
                "str",
                "Callable[[], Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnextionDespacher.set_config": {
            "name": "set_config",
            "location": 86,
            "return": [
                "Tuple[Optional[int]]",
                "str",
                "Optional[int]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "new_config": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,bool]",
                    "Union[str,dict]",
                    "str"
                ]
            }
        },
        "ConnextionDespacher.is_url_valid": {
            "name": "is_url_valid",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "ConnextionDespacher.is_admin": {
            "name": "is_admin",
            "location": 98,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirewallConfigServer.resolve_name": {
            "name": "resolve_name",
            "location": 107,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FirewallConfigServer._set_error_handler": {
            "name": "_set_error_handler",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_class": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "error_num": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "error_message": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "error_code": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "FirewallConfigServer.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "Sequence[str]",
                    "Dict",
                    "str"
                ],
                "firewall_config_path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "IO[Any]",
                    "IO",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ]
            }
        },
        "FirewallConfigServer._set_error_handler.handler": {
            "name": "handler",
            "location": 114,
            "return": [
                "str",
                "Optional[Dict]",
                "mirakuru.http.HTTPConnection"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Optional[list]",
                    "List[Dict[str, Any]]",
                    "mypy.errors.Errors",
                    "errors.Error",
                    "Optional[str]"
                ]
            }
        }
    },
    "webhook-router-master/firewall-config/firewallconfig/__init__.py": {},
    "webhook-router-master/firewall-config/firewallconfig/__main__.py": {}
}
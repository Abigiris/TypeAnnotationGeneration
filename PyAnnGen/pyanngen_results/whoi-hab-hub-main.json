{
    "whoi-hab-hub-main/habhub-dataserver/manage.py": {},
    "whoi-hab-hub-main/habhub-dataserver/merge_production_dotenvs_in_dotenv.py": {
        "merge": {
            "name": "merge",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_path": [
                    "str",
                    "int"
                ],
                "merged_file_paths": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[str]",
                    "bytes",
                    "Sequence[str]"
                ],
                "append_linesep": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge": {
            "name": "test_merge",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "bool",
                    "int",
                    "str"
                ],
                "merged_file_count": [
                    "int",
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "append_linesep": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/config/celery_app.py": {},
    "whoi-hab-hub-main/habhub-dataserver/config/urls.py": {},
    "whoi-hab-hub-main/habhub-dataserver/config/wsgi.py": {},
    "whoi-hab-hub-main/habhub-dataserver/config/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/config/settings/base.py": {},
    "whoi-hab-hub-main/habhub-dataserver/config/settings/local.py": {},
    "whoi-hab-hub-main/habhub-dataserver/config/settings/production.py": {},
    "whoi-hab-hub-main/habhub-dataserver/config/settings/test.py": {},
    "whoi-hab-hub-main/habhub-dataserver/config/settings/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/docs/conf.py": {},
    "whoi-hab-hub-main/habhub-dataserver/docs/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str,Any]]",
                "bool",
                "List"
            ],
            "arguments": {}
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/admin.py": {
        "ShellfishAreaAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 37,
            "return": [
                "str",
                "List[str]",
                "Dict[None,None]",
                "bool",
                "List[magic.models.deck.Deck]",
                "Type",
                "List[jinete.models.trips.Trip]",
                "List"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "zerver.models.UserProfile",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session",
                    "django.db.models.QuerySet",
                    "grouper.models.service_accounServiceAccount",
                    "django.db.models.query.QuerySet",
                    "django.http.HttpRequest"
                ]
            }
        },
        "ShellfishAreaAdmin.formfield_for_choice_field": {
            "name": "formfield_for_choice_field",
            "location": 46,
            "return": [
                "Dict[str, Dict[str, int]]",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "db_field": [
                    "Callable",
                    "Dict",
                    "django.db.models.fields.Field"
                ],
                "request": [
                    "abilian.services.security.models.Permission",
                    "abilian.services.security.models.Role",
                    "medtagger.database.models.Task",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "ClosureNoticeAdmin.save_related": {
            "name": "save_related",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "zam_repondeur.models.Lecture",
                    "purplship.core.models.RateRequest"
                ],
                "form": [
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Lecture",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "formsets": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "zam_repondeur.models.Lecture",
                    "purplship.core.models.RateRequest"
                ],
                "change": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "zam_repondeur.models.Lecture",
                    "purplship.core.models.RateRequest"
                ]
            }
        },
        "ClosureNoticeAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 91,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "zerver.models.UserProfile",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session",
                    "django.db.models.QuerySet",
                    "grouper.models.service_accounServiceAccount",
                    "django.db.models.query.QuerySet",
                    "django.http.HttpRequest"
                ]
            }
        },
        "ClosureNoticeAdmin.formfield_for_manytomany": {
            "name": "formfield_for_manytomany",
            "location": 100,
            "return": [
                "float",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "db_field": [
                    "Callable",
                    "django.db.models.fields.Field",
                    "app.models.user.User"
                ],
                "request": [
                    "str",
                    "django.db.models.QuerySet",
                    "grouper.models.service_accounServiceAccount",
                    "grouper.models.permission.Permission"
                ]
            }
        },
        "ClosureNoticeMaineAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 143,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "Optional[str]",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "ClosureNoticeMaineAdmin.formfield_for_manytomany": {
            "name": "formfield_for_manytomany",
            "location": 146,
            "return": [
                "float",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "db_field": [
                    "Callable",
                    "django.db.models.fields.Field",
                    "Mapping",
                    "Mapping[str,List[Any]]"
                ],
                "request": [
                    "bytes",
                    "users.models.JustfixUser",
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Team"
                ]
            }
        },
        "ClosureNoticeMaineAdmin.save_related": {
            "name": "save_related",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "purplship.core.models.RateRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "form": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "purplship.core.models.RateRequest",
                    "zam_repondeur.models.Lecture"
                ],
                "formsets": [
                    "str",
                    "django.http.HttpRequest",
                    "purplship.core.models.RateRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "change": [
                    "str",
                    "django.http.HttpRequest",
                    "purplship.core.models.RateRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/apps.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/forms.py": {
        "LandmarkForm.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LandmarkForm.clean": {
            "name": "clean",
            "location": 30,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/managers.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/models.py": {
        "ShellfishArea.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellfishArea.save": {
            "name": "save",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellfishArea.get_current_status": {
            "name": "get_current_status",
            "location": 42,
            "return": [
                "Text",
                "str",
                "int",
                "List[Dict[str,Any]]",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellfishAreaImport.__str__": {
            "name": "__str__",
            "location": 76,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Landmark.__str__": {
            "name": "__str__",
            "location": 97,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Species.__str__": {
            "name": "__str__",
            "location": 108,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CausativeOrganism.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureNotice.__str__": {
            "name": "__str__",
            "location": 170,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureNotice.get_shellfish_areas": {
            "name": "get_shellfish_areas",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureNotice.get_state": {
            "name": "get_state",
            "location": 178,
            "return": [
                "None",
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "app.models.Tweet",
                "app.models.Position",
                "article.transfer.models.ArticleNumber"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureNotice.get_total_closure_duration": {
            "name": "get_total_closure_duration",
            "location": 189,
            "return": [
                "str",
                "None",
                "bool",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureNotice.save": {
            "name": "save",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureDataEvent.__str__": {
            "name": "__str__",
            "location": 269,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureDataEvent.save": {
            "name": "save",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureDataEvent.get_current_status": {
            "name": "get_current_status",
            "location": 295,
            "return": [
                "Text",
                "str",
                "int",
                "List[Dict[str,Any]]",
                "django.db.models.query.QuerySet",
                "cmk.utils.type_defs.UserId",
                "raiden.utils.List[raiden.utils.Tuple[str,raiden.utils.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureDataEvent.get_closure_duration": {
            "name": "get_closure_duration",
            "location": 314,
            "return": [
                "Text",
                "str",
                "Tuple[Tuple[int,...]]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionArea.__str__": {
            "name": "__str__",
            "location": 335,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAreaShape.__str__": {
            "name": "__str__",
            "location": 355,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/tasks.py": {
        "hello": {
            "name": "hello",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/tests.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/urls.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/utils.py": {
        "update_closure_durations": {
            "name": "update_closure_durations",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "import_shellfisharea_json_nh": {
            "name": "import_shellfisharea_json_nh",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_shellfisharea_groupby_atlas": {
            "name": "create_shellfisharea_groupby_atlas",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/views.py": {
        "_build_closure_data_event_by_notice_geojson": {
            "name": "_build_closure_data_event_by_notice_geojson",
            "location": 27,
            "return": [
                "str",
                "IO[bytes]",
                "rotkehlchen.db.dbhandler.DBHandler",
                "Dict"
            ],
            "arguments": {
                "events_qs": [
                    "Dict"
                ],
                "notice_obj": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "_build_closure_data_event_geojson": {
            "name": "_build_closure_data_event_geojson",
            "location": 74,
            "return": [
                "List",
                "IO[bytes]",
                "List[int]",
                "str",
                "List[list]",
                "rotkehlchen.db.dbhandler.DBHandler",
                "Dict"
            ],
            "arguments": {
                "events_qs": [
                    "List",
                    "str"
                ]
            }
        },
        "_build_closure_notice_geojson": {
            "name": "_build_closure_notice_geojson",
            "location": 100,
            "return": [
                "List",
                "IO[bytes]",
                "Dict[str,List[int]]",
                "str",
                "Optional[float]",
                "django.http.HttpRequest",
                "Dict",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "closures_qs": [
                    "List",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "_build_closure_notice_points_geojson": {
            "name": "_build_closure_notice_points_geojson",
            "location": 162,
            "return": [
                "List",
                "IO[bytes]",
                "Dict[str,List[int]]",
                "str",
                "Optional[float]",
                "django.http.HttpRequest",
                "Dict",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "closures_qs": [
                    "List",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "_build_closure_notice_circle_points_geojson": {
            "name": "_build_closure_notice_circle_points_geojson",
            "location": 257,
            "return": [
                "List",
                "IO[bytes]",
                "Dict[str,List[int]]",
                "str",
                "Optional[float]",
                "django.http.HttpRequest",
                "Dict",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "closures_qs": [
                    "List",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "ClosureDataEventAjaxGetByAreaView.get": {
            "name": "get",
            "location": 311,
            "return": [
                "JsonResponse",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "ClosureDataEventAjaxGetByNoticeView.get": {
            "name": "get",
            "location": 325,
            "return": [
                "JsonResponse",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "ClosureNoticeAjaxGetAllView.get": {
            "name": "get",
            "location": 347,
            "return": [
                "JsonResponse",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "ClosureNoticeAjaxGetLayerByStateView.get": {
            "name": "get",
            "location": 381,
            "return": [
                "JsonResponse",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "ClosureNoticeAjaxGetAllPointsView.get": {
            "name": "get",
            "location": 393,
            "return": [
                "JsonResponse",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "ClosureNoticeAjaxGetLayerByStatePointsView.get": {
            "name": "get",
            "location": 428,
            "return": [
                "JsonResponse",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "ClosureNoticeAjaxGetLayerByStatePointsCircleView.get": {
            "name": "get",
            "location": 442,
            "return": [
                "JsonResponse",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "ClosureMapClusterMainView.get_context_data": {
            "name": "get_context_data",
            "location": 471,
            "return": [
                "Dict[Text,Union[dict,dict[Any,list[str]]]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureHomeView3.get_context_data": {
            "name": "get_context_data",
            "location": 506,
            "return": [
                "Dict[Text,JsonResponse]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureAreaAjaxView.get": {
            "name": "get",
            "location": 519,
            "return": [
                "JsonResponse",
                "django.http.HttpResponse",
                "bool",
                "Dict[str,Any]",
                "int",
                "services.shop.order.models.order_evenOrderEvent",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "ClosureAreaAjaxGeoLayerByStateView.get_queryset": {
            "name": "get_queryset",
            "location": 529,
            "return": [
                "str",
                "Dict[str,dict[str,Any]]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureAreaAjaxGeoLayerSingleView.get_queryset": {
            "name": "get_queryset",
            "location": 540,
            "return": [
                "str",
                "Tuple[Union[tuple[Union[Literal,Any]],tuple[Union[Literal,Any]],tuple[Union[Literal,Any]]]]",
                "List[str]",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosureAreaAjaxGeoLayerByStatusView.get_queryset": {
            "name": "get_queryset",
            "location": 551,
            "return": [
                "str",
                "List[str]",
                "int",
                "bool",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/api/serializers.py": {
        "ShellfishAreaListSerializer.get_simplified_geom": {
            "name": "get_simplified_geom",
            "location": 26,
            "return": [
                "str",
                "Dict[str, int]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Iterable[int]",
                    "int",
                    "models.Profile"
                ]
            }
        },
        "ShellfishAreaDetailSerializer.get_closures": {
            "name": "get_closures",
            "location": 40,
            "return": [
                "None",
                "Optional[int]",
                "List[dict[Text,Union[list[dict[Text,]],Text,None]]]",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "server.models.PickupPoint",
                    "viewer.models.Gallery"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/api/views.py": {
        "ShellfishAreaViewSet.dispatch": {
            "name": "dispatch",
            "location": 28,
            "return": [
                "zerver.models.Realm",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellfishAreaViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 33,
            "return": [
                "str",
                "int",
                "type",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellfishAreaViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 41,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Tuple[Union[Any,Any,Any,Any,Any,Any,Any,Any,Any,Any]]",
                "float",
                "Dict[str,str]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0001_initial.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0002_auto_20190823_1910.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0003_auto_20190823_1914.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0004_auto_20190823_1959.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0005_auto_20190826_1528.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0006_auto_20190826_1533.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0007_species.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0008_auto_20190826_2016.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0009_auto_20190827_1639.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0010_auto_20190827_1649.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0011_auto_20190830_1732.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0012_auto_20190906_1327.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0013_auto_20190906_1334.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0014_auto_20190906_1349.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0015_auto_20190906_1351.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0016_auto_20190906_1353.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0017_causativeorganism.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0018_auto_20190916_1637.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0019_closurenotice_causative_organism.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0020_auto_20190916_1641.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0021_remove_closurenotice_organism.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0022_shellfisharea.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0023_closurenotice_shellfish_areas.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0024_auto_20190927_1358.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0025_auto_20190927_1423.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0026_exceptionarea.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0027_baseareashape.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0028_closurenotice_custom_borders.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0029_auto_20191001_1432.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0030_closurenotice_custom_geom.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0031_auto_20191003_1759.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0032_landmark.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0033_auto_20191118_1637.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0034_remove_exceptionarea_geom.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0035_auto_20191118_2001.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0036_auto_20191127_1516.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0037_closurenotice_data_source.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0038_landmark_shellfish_areas.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0039_remove_shellfisharea_current_status.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0040_auto_20200203_1555.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0041_auto_20200203_1559.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0042_closuredataevent.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0043_remove_closuredataevent_end_date.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0044_auto_20200205_1313.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0045_auto_20200221_1142.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0046_auto_20200227_1217.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0047_shellfisharea_atlas_key.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0048_shellfisharea_is_atlas_combined_area.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0049_shellfishareaimport.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0050_closuredataevent_duration.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0051_auto_20200630_1412.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0052_auto_20200718_1805.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/0053_shellfisharea_geom_center_point.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/closures/migrations/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/contrib/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/contrib/sites/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/contrib/sites/migrations/0001_initial.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/contrib/sites/migrations/0004_auto_20220114_1903.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/contrib/sites/migrations/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/admin.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/apps.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/constants.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/fields.py": {
        "ChoiceArrayField.formfield": {
            "name": "formfield",
            "location": 16,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/models.py": {
        "TargetSpecies.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetSpecies.save": {
            "name": "save",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLayer.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metric.__str__": {
            "name": "__str__",
            "location": 132,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapBookmark.__str__": {
            "name": "__str__",
            "location": 151,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/tests.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/utils.py": {
        "hex_to_RGB": {
            "name": "hex_to_RGB",
            "location": 10,
            "return": [
                "List[int]",
                "List",
                "int",
                "str",
                "Sequence[Union[str,Any]]",
                "Sequence[T]",
                "List[T]"
            ],
            "arguments": {
                "hex": [
                    "int",
                    "float",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "RGB_to_hex": {
            "name": "RGB_to_hex",
            "location": 16,
            "return": [
                "Text",
                "str",
                "bytes",
                "Dict[str,Any]"
            ],
            "arguments": {
                "RGB": [
                    "int",
                    "str",
                    "Iterable['cirq.Qid']"
                ]
            }
        },
        "linear_gradient": {
            "name": "linear_gradient",
            "location": 24,
            "return": [
                "List",
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "start_hex": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict[str,int]",
                    "float",
                    "Union[int,str]"
                ],
                "finish_hex": [
                    "Text",
                    "int",
                    "str",
                    "bool"
                ],
                "n": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/views.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/api/serializers.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/api/urls.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/api/views.py": {
        "DataLayerViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 37,
            "return": [
                "str",
                "List[str]",
                "Dict",
                "bool",
                "Dict[str,dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataDensityAPIView.get_querylist": {
            "name": "get_querylist",
            "location": 48,
            "return": [
                "str",
                "List[dict[Text,Union[int,list,tuple[Union[float,float]],list[str],Text]]]",
                "bool",
                "List[dict[Text,Union[int,list[Optional[int]],float,tuple[Union[int,int]],Text]]]",
                "List[dict[Text,Union[str,int,float,list[dict[str,str]],dict[str,str]]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0001_initial.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0002_auto_20210412_1732.py": {
        "create_target_species": {
            "name": "create_target_species",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "str",
                    "TextIO",
                    "bool",
                    "int"
                ],
                "schema_editor": [
                    "str",
                    "bool",
                    "Iterator[str]",
                    "float",
                    "Iterator"
                ]
            }
        },
        "create_data_layers": {
            "name": "create_data_layers",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "TextIO",
                    "str",
                    "django.db.migrations.state.StateApps"
                ],
                "schema_editor": [
                    "bool",
                    "List[str]",
                    "Dict[str,Any]",
                    "Callable",
                    "int",
                    "Iterable[str]"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0003_targetspecies_species_environment.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0004_auto_20210819_1513.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0005_auto_20210819_1516.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0006_metric.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0007_auto_20210829_1333.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0008_datalayer_belongs_to_app.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0009_auto_20211105_1740.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0010_remove_metric_data_layer.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0011_auto_20211105_1748.py": {
        "create_metrics": {
            "name": "create_metrics",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "str",
                    "int",
                    "List[int]",
                    "django.db.migrations.state.StateApps"
                ],
                "schema_editor": [
                    "str",
                    "bool",
                    "Iterator[str]",
                    "float",
                    "Iterator"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0012_targetspecies_autoclass_threshold.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0013_auto_20220104_1637.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/0014_mapbookmark.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/core/migrations/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/dashboard/admin.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/dashboard/apps.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/dashboard/models.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/dashboard/tests.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/dashboard/urls.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/dashboard/views.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/dashboard/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/dashboard/migrations/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/admin.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/apps.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/models.py": {
        "EspInstrument.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployment.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EspDatapoint.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "Text",
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/tests.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/views.py": {
        "load_esp_deployment_data": {
            "name": "load_esp_deployment_data",
            "location": 9,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "str",
                    "django.http.HttpRequest",
                    "x509_pki.models.Certificate"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/migrations/0001_initial.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/migrations/0002_deployment.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/migrations/0003_espdatapoint.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/migrations/0004_auto_20190117_1852.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/migrations/0005_auto_20200106_1148.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/migrations/0006_auto_20210101_1857.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/migrations/0007_auto_20220104_1630.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/esp_instrument/migrations/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_cruises/admin.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_cruises/apps.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_cruises/models.py": {
        "Cruise.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "IFCBDatapoint.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IFCBDatapoint.get_ifcb_dashboard_link": {
            "name": "get_ifcb_dashboard_link",
            "location": 29,
            "return": [
                "Text",
                "str",
                "zerver.models.Recipient",
                "bool",
                "Callable",
                "List"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_cruises/tests.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_cruises/urls.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_cruises/views.py": {
        "load_ifcb_cruise_data": {
            "name": "load_ifcb_cruise_data",
            "location": 9,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "str",
                    "django.http.HttpRequest",
                    "x509_pki.models.Certificate"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_cruises/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_cruises/migrations/0001_initial.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_cruises/migrations/0002_auto_20190321_1527.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_cruises/migrations/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/admin.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/api_requests.py": {
        "valid_lonlat": {
            "name": "valid_lonlat",
            "location": 21,
            "return": [
                "Optional[str]",
                "None",
                "Tuple[Union[Text,int,Callable[str,bool],list[object],None,dict]]"
            ],
            "arguments": {
                "lon": [
                    "Callable[[str], bool]",
                    "List[object]",
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "lat": [
                    "Callable[[str],bool]",
                    "List[object]",
                    "Callable[str,bool]",
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "run_species_classifed_import": {
            "name": "run_species_classifed_import",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_obj": [
                    "str",
                    "Sequence[str]",
                    "float"
                ]
            }
        },
        "reset_ifcb_data": {
            "name": "reset_ifcb_data",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_id": [
                    "int",
                    "None",
                    "str",
                    "transfer.models.ArticleID"
                ]
            }
        },
        "_get_ifcb_bins_dataset": {
            "name": "_get_ifcb_bins_dataset",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_obj": [
                    "str",
                    "bool",
                    "server.models.Bike",
                    "zerver.models.Realm",
                    "socialhome.users.models.Profile"
                ]
            }
        },
        "_get_ifcb_autoclass_file": {
            "name": "_get_ifcb_autoclass_file",
            "location": 207,
            "return": [
                "None",
                "str",
                "int",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "bin_obj": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_calculate_metrics": {
            "name": "_calculate_metrics",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "bin_obj": [
                    "str",
                    "Mapping[str, Any]",
                    "zerver.models.Realm",
                    "List[str]"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/apps.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/forms.py": {
        "DatasetForm.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetForm.clean": {
            "name": "clean",
            "location": 29,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/managers.py": {
        "BinQuerySet.add_grid_metrics_data": {
            "name": "add_grid_metrics_data",
            "location": 23,
            "return": [
                "str",
                "Dict[str,str]",
                "bytes",
                "Callable",
                "List[tuple[Union[str,str,Any]]]",
                "Callable[[None,None],bool]",
                "Dict[str,Union[dict,Any]]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "grid_level": [
                    "float",
                    "str",
                    "bytes",
                    "Callable",
                    "Callable[[None,None],bool]"
                ]
            }
        },
        "BinQuerySet.add_single_grid_metrics_data": {
            "name": "add_single_grid_metrics_data",
            "location": 86,
            "return": [
                "str",
                "Callable",
                "Callable[[None,None],bool]",
                "Dict[str,Union[dict,Any]]",
                "Dict[str,str]",
                "List[tuple[Union[str,str,Any]]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "geohash": [
                    "str",
                    "None",
                    "int",
                    "models.seat_group.SeatGroup",
                    "Optional[str]",
                    "x509_pki.models.Certificate"
                ],
                "grid_level": [
                    "float",
                    "str",
                    "Callable",
                    "Callable[[None,None],bool]"
                ]
            }
        },
        "DatasetQuerySet.add_bins_geo_extent": {
            "name": "add_bins_geo_extent",
            "location": 109,
            "return": [
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "date_q_filters": [
                    "None"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/models.py": {
        "Dataset.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.reset_bin_data": {
            "name": "reset_bin_data",
            "location": 31,
            "return": [
                "Text",
                "str",
                "Dict[str,Any]",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.get_data_layer_metrics": {
            "name": "get_data_layer_metrics",
            "location": 36,
            "return": [
                "str",
                "int",
                "django.http.HttpRequest",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.get_max_mean_values": {
            "name": "get_max_mean_values",
            "location": 42,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bin.__str__": {
            "name": "__str__",
            "location": 154,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bin.get_concentration_units": {
            "name": "get_concentration_units",
            "location": 157,
            "return": [
                "Text",
                "str",
                "Set[str]",
                "List[tracim.models.data.Content]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bin.get_concentration_data_by_species": {
            "name": "get_concentration_data_by_species",
            "location": 160,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "str",
                "List",
                "MutableMapping",
                "None"
            ],
            "arguments": {
                "self": [],
                "species": [
                    "Dict[str,Any]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/tasks.py": {
        "get_ifcb_dashboard_data": {
            "name": "get_ifcb_dashboard_data",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "reset_ifcb_dataset_data": {
            "name": "reset_ifcb_dataset_data",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "dataset_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "bytearray",
                    "bytes"
                ]
            }
        },
        "recalculate_metrics": {
            "name": "recalculate_metrics",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "species_id": [
                    "int",
                    "str",
                    "transfer.models.ListID"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/tests.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/urls.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/utils.py": {
        "get_bins_outside_target_area": {
            "name": "get_bins_outside_target_area",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_image_ifcb_dashboard": {
            "name": "_get_image_ifcb_dashboard",
            "location": 28,
            "return": [
                "None",
                "int",
                "Tuple",
                "Optional[List[str]]"
            ],
            "arguments": {
                "dataset_obj": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "img_name": [
                    "str",
                    "zerver.models.Realm"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/views.py": {
        "BinAjaxGetImagesBySpecies.get": {
            "name": "get",
            "location": 23,
            "return": [
                "JsonResponse",
                "str",
                "bool",
                "Dict[str,Dict[str,str]]",
                "Callable",
                "Dict[str,Any]",
                "models.Dashboard"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "models.Workspace"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/api/mixins.py": {
        "BinFiltersMixin.handle_query_param_filters": {
            "name": "handle_query_param_filters",
            "location": 16,
            "return": [
                "int",
                "bool",
                "str",
                "float",
                "Set",
                "Tuple[Union[Any,Any,Any,Any,Any,Any,Any,Any,Any,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "Set",
                    "salon.models.Stylist",
                    "lingAny_api.models.reflection.Reflection",
                    "esm.models.service_instance.ServiceInstance"
                ]
            }
        },
        "DatasetFiltersMixin.handle_query_param_filters": {
            "name": "handle_query_param_filters",
            "location": 111,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "str",
                    "int",
                    "excars.models.user.User",
                    "Optional[Dict[str, str]]"
                ],
                "is_fixed_location": [
                    "bool",
                    "Iterable[bytes]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/api/serializers.py": {
        "DatasetListSerializer.get_max_mean_values": {
            "name": "get_max_mean_values",
            "location": 46,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "List[str]",
                    "str",
                    "salon.models.Stylist"
                ]
            }
        },
        "DatasetDetailSerializer.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetDetailSerializer.get_datapoints": {
            "name": "get_datapoints",
            "location": 69,
            "return": [
                "List[dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "List[str]",
                    "float"
                ]
            }
        },
        "BinSpatialGridSerializer.to_representation": {
            "name": "to_representation",
            "location": 116,
            "return": [
                "OrderedDict",
                "str",
                "Iterable[str]",
                "Iterable[T]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "BinSpatialGridSerializer.get_grid_center_points": {
            "name": "get_grid_center_points",
            "location": 134,
            "return": [
                "str",
                "List",
                "bool",
                "List[OrderedDict]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Optional[bool]"
                ]
            }
        },
        "BinSpatialGridSerializer.format_max_mean": {
            "name": "format_max_mean",
            "location": 172,
            "return": [
                "List[str]",
                "str",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "square": [
                    "Dict[str,int]",
                    "Dict[str,float]",
                    "Mapping",
                    "models.Question"
                ]
            }
        },
        "BinSpatialGridDetailSerializer.to_representation": {
            "name": "to_representation",
            "location": 229,
            "return": [
                "OrderedDict",
                "str",
                "Iterable[str]",
                "Iterable[T]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "BinSpatialGridDetailSerializer.get_geohash": {
            "name": "get_geohash",
            "location": 250,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ]
            }
        },
        "BinSpatialGridDetailSerializer.get_properties": {
            "name": "get_properties",
            "location": 253,
            "return": [
                "List",
                "Dict[Text,list[dict]]",
                "str",
                "List[List[int]]",
                "bool",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "paradigm.models.Base",
                    "Iterable[str]"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/api/serializers_s2library.py": {
        "DatasetListSerializer.get_max_mean_values": {
            "name": "get_max_mean_values",
            "location": 47,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "List[str]",
                    "str",
                    "salon.models.Stylist"
                ]
            }
        },
        "DatasetDetailSerializer.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetDetailSerializer.get_datapoints": {
            "name": "get_datapoints",
            "location": 70,
            "return": [
                "List[dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "List[str]",
                    "float"
                ]
            }
        },
        "SpatialDatasetSerializer.to_representation": {
            "name": "to_representation",
            "location": 129,
            "return": [
                "OrderedDict",
                "str",
                "Iterable[str]",
                "Iterable[T]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "SpatialDatasetSerializer.convert_s2_point_to_latlng": {
            "name": "convert_s2_point_to_latlng",
            "location": 147,
            "return": [
                "Dict[Text,float]",
                "int",
                "Type",
                "Set",
                "str"
            ],
            "arguments": {
                "self": [],
                "s2_point": [
                    "str"
                ]
            }
        },
        "SpatialDatasetSerializer.get_grid_center_points": {
            "name": "get_grid_center_points",
            "location": 153,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "SpatialBinSerializer.to_representation": {
            "name": "to_representation",
            "location": 253,
            "return": [
                "OrderedDict",
                "str",
                "Iterable[str]",
                "Iterable[T]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "SpatialBinSerializer.convert_s2_point_to_latlng": {
            "name": "convert_s2_point_to_latlng",
            "location": 271,
            "return": [
                "Dict[Text,float]",
                "int",
                "Type",
                "Set",
                "str"
            ],
            "arguments": {
                "self": [],
                "s2_point": [
                    "str"
                ]
            }
        },
        "SpatialBinSerializer.get_grid_center_points": {
            "name": "get_grid_center_points",
            "location": 277,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "SpatialBinSerializer.get_max_mean_values": {
            "name": "get_max_mean_values",
            "location": 369,
            "return": [
                "List[dict[Text,Union[str,list[Any],int,Any]]]",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "str",
                    "bool",
                    "Tuple[Union[int,int,int]]",
                    "Tuple[int,int,int]",
                    "int"
                ]
            }
        },
        "BoundingBoxSerializer.get_max_bounding_box": {
            "name": "get_max_bounding_box",
            "location": 417,
            "return": [
                "str",
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ]
            }
        },
        "SpatialGridSerializer.to_representation": {
            "name": "to_representation",
            "location": 424,
            "return": [
                "OrderedDict",
                "str",
                "Iterable[str]",
                "Iterable[T]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "SpatialGridSerializer.convert_s2_point_to_latlng": {
            "name": "convert_s2_point_to_latlng",
            "location": 442,
            "return": [
                "Dict[Text,float]",
                "int",
                "Type",
                "Set",
                "str"
            ],
            "arguments": {
                "self": [],
                "s2_point": [
                    "str"
                ]
            }
        },
        "SpatialGridSerializer.get_grid_center_points": {
            "name": "get_grid_center_points",
            "location": 448,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Union[int, float]",
                    "int"
                ]
            }
        },
        "SpatialGridSerializer.get_max_mean_values": {
            "name": "get_max_mean_values",
            "location": 591,
            "return": [
                "List[dict[Text,Union[str,list[Any],int,Any]]]",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "int",
                    "bool",
                    "Tuple[int,int]",
                    "Sequence[int]"
                ]
            }
        },
        "BinSpatialGridSerializer.to_representation": {
            "name": "to_representation",
            "location": 637,
            "return": [
                "OrderedDict",
                "str",
                "Iterable[str]",
                "Iterable[T]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "BinSpatialGridSerializer.get_grid_center_points": {
            "name": "get_grid_center_points",
            "location": 655,
            "return": [
                "str",
                "List",
                "bool",
                "List[OrderedDict]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Optional[bool]"
                ]
            }
        },
        "BinSpatialGridSerializer.format_max_mean": {
            "name": "format_max_mean",
            "location": 693,
            "return": [
                "List[str]",
                "str",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "square": [
                    "Dict[str,int]",
                    "Dict[str,float]",
                    "Mapping",
                    "models.Question"
                ]
            }
        },
        "BinSpatialGridDetailSerializer.to_representation": {
            "name": "to_representation",
            "location": 751,
            "return": [
                "OrderedDict",
                "str",
                "Iterable[str]",
                "Iterable[T]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "BinSpatialGridDetailSerializer.get_geohash": {
            "name": "get_geohash",
            "location": 772,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ]
            }
        },
        "BinSpatialGridDetailSerializer.get_properties": {
            "name": "get_properties",
            "location": 775,
            "return": [
                "List",
                "Dict[Text,list[dict]]",
                "str",
                "List[List[int]]",
                "bool",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "paradigm.models.Base",
                    "Iterable[str]"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/api/views.py": {
        "BinViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 32,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetViewSet.dispatch": {
            "name": "dispatch",
            "location": 44,
            "return": [
                "zerver.models.Realm",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 47,
            "return": [
                "str",
                "List[str]",
                "Dict",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 55,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinSpatialGridViewSet.dispatch": {
            "name": "dispatch",
            "location": 65,
            "return": [
                "zerver.models.Realm",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinSpatialGridViewSet.list": {
            "name": "list",
            "location": 68,
            "return": [
                "Response",
                "Dict",
                "Optional[str]",
                "django.db.models.QuerySet",
                "Dict[str,str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,Any]",
                    "Dict",
                    "django.http.HttpRequest",
                    "str",
                    "purplship.core.models.RateRequest"
                ]
            }
        },
        "BinSpatialGridViewSet.retrieve": {
            "name": "retrieve",
            "location": 76,
            "return": [
                "Response",
                "Dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "pk": [
                    "None",
                    "int",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0001_initial.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0002_auto_20200630_1557.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0003_auto_20200701_1604.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0004_auto_20200718_1805.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0005_auto_20200719_1852.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0006_bin_cell_concentration_data.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0007_auto_20200721_1838.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0008_auto_20200724_1943.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0009_auto_20200728_1844.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0010_delete_speciesclassified.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0011_auto_20201214_1342.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0012_auto_20201214_1713.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0013_dataset_fixed_location.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0014_bin_geom_s2_hash.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0015_auto_20210530_1545.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0016_auto_20210530_1549.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/0017_autoclassscore.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/ifcb_datasets/migrations/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/admin.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/apps.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/forms.py": {
        "MonitoringSystemForm.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonitoringSystemForm.clean": {
            "name": "clean",
            "location": 33,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/models.py": {
        "MonitoringSystem.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/tests.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/urls.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/views.py": {
        "MonitoringSystemAjaxGetAllView.get": {
            "name": "get",
            "location": 18,
            "return": [
                "HttpResponse",
                "Dict[str,Any]",
                "Tuple[str,str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "MonitoringSystemAjaxGetMonitoringView.get": {
            "name": "get",
            "location": 26,
            "return": [
                "HttpResponse",
                "Dict[str,Any]",
                "Tuple[str,str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "MonitoringSystemAjaxGetForecastingView.get": {
            "name": "get",
            "location": 34,
            "return": [
                "HttpResponse",
                "Dict[str,Any]",
                "Tuple[str,str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/migrations/0001_initial.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/migrations/0002_auto_20200106_1148.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/migrations/0003_auto_20200106_1156.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/migrations/0004_auto_20200106_1200.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/migrations/0005_auto_20200106_1214.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/monitoring_systems/migrations/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/admin.py": {
        "StationResource.before_save_instance": {
            "name": "before_save_instance",
            "location": 25,
            "return": [
                "int",
                "str",
                "bool",
                "Sequence[int]",
                "float",
                "List[int]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "Sequence[int]",
                    "float",
                    "List[int]",
                    "List[float]",
                    "models.Route",
                    "int"
                ],
                "using_transactions": [
                    "bool",
                    "str",
                    "float"
                ],
                "dry_run": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "DatapointResource.before_save_instance": {
            "name": "before_save_instance",
            "location": 61,
            "return": [
                "int",
                "str",
                "Dict",
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "using_transactions": [
                    "bool",
                    "str",
                    "float"
                ],
                "dry_run": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/apps.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/forms.py": {
        "StationForm.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationForm.clean": {
            "name": "clean",
            "location": 30,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/managers.py": {
        "StationQuerySet.add_station_max": {
            "name": "add_station_max",
            "location": 7,
            "return": [
                "bytearray",
                "float",
                "List[int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "date_q_filters": [
                    "None"
                ]
            }
        },
        "StationQuerySet.add_station_mean": {
            "name": "add_station_mean",
            "location": 28,
            "return": [
                "bytearray",
                "float",
                "List[int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "date_q_filters": [
                    "None"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/models.py": {
        "get_hab_species_default": {
            "name": "get_hab_species_default",
            "location": 10,
            "return": [
                "List",
                "zerver.models.Realm",
                "List[List[str]]",
                "Optional[str]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {}
        },
        "Station.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datapoint.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/tests.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/urls.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/views.py": {
        "StationAjaxGetAllView.get": {
            "name": "get",
            "location": 28,
            "return": [
                "JsonResponse",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "models.Workspace"
                ]
            }
        },
        "StationAjaxGetChartView.get": {
            "name": "get",
            "location": 62,
            "return": [
                "JsonResponse",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "StationMapMainView.get_context_data": {
            "name": "get_context_data",
            "location": 122,
            "return": [
                "Dict[Text,str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationListView.get_context_data": {
            "name": "get_context_data",
            "location": 139,
            "return": [
                "str",
                "List",
                "int",
                "List[int]",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatapointCsvUploadView.form_valid": {
            "name": "form_valid",
            "location": 155,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "float"
                ]
            }
        },
        "DatapointCsvUploadView.get_success_url": {
            "name": "get_success_url",
            "location": 209,
            "return": [
                "float",
                "str",
                "tuple",
                "list",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/api/serializers.py": {
        "StationSerializer.get_max_mean_values": {
            "name": "get_max_mean_values",
            "location": 18,
            "return": [
                "List[dict[Text,Union[Text,float]]]",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "float",
                    "int",
                    "Callable[...,float]",
                    "Dict[str,Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "StationSerializer.get_datapoints": {
            "name": "get_datapoints",
            "location": 30,
            "return": [
                "None",
                "str",
                "List[dict[Text,Union[str,list,Pattern,float]]]",
                "Optional[int]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Iterable[List[T]]",
                    "bool",
                    "Iterable[list[T]]",
                    "Iterable[T]"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/api/views.py": {
        "StationViewSet.dispatch": {
            "name": "dispatch",
            "location": 31,
            "return": [
                "zerver.models.Realm",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 34,
            "return": [
                "str",
                "Dict",
                "List[str]",
                "bool",
                "frozenset",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0001_initial.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0002_station_state.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0003_auto_20181217_1920.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0004_auto_20181217_2009.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0005_datapoint.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0006_auto_20181218_1924.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0007_auto_20181218_1936.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0008_datapoint_species.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0009_auto_20190107_2011.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0010_auto_20200302_1123.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0011_auto_20200302_1431.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0012_auto_20200303_0939.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0013_datapoint_measurement.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0014_auto_20200303_0943.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0015_remove_datapoint_measurement_old.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0016_auto_20200306_1136.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0017_station_hab_species.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0018_auto_20201126_1953.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0019_auto_20201229_1926.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0020_auto_20201230_1450.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/0021_auto_20210103_1344.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/stations/migrations/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 11,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 17,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ],
                "sociallogin": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/admin.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/urls.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/views.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 34,
            "return": [
                "bool",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/migrations/0001_initial.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/migrations/0002_auto_20220114_1903.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/migrations/__init__.py": {},
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "whoi-hab-hub-main/habhub-dataserver/habhub/users/tests/__init__.py": {}
}
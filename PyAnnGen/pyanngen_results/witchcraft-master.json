{
    "witchcraft-master/setup.py": {},
    "witchcraft-master/projects/__init__.py": {},
    "witchcraft-master/projects/naughty/definition.py": {
        "clean_definition_string": {
            "name": "clean_definition_string",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "str_in": [
                    "str"
                ]
            }
        },
        "generate_definitions_from_csv": {
            "name": "generate_definitions_from_csv",
            "location": 101,
            "return": [
                "Generator[(UrbanDictionaryDefinition, None, None)]"
            ],
            "arguments": {
                "input_csv_iter": [
                    "Iterable"
                ]
            }
        },
        "UrbanDictionaryDefinition.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "upvotes": [
                    "int"
                ],
                "downvotes": [
                    "int"
                ],
                "word": [
                    "witchcraft.nlp.datatypes.Document"
                ],
                "definition": [
                    "witchcraft.nlp.datatypes.Document"
                ]
            }
        },
        "UrbanDictionaryDefinition.get_word": {
            "name": "get_word",
            "location": 17,
            "return": [
                "witchcraft.nlp.datatypes.Document"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrbanDictionaryDefinition.get_definition": {
            "name": "get_definition",
            "location": 20,
            "return": [
                "witchcraft.nlp.datatypes.Document"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrbanDictionaryDefinition.get_upvotes": {
            "name": "get_upvotes",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrbanDictionaryDefinition.get_downvotes": {
            "name": "get_downvotes",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrbanDictionaryDefinition.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrbanDictionaryDefinition.to_protobuf": {
            "name": "to_protobuf",
            "location": 32,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrbanDictionaryDefinition.to_array": {
            "name": "to_array",
            "location": 40,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrbanDictionaryDefinition.from_protobuf": {
            "name": "from_protobuf",
            "location": 49,
            "return": [
                "UrbanDictionaryDefinition"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUrbanDictionaryDefinition]"
                ],
                "protobuf": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "UrbanDictionaryDefinition.from_array": {
            "name": "from_array",
            "location": 58,
            "return": [
                "UrbanDictionaryDefinition"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUrbanDictionaryDefinition]"
                ],
                "arr": [
                    "list"
                ]
            }
        }
    },
    "witchcraft-master/projects/naughty/__init__.py": {},
    "witchcraft-master/projects/naughty/nlp/dataset.py": {},
    "witchcraft-master/projects/naughty/protos/naughty_pb2.py": {},
    "witchcraft-master/projects/naughty/protos/__init__.py": {},
    "witchcraft-master/projects/naughty/tools/parse.py": {},
    "witchcraft-master/projects/naughty/tools/search.py": {
        "home": {
            "name": "home",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        }
    },
    "witchcraft-master/projects/naughty/tools/train_phrases.py": {
        "corpus_from_files": {
            "name": "corpus_from_files",
            "location": 15,
            "return": [
                "str",
                "Corpus"
            ],
            "arguments": {
                "files": [
                    "List[str]"
                ]
            }
        }
    },
    "witchcraft-master/projects/naughty/tools/train_sequences.py": {},
    "witchcraft-master/tests/test_nlp_parse.py": {
        "test_singleton_spacy": {
            "name": "test_singleton_spacy",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phrase_grouping": {
            "name": "test_phrase_grouping",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "witchcraft-master/witchcraft/__init__.py": {},
    "witchcraft-master/witchcraft/ml/datasets.py": {
        "WitchcraftDataset.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tf_dataset_base": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "WitchcraftDataset.flat_map": {
            "name": "flat_map",
            "location": 9,
            "return": [
                "WitchcraftDataset"
            ],
            "arguments": {
                "self": [
                    "_TWitchcraftDataset"
                ],
                "mapper": [
                    "Callable[([Any], list)]"
                ]
            }
        },
        "WitchcraftDataset.map": {
            "name": "map",
            "location": 13,
            "return": [
                "WitchcraftDataset"
            ],
            "arguments": {
                "self": [
                    "_TWitchcraftDataset"
                ],
                "mapper": [
                    "Callable[([Any], Any)]"
                ],
                "num_parallel_calls": [
                    "int"
                ]
            }
        },
        "WitchcraftDataset.batch": {
            "name": "batch",
            "location": 17,
            "return": [
                "WitchcraftDataset"
            ],
            "arguments": {
                "self": [
                    "_TWitchcraftDataset"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "WitchcraftDataset.shuffle": {
            "name": "shuffle",
            "location": 21,
            "return": [
                "WitchcraftDataset"
            ],
            "arguments": {
                "self": [
                    "_TWitchcraftDataset"
                ],
                "shuffle_buffer": [
                    "int"
                ]
            }
        },
        "WitchcraftDataset.repeat": {
            "name": "repeat",
            "location": 25,
            "return": [
                "WitchcraftDataset"
            ],
            "arguments": {
                "self": [
                    "_TWitchcraftDataset"
                ]
            }
        },
        "WitchcraftDataset.prefetch": {
            "name": "prefetch",
            "location": 29,
            "return": [
                "WitchcraftDataset"
            ],
            "arguments": {
                "self": [
                    "_TWitchcraftDataset"
                ],
                "buffer_size": [
                    "int"
                ]
            }
        },
        "WitchcraftDataset.cache": {
            "name": "cache",
            "location": 33,
            "return": [
                "WitchcraftDataset"
            ],
            "arguments": {
                "self": [
                    "_TWitchcraftDataset"
                ]
            }
        },
        "WitchcraftDataset.to_tf_iterator": {
            "name": "to_tf_iterator",
            "location": 37,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftDatasetIntegerRange.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_int": [
                    "int"
                ]
            }
        }
    },
    "witchcraft-master/witchcraft/ml/datatypes.py": {
        "Embedding.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "List[float]"
                ]
            }
        },
        "Embedding.get_vector": {
            "name": "get_vector",
            "location": 11,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhraseEmbedding.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "phrase": [
                    "str"
                ],
                "count": [
                    "int"
                ],
                "vector": [
                    "List[float]"
                ],
                "ngrams": [
                    "Optional[List[PhraseEmbeddingNgram]]"
                ]
            }
        },
        "PhraseEmbedding.get_phrase": {
            "name": "get_phrase",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhraseEmbedding.get_count": {
            "name": "get_count",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhraseEmbedding.get_ngrams": {
            "name": "get_ngrams",
            "location": 28,
            "return": [
                "List[PhraseEmbeddingNgram]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhraseEmbedding.to_protobuf": {
            "name": "to_protobuf",
            "location": 31,
            "return": [
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhraseEmbedding.from_protobuf": {
            "name": "from_protobuf",
            "location": 40,
            "return": [
                "PhraseEmbedding"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPhraseEmbedding]"
                ],
                "phrase_embedding_proto": [
                    "list[]",
                    "bool",
                    "witchcrafml.protos.mldatatypes_pb2.PhraseEmbedding",
                    "list"
                ]
            }
        },
        "PhraseEmbeddingNgram.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ngram": [
                    "str"
                ],
                "attention": [
                    "float"
                ]
            }
        },
        "PhraseEmbeddingNgram.get_ngram": {
            "name": "get_ngram",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhraseEmbeddingNgram.get_attention": {
            "name": "get_attention",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhraseEmbeddingNgram.to_protobuf": {
            "name": "to_protobuf",
            "location": 59,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhraseEmbeddingNgram.from_protobuf": {
            "name": "from_protobuf",
            "location": 66,
            "return": [
                "PhraseEmbeddingNgram"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPhraseEmbeddingNgram]"
                ],
                "ngram_proto": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "witchcraft-master/witchcraft/ml/optimizers.py": {
        "Optimizer.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "Optimizer.get_name": {
            "name": "get_name",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.to_tf_optimizer": {
            "name": "to_tf_optimizer",
            "location": 12,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftAdamOptimizer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learning_rate": [
                    "float"
                ],
                "beta1": [
                    "float"
                ],
                "beta2": [
                    "float"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "WitchcraftAdamOptimizer.get_learning_rate": {
            "name": "get_learning_rate",
            "location": 29,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftAdamOptimizer.get_beta_1": {
            "name": "get_beta_1",
            "location": 32,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftAdamOptimizer.get_beta_2": {
            "name": "get_beta_2",
            "location": 35,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftAdamOptimizer.get_epsilon": {
            "name": "get_epsilon",
            "location": 38,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftAdamOptimizer.to_tf_optimizer": {
            "name": "to_tf_optimizer",
            "location": 41,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftAdagradOptimizer.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learning_rate": [
                    "float"
                ],
                "initial_accumulator_value": [
                    "float"
                ]
            }
        },
        "WitchcraftAdagradOptimizer.get_learning_rate": {
            "name": "get_learning_rate",
            "location": 60,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftAdagradOptimizer.get_initial_accumulator_value": {
            "name": "get_initial_accumulator_value",
            "location": 63,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftAdagradOptimizer.to_tf_optimizer": {
            "name": "to_tf_optimizer",
            "location": 66,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftGradientDescentOptimizer.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learning_rate": [
                    "float"
                ]
            }
        },
        "WitchcraftGradientDescentOptimizer.get_learning_rate": {
            "name": "get_learning_rate",
            "location": 79,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftGradientDescentOptimizer.to_tf_optimizer": {
            "name": "to_tf_optimizer",
            "location": 82,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftMomentumOptimizer.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learning_rate": [
                    "float"
                ],
                "momentum": [
                    "float"
                ]
            }
        },
        "WitchcraftMomentumOptimizer.get_learning_rate": {
            "name": "get_learning_rate",
            "location": 95,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftMomentumOptimizer.get_momentum": {
            "name": "get_momentum",
            "location": 98,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitchcraftMomentumOptimizer.to_tf_optimizer": {
            "name": "to_tf_optimizer",
            "location": 101,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "witchcraft-master/witchcraft/ml/__init__.py": {},
    "witchcraft-master/witchcraft/ml/models/celmo.py": {},
    "witchcraft-master/witchcraft/ml/models/fasttext.py": {
        "FastTextHyperparameters.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextHyperparameters.set_embedding_size": {
            "name": "set_embedding_size",
            "location": 21,
            "return": [
                "FastTextHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TFastTextHyperparameters"
                ],
                "embedding_size": [
                    "int"
                ]
            }
        },
        "FastTextHyperparameters.get_embedding_size": {
            "name": "get_embedding_size",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextHyperparameters.set_batch_size": {
            "name": "set_batch_size",
            "location": 28,
            "return": [
                "FastTextHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TFastTextHyperparameters"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "FastTextHyperparameters.get_batch_size": {
            "name": "get_batch_size",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextHyperparameters.get_name": {
            "name": "get_name",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextHyperparameters.set_name": {
            "name": "set_name",
            "location": 38,
            "return": [
                "FastTextHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TFastTextHyperparameters"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FastTextHyperparameters.set_skipgram_window_size": {
            "name": "set_skipgram_window_size",
            "location": 42,
            "return": [
                "FastTextHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TFastTextHyperparameters"
                ],
                "window_size": [
                    "int"
                ]
            }
        },
        "FastTextHyperparameters.get_skipgram_window_size": {
            "name": "get_skipgram_window_size",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextHyperparameters.set_optimizer": {
            "name": "set_optimizer",
            "location": 49,
            "return": [
                "FastTextHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TFastTextHyperparameters"
                ],
                "optimizer": [
                    "witchcraft.ml.optimizers.Optimizer"
                ]
            }
        },
        "FastTextHyperparameters.get_optimizer": {
            "name": "get_optimizer",
            "location": 53,
            "return": [
                "witchcraft.ml.optimizers.Optimizer"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextVocab.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "witchcraft.nlp.datatypes.Corpus"
                ]
            }
        },
        "FastTextVocab.__iter__": {
            "name": "__iter__",
            "location": 153,
            "return": [
                "listiterator[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextVocab.get_ngrams": {
            "name": "get_ngrams",
            "location": 156,
            "return": [
                "listiterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextVocab.phrase_to_id": {
            "name": "phrase_to_id",
            "location": 159,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "phrase": [
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "typing.Callable[T, bool]",
                    "dict",
                    "Callable[[T], bool]"
                ]
            }
        },
        "FastTextVocab.get_vocab_size": {
            "name": "get_vocab_size",
            "location": 162,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextVocab.get_ngrams_size": {
            "name": "get_ngrams_size",
            "location": 165,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextVocab.create_phrase_ngrams": {
            "name": "create_phrase_ngrams",
            "location": 168,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "phrase": [
                    "Sequence[int]",
                    "List[int]",
                    "List[List[int]]",
                    "Iterable[str]",
                    "Dict[str, int]",
                    "int"
                ]
            }
        },
        "FastTextVocab.create_phrase_ngrams_by_id": {
            "name": "create_phrase_ngrams_by_id",
            "location": 177,
            "return": [
                "Optional[List[int]]"
            ],
            "arguments": {
                "self": [],
                "phrase": [
                    "str",
                    "int",
                    "eth_keys.datatypes.PublicKey"
                ],
                "max_ngrams": [
                    "str",
                    "List[int]",
                    "Tuple[int]",
                    "float"
                ]
            }
        },
        "FastTextVocab.save_ngrams_tsv": {
            "name": "save_ngrams_tsv",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastTextVocabNgramDataset.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "FastTextVocab"
                ]
            }
        },
        "FastTextVocabCorpusDataset.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "witchcraft.nlp.datatypes.Corpus"
                ],
                "vocab": [
                    "FastTextVocab"
                ]
            }
        },
        "FastTextModel.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "witchcraft.nlp.datatypes.Corpus"
                ],
                "hyperparameters": [
                    "Optional[FastTextHyperparameters]"
                ]
            }
        },
        "FastTextModel.train": {
            "name": "train",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_step": [
                    "int"
                ]
            }
        },
        "FastTextModel.save_embeddings": {
            "name": "save_embeddings",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "FastTextVocabNgramDataset.__init__.gen": {
            "name": "gen",
            "location": 196,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "FastTextVocabCorpusDataset.__init__.gen": {
            "name": "gen",
            "location": 213,
            "return": [
                "",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {}
        }
    },
    "witchcraft-master/witchcraft/ml/models/glove.py": {
        "GloVeHyperparameters.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GloVeHyperparameters.set_embedding_size": {
            "name": "set_embedding_size",
            "location": 25,
            "return": [
                "GloVeHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TGloVeHyperparameters"
                ],
                "embedding_size": [
                    "int"
                ]
            }
        },
        "GloVeHyperparameters.get_embedding_size": {
            "name": "get_embedding_size",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GloVeHyperparameters.set_batch_size": {
            "name": "set_batch_size",
            "location": 32,
            "return": [
                "GloVeHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TGloVeHyperparameters"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "GloVeHyperparameters.get_batch_size": {
            "name": "get_batch_size",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GloVeHyperparameters.get_name": {
            "name": "get_name",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GloVeHyperparameters.set_name": {
            "name": "set_name",
            "location": 42,
            "return": [
                "GloVeHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TGloVeHyperparameters"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GloVeHyperparameters.set_min_word_count": {
            "name": "set_min_word_count",
            "location": 46,
            "return": [
                "GloVeHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TGloVeHyperparameters"
                ],
                "min_word_count": [
                    "int"
                ]
            }
        },
        "GloVeHyperparameters.get_min_word_count": {
            "name": "get_min_word_count",
            "location": 50,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GloVeHyperparameters.set_max_vocab_size": {
            "name": "set_max_vocab_size",
            "location": 53,
            "return": [
                "GloVeHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TGloVeHyperparameters"
                ],
                "max_vocab_size": [
                    "Optional[int]"
                ]
            }
        },
        "GloVeHyperparameters.get_max_vocab_size": {
            "name": "get_max_vocab_size",
            "location": 57,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GloVeHyperparameters.set_window_size": {
            "name": "set_window_size",
            "location": 60,
            "return": [
                "GloVeHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TGloVeHyperparameters"
                ],
                "window_size": [
                    "int"
                ]
            }
        },
        "GloVeHyperparameters.get_window_size": {
            "name": "get_window_size",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GloVeHyperparameters.set_distance_weight_function": {
            "name": "set_distance_weight_function",
            "location": 67,
            "return": [
                "GloVeHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TGloVeHyperparameters"
                ],
                "distance_func": [
                    "Callable[([float], float)]"
                ]
            }
        },
        "GloVeHyperparameters.distance_weight": {
            "name": "distance_weight",
            "location": 71,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "float"
                ]
            }
        },
        "GloVeHyperparameters.set_optimizer": {
            "name": "set_optimizer",
            "location": 74,
            "return": [
                "GloVeHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TGloVeHyperparameters"
                ],
                "optimizer": [
                    "witchcraft.ml.optimizers.Optimizer"
                ]
            }
        },
        "GloVeHyperparameters.get_optimizer": {
            "name": "get_optimizer",
            "location": 78,
            "return": [
                "witchcraft.ml.optimizers.Optimizer"
            ],
            "arguments": {
                "self": []
            }
        },
        "GloVeHyperparameters.set_loss_weight_alpha": {
            "name": "set_loss_weight_alpha",
            "location": 81,
            "return": [
                "GloVeHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TGloVeHyperparameters"
                ],
                "loss_weight_alpha": [
                    "float"
                ]
            }
        },
        "GloVeHyperparameters.get_loss_weight_alpha": {
            "name": "get_loss_weight_alpha",
            "location": 85,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GloVeHyperparameters.set_loss_weight_xmax": {
            "name": "set_loss_weight_xmax",
            "location": 88,
            "return": [
                "GloVeHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TGloVeHyperparameters"
                ],
                "loss_weight_xmax": [
                    "float"
                ]
            }
        },
        "GloVeHyperparameters.get_loss_weight_xmax": {
            "name": "get_loss_weight_xmax",
            "location": 92,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GloVeModel.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "witchcraft.nlp.datatypes.Corpus"
                ],
                "hyperparameters": [
                    "Optional[GloVeHyperparameters]"
                ]
            }
        },
        "GloVeModel.train": {
            "name": "train",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_step": [
                    "int"
                ]
            }
        },
        "GloVeModel.save_embeddings": {
            "name": "save_embeddings",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "witchcraft-master/witchcraft/ml/models/nearest_neighbor.py": {
        "NearestNeighborResult.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding": [
                    "witchcraft.ml.datatypes.Embedding"
                ],
                "strength": [
                    "float"
                ]
            }
        },
        "NearestNeighborResult.get_embedding": {
            "name": "get_embedding",
            "location": 11,
            "return": [
                "witchcraft.ml.datatypes.Embedding"
            ],
            "arguments": {
                "self": []
            }
        },
        "NearestNeighborResult.get_strength": {
            "name": "get_strength",
            "location": 14,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "NearestNeighborModel.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embeddings": [
                    "List[witchcraft.ml.datatypes.Embedding]"
                ]
            }
        },
        "NearestNeighborModel.lookup_nearby": {
            "name": "lookup_nearby",
            "location": 37,
            "return": [
                "List[NearestNeighborResult]"
            ],
            "arguments": {
                "self": [],
                "embedding": [
                    "witchcraft.ml.datatypes.Embedding"
                ],
                "max_results": [
                    "int"
                ]
            }
        }
    },
    "witchcraft-master/witchcraft/ml/models/word2vec.py": {
        "Word2VecHyperparameters.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.set_embedding_size": {
            "name": "set_embedding_size",
            "location": 29,
            "return": [
                "Word2VecHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TWord2VecHyperparameters"
                ],
                "embedding_size": [
                    "int"
                ]
            }
        },
        "Word2VecHyperparameters.get_embedding_size": {
            "name": "get_embedding_size",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.set_batch_size": {
            "name": "set_batch_size",
            "location": 36,
            "return": [
                "Word2VecHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TWord2VecHyperparameters"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "Word2VecHyperparameters.get_batch_size": {
            "name": "get_batch_size",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.set_negative_sample_count": {
            "name": "set_negative_sample_count",
            "location": 43,
            "return": [
                "Word2VecHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TWord2VecHyperparameters"
                ],
                "negative_sample_count": [
                    "int"
                ]
            }
        },
        "Word2VecHyperparameters.get_negative_sample_count": {
            "name": "get_negative_sample_count",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.get_name": {
            "name": "get_name",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.set_name": {
            "name": "set_name",
            "location": 53,
            "return": [
                "Word2VecHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TWord2VecHyperparameters"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Word2VecHyperparameters.set_min_word_count": {
            "name": "set_min_word_count",
            "location": 57,
            "return": [
                "Word2VecHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TWord2VecHyperparameters"
                ],
                "min_word_count": [
                    "int"
                ]
            }
        },
        "Word2VecHyperparameters.get_min_word_count": {
            "name": "get_min_word_count",
            "location": 61,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.set_max_vocab_size": {
            "name": "set_max_vocab_size",
            "location": 64,
            "return": [
                "Word2VecHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TWord2VecHyperparameters"
                ],
                "max_vocab_size": [
                    "Optional[int]"
                ]
            }
        },
        "Word2VecHyperparameters.get_max_vocab_size": {
            "name": "get_max_vocab_size",
            "location": 68,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.set_skipgram_window_size": {
            "name": "set_skipgram_window_size",
            "location": 71,
            "return": [
                "Word2VecHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TWord2VecHyperparameters"
                ],
                "window_size": [
                    "int"
                ]
            }
        },
        "Word2VecHyperparameters.get_skipgram_window_size": {
            "name": "get_skipgram_window_size",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.set_subsampling_threshold": {
            "name": "set_subsampling_threshold",
            "location": 78,
            "return": [
                "Word2VecHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TWord2VecHyperparameters"
                ],
                "subsample_threshold": [
                    "Optional[float]"
                ]
            }
        },
        "Word2VecHyperparameters.get_subsampling_threshold": {
            "name": "get_subsampling_threshold",
            "location": 82,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.set_optimizer": {
            "name": "set_optimizer",
            "location": 85,
            "return": [
                "Word2VecHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TWord2VecHyperparameters"
                ],
                "optimizer": [
                    "witchcraft.ml.optimizers.Optimizer"
                ]
            }
        },
        "Word2VecHyperparameters.get_optimizer": {
            "name": "get_optimizer",
            "location": 89,
            "return": [
                "witchcraft.ml.optimizers.Optimizer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.set_record_file_size": {
            "name": "set_record_file_size",
            "location": 92,
            "return": [
                "Word2VecHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TWord2VecHyperparameters"
                ],
                "record_file_size": [
                    "int"
                ]
            }
        },
        "Word2VecHyperparameters.get_record_file_size": {
            "name": "get_record_file_size",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.enable_ngram": {
            "name": "enable_ngram",
            "location": 99,
            "return": [
                "Word2VecHyperparameters"
            ],
            "arguments": {
                "self": [
                    "_TWord2VecHyperparameters"
                ],
                "min_count": [
                    "int"
                ],
                "max_ngram_size": [
                    "int"
                ]
            }
        },
        "Word2VecHyperparameters.get_ngram_mincount": {
            "name": "get_ngram_mincount",
            "location": 104,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecHyperparameters.get_ngram_max_size": {
            "name": "get_ngram_max_size",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecVocab.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyperparameters": [
                    "Optional[Word2VecHyperparameters]"
                ],
                "pruned": [
                    "Dict[(str, int)]"
                ],
                "pruned_word_to_id": [
                    "Dict[(str, int)]"
                ],
                "pruned_id_to_word": [
                    "List[str]"
                ]
            }
        },
        "Word2VecVocab.word_to_id": {
            "name": "word_to_id",
            "location": 126,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "Word2VecVocab.id_to_word": {
            "name": "id_to_word",
            "location": 132,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ]
            }
        },
        "Word2VecVocab.get_vocab_size": {
            "name": "get_vocab_size",
            "location": 138,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecVocab.get_vocab": {
            "name": "get_vocab",
            "location": 141,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecVocab.get_word_list": {
            "name": "get_word_list",
            "location": 144,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecVocab.store_skipgrams_to_disk": {
            "name": "store_skipgrams_to_disk",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "witchcraft.nlp.datatypes.Corpus"
                ]
            }
        },
        "Word2VecVocab.load_skipgrams_to_dataset": {
            "name": "load_skipgrams_to_dataset",
            "location": 183,
            "return": [
                "Word2VecSkipgramDataset"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecVocab.save_metadata_to_disk": {
            "name": "save_metadata_to_disk",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecVocab.get_metadata_filename": {
            "name": "get_metadata_filename",
            "location": 193,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ],
                "hyperparameters": [
                    "Optional[Word2VecHyperparameters]"
                ]
            }
        },
        "Word2VecVocab.get_skipgram_record_filename": {
            "name": "get_skipgram_record_filename",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "Word2VecVocab.get_skipgram_record_filenames": {
            "name": "get_skipgram_record_filenames",
            "location": 202,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecVocab.to_dataset": {
            "name": "to_dataset",
            "location": 214,
            "return": [
                "Word2VecSkipgramDataset"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecVocab.load_metadata_from_disk": {
            "name": "load_metadata_from_disk",
            "location": 218,
            "return": [
                "Optional[Word2VecVocab]"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "list[]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, bool]",
                    "dict[str, bool]"
                ],
                "hyperparameters": [
                    "Optional[Word2VecHyperparameters]"
                ]
            }
        },
        "Word2VecSkipgramDataset.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Word2VecVocab"
                ]
            }
        },
        "Word2VecSkipgramDataset.get_vocab": {
            "name": "get_vocab",
            "location": 267,
            "return": [
                "Word2VecVocab"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecVocabBuilder.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word2VecVocabBuilder.add_phrase_count": {
            "name": "add_phrase_count",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "phrase": [
                    "str"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Word2VecVocabBuilder.build_and_save": {
            "name": "build_and_save",
            "location": 281,
            "return": [
                "Word2VecVocab"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "witchcraft.nlp.datatypes.Corpus"
                ],
                "hyperparameters": [
                    "Optional[Word2VecHyperparameters]"
                ]
            }
        },
        "Word2VecModel.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "Word2VecVocab"
                ],
                "hyperparameters": [
                    "Optional[Word2VecHyperparameters]"
                ]
            }
        },
        "Word2VecModel.train": {
            "name": "train",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_step": [
                    "int"
                ]
            }
        },
        "Word2VecModel.save_embeddings": {
            "name": "save_embeddings",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Word2VecSkipgramDataset.__init__.map_entry": {
            "name": "map_entry",
            "location": 257,
            "return": [
                "str",
                "tuple[]"
            ],
            "arguments": {
                "entry_proto": [
                    "str",
                    "Tuple[str, str]",
                    "bytes"
                ]
            }
        }
    },
    "witchcraft-master/witchcraft/ml/models/__init__.py": {},
    "witchcraft-master/witchcraft/ml/protos/mldatatypes_pb2.py": {},
    "witchcraft-master/witchcraft/nlp/datatypes.py": {
        "PartOfSpeech.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Optional[str]"
                ]
            }
        },
        "PartOfSpeech.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartOfSpeech.to_protobuf": {
            "name": "to_protobuf",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartOfSpeech.to_array": {
            "name": "to_array",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartOfSpeech.provides_contextual_value": {
            "name": "provides_contextual_value",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartOfSpeech.from_protobuf": {
            "name": "from_protobuf",
            "location": 32,
            "return": [
                "PartOfSpeech"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPartOfSpeech]"
                ],
                "pos_proto": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PartOfSpeech.from_array": {
            "name": "from_array",
            "location": 36,
            "return": [
                "PartOfSpeech"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPartOfSpeech]"
                ],
                "arr": [
                    "list"
                ]
            }
        },
        "WordDependency.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "my_index": [
                    "int"
                ],
                "head_index": [
                    "int"
                ],
                "dep": [
                    "str"
                ]
            }
        },
        "WordDependency.get_dep": {
            "name": "get_dep",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordDependency.get_head_index": {
            "name": "get_head_index",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordDependency.get_my_index": {
            "name": "get_my_index",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordDependency.to_protobuf": {
            "name": "to_protobuf",
            "location": 57,
            "return": [
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordDependency.to_array": {
            "name": "to_array",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordDependency.from_protobuf": {
            "name": "from_protobuf",
            "location": 72,
            "return": [
                "WordDependency"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWordDependency]"
                ],
                "dep_proto": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "witchcrafml.protos.mldatatypes_pb2.PhraseEmbedding"
                ]
            }
        },
        "WordDependency.from_array": {
            "name": "from_array",
            "location": 76,
            "return": [
                "WordDependency"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWordDependency]"
                ],
                "arr": [
                    "list"
                ]
            }
        },
        "Word.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ],
                "lemma": [
                    "Optional[str]"
                ],
                "pos": [
                    "Optional[PartOfSpeech]"
                ],
                "is_stop_word": [
                    "bool"
                ],
                "whitespace_postfix": [
                    "str"
                ],
                "shape": [
                    "str"
                ],
                "is_alpha_word": [
                    "bool"
                ],
                "word_dependency": [
                    "Optional[WordDependency]"
                ]
            }
        },
        "Word.get_word_string": {
            "name": "get_word_string",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.get_part_of_speech": {
            "name": "get_part_of_speech",
            "location": 110,
            "return": [
                "PartOfSpeech"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.get_lemma_string": {
            "name": "get_lemma_string",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.is_stop_word": {
            "name": "is_stop_word",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.get_whitespace_postfix": {
            "name": "get_whitespace_postfix",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.get_shape": {
            "name": "get_shape",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.is_alpha_word": {
            "name": "is_alpha_word",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.get_word_dependency": {
            "name": "get_word_dependency",
            "location": 128,
            "return": [
                "WordDependency"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.provides_contextual_value": {
            "name": "provides_contextual_value",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.get_word_string_normalized": {
            "name": "get_word_string_normalized",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.to_protobuf": {
            "name": "to_protobuf",
            "location": 137,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.to_array": {
            "name": "to_array",
            "location": 149,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.ngrams": {
            "name": "ngrams",
            "location": 161,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ngram_len": [
                    "int"
                ]
            }
        },
        "Word.ngram_skipgrams": {
            "name": "ngram_skipgrams",
            "location": 170,
            "return": [
                "List[Tuple[(str, str, int)]]"
            ],
            "arguments": {
                "self": [],
                "window_size": [
                    "int"
                ],
                "ngram_len": [
                    "int"
                ]
            }
        },
        "Word.from_protobuf": {
            "name": "from_protobuf",
            "location": 174,
            "return": [
                "Word"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWord]"
                ],
                "word_proto": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "Word.from_array": {
            "name": "from_array",
            "location": 187,
            "return": [
                "Word"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWord]"
                ],
                "arr": [
                    "list"
                ]
            }
        },
        "Phrase.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "Optional[List[Word]]"
                ]
            }
        },
        "Phrase.__iter__": {
            "name": "__iter__",
            "location": 216,
            "return": [
                "listiterator[Word]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phrase.__str__": {
            "name": "__str__",
            "location": 219,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phrase.to_phrase_normalized": {
            "name": "to_phrase_normalized",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phrase.to_protobuf": {
            "name": "to_protobuf",
            "location": 226,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phrase.get_hash": {
            "name": "get_hash",
            "location": 231,
            "return": [
                "int",
                "str",
                "Optional[Mapping[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "bucket_size": [
                    "Optional[int]"
                ]
            }
        },
        "Phrase.is_word": {
            "name": "is_word",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phrase.to_array": {
            "name": "to_array",
            "location": 240,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phrase.provides_contextual_value": {
            "name": "provides_contextual_value",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phrase.ngrams": {
            "name": "ngrams",
            "location": 246,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ngram_len": [
                    "int"
                ]
            }
        },
        "Phrase.from_protobuf": {
            "name": "from_protobuf",
            "location": 254,
            "return": [
                "Phrase"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPhrase]"
                ],
                "phrase_proto": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Phrase.from_array": {
            "name": "from_array",
            "location": 258,
            "return": [
                "Phrase"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPhrase]"
                ],
                "arr": [
                    "list"
                ]
            }
        },
        "Phrase.merge_phrases": {
            "name": "merge_phrases",
            "location": 264,
            "return": [
                "Phrase"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPhrase]"
                ],
                "phrases": [
                    "List[_TPhrase]"
                ]
            }
        },
        "Sentence.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "phrases": [
                    "Optional[List[Phrase]]"
                ]
            }
        },
        "Sentence.__iter__": {
            "name": "__iter__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__str__": {
            "name": "__str__",
            "location": 279,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.to_protobuf": {
            "name": "to_protobuf",
            "location": 282,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.to_array": {
            "name": "to_array",
            "location": 287,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.skipgrams": {
            "name": "skipgrams",
            "location": 290,
            "return": [
                "Generator[(Tuple[(Phrase, Phrase, int)], None, None)]"
            ],
            "arguments": {
                "self": [],
                "window_size": [
                    "int"
                ]
            }
        },
        "Sentence.from_protobuf": {
            "name": "from_protobuf",
            "location": 311,
            "return": [
                "Sentence"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSentence]"
                ],
                "sentence_proto": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Sentence.from_array": {
            "name": "from_array",
            "location": 315,
            "return": [
                "Sentence"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSentence]"
                ],
                "arr": [
                    "list"
                ]
            }
        },
        "Document.__init__": {
            "name": "__init__",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "Optional[List[Sentence]]"
                ]
            }
        },
        "Document.__iter__": {
            "name": "__iter__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Document.__str__": {
            "name": "__str__",
            "location": 328,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.to_protobuf": {
            "name": "to_protobuf",
            "location": 331,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[int]",
                "Callable[[Any], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.to_array": {
            "name": "to_array",
            "location": 336,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.from_protobuf": {
            "name": "from_protobuf",
            "location": 340,
            "return": [
                "Document"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDocument]"
                ],
                "document_proto": [
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Document.from_array": {
            "name": "from_array",
            "location": 344,
            "return": [
                "Document"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDocument]"
                ],
                "arr": [
                    "list"
                ]
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "documents": [
                    "Optional[List[Document]]"
                ]
            }
        },
        "Corpus.__iter__": {
            "name": "__iter__",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "witchcraft-master/witchcraft/nlp/parse.py": {
        "cached_sentence_sequence_generator": {
            "name": "cached_sentence_sequence_generator",
            "location": 24,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "src_generator": [
                    "Iterator[bytes]",
                    "typing.Iterator",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "parse_string_to_document": {
            "name": "parse_string_to_document",
            "location": 39,
            "return": [
                "witchcraft.nlp.datatypes.Document"
            ],
            "arguments": {
                "input_str": [
                    "str"
                ]
            }
        },
        "cluster_phrases_by_dictionary": {
            "name": "cluster_phrases_by_dictionary",
            "location": 70,
            "return": [
                "witchcraft.nlp.datatypes.Document"
            ],
            "arguments": {
                "doc": [
                    "witchcraft.nlp.datatypes.Document"
                ],
                "phrase_to_id": [
                    "Dict[(str, int)]"
                ],
                "max_size": [
                    "int"
                ]
            }
        },
        "cluster_phrases": {
            "name": "cluster_phrases",
            "location": 113,
            "return": [
                "witchcraft.nlp.datatypes.Corpus"
            ],
            "arguments": {
                "corpus": [
                    "witchcraft.nlp.datatypes.Corpus"
                ],
                "max_ngram": [
                    "int"
                ],
                "min_appear": [
                    "int"
                ]
            }
        },
        "SpacyInstance.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpacyInstance.parse_internal": {
            "name": "parse_internal",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        },
        "SpacyInstance.parse": {
            "name": "parse",
            "location": 17,
            "return": [
                "str",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "input_str": [
                    "str"
                ]
            }
        },
        "cached_sentence_sequence_generator.cached_gen": {
            "name": "cached_gen",
            "location": 27,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "cluster_phrases_by_dictionary.cluster_by_size": {
            "name": "cluster_by_size",
            "location": 71,
            "return": [
                "Document",
                "str",
                "Dict[str, Dict[str, int]]",
                "int",
                "float"
            ],
            "arguments": {
                "cur_sequence": [
                    "witchcrafnlp.datatypes.Document",
                    "List[List[int]]",
                    "Callable[[str, str], float]",
                    "int",
                    "Dict[int, str]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "float"
                ],
                "size": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "cluster_phrases.ngramed_sequence_gen": {
            "name": "ngramed_sequence_gen",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sequence_gen": [
                    "int",
                    "bool",
                    "dict"
                ],
                "ngram_size": [
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "cluster_phrases.ngramed_sequence_gen.gen": {
            "name": "gen",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "witchcraft-master/witchcraft/nlp/__init__.py": {},
    "witchcraft-master/witchcraft/nlp/protos/nlpdatatypes_pb2.py": {},
    "witchcraft-master/witchcraft/nlp/protos/__init__.py": {},
    "witchcraft-master/witchcraft/util/hash.py": {
        "hash_fnv1a": {
            "name": "hash_fnv1a",
            "location": 3,
            "return": [
                "int"
            ],
            "arguments": {
                "input_str": [
                    "str"
                ],
                "bucket_size": [
                    "Optional[int]"
                ]
            }
        }
    },
    "witchcraft-master/witchcraft/util/listutil.py": {
        "skipgramify": {
            "name": "skipgramify",
            "location": 4,
            "return": [
                "List[Tuple[(Any, Any, int)]]"
            ],
            "arguments": {
                "list": [
                    "list"
                ],
                "window_size": [
                    "int"
                ]
            }
        }
    },
    "witchcraft-master/witchcraft/util/protobuf.py": {
        "protobufs_from_filestream": {
            "name": "protobufs_from_filestream",
            "location": 4,
            "return": [
                "Generator[(bytes, None, None)]"
            ],
            "arguments": {
                "file": [
                    "BinaryIO"
                ]
            }
        },
        "protobuf_to_filestream": {
            "name": "protobuf_to_filestream",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "BinaryIO"
                ],
                "protostr": [
                    "bytes"
                ]
            }
        }
    },
    "witchcraft-master/witchcraft/util/__init__.py": {}
}
{
    "xlsx_template-master/run_examples.py": {
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "xlsx_template-master/setup.py": {},
    "xlsx_template-master/tests/conftest.py": {
        "template_dir": {
            "name": "template_dir",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_template": {
            "name": "get_template",
            "location": 16,
            "return": [
                "str",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "template_dir": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "render_template": {
            "name": "render_template",
            "location": 24,
            "return": [
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "get_template": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "get_template.inner": {
            "name": "inner",
            "location": 17,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "template_name": []
            }
        },
        "render_template.inner": {
            "name": "inner",
            "location": 25,
            "return": [
                "typing.IO",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "template_name": [
                    "str",
                    "Optional[str]"
                ],
                "context": [
                    "str",
                    "List[Tuple[str, str]]",
                    "int",
                    "List[Dict]"
                ]
            }
        }
    },
    "xlsx_template-master/tests/data_generators.py": {
        "generate_for_test_variables": {
            "name": "generate_for_test_variables",
            "location": 4,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "generate_for_test_simple_loop": {
            "name": "generate_for_test_simple_loop",
            "location": 37,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "generate_for_test_two_nested_loops": {
            "name": "generate_for_test_two_nested_loops",
            "location": 42,
            "return": [
                "Dict[(str, Union[(int, list)])]"
            ],
            "arguments": {}
        },
        "generate_for_test_loop_context": {
            "name": "generate_for_test_loop_context",
            "location": 47,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "generate_for_loop_with_formulas": {
            "name": "generate_for_loop_with_formulas",
            "location": 52,
            "return": [
                "Dict[(str, List[Dict[(str, Union[(int, str, decimal.Decimal)])]])]"
            ],
            "arguments": {}
        },
        "generate_for_test_merge": {
            "name": "generate_for_test_merge",
            "location": 64,
            "return": [
                "Dict[(str, List[int])]"
            ],
            "arguments": {}
        },
        "generate_for_test_if": {
            "name": "generate_for_test_if",
            "location": 68,
            "return": [
                "Dict[(str, List[Dict[(str, int)]])]"
            ],
            "arguments": {}
        },
        "generate_for_test_column_width": {
            "name": "generate_for_test_column_width",
            "location": 72,
            "return": [
                "Dict[(str, List[Dict[(str, int)]])]"
            ],
            "arguments": {}
        },
        "generate_for_sheet_loop": {
            "name": "generate_for_sheet_loop",
            "location": 76,
            "return": [
                "Dict[(str, List[Dict[(str, Union[(str, List[int])])]])]"
            ],
            "arguments": {}
        },
        "generate_for_test_variables.complex_call": {
            "name": "complex_call",
            "location": 12,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "Set[str]"
            ],
            "arguments": {}
        },
        "generate_for_test_variables.Obj.__getattr__": {
            "name": "__getattr__",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "str"
                ]
            }
        },
        "generate_for_test_variables.Obj.__getitem__": {
            "name": "__getitem__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        }
    },
    "xlsx_template-master/tests/test_cell_groups.py": {
        "test_cell_group_with_cells": {
            "name": "test_cell_group_with_cells",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_loop_cell_group": {
            "name": "test_loop_cell_group",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_table_with_formulas": {
            "name": "test_table_with_formulas",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_negative_row_offset": {
            "name": "test_negative_row_offset",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_offsets": {
            "name": "test_offsets",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "xlsx_template-master/tests/test_templates.py": {
        "test_variables": {
            "name": "test_variables",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "render_template": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_simple_loop": {
            "name": "test_simple_loop",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "render_template": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "_test_two_loops": {
            "name": "_test_two_loops",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "wb": [
                    "str",
                    "float"
                ]
            }
        },
        "test_two_loops": {
            "name": "test_two_loops",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "render_template": [
                    "str"
                ]
            }
        },
        "test_two_loops_synt_v2": {
            "name": "test_two_loops_synt_v2",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "render_template": []
            }
        },
        "test_loop_context": {
            "name": "test_loop_context",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "render_template": [
                    "str",
                    "Union[str, IO]",
                    "typing.IO",
                    "int",
                    "None",
                    "IO[str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_merge": {
            "name": "test_merge",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "render_template": [
                    "str",
                    "Union[str, IO]",
                    "typing.IO",
                    "int",
                    "None",
                    "IO[str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_if": {
            "name": "test_if",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "render_template": [
                    "str",
                    "Union[str, IO]",
                    "typing.IO",
                    "int",
                    "None",
                    "IO[str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_sheet_loop": {
            "name": "test_sheet_loop",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "render_template": [
                    "str",
                    "Union[str, IO]",
                    "typing.IO",
                    "int",
                    "None",
                    "IO[str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "xlsx_template-master/xlsx_template/code_generator.py": {
        "Symbols.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbols.declare_ref": {
            "name": "declare_ref",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Symbols.undeclare_ref": {
            "name": "undeclare_ref",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "Symbols.add_ref": {
            "name": "add_ref",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "int",
                    "None"
                ],
                "real_name": [
                    "str",
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "Symbols.find_ref": {
            "name": "find_ref",
            "location": 26,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "CodeGenerator.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGenerator.generate": {
            "name": "generate",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "root_node": [
                    "typing.Callable[..., None]"
                ]
            }
        },
        "CodeGenerator.write": {
            "name": "write",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "None"
                ]
            }
        },
        "CodeGenerator.newline": {
            "name": "newline",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGenerator.write_line": {
            "name": "write_line",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "CodeGenerator.indent": {
            "name": "indent",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGenerator.unindent": {
            "name": "unindent",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGenerator.generate_for": {
            "name": "generate_for",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CodeGenerator.generate_for_sheet": {
            "name": "generate_for_sheet",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sheet_node": [
                    "str",
                    "typing.Pattern"
                ]
            }
        },
        "CodeGenerator.generate_for_sheetloop": {
            "name": "generate_for_sheetloop",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sheet_loop": [
                    "str",
                    "BaseException",
                    "Exception",
                    "None"
                ]
            }
        },
        "CodeGenerator.generate_for_remove": {
            "name": "generate_for_remove",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remove": [
                    "str",
                    "int"
                ]
            }
        },
        "CodeGenerator.generate_for_if": {
            "name": "generate_for_if",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "if_d": [
                    "int"
                ]
            }
        },
        "CodeGenerator.generate_for_cellgroup": {
            "name": "generate_for_cellgroup",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell_group": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "CodeGenerator.generate_for_cellloop": {
            "name": "generate_for_cellloop",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell_loop": [
                    "BaseException",
                    "None",
                    "float",
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "CodeGenerator.generate_for_funccelloutput": {
            "name": "generate_for_funccelloutput",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_cell_output": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "CodeGenerator.generate_for_funcarg": {
            "name": "generate_for_funcarg",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_arg": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CodeGenerator.generate_for_merge": {
            "name": "generate_for_merge",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell_output": [
                    "str"
                ]
            }
        },
        "CodeGenerator.generate_for_getattr": {
            "name": "generate_for_getattr",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_attr": [
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "CodeGenerator.generate_for_getitem": {
            "name": "generate_for_getitem",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_item": [
                    "bool"
                ]
            }
        },
        "CodeGenerator.generate_for_celloutput": {
            "name": "generate_for_celloutput",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell_output": [
                    "int",
                    "None",
                    "typing.Iterable[]"
                ]
            }
        },
        "CodeGenerator.generate_for_call": {
            "name": "generate_for_call",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call_node": [
                    "int",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "CodeGenerator.generate_for_arg": {
            "name": "generate_for_arg",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int"
                ]
            }
        },
        "CodeGenerator.generate_for_value": {
            "name": "generate_for_value",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "dict[, ]",
                    "typing.Sequence[T]",
                    "None",
                    "bytes",
                    "str",
                    "dict[str, typing.Any]",
                    "list[]"
                ]
            }
        },
        "CodeGenerator.generate_for_const": {
            "name": "generate_for_const",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "const": [
                    "list[str]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "CodeGenerator.generate_for_strconst": {
            "name": "generate_for_strconst",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "const": [
                    "dict[, ]",
                    "list[str]",
                    "int",
                    "tuple[typing.Union[float,float,float]]"
                ]
            }
        },
        "CodeGenerator.generate_for_filter": {
            "name": "generate_for_filter",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[F]"
                ]
            }
        },
        "CodeGenerator.generate_for_kwarg": {
            "name": "generate_for_kwarg",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwarg": [
                    "int"
                ]
            }
        },
        "CodeGenerator.generate_for_tostr": {
            "name": "generate_for_tostr",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_str": [
                    "int",
                    "str",
                    "float",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "CodeGenerator.generate_for_var": {
            "name": "generate_for_var",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "int",
                    "typing.Type"
                ]
            }
        },
        "CodeGenerator.generate_for_template": {
            "name": "generate_for_template",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template_node": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "xlsx_template-master/xlsx_template/consts.py": {},
    "xlsx_template-master/xlsx_template/environment.py": {
        "StrictResolveStrategy.resolve": {
            "name": "resolve",
            "location": 7,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "_T0"
                ],
                "name": [
                    "str"
                ],
                "found": [
                    "str",
                    "Optional[str]",
                    "None",
                    "list[str]",
                    "int",
                    "List[str]",
                    "typing.Any",
                    "Iterable[float]",
                    "typing.Callable[, ]",
                    "Any",
                    "Optional[Callable]"
                ]
            }
        },
        "StrictGetAttrStrategy.get_attr": {
            "name": "get_attr",
            "location": 14,
            "return": [
                "str",
                "int",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "attr_name": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "SoftGetAttrStrategy.get_attr": {
            "name": "get_attr",
            "location": 24,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]"
                ],
                "attr_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "StrictGetItemStrategy.get_item": {
            "name": "get_item",
            "location": 40,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "Environment.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolve_strategy": [
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "get_attr_strategy": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "get_item_strategy": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Optional[float]",
                    "float",
                    "Callable[[str], None]",
                    "typing.Callable[str, None]"
                ]
            }
        },
        "Environment.resolve": {
            "name": "resolve",
            "location": 69,
            "return": [
                "str",
                "Optional[int]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "T",
                    "typing.MutableMapping",
                    "None",
                    "MutableMapping",
                    "Optional[str]"
                ],
                "name": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "T",
                    "typing.MutableMapping",
                    "None",
                    "MutableMapping",
                    "Optional[str]"
                ],
                "found": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "T",
                    "typing.MutableMapping",
                    "None",
                    "MutableMapping",
                    "Optional[str]"
                ]
            }
        },
        "Environment.get_attr": {
            "name": "get_attr",
            "location": 72,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "attr_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "Environment.get_item": {
            "name": "get_item",
            "location": 75,
            "return": [
                "Optional[str]",
                "str",
                "Optional[bool]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ],
                "key": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "xlsx_template-master/xlsx_template/exceptions.py": {
        "ParseError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "source_hint": [
                    "str"
                ],
                "orig_exc": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Optional[str]",
                    "list",
                    "list[]"
                ]
            }
        },
        "TemplateRuntimeException.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool"
                ],
                "orig_exception": [
                    "bool",
                    "None",
                    "str",
                    "List[bytes]",
                    "list[bytes]",
                    "int",
                    "Optional[List[Any]]"
                ]
            }
        }
    },
    "xlsx_template-master/xlsx_template/file_system_loader.py": {},
    "xlsx_template-master/xlsx_template/filters.py": {
        "default_if_none": {
            "name": "default_if_none",
            "location": 1,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "value": [
                    "_T0"
                ],
                "default_value": [
                    "_T1"
                ]
            }
        },
        "yes_no": {
            "name": "yes_no",
            "location": 5,
            "return": [
                "Union[(_T1, _T2)]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "typing.Callable[int, None]",
                    "Callable[[int], None]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "List[str]",
                    "list[typing.Type]",
                    "int",
                    "List[Type[Exception]]"
                ],
                "yes_value": [
                    "_T1"
                ],
                "no_value": [
                    "_T2"
                ]
            }
        }
    },
    "xlsx_template-master/xlsx_template/grammar.py": {
        "double_constant_pa": {
            "name": "double_constant_pa",
            "location": 19,
            "return": [
                "nodes.Const"
            ],
            "arguments": {
                "r": [
                    "int"
                ]
            }
        },
        "string_constant_pa": {
            "name": "string_constant_pa",
            "location": 27,
            "return": [
                "nodes.StrConst"
            ],
            "arguments": {
                "r": [
                    "int",
                    "Union[int, bool]",
                    "float",
                    "str"
                ]
            }
        },
        "boolean_constant_pa": {
            "name": "boolean_constant_pa",
            "location": 39,
            "return": [
                "nodes.Const"
            ],
            "arguments": {
                "r": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "constant_pa": {
            "name": "constant_pa",
            "location": 54,
            "return": [
                "nodes.Const"
            ],
            "arguments": {
                "r": [
                    "int",
                    "Union[mypy.nodes.FuncBase, mypy.nodes.SymbolNode]",
                    "bool"
                ]
            }
        },
        "get_attr_pa": {
            "name": "get_attr_pa",
            "location": 65,
            "return": [
                "nodes.GetAttr"
            ],
            "arguments": {
                "r": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_item_pa": {
            "name": "get_item_pa",
            "location": 75,
            "return": [
                "nodes.GetItem"
            ],
            "arguments": {
                "r": [
                    "dict",
                    "dict[, ]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Type[object]",
                    "typing.Type"
                ]
            }
        },
        "kwarg_pa": {
            "name": "kwarg_pa",
            "location": 84,
            "return": [
                "nodes.Kwarg"
            ],
            "arguments": {
                "r": [
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]",
                    "dict",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "arg_pa": {
            "name": "arg_pa",
            "location": 93,
            "return": [
                "nodes.Arg"
            ],
            "arguments": {
                "r": [
                    "Union[mypy.nodes.FuncBase, mypy.nodes.SymbolNode]",
                    "float",
                    "int",
                    "Optional[int]",
                    "T"
                ]
            }
        },
        "call_pa": {
            "name": "call_pa",
            "location": 103,
            "return": [
                "nodes.Call"
            ],
            "arguments": {
                "r": [
                    "Type",
                    "Callable",
                    "Callable[..., T]",
                    "Callable[..., None]"
                ]
            }
        },
        "var_pa": {
            "name": "var_pa",
            "location": 112,
            "return": [
                "nodes.Var"
            ],
            "arguments": {
                "r": [
                    "dict",
                    "Mapping[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "expr_pa": {
            "name": "expr_pa",
            "location": 121,
            "return": [
                "None",
                "int",
                "mypy.nodes.FuncBase",
                "torch.utils.data.DataLoader",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "r": [
                    "int",
                    "float"
                ]
            }
        },
        "filter_expr_pa": {
            "name": "filter_expr_pa",
            "location": 138,
            "return": [
                "nodes.Filter"
            ],
            "arguments": {
                "r": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "parse_expr_with_filter": {
            "name": "parse_expr_with_filter",
            "location": 150,
            "return": [
                "bool",
                "Tuple[cmk.utils.prediction.Timegroup, cmk.utils.prediction.Timestamp]",
                "Iterable[Any]",
                "Union[list, 'ListProxy']"
            ],
            "arguments": {
                "s": [
                    "None",
                    "Optional[mypy.nodes.Expression]",
                    "int",
                    "typing.Sequence[typing.Any]",
                    "Optional[Sequence[Any]]",
                    "list[mypy.nodes.Expression]",
                    "List[mypy.nodes.Expression]",
                    "list[int]",
                    "List[int]",
                    "mypy.nodes.Context"
                ]
            }
        },
        "cell_pa": {
            "name": "cell_pa",
            "location": 157,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "r": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "cell_range_pa": {
            "name": "cell_range_pa",
            "location": 168,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "List[float]"
            ],
            "arguments": {
                "r": [
                    "int"
                ]
            }
        },
        "param_pa": {
            "name": "param_pa",
            "location": 175,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "r": [
                    "T",
                    "List[int]",
                    "List[Union[int, float]]",
                    "bool"
                ]
            }
        },
        "make_param": {
            "name": "make_param",
            "location": 183,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "param_name": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "typing.Any",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "param_value": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "typing.Any",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "for_statement_pa": {
            "name": "for_statement_pa",
            "location": 197,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "r": [
                    "int"
                ]
            }
        },
        "cell_loop_pa": {
            "name": "cell_loop_pa",
            "location": 211,
            "return": [
                "nodes.CellLoop"
            ],
            "arguments": {
                "r": [
                    "list[]",
                    "list",
                    "Callable"
                ]
            }
        },
        "parse_cell_loop_directive": {
            "name": "parse_cell_loop_directive",
            "location": 221,
            "return": [
                "str",
                "BaseException",
                "Optional[str]",
                "IO[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "sheet_loop_pa": {
            "name": "sheet_loop_pa",
            "location": 230,
            "return": [
                "nodes.SheetLoop"
            ],
            "arguments": {
                "r": [
                    "list[]",
                    "list",
                    "Callable"
                ]
            }
        },
        "parse_sheet_loop_directive": {
            "name": "parse_sheet_loop_directive",
            "location": 240,
            "return": [
                "str",
                "BaseException",
                "Optional[str]",
                "IO[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "merge_pa": {
            "name": "merge_pa",
            "location": 247,
            "return": [
                "nodes.Merge"
            ],
            "arguments": {
                "r": [
                    "int",
                    "float",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "parse_merge": {
            "name": "parse_merge",
            "location": 254,
            "return": [
                "str",
                "int",
                "BaseException",
                "bool",
                "hackathon.utils.utils.DataMessage"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "group_pa": {
            "name": "group_pa",
            "location": 261,
            "return": [
                "nodes.CellGroup"
            ],
            "arguments": {
                "r": [
                    "int"
                ]
            }
        },
        "parse_group": {
            "name": "parse_group",
            "location": 268,
            "return": [
                "str",
                "int",
                "BaseException",
                "bool",
                "hackathon.utils.utils.DataMessage"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "remove_pa": {
            "name": "remove_pa",
            "location": 275,
            "return": [
                "nodes.Remove"
            ],
            "arguments": {
                "r": [
                    "int",
                    "Dict[str, Dict[str, int]]",
                    "bool"
                ]
            }
        },
        "parse_remove": {
            "name": "parse_remove",
            "location": 283,
            "return": [
                "str",
                "int",
                "BaseException",
                "bool",
                "hackathon.utils.utils.DataMessage"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "excel_func_arg_pa": {
            "name": "excel_func_arg_pa",
            "location": 290,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "r": [
                    "int"
                ]
            }
        },
        "parse_func_args": {
            "name": "parse_func_args",
            "location": 300,
            "return": [
                "List[Tuple[(Tuple[(Any, Any)], Any)]]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "ImportError",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "if_pa": {
            "name": "if_pa",
            "location": 314,
            "return": [
                "nodes.If"
            ],
            "arguments": {
                "r": [
                    "int",
                    "Dict[str, Dict[str, int]]",
                    "bool"
                ]
            }
        },
        "parse_if": {
            "name": "parse_if",
            "location": 323,
            "return": [
                "Callable",
                "str",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "s": [
                    "list[str]",
                    "Union[mypy.nodes.FuncDef, mypy.nodes.MypyFile, mypy.nodes.OverloadedFuncDef]",
                    "List[str]"
                ]
            }
        },
        "parse_col_width": {
            "name": "parse_col_width",
            "location": 327,
            "return": [
                "nodes.ColWidth"
            ],
            "arguments": {
                "s": [
                    "int"
                ]
            }
        },
        "parse_row_height": {
            "name": "parse_row_height",
            "location": 331,
            "return": [
                "nodes.RowHeight"
            ],
            "arguments": {
                "s": [
                    "str",
                    "mypy.nodes.FuncItem"
                ]
            }
        }
    },
    "xlsx_template-master/xlsx_template/nodes.py": {
        "NodeMetaclass.__new__": {
            "name": "__new__",
            "location": 2,
            "return": [
                "str",
                "Type",
                "Type[Any]",
                "Sequence[Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "type",
                    "typing.Type",
                    "Sequence[type]",
                    "typing.Sequence[typing.Type]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "type",
                    "typing.Type",
                    "Sequence[type]",
                    "typing.Sequence[typing.Type]"
                ],
                "bases": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]"
                ],
                "attrs": [
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "bool",
                    "dict"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellOutput.adjust": {
            "name": "adjust",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "col": [
                    "int",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "CellGroup.adjust": {
            "name": "adjust",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "Sequence[Any]",
                    "dict"
                ],
                "col": [
                    "int",
                    "Sequence[Any]",
                    "dict"
                ]
            }
        },
        "CellGroup.height": {
            "name": "height",
            "location": 105,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellGroup.width": {
            "name": "width",
            "location": 109,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellGroup.get_cell_range": {
            "name": "get_cell_range",
            "location": 112,
            "return": [
                "Generator[(Tuple[(int, int)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sheet.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "max_row": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "max_col": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "body": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "FuncCellOutput.adjust": {
            "name": "adjust",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "col": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "xlsx_template-master/xlsx_template/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bytes",
                    "str",
                    "bool"
                ],
                "filename": [
                    "None",
                    "str"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 17,
            "return": [
                "Tuple[(nodes.Template, List[styles.named_styles.NamedStyle])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser._process_cell_group": {
            "name": "_process_cell_group",
            "location": 90,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "start_row": [
                    "int",
                    "float"
                ],
                "start_col": [
                    "int"
                ],
                "end_row": [
                    "int"
                ],
                "end_col": [
                    "int"
                ]
            }
        },
        "Parser._process_cellloop": {
            "name": "_process_cellloop",
            "location": 117,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "cell_loop": [
                    "_T0"
                ]
            }
        },
        "Parser.parse_directives": {
            "name": "parse_directives",
            "location": 126,
            "return": [
                "Dict[(Tuple[(Any, Any)], list)]"
            ],
            "arguments": {
                "self": [],
                "directives": [
                    "int",
                    "dict[str, dict[str, int]]",
                    "str"
                ]
            }
        },
        "Parser.parse_directive": {
            "name": "parse_directive",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "typing.Sequence[typing.Any]",
                    "dict[str, int]"
                ],
                "col": [
                    "int",
                    "typing.Sequence[typing.Any]",
                    "dict[str, int]"
                ],
                "directive": [
                    "str"
                ]
            }
        },
        "Parser.parse_merge": {
            "name": "parse_merge",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "directive_def": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "bytes"
                ]
            }
        },
        "Parser._process_merge": {
            "name": "_process_merge",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "merge": [
                    "int",
                    "float"
                ]
            }
        },
        "Parser.parse_group": {
            "name": "parse_group",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "directive_def": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "bytes"
                ]
            }
        },
        "Parser.parse_remove": {
            "name": "parse_remove",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "directive_def": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "bytes"
                ]
            }
        },
        "Parser._process_remove": {
            "name": "_process_remove",
            "location": 173,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "remove": [
                    "_T0"
                ]
            }
        },
        "Parser.parse_if": {
            "name": "parse_if",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "directive_def": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "Parser.parse_col_width": {
            "name": "parse_col_width",
            "location": 182,
            "return": [
                "nodes.ColWidth"
            ],
            "arguments": {
                "self": [],
                "directive_def": [
                    "bool"
                ]
            }
        },
        "Parser.parse_row_height": {
            "name": "parse_row_height",
            "location": 185,
            "return": [
                "nodes.RowHeight"
            ],
            "arguments": {
                "self": [],
                "directive_def": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "set[str]"
                ]
            }
        },
        "Parser._process_colwidth": {
            "name": "_process_colwidth",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col_width": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "Parser._process_rowheight": {
            "name": "_process_rowheight",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row_height": [
                    "int",
                    "None"
                ]
            }
        },
        "Parser._process_if": {
            "name": "_process_if",
            "location": 194,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "if_d": [
                    "_T0"
                ]
            }
        },
        "Parser._process_cellgroup": {
            "name": "_process_cellgroup",
            "location": 210,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "cell_group": [
                    "_T0"
                ]
            }
        },
        "Parser._process_sheetloop": {
            "name": "_process_sheetloop",
            "location": 219,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "sheet_loop": [
                    "_T0"
                ]
            }
        },
        "Parser.parse_func_arg_v": {
            "name": "parse_func_arg_v",
            "location": 234,
            "return": [
                "nodes.FuncArgDirection"
            ],
            "arguments": {
                "self": [],
                "directive_def": [
                    "bool",
                    "list[]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "Parser.parse_func_arg_h": {
            "name": "parse_func_arg_h",
            "location": 237,
            "return": [
                "nodes.FuncArgDirection"
            ],
            "arguments": {
                "self": [],
                "directive_def": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "int"
                ]
            }
        },
        "Parser._process_funcargdirection": {
            "name": "_process_funcargdirection",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_arg_dir": [
                    "str"
                ]
            }
        },
        "Parser.parse_loop_right": {
            "name": "parse_loop_right",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "directive_def": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Parser.parse_loop_down": {
            "name": "parse_loop_down",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "directive_def": []
            }
        },
        "Parser._parse_cell_loop": {
            "name": "_parse_cell_loop",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "directive_def": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "loop_direction": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Parser.parse_loop_sheet": {
            "name": "parse_loop_sheet",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "directive_def": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "Parser.get_directives": {
            "name": "get_directives",
            "location": 267,
            "return": [
                "Dict[(Tuple[(int, int)], list)]"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "int",
                    "float"
                ]
            }
        },
        "Parser.get_directives_synt_v2": {
            "name": "get_directives_synt_v2",
            "location": 285,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str"
                ]
            }
        },
        "Parser._parse_pp": {
            "name": "_parse_pp",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "pp": [
                    "int",
                    "str",
                    "list[str]",
                    "tuple[typing.Union[int,int,int]]",
                    "typing.Callable[T, bool]"
                ],
                "s": [
                    "str",
                    "None",
                    "float",
                    "bytes",
                    "typing.Type"
                ]
            }
        },
        "Parser.parse_expression": {
            "name": "parse_expression",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Parser.parse_value": {
            "name": "parse_value",
            "location": 313,
            "return": [
                "Union[(nodes.Const, nodes.Value)]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Parser.parse_cell": {
            "name": "parse_cell",
            "location": 350,
            "return": [
                "nodes.CellOutput"
            ],
            "arguments": {
                "self": [],
                "ws": [],
                "row": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "None",
                    "typing.Callable[, ]"
                ],
                "col": [
                    "int"
                ]
            }
        },
        "Parser.parse_func_args": {
            "name": "parse_func_args",
            "location": 407,
            "return": [
                "List[nodes.FuncArg]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[dict[, ],int]]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "xlsx_template-master/xlsx_template/template.py": {
        "Template.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "Union[bool, str]"
                ],
                "env": [
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "str",
                    "Type",
                    "list[str]",
                    "Dict[str, str]",
                    "typing.Type",
                    "dict[str, str]"
                ],
                "debug": [
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "Sequence[str]",
                    "T"
                ]
            }
        },
        "Template.render": {
            "name": "render",
            "location": 32,
            "return": [
                "bool",
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "context_data": [
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "dict[str, dict[str, float]]",
                    "T",
                    "dict",
                    "Dict[str, Dict[str, float]]",
                    "bool"
                ]
            }
        }
    },
    "xlsx_template-master/xlsx_template/utils.py": {
        "col_str_to_int": {
            "name": "col_str_to_int",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "col": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "cell_str_to_int": {
            "name": "cell_str_to_int",
            "location": 12,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "row": [
                    "str",
                    "int",
                    "float"
                ],
                "col": [
                    "str",
                    "int"
                ]
            }
        },
        "cell_int_to_str": {
            "name": "cell_int_to_str",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "row": [
                    "Dict[str, int]",
                    "dict[str, int]",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "str",
                    "bytes",
                    "IO[str]",
                    "typing.IO",
                    "Union[Dict[str, Any], List[Any]]",
                    "list[typing.Any]"
                ],
                "col": [
                    "Dict[str, int]",
                    "dict[str, int]",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "str",
                    "bytes",
                    "IO[str]",
                    "typing.IO",
                    "Union[Dict[str, Any], List[Any]]",
                    "list[typing.Any]"
                ]
            }
        },
        "col_int_to_str": {
            "name": "col_int_to_str",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "col": [
                    "bool",
                    "float",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "xlsx_template-master/xlsx_template/__init__.py": {},
    "xlsx_template-master/xlsx_template/runtime/cell_groups.py": {
        "Cell.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "bool",
                    "str",
                    "None",
                    "typing.Container"
                ],
                "col": [
                    "int",
                    "str",
                    "list[str]",
                    "None",
                    "bytes"
                ],
                "style": [
                    "int",
                    "str",
                    "list[str]",
                    "None",
                    "bytes"
                ],
                "value": [
                    "str",
                    "int",
                    "list[str]",
                    "set[]"
                ],
                "row_height": [
                    "int",
                    "list[]",
                    "None"
                ],
                "col_width": [
                    "int",
                    "list[]"
                ]
            }
        },
        "Cell.move": {
            "name": "move",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "None",
                    "typing.Iterable[dict[, ]]",
                    "typing.Iterable[int]",
                    "typing.Callable[int, str]"
                ],
                "col": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Cell.__eq__": {
            "name": "__eq__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cell.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merge.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "None"
                ],
                "col": [
                    "int",
                    "None"
                ],
                "rows": [
                    "int",
                    "None"
                ],
                "cols": [
                    "int",
                    "None"
                ]
            }
        },
        "Merge.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merge.move": {
            "name": "move",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "None",
                    "typing.Iterable[dict[, ]]",
                    "typing.Iterable[int]",
                    "typing.Callable[int, str]"
                ],
                "col": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "FuncArg.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_index": [
                    "int"
                ],
                "end_index": [
                    "int"
                ],
                "cells": [
                    "int",
                    "str"
                ],
                "direction": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "FuncArg.finalize_cells": {
            "name": "finalize_cells",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_row": [
                    "int",
                    "list[float]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "current_col": [
                    "int",
                    "typing.Iterable[typing.Union[int,str]]",
                    "bytes"
                ],
                "initial_cell": [
                    "int",
                    "list[int]"
                ],
                "final_cells": []
            }
        },
        "FuncCell.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "bool",
                    "str",
                    "None",
                    "typing.Container",
                    "float"
                ],
                "col": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "None",
                    "list[typing.Any]",
                    "float"
                ],
                "style": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "None",
                    "list[typing.Any]",
                    "float"
                ],
                "initial_value": [
                    "bool",
                    "float",
                    "dict[, ]"
                ],
                "row_height": [
                    "int",
                    "None",
                    "str",
                    "dict[str, str]"
                ],
                "col_width": [
                    "float",
                    "str",
                    "None",
                    "bool",
                    "tuple[int]"
                ],
                "args": [],
                "default_value": [
                    "typing.Text"
                ]
            }
        },
        "FuncCell.move": {
            "name": "move",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "list[str]"
                ],
                "col": [
                    "int",
                    "dict[int, list[typing.Any]]",
                    "list[str]",
                    "list[int]",
                    "list[]"
                ]
            }
        },
        "FuncCell.finalize_arg": {
            "name": "finalize_arg",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_key": [
                    "typing.Callable[, ]",
                    "str",
                    "typing.Type",
                    "list[str]"
                ],
                "initial_cell": [
                    "typing.Iterable[typing.Iterable[T]]",
                    "int",
                    "str",
                    "None",
                    "bytes"
                ],
                "final_cells": [
                    "typing.Iterable[typing.Iterable[T]]",
                    "int",
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "FuncCell.get_final_value": {
            "name": "get_final_value",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CellGroupFinalResult.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cells": [
                    "int",
                    "float",
                    "typing.Sequence[typing.Sequence[float]]"
                ],
                "func_cells": [
                    "int",
                    "float",
                    "typing.Sequence[typing.Sequence[float]]"
                ],
                "merges": [
                    "int",
                    "float",
                    "typing.Sequence[typing.Sequence[float]]"
                ],
                "size": [
                    "int",
                    "float",
                    "typing.Sequence[typing.Sequence[float]]"
                ]
            }
        },
        "CellGroupFinalResult.get_simple_display": {
            "name": "get_simple_display",
            "location": 159,
            "return": [
                "List[List[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCellGroup.add_cell": {
            "name": "add_cell",
            "location": 167,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "col": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "cell": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "BaseCellGroup.add_cell_group": {
            "name": "add_cell_group",
            "location": 170,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "col": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "cell_group": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "BaseCellGroup.final_result": {
            "name": "final_result",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCellGroup.get_final_result": {
            "name": "get_final_result",
            "location": 177,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCellGroup.get_final_size": {
            "name": "get_final_size",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCellGroup.get_final_cells": {
            "name": "get_final_cells",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCellGroup.get_final_func_cells": {
            "name": "get_final_func_cells",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCellGroup.get_final_merges": {
            "name": "get_final_merges",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseCellGroup.calc_last_cell": {
            "name": "calc_last_cell",
            "location": 192,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "final_cells": [
                    "dict[, ]"
                ],
                "final_func_cells": [
                    "dict[, ]"
                ]
            }
        },
        "CellGroup.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_size": [
                    "Size"
                ]
            }
        },
        "CellGroup.add_merge": {
            "name": "add_merge",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "list[float]",
                    "typing.Callable[, ]"
                ],
                "col": [
                    "int",
                    "list[float]",
                    "typing.Callable[, ]"
                ],
                "rows": [
                    "int",
                    "list[float]",
                    "typing.Callable[, ]"
                ],
                "cols": [
                    "int",
                    "list[float]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CellGroup.add_cell": {
            "name": "add_cell",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "float",
                    "int"
                ]
            }
        },
        "CellGroup.add_func_cell": {
            "name": "add_func_cell",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "str",
                    "list[]",
                    "typing.Callable[[], None]",
                    "tuple[]"
                ]
            }
        },
        "CellGroup.add_cell_group": {
            "name": "add_cell_group",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "col": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "cell_group": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "CellGroup.get_final_result": {
            "name": "get_final_result",
            "location": 220,
            "return": [
                "CellGroupFinalResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "SheetCellGroup.get_final_result": {
            "name": "get_final_result",
            "location": 352,
            "return": [
                "CellGroupFinalResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopCellGroup.__init__": {
            "name": "__init__",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_size": [
                    "int"
                ],
                "direction": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "LoopCellGroup.add_cell_group": {
            "name": "add_cell_group",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell_group": [
                    "typing.Callable[[], None]",
                    "str",
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "LoopCellGroup.get_final_result": {
            "name": "get_final_result",
            "location": 390,
            "return": [
                "CellGroupFinalResult"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xlsx_template-master/xlsx_template/runtime/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_data": [
                    "Dict[str, Optional[str]]",
                    "dict[str, typing.Union[str,None]]",
                    "str",
                    "Dict[str, Union[int, bool]]",
                    "dict[str, typing.Union[int,bool]]"
                ],
                "env": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Sequence[str]",
                    "bytes",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "Context.resolve": {
            "name": "resolve",
            "location": 6,
            "return": [
                "bool",
                "str",
                "Optional[Dict[str, Any]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Dict[int, Set[str]]",
                    "dict[int, set[str]]"
                ]
            }
        }
    },
    "xlsx_template-master/xlsx_template/runtime/loop_context.py": {
        "LoopContext.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "LoopContext.__iter__": {
            "name": "__iter__",
            "location": 9,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContext.index": {
            "name": "index",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContext.revindex": {
            "name": "revindex",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContext.revindex0": {
            "name": "revindex0",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContext.first": {
            "name": "first",
            "location": 27,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopContext.last": {
            "name": "last",
            "location": 31,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xlsx_template-master/xlsx_template/runtime/__init__.py": {}
}
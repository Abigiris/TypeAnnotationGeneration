{
    "xpectacle-master/setup.py": {
        "read": {
            "name": "read",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "find_version": {
            "name": "find_version",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "xpectacle-master/tasks.py": {
        "lint": {
            "name": "lint",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "typecheck": {
            "name": "typecheck",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "str"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        }
    },
    "xpectacle-master/demos/apply.py": {},
    "xpectacle-master/demos/replace.py": {},
    "xpectacle-master/demos/tiles.py": {},
    "xpectacle-master/demos/__init__.py": {},
    "xpectacle-master/study/python_get_window.py": {
        "DisplayWrapper.create": {
            "name": "create",
            "location": 16,
            "return": [
                "DisplayWrapper"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDisplayWrapper]"
                ]
            }
        },
        "DisplayWrapper.find_property": {
            "name": "find_property",
            "location": 19,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([str], bool)]"
                ]
            }
        },
        "DisplayWrapper.get_root_window": {
            "name": "get_root_window",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_all_properties": {
            "name": "get_all_properties",
            "location": 27,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_property": {
            "name": "get_property",
            "location": 33,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, bytes]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DisplayWrapper.list_properties": {
            "name": "list_properties",
            "location": 39,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_work_area": {
            "name": "get_work_area",
            "location": 45,
            "return": [
                "xpectacle.geometry.Geometry"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_active_window": {
            "name": "get_active_window",
            "location": 51,
            "return": [
                "WindowWrapper"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_active_window_resource": {
            "name": "get_active_window_resource",
            "location": 54,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayWrapper.get_active_window_id": {
            "name": "get_active_window_id",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.create": {
            "name": "create",
            "location": 67,
            "return": [
                "WindowWrapper"
            ],
            "arguments": {
                "self": [
                    "Type[_TWindowWrapper]"
                ]
            }
        },
        "WindowWrapper.find_property": {
            "name": "find_property",
            "location": 70,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([str], bool)]"
                ]
            }
        },
        "WindowWrapper.get_sub_root_window": {
            "name": "get_sub_root_window",
            "location": 78,
            "return": [
                "WindowWrapper"
            ],
            "arguments": {
                "self": [
                    "_TWindowWrapper"
                ]
            }
        },
        "WindowWrapper.get_all_properties": {
            "name": "get_all_properties",
            "location": 88,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.get_property": {
            "name": "get_property",
            "location": 94,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "WindowWrapper.list_properties": {
            "name": "list_properties",
            "location": 100,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.get_frame_extents": {
            "name": "get_frame_extents",
            "location": 106,
            "return": [
                "types.SimpleNamespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowWrapper.get_bounding_client_geometry": {
            "name": "get_bounding_client_geometry",
            "location": 116,
            "return": [
                "xpectacle.geometry.Geometry"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xpectacle-master/xpectacle/active_window.py": {
        "ActiveWindow.apply": {
            "name": "apply",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveWindow.map": {
            "name": "map",
            "location": 15,
            "return": [
                "ActiveWindow"
            ],
            "arguments": {
                "self": [
                    "_TActiveWindow"
                ],
                "f": [
                    "Callable[([xpectacle.geometry.Geometry, xpectacle.geometry.Geometry], xpectacle.geometry.Geometry)]"
                ]
            }
        },
        "ActiveWindow.center": {
            "name": "center",
            "location": 20,
            "return": [
                "ActiveWindow"
            ],
            "arguments": {
                "self": [
                    "_TActiveWindow"
                ]
            }
        },
        "ActiveWindow.center_x": {
            "name": "center_x",
            "location": 23,
            "return": [
                "ActiveWindow"
            ],
            "arguments": {
                "self": [
                    "_TActiveWindow"
                ]
            }
        },
        "ActiveWindow.center_y": {
            "name": "center_y",
            "location": 26,
            "return": [
                "ActiveWindow"
            ],
            "arguments": {
                "self": [
                    "_TActiveWindow"
                ]
            }
        },
        "ActiveWindow.move": {
            "name": "move",
            "location": 29,
            "return": [
                "ActiveWindow"
            ],
            "arguments": {
                "self": [
                    "_TActiveWindow"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "absolute": [
                    "bool"
                ]
            }
        },
        "ActiveWindow.resize": {
            "name": "resize",
            "location": 39,
            "return": [
                "ActiveWindow"
            ],
            "arguments": {
                "self": [
                    "_TActiveWindow"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "ActiveWindow.tile": {
            "name": "tile",
            "location": 48,
            "return": [
                "ActiveWindow"
            ],
            "arguments": {
                "self": [
                    "_TActiveWindow"
                ],
                "rows": [
                    "int"
                ],
                "columns": [
                    "int"
                ],
                "position": [
                    "int"
                ],
                "grid_width": [
                    "Optional[int]"
                ],
                "grid_height": [
                    "Optional[int]"
                ]
            }
        },
        "ActiveWindow.corner": {
            "name": "corner",
            "location": 69,
            "return": [
                "ActiveWindow"
            ],
            "arguments": {
                "self": [
                    "_TActiveWindow"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "ActiveWindow.tile.mapper": {
            "name": "mapper",
            "location": 56,
            "return": [],
            "arguments": {
                "vp": [],
                "win": []
            }
        },
        "ActiveWindow.corner.mapper": {
            "name": "mapper",
            "location": 73,
            "return": [
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "vp": [
                    "int",
                    "str",
                    "bool"
                ],
                "win": [
                    "str",
                    "int",
                    "bool",
                    "List[Tuple[int, int]]",
                    "dict"
                ]
            }
        }
    },
    "xpectacle-master/xpectacle/core.py": {
        "get_workarea": {
            "name": "get_workarea",
            "location": 15,
            "return": [
                "xpectacle.geometry.Geometry"
            ],
            "arguments": {}
        },
        "get_window": {
            "name": "get_window",
            "location": 24,
            "return": [
                "xpectacle.geometry.Geometry"
            ],
            "arguments": {}
        },
        "set_window": {
            "name": "set_window",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "geometry": [
                    "xpectacle.geometry.Geometry"
                ],
                "workarea": [
                    "Optional[xpectacle.geometry.Geometry]"
                ],
                "window": [
                    "Optional[xpectacle.geometry.Geometry]"
                ]
            }
        }
    },
    "xpectacle-master/xpectacle/ewmh_util.py": {
        "get_active_sub_root_window": {
            "name": "get_active_sub_root_window",
            "location": 5,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "ewmh": [
                    "bool",
                    "Mapping[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "xpectacle-master/xpectacle/geometry.py": {
        "Geometry.__iter__": {
            "name": "__iter__",
            "location": 16,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Geometry.align_to": {
            "name": "align_to",
            "location": 20,
            "return": [
                "Geometry"
            ],
            "arguments": {
                "self": [
                    "_TGeometry"
                ],
                "reference": [
                    "Geometry"
                ]
            }
        }
    },
    "xpectacle-master/xpectacle/sh.py": {
        "run": {
            "name": "run",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        },
        "lines": {
            "name": "lines",
            "location": 8,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Mapping",
                    "typing.Mapping",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "output": {
            "name": "output",
            "location": 12,
            "return": [
                "str",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "command": [
                    "bool",
                    "Exception",
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "xpectacle-master/xpectacle/__init__.py": {}
}
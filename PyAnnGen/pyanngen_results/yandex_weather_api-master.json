{
    "yandex_weather_api-master/setup.py": {},
    "yandex_weather_api-master/tests/test_data.py": {
        "get_test_data": {
            "name": "get_test_data",
            "location": 9,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "Optional[types.ContextValue]",
                "Dict[str, float]",
                "List[List[str]]",
                "Dict[str, Union[str, bool]]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "forecast": {
            "name": "forecast",
            "location": 16,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "informers": {
            "name": "informers",
            "location": 20,
            "return": [
                "bool",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {}
        },
        "test_informers": {
            "name": "test_informers",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "informers": [
                    "str",
                    "float"
                ]
            }
        },
        "test_forecast": {
            "name": "test_forecast",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "forecast": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "yandex_weather_api-master/yandex_weather_api/cli.py": {
        "setup_client": {
            "name": "setup_client",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "Weather.main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherCli.main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lat": [],
                "lon": []
            }
        },
        "WeatherWeb.main": {
            "name": "main",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lat": [],
                "lon": [],
                "port": [
                    "int"
                ]
            }
        }
    },
    "yandex_weather_api-master/yandex_weather_api/types.py": {
        "ensure_list": {
            "name": "ensure_list",
            "location": 28,
            "return": [
                "Union[(List[_T0], _T0)]"
            ],
            "arguments": {
                "value": [
                    "_T0@@"
                ]
            }
        },
        "ensure_list_of": {
            "name": "ensure_list_of",
            "location": 35,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "validator": []
            }
        },
        "number": {
            "name": "number",
            "location": 40,
            "return": [
                "float"
            ],
            "arguments": {
                "num": []
            }
        },
        "integer": {
            "name": "integer",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "num": []
            }
        },
        "boolean": {
            "name": "boolean",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "num": []
            }
        },
        "Enum.validate": {
            "name": "validate",
            "location": 60,
            "return": [
                "Enum"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEnum]"
                ],
                "cnd": []
            }
        },
        "Enum.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Icon.validate": {
            "name": "validate",
            "location": 137,
            "return": [
                "Icon"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIcon]"
                ],
                "cnd": []
            }
        },
        "Icon.as_url": {
            "name": "as_url",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxWithSchema.validate": {
            "name": "validate",
            "location": 152,
            "return": [
                "BoxWithSchema"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBoxWithSchema]"
                ],
                "obj": []
            }
        },
        "Forecast.validate": {
            "name": "validate",
            "location": 374,
            "return": [
                "Forecast"
            ],
            "arguments": {
                "cls": [
                    "Type[_TForecast]"
                ],
                "obj": []
            }
        },
        "WeatherAnswer.validate": {
            "name": "validate",
            "location": 420,
            "return": [
                "WeatherAnswer"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWeatherAnswer]"
                ],
                "obj": []
            }
        }
    },
    "yandex_weather_api-master/yandex_weather_api/__init__.py": {
        "stringify": {
            "name": "stringify",
            "location": 43,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "schema": []
            }
        },
        "lowcase_str_boolean": {
            "name": "lowcase_str_boolean",
            "location": 48,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "obj": [
                    "_T0@@"
                ]
            }
        },
        "validate_args": {
            "name": "validate_args",
            "location": 72,
            "return": [
                "Tuple[(Tuple[str], Dict[(str, Any)])]"
            ],
            "arguments": {
                "api_key": []
            }
        },
        "get": {
            "name": "get",
            "location": 84,
            "return": [
                "yandex_weather_api.types.WeatherAnswer"
            ],
            "arguments": {
                "session": [],
                "api_key": []
            }
        }
    }
}
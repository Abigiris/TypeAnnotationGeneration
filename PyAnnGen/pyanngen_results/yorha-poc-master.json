{
    "yorha-poc-master/setup.py": {},
    "yorha-poc-master/docs/conf.py": {},
    "yorha-poc-master/tests/test_yorha.py": {
        "response": {
            "name": "response",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content": {
            "name": "test_content",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "List[str]",
                    "Dict"
                ]
            }
        }
    },
    "yorha-poc-master/tests/__init__.py": {},
    "yorha-poc-master/tests/system/test_cmd.py": {
        "test_run_bg": {
            "name": "test_run_bg",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_bg_debug": {
            "name": "test_run_bg_debug",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run": {
            "name": "test_run",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_debug": {
            "name": "test_run_debug",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_timeout": {
            "name": "test_run_timeout",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_timeout_exception": {
            "name": "test_run_timeout_exception",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "yorha-poc-master/tests/system/__init__.py": {},
    "yorha-poc-master/yorha/cmd.py": {
        "run_bg": {
            "name": "run_bg",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "Dict[int,str]",
                    "Dict",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "cwd": [
                    "str",
                    "None"
                ],
                "shell": [
                    "bool",
                    "Dict[int,str]",
                    "Dict",
                    "int",
                    "Tuple[int,float]"
                ],
                "debug": [
                    "bool",
                    "bytes",
                    "int",
                    "Callable",
                    "Scalar",
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 35,
            "return": [
                "Tuple[(int, Any, Any)]"
            ],
            "arguments": {
                "cmd": [
                    "str"
                ],
                "cwd": [
                    "str",
                    "bool",
                    "None",
                    "List[str]"
                ],
                "timeout": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "shell": [
                    "bool",
                    "bytes",
                    "str"
                ],
                "debug": [
                    "bool",
                    "int",
                    "bytes",
                    "Callable",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "_shell": {
            "name": "_shell",
            "location": 83,
            "return": [
                "list"
            ],
            "arguments": {
                "cmd": [
                    "int",
                    "Tuple",
                    "List[int]",
                    "bool",
                    "List[list[int]]",
                    "List[List[int]]"
                ]
            }
        },
        "_debug": {
            "name": "_debug",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "List[str]",
                    "str",
                    "Sequence[Any]"
                ],
                "debug": [
                    "bool",
                    "Dict",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "yorha-poc-master/yorha/exception.py": {
        "YoRHaError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "details": [
                    "Tuple[str]",
                    "int",
                    "bool",
                    "Mapping[str,Any]",
                    "Callable"
                ]
            }
        },
        "YoRHaError.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "YoRHaError.__getattr__": {
            "name": "__getattr__",
            "location": 40,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "YoRHaError.message": {
            "name": "message",
            "location": 51,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YoRHaError.json": {
            "name": "json",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "YoRHaError.has_trace": {
            "name": "has_trace",
            "location": 69,
            "return": [
                "None",
                "Optional[str]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "YoRHaError.format_trace": {
            "name": "format_trace",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "YoRHaError.print_trace": {
            "name": "print_trace",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunError.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "int",
                    "str",
                    "Iterable[int]",
                    "float",
                    "List[int]"
                ],
                "out": [
                    "int",
                    "str",
                    "Iterable[int]",
                    "float",
                    "List[int]"
                ],
                "message": [
                    "Text",
                    "int",
                    "str",
                    "Iterable[int]",
                    "List[int]",
                    "float"
                ]
            }
        },
        "RunError.__str__": {
            "name": "__str__",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkspaceError.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "details": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Union[str,Dict[str,str]]",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AndroidError.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "details": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Union[str,Dict[str,str]]",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "yorha-poc-master/yorha/fixture.py": {},
    "yorha-poc-master/yorha/plugins.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_runtest_makereport": {
            "name": "pytest_runtest_makereport",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "int",
                    "Dict",
                    "T",
                    "List[T]",
                    "Union[int,slice]"
                ]
            }
        },
        "pytest_runtest_teardown": {
            "name": "pytest_runtest_teardown",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "Dict",
                    "int",
                    "Iterable[T]",
                    "Union[int,slice]"
                ]
            }
        },
        "create_video": {
            "name": "create_video",
            "location": 66,
            "return": [
                "Tuple[(int, Any, Any)]"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "dst": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "yorha-poc-master/yorha/__init__.py": {},
    "yorha-poc-master/yorha/device/adb.py": {
        "AndroidBase.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "int",
                    "str",
                    "Iterable[T]"
                ],
                "host": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AndroidBase._set_profile": {
            "name": "_set_profile",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "host": [
                    "str"
                ]
            }
        },
        "AndroidBase.get_profile": {
            "name": "get_profile",
            "location": 73,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndroidBase.__exec": {
            "name": "__exec",
            "location": 81,
            "return": [
                "str",
                "Tuple[int,int]",
                "List[int]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "bool",
                    "Tuple[str]",
                    "List[str]",
                    "Dict[str,Dict]",
                    "Dict[str,dict]",
                    "Optional[str]",
                    "str",
                    "IO[str]",
                    "None",
                    "IO"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "Tuple[str]",
                    "List[str]",
                    "Dict[str,Dict]",
                    "Optional[str]",
                    "IO[str]"
                ],
                "debug": [
                    "bool",
                    "Tuple[str]",
                    "List[str]",
                    "Dict[str,Dict]",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        },
        "AndroidBase.__exec_bg": {
            "name": "__exec_bg",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "bool",
                    "str",
                    "List[str]",
                    "Union[str,List[str]]",
                    "Iterable",
                    "int"
                ],
                "debug": [
                    "bool",
                    "str",
                    "Union[str,List[str]]",
                    "Iterable",
                    "List[str]",
                    "int"
                ]
            }
        },
        "AndroidBase._target": {
            "name": "_target",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndroidBase._adb": {
            "name": "_adb",
            "location": 127,
            "return": [
                "None",
                "str",
                "bool",
                "int",
                "Exception",
                "float",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "bool",
                    "str",
                    "List[str]",
                    "Type",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "sync": [
                    "bool",
                    "str",
                    "Callable",
                    "int"
                ],
                "debug": [
                    "bool",
                    "float",
                    "str",
                    "Optional[str]",
                    "List[Tuple[str,str]]"
                ],
                "timeout": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool",
                    "Dict[str,str]"
                ]
            }
        },
        "AndroidBase.kill": {
            "name": "kill",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndroidBase.adb": {
            "name": "adb",
            "location": 153,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "int",
                    "float",
                    "Dict[str,Any]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "sync": [
                    "bool",
                    "int",
                    "str"
                ],
                "debug": [
                    "bool",
                    "int",
                    "str"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "AndroidBase.push": {
            "name": "push",
            "location": 168,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "int"
                ],
                "dst": [
                    "str",
                    "int"
                ],
                "timeout": [
                    "int",
                    "Optional[List[str]]",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "AndroidBase.pull": {
            "name": "pull",
            "location": 182,
            "return": [
                "Dict[str, int]",
                "int",
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "int"
                ],
                "dst": [
                    "str",
                    "int"
                ],
                "timeout": [
                    "int",
                    "Optional[List[str]]",
                    "Union[int,float]",
                    "str",
                    "float"
                ]
            }
        },
        "AndroidBase.shell": {
            "name": "shell",
            "location": 196,
            "return": [
                "str",
                "int",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "sync": [
                    "bool",
                    "Optional[Dict]",
                    "Optional[bool]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "debug": [
                    "bool",
                    "Optional[Dict]",
                    "Optional[bool]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "Optional[Dict]",
                    "Optional[bool]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "AndroidBase.connect": {
            "name": "connect",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndroidBase.disconnect": {
            "name": "disconnect",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndroidBase.usb": {
            "name": "usb",
            "location": 233,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndroidBase.tcpip": {
            "name": "tcpip",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndroidBase.root": {
            "name": "root",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndroidBase.remount": {
            "name": "remount",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndroidBase.restart": {
            "name": "restart",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndroidBase.install": {
            "name": "install",
            "location": 280,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "int",
                    "str",
                    "float"
                ],
                "timeout": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Tuple",
                    "Mapping[Any,Any]",
                    "Optional[bool]"
                ]
            }
        },
        "AndroidBase.uninstall": {
            "name": "uninstall",
            "location": 293,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "int",
                    "str",
                    "float"
                ],
                "timeout": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Tuple",
                    "Mapping[Any,Any]",
                    "Optional[bool]"
                ]
            }
        },
        "AndroidBase.wait": {
            "name": "wait",
            "location": 306,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "Android.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "str",
                    "bytes",
                    "Dict[str,str]",
                    "IO[bytes]",
                    "IO"
                ],
                "host": [
                    "str",
                    "bytes",
                    "IO[bytes]",
                    "Dict[str, str]"
                ]
            }
        },
        "Android.get": {
            "name": "get",
            "location": 329,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Android.shell": {
            "name": "shell",
            "location": 337,
            "return": [
                "str",
                "IO"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "Dict",
                    "str",
                    "float",
                    "Exception",
                    "Optional[float]",
                    "None",
                    "Union[str,List[str]]",
                    "List[str]"
                ],
                "sync": [
                    "bool",
                    "Dict",
                    "str",
                    "Optional[float]",
                    "Exception",
                    "float",
                    "Union[str,List[str]]"
                ],
                "debug": [
                    "bool",
                    "Dict",
                    "str",
                    "Optional[float]",
                    "Exception",
                    "float",
                    "Union[str,List[str]]"
                ],
                "timeout": [
                    "int",
                    "Dict",
                    "str",
                    "Optional[float]",
                    "Exception",
                    "float",
                    "Union[str,List[str]]"
                ]
            }
        },
        "Android.dumpsys": {
            "name": "dumpsys",
            "location": 351,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Android.snapshot": {
            "name": "snapshot",
            "location": 363,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "host": [
                    "str"
                ]
            }
        },
        "Android.start": {
            "name": "start",
            "location": 378,
            "return": [
                "str",
                "logging.LogRecord",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "intent": [
                    "int",
                    "str",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "Android.push": {
            "name": "push",
            "location": 389,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List"
                ],
                "dst": [
                    "str",
                    "List"
                ]
            }
        },
        "Android.pull": {
            "name": "pull",
            "location": 401,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "float",
                    "str",
                    "List",
                    "int"
                ],
                "dst": [
                    "float",
                    "str",
                    "List",
                    "int"
                ]
            }
        },
        "Android.install": {
            "name": "install",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Android.uninstall": {
            "name": "uninstall",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Android.forward": {
            "name": "forward",
            "location": 429,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Android.input": {
            "name": "input",
            "location": 441,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "sync": [
                    "bool",
                    "str",
                    "int"
                ],
                "debug": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Android.am": {
            "name": "am",
            "location": 455,
            "return": [
                "str",
                "List[int]",
                "Iterable[str]",
                "Callable[[T], None]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "logging.LogRecord"
                ],
                "sync": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "logging.LogRecord"
                ]
            }
        },
        "Android.tap": {
            "name": "tap",
            "location": 468,
            "return": [
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "Android.invoke": {
            "name": "invoke",
            "location": 481,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ]
            }
        },
        "Android.keyevent": {
            "name": "keyevent",
            "location": 493,
            "return": [
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "Android.text": {
            "name": "text",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Android._text": {
            "name": "_text",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "Android.stop": {
            "name": "stop",
            "location": 525,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Android.getprop": {
            "name": "getprop",
            "location": 538,
            "return": [
                "str",
                "List[int]",
                "Callable[[T], None]"
            ],
            "arguments": {
                "self": [],
                "prop": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Android.setprop": {
            "name": "setprop",
            "location": 550,
            "return": [
                "str",
                "List[int]",
                "Callable[[T], None]"
            ],
            "arguments": {
                "self": [],
                "prop": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "Android.power": {
            "name": "power",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Android.boot_completed": {
            "name": "boot_completed",
            "location": 568,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Android.reboot": {
            "name": "reboot",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Android.rotate": {
            "name": "rotate",
            "location": 584,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yorha-poc-master/yorha/device/factory.py": {
        "Singleton.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "Singleton"
                ]
            }
        },
        "AndroidFactory.create": {
            "name": "create",
            "location": 26,
            "return": [
                "yorha.device.adb.Android"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Type[T]",
                    "int",
                    "Dict[str,str]",
                    "Dict[str,bool]",
                    "Type[tuple]",
                    "str"
                ],
                "serial": [
                    "str",
                    "float",
                    "Callable"
                ],
                "host": [
                    "str",
                    "float",
                    "Callable"
                ]
            }
        }
    },
    "yorha-poc-master/yorha/device/__init__.py": {},
    "yorha-poc-master/yorha/device/minicap/process.py": {
        "SearchObject.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_function": [
                    "str",
                    "Callable",
                    "Set[str]"
                ],
                "_target": [
                    "str",
                    "Callable",
                    "Set[str]"
                ],
                "_box": [
                    "str",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "SearchObject.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchObject.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapProc.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_stream": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "None"
                ],
                "_service": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "None"
                ],
                "debug": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]"
                ]
            }
        },
        "MinicapProc.start": {
            "name": "start",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_adb": [
                    "str",
                    "Sequence",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ],
                "_workspace": [
                    "str",
                    "Sequence",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ],
                "_package": [
                    "str",
                    "None"
                ]
            }
        },
        "MinicapProc.finish": {
            "name": "finish",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapProc.get_d": {
            "name": "get_d",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapProc.get_frame": {
            "name": "get_frame",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapProc.__save": {
            "name": "__save",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "data": [
                    "bytearray",
                    "str",
                    "bytes",
                    "AnyStr"
                ]
            }
        },
        "MinicapProc.__save_cv": {
            "name": "__save_cv",
            "location": 142,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "numpy.ndarray"
                ],
                "img_cv": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "MinicapProc.__save_evidence": {
            "name": "__save_evidence",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "float",
                    "int",
                    "bytes"
                ],
                "data": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "MinicapProc.__search": {
            "name": "__search",
            "location": 162,
            "return": [
                "Dict",
                "Callable[list[Any],list[Any]]",
                "Set",
                "str",
                "bool",
                "Dict[str,dict]",
                "Dict[int,list[Any]]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str",
                    "Sequence[Any]",
                    "Optional[str]",
                    "Callable",
                    "None",
                    "bool",
                    "float",
                    "Optional[dict]",
                    "Dict",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ],
                "target": [
                    "str",
                    "Sequence[Any]",
                    "Optional[str]",
                    "Callable",
                    "None",
                    "bool",
                    "float",
                    "Optional[dict]",
                    "Dict",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ],
                "box": [
                    "str",
                    "None",
                    "Sequence[Any]",
                    "Optional[str]",
                    "Callable",
                    "bool",
                    "float",
                    "Optional[dict]",
                    "Dict",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ],
                "_timeout": [
                    "int",
                    "Union[AbstractSetIntStr,MappingIntStrAny]",
                    "str"
                ]
            }
        },
        "MinicapProc.capture_image": {
            "name": "capture_image",
            "location": 182,
            "return": [
                "Tuple[float, float]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "_timeout": [
                    "int",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "MinicapProc.search_pattern": {
            "name": "search_pattern",
            "location": 192,
            "return": [
                "str",
                "Callable",
                "logging.LogRecord",
                "dict",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[dict]",
                    "None",
                    "Union[str,int]",
                    "Union[str,Iterable[str]]"
                ],
                "box": [
                    "str",
                    "None",
                    "bool",
                    "Optional[dict]",
                    "Dict",
                    "Union[str,int]",
                    "Union[str,Iterable[str]]"
                ],
                "_timeout": [
                    "int",
                    "str",
                    "bool",
                    "Optional[dict]",
                    "Union[str,int]",
                    "Union[str,Iterable[str]]"
                ]
            }
        },
        "MinicapProc.search_ocr": {
            "name": "search_ocr",
            "location": 203,
            "return": [
                "str",
                "Callable",
                "logging.LogRecord",
                "dict",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "box": [
                    "int",
                    "None",
                    "bool"
                ],
                "_timeout": [
                    "int",
                    "bool"
                ]
            }
        },
        "MinicapProc.main_loop": {
            "name": "main_loop",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yorha-poc-master/yorha/device/minicap/service.py": {
        "MinicapService.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "MinicapService.start": {
            "name": "start",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adb": [
                    "Dict",
                    "Dict[str,Any]",
                    "bytes"
                ],
                "log": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MinicapService.stop": {
            "name": "stop",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapService.status": {
            "name": "status",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yorha-poc-master/yorha/device/minicap/stream.py": {
        "bytes_to_int": {
            "name": "bytes_to_int",
            "location": 18,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "byte_data": [
                    "Union[int,bytes]",
                    "bytes",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Banner.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Banner.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapStream.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "int",
                    "float",
                    "bool"
                ],
                "port": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "MinicapStream.get_builder": {
            "name": "get_builder",
            "location": 77,
            "return": [
                "MinicapStream",
                "str",
                "Tuple[int,int]",
                "int"
            ],
            "arguments": {
                "ip": [
                    "Text",
                    "str",
                    "Tuple[int,int]",
                    "int"
                ],
                "port": [
                    "Text",
                    "str",
                    "Tuple[int,int]",
                    "int"
                ]
            }
        },
        "MinicapStream.get_ip": {
            "name": "get_ip",
            "location": 94,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapStream.get_port": {
            "name": "get_port",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapStream.get_queue": {
            "name": "get_queue",
            "location": 108,
            "return": [
                "queue.Queue[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapStream.get_d": {
            "name": "get_d",
            "location": 115,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapStream.start": {
            "name": "start",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapStream.finish": {
            "name": "finish",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinicapStream.read_image_stream": {
            "name": "read_image_stream",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yorha-poc-master/yorha/device/minicap/__init__.py": {},
    "yorha-poc-master/yorha/device/profile/android_base.py": {},
    "yorha-poc-master/yorha/device/profile/_0000000000000000.py": {},
    "yorha-poc-master/yorha/device/profile/__init__.py": {},
    "yorha-poc-master/yorha/workspace/module.py": {
        "Workspace.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "clear": [
                    "bool",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "Workspace._mkdir_recursive": {
            "name": "_mkdir_recursive",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Workspace.root": {
            "name": "root",
            "location": 51,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.mkdir": {
            "name": "mkdir",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "host": [
                    "str",
                    "Text"
                ],
                "clear": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "Workspace.rmdir": {
            "name": "rmdir",
            "location": 95,
            "return": [
                "str",
                "Text",
                "int"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "host": [
                    "Text",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "Workspace.touch": {
            "name": "touch",
            "location": 128,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "host": [
                    "str",
                    "Text"
                ]
            }
        },
        "Workspace.unique": {
            "name": "unique",
            "location": 154,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Text",
                    "str",
                    "int",
                    "Union[str,object]",
                    "Optional[int]"
                ]
            }
        },
        "Workspace.rm": {
            "name": "rm",
            "location": 165,
            "return": [
                "str",
                "int",
                "List",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "List"
                ]
            }
        }
    },
    "yorha-poc-master/yorha/workspace/__init__.py": {}
}
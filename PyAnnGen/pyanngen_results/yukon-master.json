{
    "yukon-master/noxfile.py": {},
    "yukon-master/setup.py": {
        "BuildPy.run": {
            "name": "run",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yukon-master/tests/__init__.py": {},
    "yukon-master/tests/io/_spoofer.py": {},
    "yukon-master/yukon/filesystem.py": {
        "_prepare": {
            "name": "_prepare",
            "location": 46,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "List[str]",
                    "bytes",
                    "pathlib.Path"
                ]
            }
        },
        "AppDirs.root": {
            "name": "root",
            "location": 16,
            "return": [
                "bool",
                "List[pathlib.Path]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.log": {
            "name": "log",
            "location": 29,
            "return": [
                "bytes",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.version_specific": {
            "name": "version_specific",
            "location": 33,
            "return": [
                "int",
                "Mapping[str, Any]",
                "str",
                "Optional[Callable[[str], bool]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.compiled_dsdl": {
            "name": "compiled_dsdl",
            "location": 39,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yukon-master/yukon/__init__.py": {},
    "yukon-master/yukon/dcs/_node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_suffix": [
                    "bool",
                    "TextIO",
                    "Callable[,None]",
                    "int"
                ]
            }
        },
        "Node.loop": {
            "name": "loop",
            "location": 44,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.shutdown": {
            "name": "shutdown",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.health": {
            "name": "health",
            "location": 57,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.make_publisher": {
            "name": "make_publisher",
            "location": 60,
            "return": [
                "float",
                "type",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "str"
                ],
                "port_name": [
                    "str"
                ]
            }
        },
        "Node.make_subscriber": {
            "name": "make_subscriber",
            "location": 63,
            "return": [
                "float",
                "type",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "str"
                ],
                "port_name": [
                    "str"
                ]
            }
        },
        "Node.make_client": {
            "name": "make_client",
            "location": 66,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "str",
                    "Optional[str]",
                    "None",
                    "zerver.models.Client",
                    "Sequence[str]",
                    "Union[Sequence[str],Sequence[int]]",
                    "Sequence[int]"
                ],
                "server_node_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "zerver.models.Client",
                    "Sequence[str]",
                    "Union[Sequence[str],Sequence[int]]",
                    "Sequence[int]"
                ],
                "port_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "zerver.models.Client",
                    "Sequence[str]",
                    "Union[Sequence[str],Sequence[int]]",
                    "Sequence[int]"
                ]
            }
        },
        "Node.get_server": {
            "name": "get_server",
            "location": 69,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "str"
                ],
                "port_name": [
                    "str"
                ]
            }
        },
        "Node.close": {
            "name": "close",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._check_deadman_switch": {
            "name": "_check_deadman_switch",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yukon-master/yukon/dcs/__init__.py": {},
    "yukon-master/yukon/io/_captor.py": {
        "setup_capture_forwarding": {
            "name": "setup_capture_forwarding",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "dcs_pub_capture": [
                    "bool",
                    "str",
                    "int"
                ],
                "iface_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "iface": [
                    "int",
                    "str"
                ]
            }
        },
        "setup_capture_forwarding.handle_capture": {
            "name": "handle_capture",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cap": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        }
    },
    "yukon-master/yukon/io/_session.py": {
        "session_to_dcs": {
            "name": "session_to_dcs",
            "location": 9,
            "return": [
                "int",
                "str",
                "Exception"
            ],
            "arguments": {
                "ses": [
                    "str",
                    "IO[Any]",
                    "int",
                    "IO",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ]
            }
        },
        "session_from_dcs": {
            "name": "session_from_dcs",
            "location": 40,
            "return": [
                "AlienSessionSpecifier",
                "Exception",
                "Callable[[Mapping],Awaitable]",
                "Callable[,Awaitable[Mapping]]"
            ],
            "arguments": {
                "ses": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_unittest_session_spec": {
            "name": "_unittest_session_spec",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "yukon-master/yukon/io/_spoofer.py": {
        "Spoofer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dcs_sub_spoof": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Spoofer.status": {
            "name": "status",
            "location": 40,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Optional[Dict[str,Any]]",
                "int",
                "Dict[int,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spoofer.add_iface": {
            "name": "add_iface",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iface_id": [
                    "int",
                    "Dict[str,Any]"
                ],
                "iface": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "Spoofer.remove_iface": {
            "name": "remove_iface",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iface_id": [
                    "str",
                    "int",
                    "None",
                    "services.board.transfer.models.TopicID",
                    "Optional[bool]"
                ]
            }
        },
        "Spoofer.close": {
            "name": "close",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Inferior.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iface": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_Inferior.status": {
            "name": "status",
            "location": 93,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Inferior.push": {
            "name": "push",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transfer": [
                    "int",
                    "Callable",
                    "str"
                ],
                "monotonic_deadline": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_Inferior.close": {
            "name": "close",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Inferior._update_status": {
            "name": "_update_status",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yukon-master/yukon/io/_time.py": {
        "timestamp_to_dcs": {
            "name": "timestamp_to_dcs",
            "location": 10,
            "return": [
                "Optional[float]",
                "bool",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "ts": [
                    "int",
                    "float",
                    "Tuple",
                    "bool"
                ]
            }
        },
        "timestamp_from_dcs": {
            "name": "timestamp_from_dcs",
            "location": 18,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "ts": [
                    "str",
                    "Dict[str,Any]",
                    "Callable",
                    "List",
                    "SupportsInt",
                    "Tuple[Union[float,float,float]]",
                    "Tuple[float,float,float]"
                ]
            }
        }
    },
    "yukon-master/yukon/io/_worker.py": {
        "_initialize_iface": {
            "name": "_initialize_iface",
            "location": 133,
            "return": [
                "Dict",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "pub_capture": [
                    "int",
                    "List[str]",
                    "Dict",
                    "float",
                    "str"
                ],
                "ifc": [
                    "Dict"
                ]
            }
        },
        "IOWorker.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOWorker.close": {
            "name": "close",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOWorker._reconfigure": {
            "name": "_reconfigure",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "yukon-master/yukon/io/__init__.py": {},
    "yukon-master/yukon/io/__main__.py": {},
    "yukon-master/yukon/io/iface/udp.py": {
        "UDPIface.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UDPIface.new": {
            "name": "new",
            "location": 29,
            "return": [
                "UDPIface"
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "int"
                ]
            }
        },
        "UDPIface.capture_from_dcs": {
            "name": "capture_from_dcs",
            "location": 41,
            "return": [
                "numpy.ndarray",
                "Dict[str, Any]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "ts": [
                    "List[cirq.Qid]"
                ],
                "fr": [
                    "Iterable[bytes]",
                    "int",
                    "str",
                    "Tuple[str,str]"
                ]
            }
        },
        "UDPIface.begin_capture": {
            "name": "begin_capture",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "List",
                    "List[str]",
                    "Tuple"
                ]
            }
        },
        "UDPIface.sample_statistics": {
            "name": "sample_statistics",
            "location": 70,
            "return": [
                "yukon.io.iface.IfaceStatistics"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDPIface.close": {
            "name": "close",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDPIface._process_capture": {
            "name": "_process_capture",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cap": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "UDPIface.__repr__": {
            "name": "__repr__",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDPIface._process_capture.mk_addr": {
            "name": "mk_addr",
            "location": 79,
            "return": [
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "yukon-master/yukon/io/iface/__init__.py": {
        "Iface.resolve": {
            "name": "resolve",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "selector": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Iface.new": {
            "name": "new",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "Callable[,None]",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Iface.capture_from_dcs": {
            "name": "capture_from_dcs",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "ts": [
                    "Exception",
                    "bool"
                ],
                "fr": [
                    "Exception",
                    "bool"
                ]
            }
        },
        "Iface.begin_capture": {
            "name": "begin_capture",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Iface.sample_statistics": {
            "name": "sample_statistics",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Iface.close": {
            "name": "close",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Iface.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "zakm-master/armaclass/arma_generator.py": {
        "generate": {
            "name": "generate",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "ArmaGenerator.generate_float": {
            "name": "generate_float",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "str",
                    "Dict[Tuple[Any, str], int]",
                    "dict[tuple[typing.Union[typing.Any,str]], int]"
                ]
            }
        },
        "ArmaGenerator.generate_int": {
            "name": "generate_int",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "str",
                    "Dict[Tuple[Any, str], int]",
                    "dict[tuple[typing.Union[typing.Any,str]], int]"
                ]
            }
        },
        "ArmaGenerator.generate_class": {
            "name": "generate_class",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "dict[, ]",
                    "Union[str, bytes]",
                    "bytes",
                    "None"
                ],
                "data": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "ArmaGenerator.generate_array": {
            "name": "generate_array",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "data": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "ArmaGenerator._escape_string": {
            "name": "_escape_string",
            "location": 50,
            "return": [
                "str",
                "bytes",
                "dict",
                "Dict[str, Any]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "ArmaGenerator.generate_string": {
            "name": "generate_string",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "list[str]",
                    "dict[str, str]"
                ],
                "data": [
                    "str",
                    "bool",
                    "typing.Hashable",
                    "Hashable",
                    "int"
                ]
            }
        }
    },
    "zakm-master/armaclass/generator.py": {
        "Generator.generate_number": {
            "name": "generate_number",
            "location": 6,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Union[str, bytes]",
                    "Optional[str]"
                ]
            }
        },
        "Generator.generate_float": {
            "name": "generate_float",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "data": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "Generator.generate_int": {
            "name": "generate_int",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "data": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "Generator.generate_class": {
            "name": "generate_class",
            "location": 17,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "float",
                    "Callable[[], Any]",
                    "None",
                    "typing.Callable[[], typing.Any]"
                ],
                "data": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "float",
                    "Callable[[], Any]",
                    "None",
                    "typing.Callable[[], typing.Any]"
                ]
            }
        },
        "Generator.generate_array": {
            "name": "generate_array",
            "location": 20,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "data": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "Generator.generate_string": {
            "name": "generate_string",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "None",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ],
                "data": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "None",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ]
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int",
                    "str"
                ],
                "use_tabs": [
                    "bool",
                    "float"
                ]
            }
        },
        "Generator._indent": {
            "name": "_indent",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Generator.generate_item": {
            "name": "generate_item",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "data": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Generator.generate": {
            "name": "generate",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "zakm-master/armaclass/parser.py": {
        "parse": {
            "name": "parse",
            "location": 280,
            "return": [
                "Union[(Dict[(nothing, nothing)], collections.OrderedDict[(nothing, nothing)])]"
            ],
            "arguments": {
                "raw": [
                    "str",
                    "bytes",
                    "list",
                    "list[]"
                ]
            }
        },
        "Parser.ensure": {
            "name": "ensure",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "message": [
                    "typing.Text",
                    "str",
                    "int",
                    "IO[Any]",
                    "float"
                ]
            }
        },
        "Parser.detectComment": {
            "name": "detectComment",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.next": {
            "name": "next",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.nextWithoutCommentDetection": {
            "name": "nextWithoutCommentDetection",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.current": {
            "name": "current",
            "location": 62,
            "return": [
                "None",
                "str",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.weHaveADoubleQuote": {
            "name": "weHaveADoubleQuote",
            "location": 68,
            "return": [
                "bool",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.weHaveAStringLineBreak": {
            "name": "weHaveAStringLineBreak",
            "location": 71,
            "return": [
                "bool",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.forwardToNextQuote": {
            "name": "forwardToNextQuote",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.indexOfOrMaxSize": {
            "name": "indexOfOrMaxSize",
            "location": 80,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "haystack": [
                    "list[str]",
                    "int",
                    "Optional[float]",
                    "bool",
                    "List[str]"
                ],
                "needle": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "List[str]"
                ],
                "fromPos": [
                    "int",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Parser.parseString": {
            "name": "parseString",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseNumber": {
            "name": "parseNumber",
            "location": 108,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "Parser.parseMathExpression": {
            "name": "parseMathExpression",
            "location": 118,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parsePropertyValue": {
            "name": "parsePropertyValue",
            "location": 138,
            "return": [
                "Union[(float, int, list, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.isValidVarnameChar": {
            "name": "isValidVarnameChar",
            "location": 147,
            "return": [
                "Union[(bool, _T0)]"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "_T0"
                ]
            }
        },
        "Parser.parsePropertyName": {
            "name": "parsePropertyName",
            "location": 150,
            "return": [
                "str",
                "int",
                "List[Tuple[str, str]]",
                "dict[, ]",
                "List[str]",
                "typing.Mapping",
                "List[\"models.Name\"]",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseClassValue": {
            "name": "parseClassValue",
            "location": 157,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseArray": {
            "name": "parseArray",
            "location": 172,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseWhitespace": {
            "name": "parseWhitespace",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parseProperty": {
            "name": "parseProperty",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Type[T]",
                    "str",
                    "Optional[Callable]",
                    "List[str]"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 260,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "keep_order": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "zakm-master/armaclass/__init__.py": {},
    "zakm-master/tests/test_armaclass.py": {
        "TestArmaClass.test_empty": {
            "name": "test_empty",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArmaClass.test_integer_property": {
            "name": "test_integer_property",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArmaClass.test_more_than_one_value_in_file": {
            "name": "test_more_than_one_value_in_file",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArmaClass.test_array_of_scalars": {
            "name": "test_array_of_scalars",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArmaClass.test_scientific_notation": {
            "name": "test_scientific_notation",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArmaClass.test_ignore_symbols": {
            "name": "test_ignore_symbols",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArmaClass.test_ignore_inheritance": {
            "name": "test_ignore_inheritance",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArmaClass.test_line_comments": {
            "name": "test_line_comments",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArmaClass.test_multiline_comments": {
            "name": "test_multiline_comments",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArmaClass.test_quote_escaping_by_double_quote": {
            "name": "test_quote_escaping_by_double_quote",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArmaClass.test_sample": {
            "name": "test_sample",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArmaClass.test_multiline_init": {
            "name": "test_multiline_init",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zakm-master/tests/test_classes.py": {
        "test_test": {
            "name": "test_test",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSpecFields.test_ok": {
            "name": "test_ok",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllMissingRequiredKeys.test_one_missing": {
            "name": "test_one_missing",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllMissingRequiredKeys.test_only_optional": {
            "name": "test_only_optional",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllMissingRequiredKeys.test_all_given": {
            "name": "test_all_given",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllInvalidKeys.test_one_invalid_key": {
            "name": "test_one_invalid_key",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllInvalidKeys.test_no_valid_keys": {
            "name": "test_no_valid_keys",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllInvalidKeys.test_all_valid": {
            "name": "test_all_valid",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInvalidKeyValueTypes.test_one_wrong": {
            "name": "test_one_wrong",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInvalidKeyValueTypes.test_all_wrong": {
            "name": "test_all_wrong",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInvalidKeyValueTypes.test_all_correct": {
            "name": "test_all_correct",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInvalidKeyValueTypes.test_partial_keys": {
            "name": "test_partial_keys",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInvalidKeyValueTypes.test_wrong_key": {
            "name": "test_wrong_key",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zakm-master/tests/test_ingestion.py": {
        "test_import": {
            "name": "test_import",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_class": {
            "name": "test_class",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestLoadDB.test_good_load": {
            "name": "test_good_load",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadDB.test_bad_load": {
            "name": "test_bad_load",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zakm-master/tests/__init__.py": {},
    "zakm-master/zakm/classes.py": {
        "Base.spec_fields": {
            "name": "spec_fields",
            "location": 16,
            "return": [
                "List[dataclasses.Field]"
            ],
            "arguments": {
                "cls": [
                    "tuple[typing.Union[str,str,str]]",
                    "str",
                    "Tuple[str, str, str]",
                    "dict[, ]",
                    "config.Config",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Base.get_all_missing_required_keys": {
            "name": "get_all_missing_required_keys",
            "location": 25,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]"
                ],
                "keys": [
                    "Set[str]"
                ]
            }
        },
        "Base.get_all_invalid_keys": {
            "name": "get_all_invalid_keys",
            "location": 37,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "keys": [
                    "Set[str]"
                ]
            }
        },
        "Base.get_invalid_key_value_types": {
            "name": "get_invalid_key_value_types",
            "location": 48,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Hashable]",
                    "type",
                    "Optional[tortoise.fields.Field]"
                ],
                "key_values": [
                    "Dict[(str, Union[(dict, int, list, str)])]"
                ]
            }
        },
        "VisibilityCondition.__str__": {
            "name": "__str__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TerrainCondition.__str__": {
            "name": "__str__",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zakm-master/zakm/config.py": {},
    "zakm-master/zakm/ingestion.py": {
        "load_db": {
            "name": "load_db",
            "location": 8,
            "return": [
                "dict"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "zakm-master/zakm/__init__.py": {}
}
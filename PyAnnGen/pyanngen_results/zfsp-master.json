{
    "zfsp-master/explore.py": {
        "cli": {
            "name": "cli",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PoolExplorer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolExplorer.setup_module_logs": {
            "name": "setup_module_logs",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PoolExplorer.cli": {
            "name": "cli",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolExplorer.load_pool": {
            "name": "load_pool",
            "location": 172,
            "return": [
                "zfs.pool.Pool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PoolExplorer.list_cmd": {
            "name": "list_cmd",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PoolExplorer.cat": {
            "name": "cat",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PoolExplorer.show_object": {
            "name": "show_object",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "os": [
                    "str",
                    "List[str]",
                    "list",
                    "bool"
                ],
                "obj": [
                    "int",
                    "str",
                    "typing.Callable[T, T]",
                    "Callable[[T], T]",
                    "T"
                ]
            }
        },
        "PoolExplorer.objset": {
            "name": "objset",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PoolExplorer.nvparse": {
            "name": "nvparse",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PoolExplorer.label": {
            "name": "label",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PoolExplorer.mount_fuse": {
            "name": "mount_fuse",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PoolExplorer.read_dva": {
            "name": "read_dva",
            "location": 268,
            "return": [
                "_NotImplementedType"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "zfsp-master/setup.py": {},
    "zfsp-master/nvlist/__init__.py": {
        "NVList.unpack_nvlist": {
            "name": "unpack_nvlist",
            "location": 38,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NVList.unpack_value": {
            "name": "unpack_value",
            "location": 51,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zfsp-master/pyndata/array.py": {
        "array.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "str",
                    "int",
                    "Type[Any]",
                    "Exception",
                    "typing.Type"
                ],
                "length": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "array.pack": {
            "name": "pack",
            "location": 42,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "dict[, ]",
                    "dict",
                    "dict[str, a]",
                    "Type",
                    "Dict[str, object]",
                    "Iterable[str]"
                ],
                "_struct": [
                    "dict[, ]",
                    "dict",
                    "typing.Type",
                    "Type",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "Iterable[str]"
                ]
            }
        },
        "array.unpack": {
            "name": "unpack",
            "location": 45,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "bool",
                    "T"
                ],
                "_struct": [
                    "int"
                ]
            }
        }
    },
    "zfsp-master/pyndata/bitfield.py": {
        "BitField.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None",
                    "Match[str]",
                    "typing.Match"
                ],
                "size": [
                    "int"
                ],
                "shift": [
                    "int",
                    "str",
                    "Callable",
                    "Optional[int]"
                ],
                "enum": [
                    "int",
                    "str",
                    "None",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "BitField.__get__": {
            "name": "__get__",
            "location": 35,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ],
                "kind": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "BitField.__set__": {
            "name": "__set__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "int"
                ],
                "value": [
                    "str",
                    "bool",
                    "int",
                    "complex"
                ]
            }
        }
    },
    "zfsp-master/pyndata/bytestring.py": {
        "bytestring.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "bytestring.unpack": {
            "name": "unpack",
            "location": 29,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "int",
                    "Hashable",
                    "bytes"
                ],
                "struct": [
                    "bool",
                    "int"
                ]
            }
        },
        "bytestring.pack": {
            "name": "pack",
            "location": 26,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "struct": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "zfsp-master/pyndata/conditional.py": {
        "conditional": {
            "name": "conditional",
            "location": 30,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "field": [
                    "bool",
                    "str",
                    "typing.Iterable[tuple[typing.Union[str,typing.Any]]]",
                    "Iterable[Tuple[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "ConditionalField.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "real_field": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ConditionalField.pack": {
            "name": "pack",
            "location": 18,
            "return": [
                "bytes",
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ],
                "struct": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ConditionalField.unpack": {
            "name": "unpack",
            "location": 24,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "struct": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "conditional.wrapper": {
            "name": "wrapper",
            "location": 31,
            "return": [
                "ConditionalField",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        }
    },
    "zfsp-master/pyndata/error.py": {},
    "zfsp-master/pyndata/field.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Field.__get__": {
            "name": "__get__",
            "location": 35,
            "return": [
                "str",
                "Container[\"Taxon\"]",
                "int",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "Union[str, IO]",
                    "typing.IO"
                ],
                "kind": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Field.__set__": {
            "name": "__set__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "Field.pack": {
            "name": "pack",
            "location": 41,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ],
                "struct": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Field.unpack": {
            "name": "unpack",
            "location": 53,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "struct": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "zfsp-master/pyndata/integer.py": {
        "integer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endian": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "enum": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "integer.endian": {
            "name": "endian",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_struct": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "integer.pack": {
            "name": "pack",
            "location": 38,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list",
                    "Optional[int]",
                    "bool"
                ],
                "_struct": []
            }
        },
        "integer.unpack": {
            "name": "unpack",
            "location": 42,
            "return": [
                "int",
                "bytes",
                "str",
                "dict[str, str]",
                "float",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "int",
                    "bytes",
                    "Hashable",
                    "typing.Hashable"
                ],
                "_struct": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "zfsp-master/pyndata/nullstring.py": {
        "nullstring.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_length": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "padded": [
                    "bool",
                    "int",
                    "float"
                ],
                "allow_max": [
                    "bool",
                    "int",
                    "float"
                ],
                "encoding": [
                    "typing.Text",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "nullstring.pack": {
            "name": "pack",
            "location": 31,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bytes",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Union[str, Iterable[str]]"
                ],
                "struct": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "nullstring.unpack": {
            "name": "unpack",
            "location": 52,
            "return": [
                "str",
                "bytes",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "str",
                    "list"
                ],
                "struct": [
                    "int",
                    "str",
                    "typing.Iterable[n]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "zfsp-master/pyndata/padding.py": {
        "padding.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "bool",
                    "float",
                    "str",
                    "List[str]"
                ]
            }
        },
        "padding.pack": {
            "name": "pack",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "Sequence[Any]",
                    "List[str]",
                    "Iterable[int]",
                    "List[Tuple[int, str]]",
                    "Set[str]"
                ],
                "struct": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "padding.unpack": {
            "name": "unpack",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "Optional[int]",
                    "int",
                    "List[int]",
                    "None",
                    "Optional[str]",
                    "list[int]",
                    "List[str]",
                    "str",
                    "tuple",
                    "list[str]",
                    "List[Dict[str, Any]]",
                    "tuple[]",
                    "Set[int]",
                    "list[dict[str, typing.Any]]",
                    "List[float]",
                    "set[int]",
                    "list",
                    "list[float]",
                    "list[]"
                ],
                "struct": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "zfsp-master/pyndata/structfield.py": {
        "StructField.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "struct": [
                    "List['Node']",
                    "str",
                    "list['Node']"
                ]
            }
        },
        "StructField.pack": {
            "name": "pack",
            "location": 17,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "int",
                    "bytes"
                ],
                "struct": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "StructField.unpack": {
            "name": "unpack",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "struct": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "zfsp-master/pyndata/structure.py": {
        "StructMeta.__new__": {
            "name": "__new__",
            "location": 32,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "cls_name": [
                    "str"
                ],
                "bases": [
                    "str"
                ],
                "attrs": [
                    "str",
                    "Type",
                    "Dict[str, Any]",
                    "Tuple[type]"
                ]
            }
        },
        "Struct.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Struct.__repr__": {
            "name": "__repr__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Struct.pack": {
            "name": "pack",
            "location": 89,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Struct.unpack": {
            "name": "unpack",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "str",
                    "bytes",
                    "dict",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "zfsp-master/pyndata/structure3.py": {},
    "zfsp-master/pyndata/variablelength.py": {
        "VariableLength.get_length": {
            "name": "get_length",
            "location": 12,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "struct": [
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "VariableLength.__set__": {
            "name": "__set__",
            "location": 20,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Set[str]",
                    "set[str]",
                    "Union[int, float]",
                    "float",
                    "List[str]",
                    "list[str]"
                ],
                "value": [
                    "int",
                    "Set[str]",
                    "Union[int, float]",
                    "List[str]"
                ]
            }
        }
    },
    "zfsp-master/pyndata/__init__.py": {},
    "zfsp-master/pyndata/tests/test_array.py": {
        "test_array_unpack": {
            "name": "test_array_unpack",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_array_pack": {
            "name": "test_array_pack",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_variable_unpack_length": {
            "name": "test_variable_unpack_length",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_variable_pack": {
            "name": "test_variable_pack",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bad_unpack_length": {
            "name": "test_bad_unpack_length",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_array_bitfield_length": {
            "name": "test_array_bitfield_length",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_array_function_length_unpack": {
            "name": "test_array_function_length_unpack",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_array_function_length_pack": {
            "name": "test_array_function_length_pack",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "ArrayWithFunctionLength.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayWithFunctionLength.length": {
            "name": "length",
            "location": 66,
            "return": [
                "int",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "zfsp-master/pyndata/tests/test_basic.py": {
        "test_field_get": {
            "name": "test_field_get",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_default": {
            "name": "test_default",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_field_set": {
            "name": "test_field_set",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unique_field_items": {
            "name": "test_unique_field_items",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_pack": {
            "name": "test_pack",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_initial_unpack": {
            "name": "test_initial_unpack",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_endian": {
            "name": "test_endian",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_field_raises": {
            "name": "test_field_raises",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "zfsp-master/pyndata/tests/test_bitfield.py": {
        "test_bitfield": {
            "name": "test_bitfield",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bitfield2": {
            "name": "test_bitfield2",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "zfsp-master/pyndata/tests/test_bytestring.py": {
        "test_bytestring": {
            "name": "test_bytestring",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_variable_unpack": {
            "name": "test_variable_unpack",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_variable_pack": {
            "name": "test_variable_pack",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bad_unpack_length": {
            "name": "test_bad_unpack_length",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "zfsp-master/pyndata/tests/test_nested_struct.py": {
        "test_nested_reference": {
            "name": "test_nested_reference",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "zfsp-master/pyndata/tests/test_nullstring.py": {
        "test_null_string_pack": {
            "name": "test_null_string_pack",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_null_string_illegal": {
            "name": "test_null_string_illegal",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_null_string_illegal_allow_max": {
            "name": "test_null_string_illegal_allow_max",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_null_string_unpack": {
            "name": "test_null_string_unpack",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_null_string_encoding": {
            "name": "test_null_string_encoding",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "zfsp-master/pyndata/tests/test_padding.py": {
        "test_padding_unpack": {
            "name": "test_padding_unpack",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_padding_pack": {
            "name": "test_padding_pack",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "zfsp-master/pyndata/tests/test_struct_keywords.py": {
        "test_keyword_fields": {
            "name": "test_keyword_fields",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_keyword_failure": {
            "name": "test_keyword_failure",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "zfsp-master/pyndata/tests/test_struct_repr.py": {
        "test_default_hidden": {
            "name": "test_default_hidden",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "zfsp-master/pyndata/tests/test_substruct.py": {
        "test_sub_struct_unpack": {
            "name": "test_sub_struct_unpack",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_sub_struct_pack": {
            "name": "test_sub_struct_pack",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "zfsp-master/pyndata/tests/__init__.py": {},
    "zfsp-master/tests/fixtures.py": {
        "fixture": {
            "name": "fixture",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "static_fixture": {
            "name": "static_fixture",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "generate_test_name": {
            "name": "generate_test_name",
            "location": 19,
            "return": [
                "str",
                "bool",
                "Mapping",
                "type",
                "Tuple[Type]"
            ],
            "arguments": {
                "param": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "zpool": {
            "name": "zpool",
            "location": 68,
            "return": [
                "Pool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "complex_zpool": {
            "name": "complex_zpool",
            "location": 73,
            "return": [
                "str",
                "Pool"
            ],
            "arguments": {}
        },
        "lz4_zpool": {
            "name": "lz4_zpool",
            "location": 78,
            "return": [
                "str",
                "Pool"
            ],
            "arguments": {}
        }
    },
    "zfsp-master/tests/test_checksums.py": {
        "test_checksums": {
            "name": "test_checksums",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "Callable[[str], bool]",
                    "typing.Callable[str, bool]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "complex_zpool": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "zfsp-master/tests/test_compression.py": {
        "file_contents": {
            "name": "file_contents",
            "location": 22,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_zfs_compression": {
            "name": "test_zfs_compression",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Callable[[Dict], Any]]",
                    "typing.Callable[dict[, ], typing.Any]",
                    "None"
                ],
                "complex_zpool": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "file_contents": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_lz4_compression": {
            "name": "test_lz4_compression",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "lz4_zpool": [],
                "file_contents": [
                    "str"
                ]
            }
        }
    },
    "zfsp-master/tests/test_features.py": {
        "test_feature_active": {
            "name": "test_feature_active",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "feature": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "zfsp-master/tests/test_objectset.py": {
        "test_objset": {
            "name": "test_objset",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "zpool": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "zfsp-master/tests/test_posix.py": {
        "test_ownership": {
            "name": "test_ownership",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "zpool": [
                    "str",
                    "float"
                ]
            }
        },
        "test_permissions": {
            "name": "test_permissions",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "zpool": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "int",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "zfsp-master/tests/test_read.py": {
        "test_read_file": {
            "name": "test_read_file",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "zpool": [
                    "dict"
                ]
            }
        },
        "test_read_in_directory": {
            "name": "test_read_in_directory",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "zpool": [
                    "str"
                ]
            }
        },
        "test_read_in_subdirectory": {
            "name": "test_read_in_subdirectory",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "zpool": [
                    "str"
                ]
            }
        },
        "test_read_in_nested_datasets": {
            "name": "test_read_in_nested_datasets",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "zpool": [
                    "str"
                ]
            }
        },
        "test_read_fatzap_directory": {
            "name": "test_read_fatzap_directory",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "zpool": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "zfsp-master/zfs/constants.py": {},
    "zfsp-master/zfs/datasets.py": {
        "Dataset.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "bool",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "dsl_dir": [
                    "str"
                ],
                "objset": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "dnode": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "typing.Type",
                    "type",
                    "int"
                ],
                "path": [
                    "str",
                    "bool",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Dataset.child_datasets": {
            "name": "child_datasets",
            "location": 30,
            "return": [
                "ChildDatasets",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.snapshot_names": {
            "name": "snapshot_names",
            "location": 35,
            "return": [
                "str",
                "dict[str, str]",
                "List[Tuple[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.snapshots": {
            "name": "snapshots",
            "location": 41,
            "return": [
                "int",
                "str",
                "Callable",
                "dict[str, str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.entries": {
            "name": "entries",
            "location": 57,
            "return": [
                "dict[, ]",
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__contains__": {
            "name": "__contains__",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "Dataset.__getitem__": {
            "name": "__getitem__",
            "location": 65,
            "return": [
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "Optional[Dict]",
                    "dict[, ]",
                    "dict",
                    "None"
                ]
            }
        },
        "Dataset.keys": {
            "name": "keys",
            "location": 71,
            "return": [
                "str",
                "Sequence[str]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.items": {
            "name": "items",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.attributes": {
            "name": "attributes",
            "location": 77,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Iterator[str]",
                    "typing.Iterator"
                ]
            }
        },
        "Dataset.root_directory": {
            "name": "root_directory",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__repr__": {
            "name": "__repr__",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildDatasets.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "Dict[(str, Any)]"
                ],
                "dataset": [
                    "Dataset"
                ],
                "objectset": [
                    "objectset.ObjectSet"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ChildDatasets.__contains__": {
            "name": "__contains__",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ChildDatasets.__getitem__": {
            "name": "__getitem__",
            "location": 117,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ChildDatasets.keys": {
            "name": "keys",
            "location": 130,
            "return": [
                "dict_keys[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildDatasets.items": {
            "name": "items",
            "location": 133,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zfsp-master/zfs/filedev.py": {
        "FileDev.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "label": [
                    "str",
                    "None",
                    "bool",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "TextIO",
                    "list[str]",
                    "Callable",
                    "typing.TextIO",
                    "typing.Callable[, ]"
                ],
                "txg": [
                    "str",
                    "None",
                    "bool",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "TextIO",
                    "list[str]",
                    "Callable",
                    "typing.TextIO",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FileDev.read": {
            "name": "read",
            "location": 9,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "typing.Iterable[]",
                    "Iterable",
                    "Tuple[int, int]"
                ],
                "size": [
                    "int",
                    "list[int]",
                    "List[int]",
                    "list[bytes]",
                    "List[bytes]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "list[list[int]]",
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "FileDev.write": {
            "name": "write",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "data": [
                    "str",
                    "bytearray",
                    "bytes"
                ]
            }
        },
        "FileDev.flush": {
            "name": "flush",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileDev.seek": {
            "name": "seek",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "whence": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "zfsp-master/zfs/history.py": {
        "next_break_offset": {
            "name": "next_break_offset",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "HistoryParser.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "Union[(bytes, io.BytesIO)]"
                ]
            }
        },
        "HistoryParser.unpack_int": {
            "name": "unpack_int",
            "location": 25,
            "return": [
                "List[str]",
                "str",
                "Iterable[T]",
                "float",
                "int",
                "List[\"DictDataLoader\"]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryParser.unpack_uint": {
            "name": "unpack_uint",
            "location": 28,
            "return": [
                "List[str]",
                "str",
                "Iterable[T]",
                "float",
                "int",
                "List[\"DictDataLoader\"]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryParser.unpack_hyper": {
            "name": "unpack_hyper",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryParser.unpack_uhyper": {
            "name": "unpack_uhyper",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryParser.unpack_fstring": {
            "name": "unpack_fstring",
            "location": 37,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ]
            }
        },
        "HistoryParser.unpack_string": {
            "name": "unpack_string",
            "location": 41,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryParser.unpack_value": {
            "name": "unpack_value",
            "location": 45,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryParser.unpack_nvlist": {
            "name": "unpack_nvlist",
            "location": 84,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "HistoryParser.unpack_history": {
            "name": "unpack_history",
            "location": 101,
            "return": [
                "List[Union[(bool, dict)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zfsp-master/zfs/lzjb.py": {
        "decompress": {
            "name": "decompress",
            "location": 4,
            "return": [
                "Union[(bytearray, bytes, memoryview)]"
            ],
            "arguments": {
                "bs": [
                    "bytes"
                ],
                "size": [
                    "int"
                ]
            }
        }
    },
    "zfsp-master/zfs/objectset.py": {
        "ObjectSet.from_struct": {
            "name": "from_struct",
            "location": 29,
            "return": [
                "ObjectSet"
            ],
            "arguments": {
                "cls": [
                    "Type[_TObjectSet]"
                ],
                "pool": [
                    "str",
                    "list",
                    "list[]"
                ],
                "strct": [
                    "int",
                    "str"
                ],
                "dataset": [
                    "datasets.Dataset"
                ]
            }
        },
        "ObjectSet.from_block": {
            "name": "from_block",
            "location": 37,
            "return": [
                "ObjectSet"
            ],
            "arguments": {
                "cls": [
                    "Type[_TObjectSet]"
                ],
                "pool": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "Tuple[int, int]"
                ],
                "block": [
                    "bytes"
                ],
                "dataset": [
                    "datasets.Dataset"
                ]
            }
        },
        "ObjectSet.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "int",
                    "float",
                    "bool"
                ],
                "raw_objectset": [
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[str]",
                    "list[str]"
                ],
                "objset": [
                    "bytes"
                ],
                "dataset": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "ObjectSet.__getitem__": {
            "name": "__getitem__",
            "location": 50,
            "return": [
                "list[]",
                "Dict[int, int]",
                "Set[str]",
                "Iterator",
                "Tuple[List[int], List[int]]",
                "str",
                "List[list]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Union[(int, slice)]"
                ]
            }
        },
        "ObjectSet.__iter__": {
            "name": "__iter__",
            "location": 58,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectSet.get_dnode": {
            "name": "get_dnode",
            "location": 63,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "ObjectSet.parse_dnode": {
            "name": "parse_dnode",
            "location": 71,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "int",
                    "str"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "ObjectSet.read_default": {
            "name": "read_default",
            "location": 129,
            "return": [
                "bool",
                "float",
                "typing.Callable[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ]
            }
        },
        "ObjectSet.read_none": {
            "name": "read_none",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dnode": []
            }
        },
        "ObjectSet.read_directory": {
            "name": "read_directory",
            "location": 136,
            "return": [
                "Directory",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ObjectSet.read_file": {
            "name": "read_file",
            "location": 141,
            "return": [
                "File",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "str",
                    "bool"
                ]
            }
        },
        "ObjectSet.read_zap": {
            "name": "read_zap",
            "location": 144,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ObjectSet._read_microzap": {
            "name": "_read_microzap",
            "location": 153,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "str"
                ],
                "hdr": [
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]",
                    "dict",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "zap": [
                    "io.BytesIO"
                ]
            }
        },
        "ObjectSet.read_attr_registration": {
            "name": "read_attr_registration",
            "location": 171,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "int",
                    "str",
                    "dict[, ]",
                    "dict",
                    "bool"
                ]
            }
        },
        "ObjectSet._read_fatzap": {
            "name": "_read_fatzap",
            "location": 182,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "raw_fz": [
                    "bytes"
                ]
            }
        },
        "ObjectSet.read_bpobj": {
            "name": "read_bpobj",
            "location": 187,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "int",
                    "str"
                ]
            }
        },
        "ObjectSet.read_object_array": {
            "name": "read_object_array",
            "location": 194,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "Sequence[Dict[str, Any]]",
                    "int",
                    "typing.Sequence[dict[str, typing.Any]]",
                    "str"
                ]
            }
        },
        "ObjectSet.read_nvlist": {
            "name": "read_nvlist",
            "location": 200,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ObjectSet.read_dataset": {
            "name": "read_dataset",
            "location": 207,
            "return": [
                "DSLDataset",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ObjectSet.read_dsldir": {
            "name": "read_dsldir",
            "location": 210,
            "return": [
                "datasets.Dataset"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "str",
                    "bool",
                    "Union[str, IO[bytes]]",
                    "typing.IO"
                ]
            }
        },
        "ObjectSet.read_history": {
            "name": "read_history",
            "location": 215,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "Sequence[Dict[str, Any]]",
                    "int",
                    "typing.Sequence[dict[str, typing.Any]]",
                    "str"
                ]
            }
        }
    },
    "zfsp-master/zfs/pool.py": {
        "vdev_list_to_dict": {
            "name": "vdev_list_to_dict",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {
                "vdevs": [
                    "list",
                    "list[]"
                ]
            }
        },
        "Pool.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vdevs": [
                    "List[vdevs.VDev]"
                ],
                "try_config": [
                    "dict",
                    "None",
                    "str",
                    "Sequence",
                    "dict[, ]",
                    "typing.Sequence[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Pool.first_vdev": {
            "name": "first_vdev",
            "location": 33,
            "return": [
                "vdevs.VDev"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.context": {
            "name": "context",
            "location": 36,
            "return": [
                "readcontext.ReadContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.read_block": {
            "name": "read_block",
            "location": 45,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "blkptr": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "Pool.read_indirect": {
            "name": "read_indirect",
            "location": 48,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "blkptr": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Pool.read_dnode": {
            "name": "read_dnode",
            "location": 51,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Pool.read_file": {
            "name": "read_file",
            "location": 54,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Pool.objset_for_vdev": {
            "name": "objset_for_vdev",
            "location": 72,
            "return": [
                "objectset.ObjectSet"
            ],
            "arguments": {
                "self": [],
                "vdev": [
                    "Union[(int, vdevs.VDev)]"
                ]
            }
        },
        "Pool.root_dataset": {
            "name": "root_dataset",
            "location": 82,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.metaslab_array": {
            "name": "metaslab_array",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.dataset_for": {
            "name": "dataset_for",
            "location": 92,
            "return": [
                "datasets.Dataset"
            ],
            "arguments": {
                "self": [],
                "dataset_expr": [
                    "str"
                ]
            }
        },
        "Pool.open": {
            "name": "open",
            "location": 102,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "zfsp-master/zfs/raidzdev.py": {
        "convert": {
            "name": "convert",
            "location": 13,
            "return": [
                "int",
                "bool",
                "float",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "k": [
                    "int",
                    "bool"
                ],
                "base": [
                    "int",
                    "float",
                    "str",
                    "List[float]"
                ],
                "disks": [
                    "int",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "parity": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "should_resize": {
            "name": "should_resize",
            "location": 21,
            "return": [
                "bool",
                "int",
                "str",
                "IO[str]",
                "Optional[str]",
                "Iterable[str]",
                "dict"
            ],
            "arguments": {
                "offset": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "size": [
                    "int"
                ],
                "disks": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "parity": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "locate_data": {
            "name": "locate_data",
            "location": 30,
            "return": [
                "List[Union[(tuple, _T0, _T1)]]"
            ],
            "arguments": {
                "disks": [
                    "_T0"
                ],
                "parity": [
                    "_T1"
                ],
                "offset": [
                    "int",
                    "List[str]",
                    "Union[str, int]"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "xor_blocks": {
            "name": "xor_blocks",
            "location": 56,
            "return": [
                "Union[(bytes, str)]"
            ],
            "arguments": {}
        },
        "RaidZDev.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parity": [
                    "int",
                    "float",
                    "bool"
                ],
                "devs": [
                    "str",
                    "int"
                ]
            }
        },
        "RaidZDev._read_resolved": {
            "name": "_read_resolved",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dva": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "RaidZDev.read_dva": {
            "name": "read_dva",
            "location": 84,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "dva": [
                    "str",
                    "Dict[str, Dict[str, int]]",
                    "dict[str, dict[str, int]]",
                    "Dict[str, List]",
                    "dict[str, list[]]",
                    "Mapping[str, Sequence[str]]",
                    "typing.Mapping",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "RaidZDev.read": {
            "name": "read",
            "location": 99,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "Union[(int, Tuple[(int, int)])]"
                ],
                "size": [
                    "int"
                ]
            }
        }
    },
    "zfsp-master/zfs/readcontext.py": {
        "ReadContext.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vdevs": [
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "dict",
                    "int",
                    "dict[, ]",
                    "bytes",
                    "list",
                    "str",
                    "list[]"
                ],
                "compression": [
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "dict",
                    "int",
                    "dict[, ]",
                    "bytes",
                    "list",
                    "str",
                    "list[]"
                ],
                "checksum": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[Tuple[str, int]]",
                    "list[tuple[typing.Union[str,int]]]"
                ],
                "ashift": [
                    "int",
                    "Callable[[], None]",
                    "dict",
                    "list",
                    "bytes",
                    "str"
                ],
                "try_config": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Exception",
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[\"ShippingInfo\"]",
                    "None"
                ]
            }
        },
        "ReadContext.checksum": {
            "name": "checksum",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "valid": [
                    "str",
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "checksum": [
                    "str",
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ReadContext.decompress": {
            "name": "decompress",
            "location": 25,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "compression": [
                    "zfs.constants.Compression"
                ],
                "actual_size": [
                    "int"
                ]
            }
        },
        "ReadContext.update_inherit": {
            "name": "update_inherit",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compression": [
                    "zfs.constants.Compression"
                ],
                "checksum": [
                    "zfs.constants.Checksum"
                ]
            }
        },
        "ReadContext.read_block": {
            "name": "read_block",
            "location": 34,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "blkptr": [
                    "bool",
                    "int"
                ],
                "dva_offset": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Mapping"
                ]
            }
        },
        "ReadContext.read_block_thorough": {
            "name": "read_block_thorough",
            "location": 47,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "blkptr": [
                    "str",
                    "Union[BinaryIO, str]",
                    "typing.BinaryIO"
                ]
            }
        },
        "ReadContext._read_block_embedded": {
            "name": "_read_block_embedded",
            "location": 87,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "blkptr": [
                    "Mapping"
                ]
            }
        },
        "ReadContext._read_block": {
            "name": "_read_block",
            "location": 93,
            "return": [
                "Tuple[(bytes, bool)]"
            ],
            "arguments": {
                "self": [],
                "blkptr": [
                    "set",
                    "set[]"
                ],
                "dva": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ReadContext.read_indirect": {
            "name": "read_indirect",
            "location": 105,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "blkptr": [
                    "bytes",
                    "bool",
                    "str",
                    "Iterable",
                    "typing.Iterable[]"
                ]
            }
        },
        "ReadContext.read_dnode": {
            "name": "read_dnode",
            "location": 117,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ReadContext.context": {
            "name": "context",
            "location": 120,
            "return": [
                "ReadContext"
            ],
            "arguments": {
                "self": [
                    "_TReadContext"
                ]
            }
        }
    },
    "zfsp-master/zfs/util.py": {
        "decompress": {
            "name": "decompress",
            "location": 30,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "mode": [
                    "zfs.constants.Compression"
                ],
                "size": [
                    "int"
                ],
                "inherit": [
                    "int",
                    "None",
                    "bool"
                ]
            }
        },
        "checksum": {
            "name": "checksum",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "valid": [
                    "Tuple[(int, int, int, int)]"
                ],
                "mode": [
                    "zfs.constants.Checksum"
                ],
                "inherit": [
                    "zfs.constants.Checksum"
                ],
                "chk": [
                    "Tuple[(int, int, int, int)]"
                ]
            }
        },
        "sha256": {
            "name": "sha256",
            "location": 75,
            "return": [
                "Tuple[(int, int, int, int)]"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "unpack": {
            "name": "unpack",
            "location": 79,
            "return": [
                "tuple"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "fletcher2": {
            "name": "fletcher2",
            "location": 84,
            "return": [
                "Tuple[(int, int, int, int)]"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "fletcher4": {
            "name": "fletcher4",
            "location": 99,
            "return": [
                "Tuple[(int, int, int, int)]"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        }
    },
    "zfsp-master/zfs/vdevs.py": {
        "VDev.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label_index": [
                    "int"
                ],
                "txg": [
                    "int"
                ]
            }
        },
        "VDev.parse_uberblocks": {
            "name": "parse_uberblocks",
            "location": 34,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "raw_uberblocks": [
                    "list"
                ]
            }
        },
        "VDev.select_uberblock": {
            "name": "select_uberblock",
            "location": 39,
            "return": [
                "list[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "txg": [
                    "int"
                ]
            }
        },
        "VDev._best_label": {
            "name": "_best_label",
            "location": 52,
            "return": [
                "str",
                "list[list[bool]]",
                "bool",
                "Callable",
                "list"
            ],
            "arguments": {
                "self": [],
                "label_index": [
                    "int"
                ]
            }
        },
        "VDev.read_label": {
            "name": "read_label",
            "location": 64,
            "return": [
                "Tuple[(Optional[dict], list)]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "VDev.read_dva": {
            "name": "read_dva",
            "location": 88,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "dva": [
                    "str",
                    "float"
                ]
            }
        },
        "VDev.read": {
            "name": "read",
            "location": 93,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "Union[(int, Tuple[(int, int)])]"
                ],
                "size": [
                    "int"
                ]
            }
        }
    },
    "zfsp-master/zfs/zfuse.py": {
        "locked": {
            "name": "locked",
            "location": 19,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "mount": {
            "name": "mount",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "pool": [
                    "int",
                    "float"
                ],
                "mountpoint": [
                    "str"
                ]
            }
        },
        "locked.inner": {
            "name": "inner",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZFSFuse.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ZFSFuse.getattr": {
            "name": "getattr",
            "location": 37,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "fh": [
                    "str",
                    "bool"
                ]
            }
        },
        "ZFSFuse.getxattr": {
            "name": "getxattr",
            "location": 70,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "position": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ZFSFuse.listxattr": {
            "name": "listxattr",
            "location": 73,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "ZFSFuse.open": {
            "name": "open",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "int",
                    "str",
                    "bool",
                    "Iterator[int]"
                ],
                "flags": [
                    "int",
                    "str",
                    "bool",
                    "Iterator[int]"
                ]
            }
        },
        "ZFSFuse.readlink": {
            "name": "readlink",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "logging.Logger",
                    "bool"
                ]
            }
        },
        "ZFSFuse.read": {
            "name": "read",
            "location": 91,
            "return": [
                "bytes",
                "str",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ],
                "size": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ],
                "offset": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ],
                "fh": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "ZFSFuse.readdir": {
            "name": "readdir",
            "location": 99,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "fh": [
                    "str",
                    "bool"
                ]
            }
        },
        "ZFSFuse.statfs": {
            "name": "statfs",
            "location": 112,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "zfsp-master/zfs/__init__.py": {},
    "zfsp-master/zfs/ondisk/fatzap.py": {
        "parse_chunk": {
            "name": "parse_chunk",
            "location": 95,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Type",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "Type[Any]"
            ],
            "arguments": {
                "chunk": [
                    "TextIO",
                    "typing.TextIO",
                    "bool",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "parse_fatzap": {
            "name": "parse_fatzap",
            "location": 103,
            "return": [
                "dict[, ]",
                "OrderedDict",
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bool",
                    "io.StringIO"
                ]
            }
        },
        "read_linked": {
            "name": "read_linked",
            "location": 125,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "chunks": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "first": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "reconstruct_data": {
            "name": "reconstruct_data",
            "location": 146,
            "return": [
                "OrderedDict",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str",
                "list",
                "bool",
                "dict"
            ],
            "arguments": {
                "chunks": [
                    "str"
                ]
            }
        }
    },
    "zfsp-master/zfs/ondisk/zap.py": {},
    "zfsp-master/zfs/ondisk/__init__.py": {
        "Objset_for": {
            "name": "Objset_for",
            "location": 189,
            "return": [
                "ObjsetV1",
                "bool",
                "ObjsetV15",
                "int",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "version": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "indirect": {
            "name": "indirect",
            "location": 199,
            "return": [
                "float",
                "T",
                "str"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "shift": [
                    "int",
                    "float",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "dva.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blockptr.to_embedded": {
            "name": "to_embedded",
            "location": 54,
            "return": [
                "EmbeddedBlockptr",
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedBlockptr.data": {
            "name": "data",
            "location": 79,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Uberblock.valid": {
            "name": "valid",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DNode.bonus_length": {
            "name": "bonus_length",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "zfsp-master/zfs/posix/directory.py": {
        "Directory.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "entries": [
                    "typing.Iterator",
                    "int",
                    "Iterator[int]",
                    "str",
                    "tuple[int]",
                    "Tuple[int]",
                    "Optional[str]",
                    "None",
                    "bool"
                ],
                "dataset": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "objectset": [
                    "typing.Iterator",
                    "int",
                    "Iterator[int]",
                    "str",
                    "tuple[int]",
                    "Tuple[int]",
                    "Optional[str]",
                    "None",
                    "bool"
                ],
                "path": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Directory.__contains__": {
            "name": "__contains__",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "Directory.__getitem__": {
            "name": "__getitem__",
            "location": 42,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Directory.keys": {
            "name": "keys",
            "location": 57,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Directory.items": {
            "name": "items",
            "location": 60,
            "return": [
                "typing.Generator[tuple[]]",
                "Set[str]",
                "Dict[str, Set[str]]",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Directory.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zfsp-master/zfs/posix/posix_file.py": {
        "File.read": {
            "name": "read",
            "location": 10,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zfsp-master/zfs/posix/__init__.py": {
        "PosixObject.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dnode": [
                    "int",
                    "float",
                    "bool"
                ],
                "dataset": [
                    "datasets.Dataset"
                ]
            }
        }
    },
    "zfsp-master/zfs/posix/attributes/systemattributes.py": {
        "simple_attribute": {
            "name": "simple_attribute",
            "location": 13,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bytes"
                ],
                "attrs": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        },
        "debug_simple_attribute": {
            "name": "debug_simple_attribute",
            "location": 17,
            "return": [
                "str",
                "dict",
                "dict[str, str]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "\"ks.Series\"",
                    "list[str]",
                    "dict",
                    "List[str]"
                ],
                "attrs": [
                    "dict[, ]",
                    "\"ks.Series\"",
                    "list[str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "eat_remainder": {
            "name": "eat_remainder",
            "location": 23,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "data": [
                    "int",
                    "dict",
                    "str",
                    "bytes"
                ],
                "attrs": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        },
        "symlink": {
            "name": "symlink",
            "location": 27,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "dict[, ]",
                    "dict",
                    "T"
                ],
                "attrs": [
                    "bytes",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "dict[, ]",
                    "dict",
                    "T"
                ]
            }
        },
        "dacl_entries": {
            "name": "dacl_entries",
            "location": 30,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "list",
                    "dict"
                ],
                "attrs": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "no_attrs": {
            "name": "no_attrs",
            "location": 42,
            "return": [
                "Tuple[bytes]",
                "float",
                "bytes",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "f": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "no_attrs.inner": {
            "name": "inner",
            "location": 43,
            "return": [
                "str",
                "Union[str, Dict]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ],
                "attrs": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "SystemAttributes.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SystemAttributes.__call__": {
            "name": "__call__",
            "location": 80,
            "return": [
                "dict[typing.Text, SystemAttributeMagic]",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "zfsp-master/zfs/posix/attributes/__init__.py": {
        "FixedAttributes": {
            "name": "FixedAttributes",
            "location": 70,
            "return": [
                "List[str]",
                "logging.LogRecord",
                "int"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "POSIXAttrs_for": {
            "name": "POSIXAttrs_for",
            "location": 75,
            "return": [
                "SystemAttributes",
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "dataset": [
                    "float",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    }
}
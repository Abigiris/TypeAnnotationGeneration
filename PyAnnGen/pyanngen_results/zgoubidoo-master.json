{
    "zgoubidoo-master/setup.py": {
        "get_version_from_init": {
            "name": "get_version_from_init",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "zgoubidoo-master/docs/conf.py": {},
    "zgoubidoo-master/examples/fodo.py": {},
    "zgoubidoo-master/tests/doctests.py": {},
    "zgoubidoo-master/tests/emma.py": {},
    "zgoubidoo-master/tests/iba.py": {},
    "zgoubidoo-master/tests/input.py": {},
    "zgoubidoo-master/tests/lhec.py": {},
    "zgoubidoo-master/tests/test_kinematics.py": {
        "test_proton_total_energy": {
            "name": "test_proton_total_energy",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_proton_kinetic_energy": {
            "name": "test_proton_kinetic_energy",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_proton_momentum": {
            "name": "test_proton_momentum",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_proton_range": {
            "name": "test_proton_range",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_proton_beta": {
            "name": "test_proton_beta",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kinematics_gamma": {
            "name": "test_kinematics_gamma",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "zgoubidoo-master/zgoubidoo/constants.py": {},
    "zgoubidoo-master/zgoubidoo/converters.py": {
        "marker_to_zgoubi": {
            "name": "marker_to_zgoubi",
            "location": 32,
            "return": [
                "bool",
                "List"
            ],
            "arguments": {
                "element": [
                    "Dict[str,tuple[Union[Any,Any]]]",
                    "str",
                    "Dict[str,Tuple[Any,Any]]",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "kinematics": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "options": [
                    "Dict[str,tuple[Union[Any,Any]]]",
                    "str",
                    "Dict[str,Tuple[Any,Any]]",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "drift_to_zgoubi": {
            "name": "drift_to_zgoubi",
            "location": 48,
            "return": [
                "bool",
                "List"
            ],
            "arguments": {
                "element": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict"
                ],
                "kinematics": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "options": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "rbend_to_zgoubi": {
            "name": "rbend_to_zgoubi",
            "location": 62,
            "return": [
                "List",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "element": [
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]"
                ],
                "kinematics": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Union[int,float]"
                ],
                "options": [
                    "Dict[str,tuple[Union[Any,Any]]]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Tuple[Any,Any]]",
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Any]",
                    "Dict[str,Dict[str,str]]"
                ]
            }
        },
        "sbend_to_zgoubi": {
            "name": "sbend_to_zgoubi",
            "location": 89,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "element": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "kinematics": [
                    "Optional[Awaitable[None]]",
                    "Dict",
                    "collections.abc.Awaitable[None]",
                    "None"
                ],
                "options": [
                    "Dict",
                    "str",
                    "Optional[Any]",
                    "bytes",
                    "Optional[List[str]]"
                ]
            }
        },
        "quadrupole_to_zgoubi": {
            "name": "quadrupole_to_zgoubi",
            "location": 166,
            "return": [
                "str",
                "AbstractSet[str]",
                "Type"
            ],
            "arguments": {
                "element": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "MutableMapping",
                    "str"
                ],
                "kinematics": [
                    "int",
                    "str",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "options": [
                    "Dict[str,tuple[Union[Any,Any]]]",
                    "str",
                    "Dict[str,Tuple[Any,Any]]",
                    "Dict[str,str]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Any]",
                    "Dict[str,Dict[str,str]]"
                ]
            }
        },
        "sextupole_to_zgoubi": {
            "name": "sextupole_to_zgoubi",
            "location": 215,
            "return": [
                "List",
                "str",
                "AbstractSet[str]",
                "Type"
            ],
            "arguments": {
                "element": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str,str]"
                ],
                "kinematics": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "options": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "octupole_to_zgoubi": {
            "name": "octupole_to_zgoubi",
            "location": 229,
            "return": [
                "List",
                "str",
                "AbstractSet[str]",
                "Type"
            ],
            "arguments": {
                "element": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str,str]"
                ],
                "kinematics": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "options": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "twcavity_to_zgoubi": {
            "name": "twcavity_to_zgoubi",
            "location": 243,
            "return": [
                "List[Union[tuple,dict,list,Pattern,list[str]]]",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "element": [
                    "str",
                    "Dict"
                ],
                "kinematics": [
                    "str",
                    "Dict"
                ],
                "options": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/executable.py": {
        "ExecutableException.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "Callable",
                    "Callable[[T],bool]",
                    "Callable[[int],bool]"
                ]
            }
        },
        "ExecutableResults.tracks": {
            "name": "tracks",
            "location": 41,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "executable": [
                    "str"
                ],
                "results_type": [
                    "Type",
                    "str"
                ],
                "path": [
                    "str",
                    "None",
                    "ImportError",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Optional[Mapping[str,str]]"
                ],
                "n_procs": [
                    "int",
                    "str",
                    "None",
                    "List[str]"
                ]
            }
        },
        "Executable.__del__": {
            "name": "__del__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable.executable": {
            "name": "executable",
            "location": 75,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable.__call__": {
            "name": "__call__",
            "location": 83,
            "return": [
                "Executable",
                "Callable",
                "Union[concurrenfutures.Future,asyncio.futures.Future]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "code_input": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "None",
                    "Optional[Callable[[List,bool],None]]",
                    "Callable[L,None]"
                ],
                "identifier": [
                    "None",
                    "bool",
                    "mappings.MappedParametersType",
                    "str",
                    "float",
                    "int"
                ],
                "mappings": [
                    "None",
                    "bool",
                    "mappings.MappedParametersListType",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "debug": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "cb": [
                    "Callable",
                    "None",
                    "Optional[bool]",
                    "Optional[int]",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "Optional[str]",
                    "str"
                ],
                "filename": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "path": [
                    "Optional[str]",
                    "str",
                    "None",
                    "TextIO",
                    "bool",
                    "Callable[[float],None]",
                    "Callable[float,None]",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Executable.wait": {
            "name": "wait",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable.collect": {
            "name": "collect",
            "location": 138,
            "return": [
                "Set[str]",
                "str",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "List[str]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "Executable.cleanup": {
            "name": "cleanup",
            "location": 149,
            "return": [
                "Executable",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable._execute": {
            "name": "_execute",
            "location": 159,
            "return": [
                "Dict[Text,Union[tuple[Union[Type,Type]],None,float,dict,str,bool]]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "str",
                    "bool"
                ],
                "code_input": [
                    "Dict",
                    "str",
                    "io.TextIOBase"
                ],
                "path": [
                    "str",
                    "Text"
                ],
                "debug": [
                    "bool",
                    "List[Dict[str,Any]]",
                    "float"
                ]
            }
        },
        "Executable._extract_output": {
            "name": "_extract_output",
            "location": 226,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "List",
                    "float"
                ],
                "code_input": [
                    "bool",
                    "List",
                    "float"
                ],
                "mapping": [
                    "bool",
                    "List",
                    "float"
                ]
            }
        },
        "Executable._get_exec": {
            "name": "_get_exec",
            "location": 229,
            "return": [
                "str",
                "Text",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/input.py": {
        "ZgoubiInputException.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "Callable",
                    "Callable[[T],bool]",
                    "Callable[[int],bool]"
                ]
            }
        },
        "Input.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Text"
                ],
                "line": [
                    "Union[str,int]",
                    "None",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "Input.__del__": {
            "name": "__del__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.__str__": {
            "name": "__str__",
            "location": 94,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.__repr__": {
            "name": "__repr__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.__call__": {
            "name": "__call__",
            "location": 108,
            "return": [
                "Input",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input._generate": {
            "name": "_generate",
            "location": 126,
            "return": [
                "str",
                "List[tuple[Union[dict,bool]]]"
            ],
            "arguments": {
                "self": [],
                "mappings": [
                    "int",
                    "None",
                    "List[int]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "int",
                    "Optional[str]",
                    "IO[bytes]"
                ],
                "path": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Input.__len__": {
            "name": "__len__",
            "location": 164,
            "return": [
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.__iadd__": {
            "name": "__iadd__",
            "location": 172,
            "return": [
                "Input",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "int"
                ]
            }
        },
        "Input.__isub__": {
            "name": "__isub__",
            "location": 184,
            "return": [
                "Input",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int,int]",
                    "Dict",
                    "Tuple[Union[int,int]]",
                    "float",
                    "int"
                ]
            }
        },
        "Input.__getitem__": {
            "name": "__getitem__",
            "location": 199,
            "return": [
                "Input",
                "str",
                "p2p.protocol.Command",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str",
                    "Union[tuple, list]"
                ]
            }
        },
        "Input.__getattr__": {
            "name": "__getattr__",
            "location": 265,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]",
                "Optional[constants.AgeClass]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Input.__setattr__": {
            "name": "__setattr__",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "VT"
                ]
            }
        },
        "Input.__contains__": {
            "name": "__contains__",
            "location": 298,
            "return": [
                "int",
                "List[int]",
                "Dict[int,Tuple[int,int]]",
                "str",
                "Pipeline"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Tuple[Union[str,float]]",
                    "T",
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Tuple[str,float]"
                ]
            }
        },
        "Input._filter": {
            "name": "_filter",
            "location": 312,
            "return": [
                "Tuple[Union[list,tuple]]",
                "str",
                "List[Dict]",
                "List",
                "List[str]",
                "List[T]",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "int",
                    "numpy.ndarray",
                    "None",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "Input.apply": {
            "name": "apply",
            "location": 329,
            "return": [
                "Input",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int",
                    "Callable",
                    "str",
                    "Callable[[T],bool]"
                ]
            }
        },
        "Input.cleanup": {
            "name": "cleanup",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.validate": {
            "name": "validate",
            "location": 364,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "validators": [
                    "Optional[int]",
                    "None",
                    "str",
                    "Optional[List[Callable]]",
                    "List[Callable]"
                ]
            }
        },
        "Input.update": {
            "name": "update",
            "location": 378,
            "return": [
                "Input",
                "float",
                "str",
                "recidiviz.common.constants.enum_overrides.EnumOverrides",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "pandas.DataFrame",
                    "int",
                    "dict"
                ]
            }
        },
        "Input.adjust": {
            "name": "adjust",
            "location": 394,
            "return": [
                "Dict[tuple[Union[str,Any]],None]",
                "str",
                "int",
                "Callable[[Mapping],T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Dict",
                    "Dict[str,Any]",
                    "mappings.MappedParametersType",
                    "Dict[str,str]",
                    "pandas.Series"
                ]
            }
        },
        "Input.index": {
            "name": "index",
            "location": 419,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int"
                ]
            }
        },
        "Input.zgoubi_index": {
            "name": "zgoubi_index",
            "location": 441,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]",
                "List[str]",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "AsyncGenerator",
                    "bool",
                    "collections.abc.AsyncGenerator",
                    "str",
                    "List",
                    "logging.LogRecord",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "Input.replace": {
            "name": "replace",
            "location": 458,
            "return": [
                "Input",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "Dict",
                    "bool"
                ],
                "other": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Input.insert_before": {
            "name": "insert_before",
            "location": 471,
            "return": [
                "Input",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Optional[bytes]",
                    "int",
                    "bytes",
                    "None"
                ],
                "other": [
                    "Optional[bytes]",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "Input.insert_after": {
            "name": "insert_after",
            "location": 484,
            "return": [
                "Input",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Optional[bytes]",
                    "int",
                    "bytes",
                    "None"
                ],
                "other": [
                    "Optional[bytes]",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "Input.remove": {
            "name": "remove",
            "location": 497,
            "return": [
                "Input",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "int",
                    "os.DirEntry"
                ]
            }
        },
        "Input.get_attributes": {
            "name": "get_attributes",
            "location": 509,
            "return": [
                "List",
                "bool",
                "str",
                "List[object]",
                "List[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "Text",
                    "bool",
                    "Sequence[Callable]",
                    "str",
                    "int"
                ]
            }
        },
        "Input.name": {
            "name": "name",
            "location": 532,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.paths": {
            "name": "paths",
            "location": 541,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.mappings": {
            "name": "mappings",
            "location": 550,
            "return": [
                "List",
                "List[str]",
                "Optional[List[str]]",
                "List[Dict[str,str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.keywords": {
            "name": "keywords",
            "location": 555,
            "return": [
                "List",
                "Optional[str]",
                "Iterable[str]",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.line": {
            "name": "line",
            "location": 564,
            "return": [
                "str",
                "Sequence[str]",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.valid_survey": {
            "name": "valid_survey",
            "location": 641,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.survey_reference_frame": {
            "name": "survey_reference_frame",
            "location": 578,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.beam": {
            "name": "beam",
            "location": 583,
            "return": [
                "FrozenSet[int]",
                "bool",
                "Optional[T]",
                "set",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.beam_mappings": {
            "name": "beam_mappings",
            "location": 599,
            "return": [
                "List",
                "Dict[str,Any]",
                "Dict[str,bool]",
                "int",
                "Dict[str,Dict[str,str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.survey": {
            "name": "survey",
            "location": 610,
            "return": [
                "Optional[int]",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "reference_frame": [
                    "Optional[georges_core.frame.Frame]",
                    "None",
                    "bool",
                    "Union[List,numpy.ndarray,pymatgen.core.lattice.Lattice]",
                    "float",
                    "List",
                    "Union[float,Tuple[float,float]]",
                    "Tuple[Union[float,float]]",
                    "Optional[Any]",
                    "Any"
                ],
                "with_reference_trajectory": [
                    "bool",
                    "Optional[georges_core.frame.Frame]",
                    "Union[List,numpy.ndarray,pymatgen.core.lattice.Lattice]",
                    "float",
                    "Union[float,Tuple[float,float]]",
                    "Optional[Any]"
                ],
                "reference_kinematics": [
                    "Optional[georges_core.frame.Frame]",
                    "None",
                    "bool",
                    "Union[List,numpy.ndarray,pymatgen.core.lattice.Lattice]",
                    "float",
                    "List",
                    "Union[float,Tuple[float,float]]",
                    "Tuple[Union[float,float]]",
                    "Optional[Any]",
                    "Any"
                ],
                "reference_particle": [
                    "Optional[georges_core.frame.Frame]",
                    "None",
                    "bool",
                    "Union[List,numpy.ndarray,pymatgen.core.lattice.Lattice]",
                    "float",
                    "List",
                    "Union[float,Tuple[float,float]]",
                    "Tuple[Union[float,float]]",
                    "Optional[Any]",
                    "Any"
                ],
                "reference_closed_orbit": [
                    "Optional[georges_core.frame.Frame]",
                    "None",
                    "bool",
                    "Union[List,numpy.ndarray,pymatgen.core.lattice.Lattice]",
                    "float",
                    "List",
                    "Union[float,Tuple[float,float]]",
                    "Tuple[Union[float,float]]",
                    "Optional[Any]",
                    "Any"
                ],
                "output": [
                    "bool",
                    "Optional[georges_core.frame.Frame]",
                    "Union[List,numpy.ndarray,pymatgen.core.lattice.Lattice]",
                    "float",
                    "Union[float,Tuple[float,float]]",
                    "Optional[Any]"
                ]
            }
        },
        "Input.set_valid_survey": {
            "name": "set_valid_survey",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.clear_survey": {
            "name": "clear_survey",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.execute": {
            "name": "execute",
            "location": 668,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.save": {
            "name": "save",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination": [
                    "Text",
                    "str",
                    "Tuple[str,str]",
                    "bytes"
                ],
                "what": [
                    "int",
                    "None",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "executed_only": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "Input.from_sequence": {
            "name": "from_sequence",
            "location": 709,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Frame",
                    "List",
                    "Optional[List]",
                    "None"
                ],
                "sequence": [
                    "Dict[str,Any]",
                    "float",
                    "str",
                    "bool",
                    "int"
                ],
                "options": [
                    "Optional[bool]",
                    "None",
                    "Optional[Union[Any,Any]]",
                    "bool",
                    "Any"
                ],
                "converters": [
                    "Optional[Mapping]",
                    "None",
                    "Optional[int]",
                    "Mapping",
                    "Exception",
                    "Type[T]",
                    "str",
                    "int",
                    "bool",
                    "Type"
                ],
                "elements_database": [
                    "Dict[str,Any]",
                    "List[str]",
                    "None",
                    "Tuple[str]"
                ],
                "beam": [
                    "Optional[str]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "beam_options": [
                    "Optional[Mapping]",
                    "None",
                    "Optional[int]",
                    "Mapping",
                    "Exception",
                    "Type[T]",
                    "str",
                    "int",
                    "bool",
                    "Type"
                ],
                "with_survey": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "str"
                ],
                "with_survey_reference": [
                    "bool",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Input.write": {
            "name": "write",
            "location": 766,
            "return": [
                "str"
            ],
            "arguments": {
                "_": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "int"
                ],
                "filename": [
                    "str"
                ],
                "path": [
                    "str",
                    "Text"
                ],
                "mode": [
                    "str",
                    "Text"
                ],
                "validators": [
                    "Optional[List[Callable]]",
                    "None",
                    "int",
                    "List[Callable]",
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "Input.build": {
            "name": "build",
            "location": 786,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "Text",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "Input.parse": {
            "name": "parse",
            "location": 804,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ],
                "stream": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ],
                "debug": [
                    "bool",
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "ZgoubiInputValidator.validate_objet_is_first_command": {
            "name": "validate_objet_is_first_command",
            "location": 827,
            "return": [
                "bool"
            ],
            "arguments": {
                "_": [
                    "str",
                    "float",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "ZgoubiInputValidator.validate_objets_do_not_exceed_imax": {
            "name": "validate_objets_do_not_exceed_imax",
            "location": 843,
            "return": [
                "bool"
            ],
            "arguments": {
                "_": [
                    "str",
                    "T"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/mappings.py": {
        "ParametricMapping.labels": {
            "name": "labels",
            "location": 52,
            "return": [
                "Tuple",
                "str",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParametricMapping.pools": {
            "name": "pools",
            "location": 57,
            "return": [
                "List[list]",
                "List[str]",
                "str",
                "Optional[List[str]]",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParametricMapping.combinations": {
            "name": "combinations",
            "location": 62,
            "return": [
                "List[dict]",
                "bytes",
                "Dict",
                "Dict[str,Set[str]]",
                "Dict[str,str]",
                "Dict[str,Optional[str]]",
                "Union[int,float]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParametricMapping.__add__": {
            "name": "__add__",
            "location": 75,
            "return": [
                "ParametricMapping",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/outputs.py": {
        "read_fai_file": {
            "name": "read_fai_file",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": [
                    "typing.Text"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        },
        "read_plt_file": {
            "name": "read_plt_file",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": [
                    "typing.Text"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        },
        "read_srloss_file": {
            "name": "read_srloss_file",
            "location": 166,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": [
                    "typing.Text"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        },
        "read_srloss_steps_file": {
            "name": "read_srloss_steps_file",
            "location": 239,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": [
                    "typing.Text"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        },
        "read_matrix_file": {
            "name": "read_matrix_file",
            "location": 287,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": [
                    "typing.Text"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        },
        "read_optics_file": {
            "name": "read_optics_file",
            "location": 350,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": [
                    "typing.Text"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/polarity.py": {
        "PolarityType.__float__": {
            "name": "__float__",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "cls": [
                    "PolarityType"
                ]
            }
        },
        "PolarityType.__int__": {
            "name": "__int__",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "PolarityType"
                ]
            }
        },
        "PolarityType.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "PolarityType"
                ]
            }
        },
        "PolarityType.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/surveys.py": {
        "clear_survey": {
            "name": "clear_survey",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "beamline": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "survey": {
            "name": "survey",
            "location": 34,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "beamline": [
                    "bool",
                    "Optional[float]",
                    "Optional[numpy.ndarray]",
                    "Optional[object]",
                    "float",
                    "int"
                ],
                "reference_frame": [
                    "None",
                    "bool",
                    "Optional[georges_core.frame.Frame]",
                    "float",
                    "int",
                    "Tuple[Union[float,float]]",
                    "Union[float,Tuple[float,float]]"
                ],
                "with_reference_trajectory": [
                    "bool",
                    "Dict[str,Any]",
                    "float",
                    "str",
                    "int"
                ],
                "reference_particle": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "Dict[str,str]",
                    "List[float]",
                    "Optional[Union[commands.particules.Particule,commands.particules.ParticuleType]]"
                ],
                "reference_kinematics": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "Dict[str,str]",
                    "List[float]",
                    "Optional[Union[commands.particules.Particule,commands.particules.ParticuleType]]"
                ],
                "reference_closed_orbit": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "str",
                    "Dict[str,str]",
                    "List[float]",
                    "Optional[Union[commands.particules.Particule,commands.particules.ParticuleType]]"
                ],
                "output": [
                    "bool",
                    "Dict[str,Any]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "process_survey_output": {
            "name": "process_survey_output",
            "location": 86,
            "return": [
                "List[int]",
                "str",
                "int"
            ],
            "arguments": {
                "beamline": [
                    "int",
                    "float",
                    "List[str]",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "survey_reference_trajectory": {
            "name": "survey_reference_trajectory",
            "location": 138,
            "return": [
                "str",
                "None",
                "int",
                "Iterable[T]",
                "List[Any]"
            ],
            "arguments": {
                "beamline": [
                    "Optional[numpy.ndarray]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[int]",
                    "int"
                ],
                "reference_kinematics": [
                    "None",
                    "str",
                    "Optional[numpy.ndarray]",
                    "int",
                    "Optional[int]",
                    "Optional[Union[commands.particules.Particule,commands.particules.ParticuleType]]"
                ],
                "reference_particle": [
                    "None",
                    "Optional[Union[commands.particules.Particule,commands.particules.ParticuleType]]",
                    "str",
                    "Dict[str,Any]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str,Any]]",
                    "Dict",
                    "Optional[dict]"
                ],
                "closed_orbit": [
                    "Optional[numpy.ndarray]",
                    "bool",
                    "None",
                    "float",
                    "Hashable"
                ],
                "debug": [
                    "bool",
                    "str",
                    "int",
                    "AsyncContextManager[None]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/transformations.py": {
        "CoordinateTransformationType.transform": {
            "name": "transform",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "beamline": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "CoordinateTranformation.construct_rays": {
            "name": "construct_rays",
            "location": 21,
            "return": [
                "int",
                "bytes",
                "Callable",
                "Sequence[str]",
                "str",
                "None"
            ],
            "arguments": {
                "element": [
                    "Iterable[str]",
                    "int",
                    "List[Set[str]]"
                ],
                "element_tracks": [
                    "List[int]",
                    "List[list]",
                    "Union[Iterable[int],int]",
                    "int",
                    "pandas.DataFrame"
                ],
                "tracks": [
                    "bytes",
                    "pandas.DataFrame",
                    "Sequence[str]",
                    "int",
                    "None",
                    "Optional[object]"
                ],
                "norm": [
                    "float",
                    "str",
                    "List",
                    "List[Dict]",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "CoordinateTranformation.transform": {
            "name": "transform",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "tracks": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "beamline": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "GlobalCoordinateTransformation.transform": {
            "name": "transform",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[T]",
                    "Dict[str,Any]",
                    "Type[Exception]",
                    "Type"
                ],
                "tracks": [
                    "bool",
                    "pandas.DataFrame",
                    "float",
                    "int",
                    "Callable"
                ],
                "beamline": [
                    "str",
                    "Union[int,str,bool]",
                    "int"
                ],
                "reference_frame": [
                    "Text",
                    "str",
                    "Dict"
                ]
            }
        },
        "FrenetCoordinateTransformation.transform": {
            "name": "transform",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "tracks": [
                    "pandas.DataFrame",
                    "str"
                ],
                "beamline": [
                    "str",
                    "Type",
                    "Dict[str,int]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/twiss.py": {
        "_align_tracks": {
            "name": "_align_tracks",
            "location": 26,
            "return": [
                "Dict",
                "Tuple"
            ],
            "arguments": {
                "tracks": [
                    "str",
                    "pandas.DataFrame"
                ],
                "align_on": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[Set[str]]"
                ],
                "identifier": [
                    "Text",
                    "str",
                    "pandas.DataFrame"
                ],
                "reference_track": [
                    "Text",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "Iterable[Union[Any,int]]"
                ]
            }
        },
        "compute_transfer_matrix": {
            "name": "compute_transfer_matrix",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "beamline": [
                    "str",
                    "int"
                ],
                "tracks": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/units.py": {
        "parse_quantity": {
            "name": "parse_quantity",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "_m": {
            "name": "_m",
            "location": 17,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "q": [
                    "Union[str,Q_]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "_cm": {
            "name": "_cm",
            "location": 31,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "q": [
                    "Union[str,Q_]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "_mm": {
            "name": "_mm",
            "location": 45,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "q": [
                    "Union[str,Q_]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "_degree": {
            "name": "_degree",
            "location": 59,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "q": [
                    "Union[str,Q_]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "_radian": {
            "name": "_radian",
            "location": 75,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "q": [
                    "Union[str,Q_]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "_tesla": {
            "name": "_tesla",
            "location": 89,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "q": [
                    "Union[str,Q_]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "_gauss": {
            "name": "_gauss",
            "location": 103,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "q": [
                    "Union[str,Q_]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "_kilogauss": {
            "name": "_kilogauss",
            "location": 117,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "q": [
                    "Union[str,Q_]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "_mev": {
            "name": "_mev",
            "location": 131,
            "return": [
                "float",
                "str",
                "Callable",
                "Dict[str,Any]"
            ],
            "arguments": {
                "q": [
                    "Union[str,Q_]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "_gev": {
            "name": "_gev",
            "location": 145,
            "return": [
                "float",
                "str",
                "Callable",
                "Dict[str,Any]"
            ],
            "arguments": {
                "q": [
                    "Union[str,Q_]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "_mev_c": {
            "name": "_mev_c",
            "location": 159,
            "return": [
                "float",
                "Dict[str,int]",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "q": [
                    "str",
                    "Sequence[float]",
                    "Q_",
                    "BaseException",
                    "Union[str,Q_]"
                ]
            }
        },
        "_gev_c": {
            "name": "_gev_c",
            "location": 176,
            "return": [
                "float",
                "Dict[str,int]",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "q": [
                    "str",
                    "Sequence[float]",
                    "Q_",
                    "BaseException",
                    "Union[str,Q_]"
                ]
            }
        },
        "parse_quantity.parse_arg": {
            "name": "parse_arg",
            "location": 8,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "q": [
                    "Union[str, Q_]",
                    "str",
                    "Union[str, bytes]",
                    "Optional[Any]",
                    "int",
                    "Union[int, List[int]]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/zgoubi.py": {
        "ZgoubiException.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "Callable",
                    "Callable[[T],bool]",
                    "Callable[[int],bool]"
                ]
            }
        },
        "ZgoubiResults.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[Mapping]",
                    "int",
                    "List[Callable]",
                    "List[str]",
                    "Iterable[int]"
                ],
                "options": [
                    "None",
                    "Optional[Mapping]",
                    "Mapping",
                    "str",
                    "Dict[str,Any]",
                    "recidiviz.common.constants.entity_enum.EntityEnumMeta"
                ]
            }
        },
        "ZgoubiResults.merge": {
            "name": "merge",
            "location": 75,
            "return": [
                "List[str]",
                "Optional[dict]",
                "Counter",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Callable",
                    "Dict",
                    "str"
                ]
            }
        },
        "ZgoubiResults.__len__": {
            "name": "__len__",
            "location": 86,
            "return": [
                "int",
                "List[int]",
                "Dict[str,int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.__copy__": {
            "name": "__copy__",
            "location": 90,
            "return": [
                "ZgoubiResults",
                "bool",
                "List[str]",
                "Union[int,float,complex]",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.__getitem__": {
            "name": "__getitem__",
            "location": 94,
            "return": [
                "str",
                "bool",
                "pandas.Series",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ZgoubiResults.get_tracks": {
            "name": "get_tracks",
            "location": 98,
            "return": [
                "str",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "None",
                    "bool",
                    "Optional[mappings.MappedParametersListType]",
                    "List[str]",
                    "int"
                ],
                "force_reload": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[Dict[str,Any]]"
                ],
                "transformation": [
                    "int",
                    "None",
                    "bool",
                    "Any",
                    "Optional[Any]",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "ZgoubiResults.tracks": {
            "name": "tracks",
            "location": 155,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.tracks_global": {
            "name": "tracks_global",
            "location": 165,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.tracks_frenet": {
            "name": "tracks_frenet",
            "location": 175,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.get_srloss": {
            "name": "get_srloss",
            "location": 184,
            "return": [
                "str",
                "int",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "None",
                    "bool",
                    "Optional[mappings.MappedParametersListType]",
                    "List[str]",
                    "int"
                ],
                "force_reload": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "ZgoubiResults.srloss": {
            "name": "srloss",
            "location": 223,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.get_srloss_steps": {
            "name": "get_srloss_steps",
            "location": 231,
            "return": [
                "str",
                "bool",
                "float",
                "List[list[float]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "Optional[mappings.MappedParametersListType]",
                    "Dict[str,Any]",
                    "None",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]"
                ],
                "force_reload": [
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Dict[str,Any]]"
                ],
                "with_survey": [
                    "bool",
                    "int",
                    "Optional[List]",
                    "List"
                ]
            }
        },
        "ZgoubiResults.srloss_steps": {
            "name": "srloss_steps",
            "location": 278,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.matrix": {
            "name": "matrix",
            "location": 287,
            "return": [
                "Optional[str]",
                "str",
                "None",
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.get_optics": {
            "name": "get_optics",
            "location": 311,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "bool",
                "float",
                "Tuple",
                "Optional[Literal[only_clustered,include_clustered]]",
                "None",
                "Dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "force_reload": [
                    "bool",
                    "Optional[bool]",
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ZgoubiResults.optics": {
            "name": "optics",
            "location": 341,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.compute_step_by_step_transfer_matrix": {
            "name": "compute_step_by_step_transfer_matrix",
            "location": 349,
            "return": [
                "int",
                "Callable",
                "Dict[int,Any]",
                "str",
                "Final",
                "float"
            ],
            "arguments": {
                "self": [],
                "force_reload": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "ZgoubiResults.step_by_step_transfer_matrix": {
            "name": "step_by_step_transfer_matrix",
            "location": 369,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.compute_step_by_step_optics": {
            "name": "compute_step_by_step_optics",
            "location": 377,
            "return": [
                "int",
                "Tuple[Union[int,int,int]]",
                "Callable",
                "List[int]",
                "str",
                "Dict[int,Any]"
            ],
            "arguments": {
                "self": [],
                "twiss_init": [
                    "str",
                    "None",
                    "float",
                    "numpy.ndarray",
                    "Callable"
                ],
                "force_reload": [
                    "bool",
                    "List",
                    "str"
                ]
            }
        },
        "ZgoubiResults.step_by_step_periodic_optics": {
            "name": "step_by_step_periodic_optics",
            "location": 397,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.results": {
            "name": "results",
            "location": 406,
            "return": [
                "List[tuple]",
                "str",
                "List[str]",
                "Set",
                "float",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.paths": {
            "name": "paths",
            "location": 417,
            "return": [
                "List[tuple]",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.mappings": {
            "name": "mappings",
            "location": 426,
            "return": [
                "List",
                "List[str]",
                "Set[str]",
                "str",
                "AbstractSet[Type[object]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubiResults.save": {
            "name": "save",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination": [
                    "Text",
                    "Union[str,IO]",
                    "Union[str,TextIO]",
                    "List[str]"
                ],
                "what": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "ZgoubiResults.print": {
            "name": "print",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "what": [
                    "str",
                    "Text"
                ]
            }
        },
        "Zgoubi.__init__": {
            "name": "__init__",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "executable": [
                    "str",
                    "Optional[int]",
                    "Callable",
                    "pandas._FilePathOrBuffer",
                    "dict"
                ],
                "path": [
                    "str",
                    "None",
                    "Callable",
                    "Optional[int]",
                    "Dict",
                    "int",
                    "pandas._FilePathOrBuffer"
                ],
                "n_procs": [
                    "str",
                    "None",
                    "Callable",
                    "Optional[int]",
                    "Dict",
                    "int",
                    "pandas._FilePathOrBuffer"
                ]
            }
        },
        "Zgoubi._extract_output": {
            "name": "_extract_output",
            "location": 495,
            "return": [
                "str",
                "List",
                "List[Dict[str,str]]",
                "Dict[str,dict[str,Any]]",
                "int",
                "Tuple[int,Dict[str,Any]]",
                "Dict[str,int]",
                "Dict[int,int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "float",
                    "int"
                ],
                "code_input": [
                    "int",
                    "str",
                    "bytes",
                    "List[int]",
                    "bool",
                    "float"
                ],
                "mapping": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Union[str,bool]"
                ]
            }
        },
        "Zgoubi.find_labeled_output": {
            "name": "find_labeled_output",
            "location": 511,
            "return": [
                "List",
                "List[str]",
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "out": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "label": [
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "keyword": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "ZgoubiResults.get_tracks._transform_and_return_tracks": {
            "name": "_transform_and_return_tracks",
            "location": 115,
            "return": [
                "int",
                "Dict[str, int]",
                "pandas.DataFrame",
                "dict"
            ],
            "arguments": {
                "t": [
                    "List[Tuple[int, Any]]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/__init__.py": {},
    "zgoubidoo-master/zgoubidoo/commands/actions.py": {
        "Faiscnl.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fit.__str__": {
            "name": "__str__",
            "location": 338,
            "return": [
                "str",
                "Dict[str,int]",
                "int",
                "trezor.utils.Writer",
                "Dict",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fit.process_output": {
            "name": "process_output",
            "location": 370,
            "return": [
                "bool",
                "str",
                "Tuple[int]",
                "List[bytes]",
                "Iterable[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "List[str]",
                    "Dict[str,set[str]]",
                    "Mapping[str,Union[Q_,float]]",
                    "bool",
                    "Dict[str,Set[str]]"
                ],
                "parameters": [
                    "List",
                    "pandas.DataFrame",
                    "bytes",
                    "str",
                    "Match"
                ],
                "zgoubi_input": [
                    "List[str]",
                    "bool",
                    "Mapping[str,Union[Q_,float]]",
                    "Mapping",
                    "Dict[str,Set[str]]",
                    "Dict[str,set[str]]"
                ]
            }
        },
        "Options.post_init": {
            "name": "post_init",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write": [
                    "bool",
                    "Optional[Type]",
                    "float",
                    "Dict",
                    "str"
                ],
                "consty": [
                    "bool",
                    "Optional[Type]",
                    "float",
                    "Dict",
                    "str"
                ]
            }
        },
        "Options.__str__": {
            "name": "__str__",
            "location": 517,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fit.Parameter.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "int",
                    "Union[str, commands.Command]",
                    "str",
                    "bool"
                ],
                "place": [
                    "int",
                    "Union[str, commands.Command]",
                    "str",
                    "bool"
                ],
                "parameter": [
                    "int",
                    "Union[str, commands.Command]",
                    "bool"
                ],
                "parameter_range": [
                    "Optional[Union[float, Any]]",
                    "SupportsFloat",
                    "int",
                    "Union[float, int]",
                    "float",
                    "Tuple[int, int]",
                    "bool"
                ],
                "coupling_place": [
                    "int",
                    "Union[str, commands.Command]",
                    "str",
                    "bool",
                    "float"
                ],
                "coupling_parameter": [
                    "int",
                    "Union[str, commands.Command]",
                    "str",
                    "Optional[Union[str, commands.Command]]",
                    "bool"
                ]
            }
        },
        "Fit.Parameter.__getitem__": {
            "name": "__getitem__",
            "location": 161,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "raiden.utils.Dict",
                    "List[str]",
                    "Mapping[str, utils.mssql_counters.Section]"
                ]
            }
        },
        "Fit.Constraint.__getitem__": {
            "name": "__getitem__",
            "location": 166,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "raiden.utils.Dict",
                    "List[str]",
                    "Mapping[str, utils.mssql_counters.Section]"
                ]
            }
        },
        "Fit.SigmaMatrixConstraint.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Union[str, commands.Command]",
                    "int",
                    "bytes",
                    "bool"
                ],
                "place": [
                    "Union[str, commands.Command]",
                    "int",
                    "bytes",
                    "bool"
                ],
                "i": [
                    "int",
                    "Union[str, commands.Command]"
                ],
                "j": [
                    "Union[str, commands.Command]",
                    "int",
                    "bytes"
                ],
                "value": [
                    "float",
                    "Optional[float]"
                ],
                "weight": [
                    "float",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "Fit.FirstOrderTransportCoefficientsConstraint.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Union[str, commands.Command]",
                    "int",
                    "bytes",
                    "bool"
                ],
                "place": [
                    "Union[str, commands.Command]",
                    "int",
                    "bytes",
                    "bool"
                ],
                "i": [
                    "int",
                    "Union[str, commands.Command]"
                ],
                "j": [
                    "Union[str, commands.Command]",
                    "int",
                    "bytes"
                ],
                "value": [
                    "float",
                    "Optional[float]"
                ],
                "weight": [
                    "float",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "Fit.SecondOrderTransportCoefficientsConstraint.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Union[str, commands.Command]",
                    "int",
                    "bytes",
                    "bool"
                ],
                "place": [
                    "Union[str, commands.Command]",
                    "int",
                    "bytes",
                    "bool"
                ],
                "i": [
                    "int",
                    "Union[str, commands.Command]"
                ],
                "j": [
                    "Union[str, commands.Command]",
                    "int",
                    "bytes"
                ],
                "value": [
                    "float",
                    "Optional[float]"
                ],
                "weight": [
                    "float",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "Fit.EqualityConstraint.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "int",
                    "dict",
                    "Union[str, commands.Command]",
                    "Sequence[T]"
                ],
                "place": [
                    "int",
                    "dict",
                    "Union[str, commands.Command]",
                    "Sequence[T]"
                ],
                "variable": [
                    "int",
                    "Union[str, commands.Command]",
                    "Sequence[T]"
                ],
                "value": [
                    "float",
                    "Union[float,int]"
                ],
                "weight": [
                    "float",
                    "Optional[float]",
                    "int",
                    "List"
                ],
                "particle": [
                    "int",
                    "Union[str,commands.Command]",
                    "Sequence[T]",
                    "float"
                ]
            }
        },
        "Fit.DifferenceEqualityConstraint.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "place": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "variable": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "value": [
                    "float",
                    "int",
                    "Union[str,commands.Command]"
                ],
                "weight": [
                    "float",
                    "int",
                    "Union[str,commands.Command]"
                ],
                "particle": [
                    "int",
                    "Union[str,commands.Command]",
                    "float"
                ]
            }
        },
        "Fit.SumEqualityConstraint.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "place": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "variable": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "value": [
                    "float",
                    "int",
                    "Union[str,commands.Command]"
                ],
                "weight": [
                    "float",
                    "int",
                    "Union[str,commands.Command]"
                ],
                "particle": [
                    "int",
                    "Union[str,commands.Command]",
                    "float"
                ]
            }
        },
        "Fit.MaxEqualityConstraint.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "place": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "variable": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "value": [
                    "float",
                    "int",
                    "Union[str,commands.Command]"
                ],
                "weight": [
                    "float",
                    "int",
                    "Union[str,commands.Command]"
                ],
                "particle": [
                    "int",
                    "Union[str,commands.Command]",
                    "float"
                ]
            }
        },
        "Fit.MinEqualityConstraint.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "place": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "variable": [
                    "int",
                    "Union[str, commands.Command]",
                    "float"
                ],
                "value": [
                    "float",
                    "int",
                    "Union[str,commands.Command]"
                ],
                "weight": [
                    "float",
                    "int",
                    "Union[str,commands.Command]"
                ],
                "particle": [
                    "int",
                    "Union[str,commands.Command]",
                    "float"
                ]
            }
        },
        "Fit.process_output.find_parameter_by_id": {
            "name": "find_parameter_by_id",
            "location": 386,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "command": [
                    "int",
                    "bool",
                    "str",
                    "dict"
                ],
                "parameter": [
                    "int",
                    "str",
                    "Sequence",
                    "Optional[List]",
                    "Callable",
                    "List[Dict[str, Any]]",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "Fit.process_output.find_dimension_by_id": {
            "name": "find_dimension_by_id",
            "location": 407,
            "return": [
                "str",
                "bool",
                "torch.utils.data.DataLoader"
            ],
            "arguments": {
                "command": [
                    "int",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "Union[utils.CWLObjectType, MutableSequence[utils.CWLObjectType], None]"
                ],
                "parameter": [
                    "int",
                    "str",
                    "List[Dict]",
                    "Sequence[Dict[str, str]]",
                    "Optional[str]",
                    "dict",
                    "MutableMapping[str, str]",
                    "bool"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/beam.py": {
        "ZgoubidooBeamException.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "Callable",
                    "Callable[[T],bool]",
                    "Callable[[int],bool]"
                ]
            }
        },
        "Beam.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Beam.post_init": {
            "name": "post_init",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objet_type": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "kinematics": [
                    "str",
                    "int",
                    "List",
                    "float"
                ],
                "particle": [
                    "str",
                    "Type"
                ]
            }
        },
        "Beam.particle": {
            "name": "particle",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Beam.kinematics": {
            "name": "kinematics",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Beam.mappings": {
            "name": "mappings",
            "location": 89,
            "return": [
                "List[dict]",
                "str",
                "List[str]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Beam.generate_object": {
            "name": "generate_object",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Beam._set_from_betablock": {
            "name": "_set_from_betablock",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "betablock": [
                    "numpy.ndarray"
                ]
            }
        },
        "BeamZgoubiDistribution.post_init": {
            "name": "post_init",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objet_type": [
                    "str",
                    "zgoubidoo.commands.ObjetType",
                    "bool",
                    "Callable"
                ],
                "betablock": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "slices": [
                    "int",
                    "float",
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "BeamZgoubiDistribution.slices": {
            "name": "slices",
            "location": 183,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "BeamZgoubiDistribution.mappings": {
            "name": "mappings",
            "location": 188,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "str",
                "bool",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamZgoubiDistribution.generate_object": {
            "name": "generate_object",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamZgoubiDistribution.from_sequence": {
            "name": "from_sequence",
            "location": 231,
            "return": [
                "str",
                "int",
                "float",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "Dict[str,float]",
                    "Mapping",
                    "georges_core.sequences.TwissSequence",
                    "Mapping[Tuple[str,str],Any]"
                ],
                "sequence": [
                    "Dict[str,float]",
                    "Dict",
                    "georges_core.sequences.TwissSequence"
                ],
                "statistics": [
                    "str",
                    "Callable",
                    "None"
                ]
            }
        },
        "BeamInputDistribution.post_init": {
            "name": "post_init",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objet_type": [
                    "str",
                    "zgoubidoo.commands.ObjetType",
                    "bool",
                    "Callable"
                ],
                "distribution": [
                    "str",
                    "None",
                    "int",
                    "List",
                    "float"
                ],
                "slices": [
                    "int",
                    "float",
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "BeamInputDistribution.initialize_distribution": {
            "name": "initialize_distribution",
            "location": 291,
            "return": [
                "BeamInputDistribution",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "distribution": [
                    "str",
                    "None",
                    "abjadexrmakers.Command",
                    "Optional[str]"
                ]
            }
        },
        "BeamInputDistribution.add": {
            "name": "add",
            "location": 308,
            "return": [
                "BeamInputDistribution",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "distribution": [
                    "str",
                    "Dict[str,int]",
                    "Union[str,zgoubidoo.commands.Command]",
                    "Dict[str,Any]"
                ]
            }
        },
        "BeamInputDistribution.slices": {
            "name": "slices",
            "location": 359,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "BeamInputDistribution.active_slice": {
            "name": "active_slice",
            "location": 364,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamInputDistribution.generate_object": {
            "name": "generate_object",
            "location": 377,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamInputDistribution.mappings": {
            "name": "mappings",
            "location": 390,
            "return": [
                "str",
                "List[dict[Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamInputDistribution.distribution": {
            "name": "distribution",
            "location": 407,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamInputDistribution.create_reference_statistics": {
            "name": "create_reference_statistics",
            "location": 411,
            "return": [
                "BeamInputDistribution",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str",
                    "Callable[[int],None]",
                    "Union[str,int]",
                    "float"
                ]
            }
        },
        "BeamInputDistribution.clear": {
            "name": "clear",
            "location": 424,
            "return": [
                "BeamInputDistribution",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamInputDistribution.from_file": {
            "name": "from_file",
            "location": 434,
            "return": [
                "str",
                "BeamInputDistribution"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ],
                "n": [
                    "str",
                    "None"
                ],
                "path": [
                    "str",
                    "Text"
                ]
            }
        },
        "BeamInputDistribution.from_5d_sigma_matrix": {
            "name": "from_5d_sigma_matrix",
            "location": 448,
            "return": [
                "BeamInputDistribution",
                "float",
                "Dict[str,Any]",
                "bool",
                "Sequence[float]",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Collection[int]",
                    "Collection",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "BeamInputDistribution.from_twiss_parameters": {
            "name": "from_twiss_parameters",
            "location": 463,
            "return": [
                "BeamInputDistribution",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "BeamInputDistribution.from_sequence": {
            "name": "from_sequence",
            "location": 501,
            "return": [
                "str",
                "List[str]",
                "os.DirEntry"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "Dict[str,Any]",
                    "Callable"
                ],
                "sequence": [
                    "Dict",
                    "Dict[str,Any]",
                    "Callable"
                ]
            }
        },
        "BeamInputDistribution.generate_from_file": {
            "name": "generate_from_file",
            "location": 518,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "path": [
                    "Text",
                    "str",
                    "Optional[int]"
                ],
                "n": [
                    "str",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "BeamInputDistribution.generate_from_5d_sigma_matrix": {
            "name": "generate_from_5d_sigma_matrix",
            "location": 533,
            "return": [
                "pandas.DataFrame",
                "float",
                "int"
            ],
            "arguments": {
                "n": [
                    "float",
                    "int",
                    "bool",
                    "Tuple[int]"
                ],
                "x": [
                    "int",
                    "float",
                    "bool",
                    "Tuple[int]"
                ],
                "px": [
                    "int",
                    "float",
                    "bool",
                    "Tuple[int]"
                ],
                "y": [
                    "int",
                    "float",
                    "bool",
                    "Tuple[int]"
                ],
                "py": [
                    "int",
                    "float",
                    "bool",
                    "Tuple[int]"
                ],
                "dpp": [
                    "int",
                    "float",
                    "bool",
                    "Tuple[int]"
                ],
                "s11": [
                    "float",
                    "int"
                ],
                "s12": [
                    "int",
                    "float",
                    "bool"
                ],
                "s13": [
                    "int",
                    "float",
                    "bool"
                ],
                "s14": [
                    "int",
                    "float",
                    "bool"
                ],
                "s15": [
                    "int",
                    "float",
                    "bool"
                ],
                "s22": [
                    "float",
                    "int"
                ],
                "s23": [
                    "int",
                    "float",
                    "bool"
                ],
                "s24": [
                    "int",
                    "float",
                    "bool"
                ],
                "s25": [
                    "int",
                    "float",
                    "bool"
                ],
                "s33": [
                    "float",
                    "int"
                ],
                "s34": [
                    "int",
                    "float",
                    "bool"
                ],
                "s35": [
                    "int",
                    "float",
                    "bool"
                ],
                "s44": [
                    "float",
                    "int"
                ],
                "s45": [
                    "int",
                    "float",
                    "bool"
                ],
                "dpprms": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "matrix": [
                    "bool",
                    "None",
                    "Tuple[numpy.dtype]",
                    "numpy.ndarray",
                    "float",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "BeamTwiss.post_init": {
            "name": "post_init",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "betablock": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "georges_core.sequences.BetaBlock",
                    "str"
                ],
                "sequence": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "float",
                    "georges_core.sequences.TwissSequence"
                ],
                "objet_type": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "BeamTwiss.generate_object": {
            "name": "generate_object",
            "location": 682,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamTwiss.from_sequence": {
            "name": "from_sequence",
            "location": 716,
            "return": [
                "str",
                "List[str]",
                "os.DirEntry"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "str",
                    "bool",
                    "georges_core.sequences.TwissSequence"
                ],
                "sequence": [
                    "Dict",
                    "str",
                    "bool",
                    "georges_core.sequences.TwissSequence"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/commands.py": {
        "ZgoubidooException.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "Comment.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandType.__new__": {
            "name": "__new__",
            "location": 60,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "CommandType.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "CommandType.__getattr__": {
            "name": "__getattr__",
            "location": 124,
            "return": [],
            "arguments": {
                "cls": [],
                "key": []
            }
        },
        "CommandType.__getitem__": {
            "name": "__getitem__",
            "location": 133,
            "return": [],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "CommandType.__contains__": {
            "name": "__contains__",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label1": [],
                "label2": []
            }
        },
        "Command.generate_label": {
            "name": "generate_label",
            "location": 204,
            "return": [
                "Command"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "typing.Text"
                ]
            }
        },
        "Command.post_init": {
            "name": "post_init",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__getattr__": {
            "name": "__getattr__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "Command.__setattr__": {
            "name": "__setattr__",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [],
                "v": []
            }
        },
        "Command._retrieve_default_parameter_value": {
            "name": "_retrieve_default_parameter_value",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "Command.__repr__": {
            "name": "__repr__",
            "location": 327,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__str__": {
            "name": "__str__",
            "location": 330,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__copy__": {
            "name": "__copy__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.__eq__": {
            "name": "__eq__",
            "location": 353,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Command.attributes": {
            "name": "attributes",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.defaults": {
            "name": "defaults",
            "location": 369,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.nondefaults": {
            "name": "nondefaults",
            "location": 379,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.output": {
            "name": "output",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.results": {
            "name": "results",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.clean_output_and_results": {
            "name": "clean_output_and_results",
            "location": 408,
            "return": [
                "Command"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.attach_output": {
            "name": "attach_output",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outputs": [],
                "parameters": [],
                "zgoubi_input": []
            }
        },
        "Command.process_output": {
            "name": "process_output",
            "location": 435,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "output": [],
                "parameters": [],
                "zgoubi_input": []
            }
        },
        "Command.build": {
            "name": "build",
            "location": 453,
            "return": [],
            "arguments": {
                "cls": [],
                "stream": [],
                "debug": [
                    "bool"
                ]
            }
        },
        "Command.parse": {
            "name": "parse",
            "location": 470,
            "return": [],
            "arguments": {
                "cls": [],
                "stream": []
            }
        },
        "Fake.__str__": {
            "name": "__str__",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoRef.__str__": {
            "name": "__str__",
            "location": 528,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chambre.__str__": {
            "name": "__str__",
            "location": 601,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangRef.__str__": {
            "name": "__str__",
            "location": 635,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangRef.length": {
            "name": "length",
            "location": 655,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangRef.entry_patched": {
            "name": "entry_patched",
            "location": 664,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Collimateur.__str__": {
            "name": "__str__",
            "location": 710,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaiStore.__str__": {
            "name": "__str__",
            "location": 753,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Focale.__str__": {
            "name": "__str__",
            "location": 772,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FocaleZ.__str__": {
            "name": "__str__",
            "location": 790,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GasScattering.__str__": {
            "name": "__str__",
            "location": 816,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetFitVal.__str__": {
            "name": "__str__",
            "location": 860,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marker.__init__": {
            "name": "__init__",
            "location": 902,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label1": [
                    "typing.Text"
                ],
                "label2": [
                    "typing.Text"
                ]
            }
        },
        "Marker.__str__": {
            "name": "__str__",
            "location": 907,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__str__": {
            "name": "__str__",
            "location": 925,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optics.__str__": {
            "name": "__str__",
            "location": 970,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rebelote.__str__": {
            "name": "__str__",
            "location": 1013,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scaling.__str__": {
            "name": "__str__",
            "location": 1060,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslationRotation.__str__": {
            "name": "__str__",
            "location": 1115,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twiss.__str__": {
            "name": "__str__",
            "location": 1139,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ymy.entry_patched": {
            "name": "entry_patched",
            "location": 1160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.CommandResult.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": [],
                "results": []
            }
        },
        "Command.CommandResult.success": {
            "name": "success",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.CommandResult.results": {
            "name": "results",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandType.__new__.default_init": {
            "name": "default_init",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label1": [
                    "typing.Text"
                ],
                "label2": [
                    "typing.Text"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/electrique.py": {
        "Cavite.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/electromagnetic.py": {
        "Betatron.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "WienFilter.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/fieldmaps.py": {
        "CartesianMesh.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Tosca.__str__": {
            "name": "__str__",
            "location": 202,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Tosca.adjust_tracks_variables": {
            "name": "adjust_tracks_variables",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": []
            }
        },
        "Tosca.load": {
            "name": "load",
            "location": 222,
            "return": [
                "Tosca"
            ],
            "arguments": {
                "self": [],
                "zgoubi": [
                    "None"
                ]
            }
        },
        "Tosca.process_output": {
            "name": "process_output",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "output": [],
                "parameters": [],
                "zgoubi_input": []
            }
        },
        "Tosca.plotly": {
            "name": "plotly",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tosca.rotation": {
            "name": "rotation",
            "location": 295,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tosca.length": {
            "name": "length",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tosca.x_offset": {
            "name": "x_offset",
            "location": 313,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tosca.y_offset": {
            "name": "y_offset",
            "location": 322,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tosca.entry_patched": {
            "name": "entry_patched",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tosca.exit": {
            "name": "exit",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tosca.exit_patched": {
            "name": "exit_patched",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tosca.load.cb": {
            "name": "cb",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "f": []
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/magnetique.py": {
        "Magnet.post_init": {
            "name": "post_init",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_map": [
                    "None"
                ]
            }
        },
        "Magnet.field_map": {
            "name": "field_map",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Magnet.field_profile_model": {
            "name": "field_profile_model",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Magnet.process_fit_field_profile": {
            "name": "process_fit_field_profile",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fit": []
            }
        },
        "CartesianMagnet.post_init": {
            "name": "post_init",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianMagnet.rotation": {
            "name": "rotation",
            "location": 128,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianMagnet.length": {
            "name": "length",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CartesianMagnet.x_offset": {
            "name": "x_offset",
            "location": 146,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianMagnet.y_offset": {
            "name": "y_offset",
            "location": 155,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CartesianMagnet.entry_patched": {
            "name": "entry_patched",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CartesianMagnet.exit": {
            "name": "exit",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CartesianMagnet.exit_patched": {
            "name": "exit_patched",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.adjust_tracks_variables": {
            "name": "adjust_tracks_variables",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": []
            }
        },
        "PolarMagnet.angular_opening": {
            "name": "angular_opening",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.reference_angles": {
            "name": "reference_angles",
            "location": 270,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.entrance_efb": {
            "name": "entrance_efb",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.exit_efb": {
            "name": "exit_efb",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.radius": {
            "name": "radius",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.length": {
            "name": "length",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.entry_patched": {
            "name": "entry_patched",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.center": {
            "name": "center",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.exit": {
            "name": "exit",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.exit_patched": {
            "name": "exit_patched",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.drift_length_from_polar": {
            "name": "drift_length_from_polar",
            "location": 366,
            "return": [],
            "arguments": {
                "radius": [],
                "magnet_angle": [],
                "poles_angle": []
            }
        },
        "PolarMagnet.efb_offset_from_polar": {
            "name": "efb_offset_from_polar",
            "location": 380,
            "return": [],
            "arguments": {
                "radius": [],
                "magnet_angle": [],
                "poles_angle": []
            }
        },
        "PolarMagnet.efb_angle_from_polar": {
            "name": "efb_angle_from_polar",
            "location": 394,
            "return": [
                "int"
            ],
            "arguments": {
                "magnet_angle": [],
                "poles_angle": []
            }
        },
        "PolarMagnet.entry_wedge_angle": {
            "name": "entry_wedge_angle",
            "location": 407,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolarMagnet.exit_wedge_angle": {
            "name": "exit_wedge_angle",
            "location": 411,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolarMultiMagnet.reference_angles": {
            "name": "reference_angles",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aimant.__str__": {
            "name": "__str__",
            "location": 551,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Bend.post_init": {
            "name": "post_init",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bend.__str__": {
            "name": "__str__",
            "location": 718,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Decapole.__str__": {
            "name": "__str__",
            "location": 764,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dipole.post_init": {
            "name": "post_init",
            "location": 916,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dipole.__str__": {
            "name": "__str__",
            "location": 936,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Dipole.fit": {
            "name": "fit",
            "location": 978,
            "return": [
                "Dipole"
            ],
            "arguments": {
                "self": [],
                "kinematics": [],
                "particle": [],
                "entry_coordinates": [
                    "None"
                ],
                "exit_coordinate": [
                    "float"
                ],
                "method": [],
                "zgoubi": [
                    "None"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "DipoleM.__str__": {
            "name": "__str__",
            "location": 1137,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Dipoles.post_init": {
            "name": "post_init",
            "location": 1332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dipoles.__str__": {
            "name": "__str__",
            "location": 1353,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Dodecapole.__str__": {
            "name": "__str__",
            "location": 1436,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Drift.__str__": {
            "name": "__str__",
            "location": 1472,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drift.entry_s": {
            "name": "entry_s",
            "location": 1485,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drift.parse": {
            "name": "parse",
            "location": 1498,
            "return": [],
            "arguments": {
                "cls": [],
                "stream": []
            }
        },
        "Drift.adjust_tracks_variables": {
            "name": "adjust_tracks_variables",
            "location": 1506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": []
            }
        },
        "FFAG.post_init": {
            "name": "post_init",
            "location": 1661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FFAG.__str__": {
            "name": "__str__",
            "location": 1682,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "FFAGSpirale.adjust_tracks_variables": {
            "name": "adjust_tracks_variables",
            "location": 1847,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": []
            }
        },
        "FFAGSpirale.reference_angles": {
            "name": "reference_angles",
            "location": 1865,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FFAGSpirale.entry_wedge_angle": {
            "name": "entry_wedge_angle",
            "location": 1869,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FFAGSpirale.exit_wedge_angle": {
            "name": "exit_wedge_angle",
            "location": 1873,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FFAGSpirale.__str__": {
            "name": "__str__",
            "location": 1876,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Multipole.__str__": {
            "name": "__str__",
            "location": 2018,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Octupole.post_init": {
            "name": "post_init",
            "location": 2075,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Octupole.__str__": {
            "name": "__str__",
            "location": 2089,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Octupole.gradient": {
            "name": "gradient",
            "location": 2108,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "PS170.__str__": {
            "name": "__str__",
            "location": 2137,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quadisex.__str__": {
            "name": "__str__",
            "location": 2176,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "Quadrupole.post_init": {
            "name": "post_init",
            "location": 2243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quadrupole.__str__": {
            "name": "__str__",
            "location": 2257,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Quadrupole.gradient": {
            "name": "gradient",
            "location": 2276,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "SexQuad.__str__": {
            "name": "__str__",
            "location": 2306,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "Sextupole.__str__": {
            "name": "__str__",
            "location": 2376,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Solenoid.__str__": {
            "name": "__str__",
            "location": 2419,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Venus.__str__": {
            "name": "__str__",
            "location": 2461,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dipole.fit.cb": {
            "name": "cb",
            "location": 1025,
            "return": [
                "None"
            ],
            "arguments": {
                "f": []
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/mcobjet.py": {
        "MCObjet3.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "SupportsInt"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/objet.py": {
        "Objet.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Objet.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label1": [
                    "typing.Text"
                ],
                "label2": [
                    "typing.Text"
                ]
            }
        },
        "Objet1.__str__": {
            "name": "__str__",
            "location": 76,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Objet2.post_init": {
            "name": "post_init",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference_y": [
                    "float"
                ],
                "reference_t": [
                    "float"
                ],
                "reference_z": [
                    "float"
                ],
                "reference_p": [
                    "float"
                ],
                "reference_x": [
                    "float"
                ],
                "reference_d": [
                    "float"
                ]
            }
        },
        "Objet2.IMAX": {
            "name": "IMAX",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Objet2.IEX": {
            "name": "IEX",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Objet2.PARTICULES": {
            "name": "PARTICULES",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Objet2.clear": {
            "name": "clear",
            "location": 157,
            "return": [
                "Objet2"
            ],
            "arguments": {
                "self": []
            }
        },
        "Objet2.__iadd__": {
            "name": "__iadd__",
            "location": 162,
            "return": [
                "Objet2"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Objet2.add": {
            "name": "add",
            "location": 166,
            "return": [
                "Objet2"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Objet2.add_references": {
            "name": "add_references",
            "location": 201,
            "return": [
                "Objet2"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Objet2.__str__": {
            "name": "__str__",
            "location": 222,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Objet3.__str__": {
            "name": "__str__",
            "location": 272,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Objet4.__str__": {
            "name": "__str__",
            "location": 319,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "Objet5.__str__": {
            "name": "__str__",
            "location": 370,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "Objet6.__str__": {
            "name": "__str__",
            "location": 418,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/particules.py": {
        "ParticuleType.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "Particule.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label1": [
                    "str",
                    "Optional[bool]",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "label2": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Particule.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Particule.mass": {
            "name": "mass",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Particule.charge": {
            "name": "charge",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Particule.lifetime": {
            "name": "lifetime",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Particule.gyro": {
            "name": "gyro",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NativeParticuleType.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "Dict[str,Iterable[Any]]",
                    "float"
                ]
            }
        },
        "NativeParticule.__str__": {
            "name": "__str__",
            "location": 88,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/patchable.py": {
        "Patchable.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patchable.adjust_tracks_variables": {
            "name": "adjust_tracks_variables",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "Patchable.place": {
            "name": "place",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Patchable.clear_placement": {
            "name": "clear_placement",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patchable.length": {
            "name": "length",
            "location": 62,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patchable.entry": {
            "name": "entry",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patchable.entry_patched": {
            "name": "entry_patched",
            "location": 80,
            "return": [
                "int",
                "str",
                "Callable",
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patchable.exit": {
            "name": "exit",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str",
                "Set[str]",
                "Dict[int,str]",
                "Dict[Any,int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patchable.exit_patched": {
            "name": "exit_patched",
            "location": 102,
            "return": [
                "int",
                "str",
                "Callable",
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patchable.frenet_orientation": {
            "name": "frenet_orientation",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "str",
                "Set[str]",
                "Dict[int,str]",
                "Dict[Any,int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patchable.center": {
            "name": "center",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str",
                "Set[tuple[Union[Any,Any]]]",
                "Set[str]",
                "OrderedDict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patchable.reference_trajectory": {
            "name": "reference_trajectory",
            "location": 139,
            "return": [
                "int",
                "str",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "float",
                    "list",
                    "Callable"
                ]
            }
        },
        "Patchable.entry_s": {
            "name": "entry_s",
            "location": 151,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patchable.exit_s": {
            "name": "exit_s",
            "location": 163,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Patchable.optical_length": {
            "name": "optical_length",
            "location": 175,
            "return": [
                "float",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/plotable.py": {},
    "zgoubidoo-master/zgoubidoo/commands/radiation.py": {
        "SynchrotronRadiationLosses.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchrotronRadiationLosses.switch": {
            "name": "switch",
            "location": 54,
            "return": [
                "SynchrotronRadiationLosses",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Tuple[str, str, str]",
                    "int",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "Union[int, str]",
                    "str"
                ]
            }
        },
        "SynchrotronRadiationLosses.on": {
            "name": "on",
            "location": 63,
            "return": [
                "SynchrotronRadiationLosses",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchrotronRadiationLosses.off": {
            "name": "off",
            "location": 68,
            "return": [
                "SynchrotronRadiationLosses",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynchrotronRadiationPrint.process_output": {
            "name": "process_output",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "List[str]",
                    "bool",
                    "Mapping[str,Union[Q_,float]]",
                    "Mapping",
                    "Dict[str,Set[str]]",
                    "Dict[str,set[str]]"
                ],
                "parameters": [
                    "bool",
                    "str",
                    "List[Dict]",
                    "List[dict]"
                ],
                "zgoubi_input": [
                    "List[str]",
                    "bool",
                    "Mapping[str,Union[Q_,float]]",
                    "Mapping",
                    "Dict[str,Set[str]]",
                    "Dict[str,set[str]]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/spin.py": {
        "SpnTrk.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/__init__.py": {},
    "zgoubidoo-master/zgoubidoo/commands/contrib/emma.py": {},
    "zgoubidoo-master/zgoubidoo/commands/contrib/iba.py": {
        "DipoleIBA.extra_drift": {
            "name": "extra_drift",
            "location": 50,
            "return": [
                "numpy.ndarray",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DipoleIBA.process_fit_field_profile": {
            "name": "process_fit_field_profile",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fit": [
                    "str",
                    "float",
                    "bool",
                    "Optional[float]",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "B1G.post_init": {
            "name": "post_init",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "magnet_opening": [
                    "int",
                    "bytes",
                    "Optional[float]",
                    "bool",
                    "Optional[int]"
                ],
                "poles_opening": [
                    "str",
                    "int",
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "entrance_pole_trim": [
                    "numpy.ndarray",
                    "Optional[Type]",
                    "dict"
                ],
                "exit_pole_trim": [
                    "bool",
                    "dict",
                    "str"
                ],
                "entrance_fringe_lambda": [
                    "numpy.ndarray",
                    "Optional[Type]",
                    "dict"
                ],
                "exit_fringe_lambda": [
                    "numpy.ndarray",
                    "Optional[Type]",
                    "dict"
                ]
            }
        },
        "B2G.post_init": {
            "name": "post_init",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "magnet_opening": [
                    "int",
                    "bytes",
                    "Optional[float]",
                    "bool",
                    "Optional[int]"
                ],
                "poles_opening": [
                    "str",
                    "int",
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "entrance_pole_trim": [
                    "numpy.ndarray",
                    "Optional[Type]",
                    "dict"
                ],
                "exit_pole_trim": [
                    "bool",
                    "dict",
                    "str"
                ],
                "entrance_fringe_lambda": [
                    "numpy.ndarray",
                    "Optional[Type]",
                    "dict"
                ],
                "exit_fringe_lambda": [
                    "numpy.ndarray",
                    "Optional[Type]",
                    "dict"
                ]
            }
        },
        "B3G.post_init": {
            "name": "post_init",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "magnet_opening": [
                    "int",
                    "bytes",
                    "Optional[float]",
                    "bool",
                    "Optional[int]"
                ],
                "poles_opening": [
                    "str",
                    "int",
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "entrance_pole_trim": [
                    "float",
                    "numpy.ndarray",
                    "Optional[Type]",
                    "Dict"
                ],
                "exit_pole_trim": [
                    "float",
                    "bool",
                    "Dict",
                    "str"
                ],
                "entrance_fringe_lambda": [
                    "numpy.ndarray",
                    "Optional[Type]",
                    "dict"
                ],
                "exit_fringe_lambda": [
                    "numpy.ndarray",
                    "Optional[Type]",
                    "dict"
                ],
                "entrance_pole_curvature": [
                    "float",
                    "bool",
                    "Dict",
                    "str"
                ],
                "exit_pole_curvature": [
                    "float",
                    "bool",
                    "Dict",
                    "str"
                ]
            }
        },
        "SMX.post_init": {
            "name": "post_init",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMX.process_fit_field_profile": {
            "name": "process_fit_field_profile",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fit": [
                    "str",
                    "float",
                    "bool",
                    "Optional[float]",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "SMY.post_init": {
            "name": "post_init",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMY.process_fit_field_profile": {
            "name": "process_fit_field_profile",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fit": [
                    "str",
                    "float",
                    "bool",
                    "Optional[float]",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "T1G.post_init": {
            "name": "post_init",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T2G.post_init": {
            "name": "post_init",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadrupoleIBA.post_init": {
            "name": "post_init",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "polarity": [
                    "str",
                    "int"
                ],
                "p": [
                    "str",
                    "int",
                    "None"
                ],
                "l_eff": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "QuadrupoleIBA.polarity": {
            "name": "polarity",
            "location": 576,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "numpy.ndarray",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "QuadrupoleIBA.current": {
            "name": "current",
            "location": 589,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "QuadrupoleIBA.gradient": {
            "name": "gradient",
            "location": 605,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "gradient": [
                    "pandas.DataFrame",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "QuadrupoleIBA.set_value": {
            "name": "set_value",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable[str]",
                    "bytes",
                    "Iterable[Any]"
                ]
            }
        },
        "QuadrupoleIBA.k1": {
            "name": "k1",
            "location": 626,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "QuadrupoleIBA.p": {
            "name": "p",
            "location": 646,
            "return": [
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "numpy.ndarray",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "QuadrupoleIBA.l_eff": {
            "name": "l_eff",
            "location": 661,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "QuadrupoleIBA.B0": {
            "name": "B0",
            "location": 667,
            "return": [
                "str",
                "Iterable[str]",
                "bool",
                "IO[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QLong.post_init": {
            "name": "post_init",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "polarity": [
                    "polarity.PolarityType",
                    "str",
                    "commands.CommandMessage"
                ]
            }
        },
        "QShort.post_init": {
            "name": "post_init",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "polarity": [
                    "polarity.PolarityType",
                    "str",
                    "commands.CommandMessage"
                ]
            }
        },
        "QWall.post_init": {
            "name": "post_init",
            "location": 725,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "polarity": [
                    "polarity.PolarityType",
                    "str",
                    "commands.CommandMessage"
                ]
            }
        },
        "QPMQ.post_init": {
            "name": "post_init",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "polarity": [
                    "polarity.PolarityType",
                    "str",
                    "commands.CommandMessage"
                ]
            }
        },
        "Q3G.post_init": {
            "name": "post_init",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Q4G.post_init": {
            "name": "post_init",
            "location": 853,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Q5G.post_init": {
            "name": "post_init",
            "location": 895,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Q6G.post_init": {
            "name": "post_init",
            "location": 937,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Q7G.post_init": {
            "name": "post_init",
            "location": 979,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HorizontalSlits.post_init": {
            "name": "post_init",
            "location": 1023,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticalSlits.post_init": {
            "name": "post_init",
            "location": 1067,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResearchArea.__init__": {
            "name": "__init__",
            "location": 1092,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CGTR.__init__": {
            "name": "__init__",
            "location": 1107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kinematics": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "b1g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "b2g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "b3g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "t1g": [
                    "numpy.ndarray",
                    "float",
                    "None",
                    "int",
                    "str",
                    "Mapping[str,Tuple[float,float,float]]",
                    "Mapping"
                ],
                "t2g": [
                    "numpy.ndarray",
                    "float",
                    "None",
                    "int",
                    "str",
                    "Mapping[str,Tuple[float,float,float]]",
                    "Mapping"
                ],
                "q1g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "q2g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "q3g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "q4g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "q5g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "q6g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "q7g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "smx": [
                    "numpy.ndarray",
                    "float",
                    "None",
                    "int",
                    "str",
                    "Mapping[str,Tuple[float,float,float]]",
                    "Mapping"
                ],
                "smy": [
                    "numpy.ndarray",
                    "float",
                    "None",
                    "int",
                    "str",
                    "Mapping[str,Tuple[float,float,float]]",
                    "Mapping"
                ],
                "sl1g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "sl2g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "sl3g": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "beam": [
                    "None",
                    "float",
                    "Optional[float]",
                    "int",
                    "Optional[numpy.ndarray]"
                ],
                "with_fit": [
                    "bool",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "CGTR.line": {
            "name": "line",
            "location": 1234,
            "return": [
                "int",
                "float",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CGTR.gantry_angle": {
            "name": "gantry_angle",
            "location": 1248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CGTR.fit_dipoles": {
            "name": "fit_dipoles",
            "location": 1251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kinematics": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dipoles": [
                    "int",
                    "Callable",
                    "None",
                    "str"
                ]
            }
        },
        "CGTR.run": {
            "name": "run",
            "location": 1266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zgoubi": [
                    "str"
                ],
                "identifier": [
                    "str",
                    "None"
                ]
            }
        },
        "CGTR.fit": {
            "name": "fit",
            "location": 1281,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "zgoubi": [
                    "str",
                    "int",
                    "zgoubidoo.Zgoubi"
                ],
                "identifier": [
                    "str",
                    "int",
                    "zgoubidoo.Zgoubi"
                ],
                "fit": [
                    "str"
                ]
            }
        },
        "CGTR.shoot": {
            "name": "shoot",
            "location": 1301,
            "return": [
                "int",
                "Exception",
                "str",
                "Callable",
                "float",
                "List"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "Type",
                    "str",
                    "Type[BaseException]",
                    "numpy.ndarray"
                ],
                "y": [
                    "float",
                    "int",
                    "Type",
                    "str",
                    "Type[BaseException]",
                    "numpy.ndarray"
                ],
                "zgoubi": [
                    "int",
                    "str",
                    "Union[int,float]",
                    "float"
                ],
                "fit_type": [
                    "float",
                    "Type[BaseException]",
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "CGTR.spots": {
            "name": "spots",
            "location": 1335,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "spots": [
                    "int"
                ],
                "fit_type": [
                    "int"
                ],
                "with_tracks": [
                    "bool",
                    "int",
                    "str"
                ],
                "debug_fit": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "CGTR.plot": {
            "name": "plot",
            "location": 1376,
            "return": [
                "int",
                "str",
                "Callable",
                "None"
            ],
            "arguments": {
                "self": [],
                "artist": [
                    "None",
                    "int",
                    "Optional[int]",
                    "float",
                    "Union[int,None]"
                ],
                "start": [
                    "int",
                    "Union[str,list]",
                    "None",
                    "str",
                    "List"
                ],
                "stop": [
                    "int",
                    "Union[str,list]",
                    "None",
                    "str",
                    "List"
                ],
                "crosshair": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/commands/contrib/__init__.py": {},
    "zgoubidoo-master/zgoubidoo/commands/contrib/cern/lhec.py": {},
    "zgoubidoo-master/zgoubidoo/commands/contrib/cern/__init__.py": {},
    "zgoubidoo-master/zgoubidoo/fieldmaps/fieldmap.py": {
        "load_mesh_data": {
            "name": "load_mesh_data",
            "location": 11,
            "return": [
                "str",
                "List[str]",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "path": [
                    "str",
                    "Text"
                ]
            }
        },
        "load_field_data": {
            "name": "load_field_data",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "path": [
                    "str",
                    "Text"
                ]
            }
        },
        "load_opera_fieldmap_with_mesh": {
            "name": "load_opera_fieldmap_with_mesh",
            "location": 44,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "field_file": [
                    "str"
                ],
                "mesh_file": [
                    "str"
                ],
                "path": [
                    "str",
                    "Text"
                ]
            }
        },
        "load_opera_fieldmap": {
            "name": "load_opera_fieldmap",
            "location": 63,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "path": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "enge": {
            "name": "enge",
            "location": 78,
            "return": [
                "float",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "s": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "ce_0": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "ce_1": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "ce_2": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "ce_3": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "ce_4": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "ce_5": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "cs_0": [
                    "float",
                    "int"
                ],
                "cs_1": [
                    "float",
                    "int"
                ],
                "cs_2": [
                    "float",
                    "int"
                ],
                "cs_3": [
                    "float",
                    "int"
                ],
                "cs_4": [
                    "float",
                    "int"
                ],
                "cs_5": [
                    "float",
                    "int"
                ],
                "lam_e": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "lam_s": [
                    "float",
                    "int"
                ],
                "offset_e": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "offset_s": [
                    "float",
                    "int"
                ],
                "amplitude": [
                    "float",
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ],
                "field_offset": [
                    "float",
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "EngeModel.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngeModel.params": {
            "name": "params",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict[str,Any]",
                "Dict[str,int]",
                "Pattern",
                "Dict[str,dict[str,Any]]",
                "List",
                "Dict[str,Type]",
                "DefaultDict",
                "Dict[str,tuple[Union[str,str]]]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMap.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_map": [
                    "str",
                    "Callable[,bool]",
                    "bytes"
                ]
            }
        },
        "FieldMap.__repr__": {
            "name": "__repr__",
            "location": 162,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMap.load_from_opera": {
            "name": "load_from_opera",
            "location": 166,
            "return": [
                "FieldMap"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFieldMap]"
                ],
                "file": [
                    "str"
                ],
                "path": [
                    "str",
                    "Text"
                ]
            }
        },
        "FieldMap.load_from_opera_with_mesh": {
            "name": "load_from_opera_with_mesh",
            "location": 180,
            "return": [
                "FieldMap"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFieldMap]"
                ],
                "field_file": [
                    "str",
                    "bool"
                ],
                "mesh_file": [
                    "str",
                    "bool"
                ],
                "path": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "FieldMap.df": {
            "name": "df",
            "location": 195,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMap.data": {
            "name": "data",
            "location": 200,
            "return": [
                "dict",
                "Dict[str, Any]",
                "List['PydanticModelField']",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMap.reference_trajectory": {
            "name": "reference_trajectory",
            "location": 205,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMap.field_profile_fit": {
            "name": "field_profile_fit",
            "location": 210,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMap.mesh_sampling_x": {
            "name": "mesh_sampling_x",
            "location": 215,
            "return": [
                "int",
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMap.mesh_sampling_y": {
            "name": "mesh_sampling_y",
            "location": 220,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMap.mesh_sampling_z": {
            "name": "mesh_sampling_z",
            "location": 225,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMap.mesh_sampling_along_axis": {
            "name": "mesh_sampling_along_axis",
            "location": 229,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "bool"
                ]
            }
        },
        "FieldMap.translate": {
            "name": "translate",
            "location": 242,
            "return": [
                "FieldMap"
            ],
            "arguments": {
                "self": [
                    "_TFieldMap@@FieldMap@@"
                ],
                "x": [
                    "int",
                    "str",
                    "float",
                    "numpy.ndarray",
                    "Dict",
                    "Tuple[str]",
                    "bool"
                ],
                "y": [
                    "int",
                    "Union[int,float]",
                    "str"
                ],
                "z": [
                    "int",
                    "str",
                    "float",
                    "numpy.ndarray",
                    "Dict",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "FieldMap.rotate": {
            "name": "rotate",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldMap.slice": {
            "name": "slice",
            "location": 262,
            "return": [
                "FieldMap"
            ],
            "arguments": {
                "self": [
                    "_TFieldMap@@FieldMap@@"
                ],
                "slicing": [
                    "str",
                    "Text"
                ]
            }
        },
        "FieldMap.sample": {
            "name": "sample",
            "location": 275,
            "return": [
                "dict",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Sequence[str]",
                    "AnyStr",
                    "Optional[AnyStr]",
                    "Callable[...,Any]",
                    "Optional[int]",
                    "Optional[Callable[...,Any]]"
                ],
                "field_component": [
                    "typing.Text"
                ],
                "method": [
                    "typing.Text"
                ]
            }
        },
        "FieldMap.attach_cartesian_trajectory": {
            "name": "attach_cartesian_trajectory",
            "location": 297,
            "return": [
                "FieldMap"
            ],
            "arguments": {
                "self": [
                    "_TFieldMap@@FieldMap@@"
                ],
                "axis": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "lower": [
                    "float",
                    "None",
                    "List[str]",
                    "int",
                    "Dict",
                    "bool",
                    "Optional[float]"
                ],
                "upper": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "bool"
                ],
                "samples": [
                    "float",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "List[int]"
                ],
                "offset_x": [
                    "float",
                    "Dict[str,Any]",
                    "int",
                    "List[int]"
                ],
                "offset_y": [
                    "float",
                    "Dict[str,Any]",
                    "int",
                    "List[int]"
                ],
                "offset_z": [
                    "float",
                    "Dict[str,Any]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "FieldMap.attach_polar_trajectory": {
            "name": "attach_polar_trajectory",
            "location": 340,
            "return": [
                "FieldMap"
            ],
            "arguments": {
                "self": [
                    "_TFieldMap@@FieldMap@@"
                ],
                "radius": [
                    "int",
                    "float"
                ],
                "lower_angle": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "upper_angle": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "samples": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "plane": [
                    "Text",
                    "str",
                    "int",
                    "bool",
                    "Optional[int]",
                    "Optional[Union[Any,Any]]"
                ],
                "offset_x": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "offset_y": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "offset_z": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "FieldMap.fit_field_profile": {
            "name": "fit_field_profile",
            "location": 384,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "None",
                    "int",
                    "Tuple[type]",
                    "bool",
                    "Tuple[Type]"
                ],
                "field_component": [
                    "Text",
                    "str",
                    "Tuple[type]"
                ],
                "sampling_method": [
                    "Text",
                    "str",
                    "Tuple[type]"
                ]
            }
        },
        "FieldMap.plot_field_profile": {
            "name": "plot_field_profile",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": [
                    "int"
                ],
                "field_component": [
                    "int",
                    "Text"
                ],
                "sampling_method": [
                    "int",
                    "Text"
                ]
            }
        },
        "FieldMap.plot_field_map": {
            "name": "plot_field_map",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "field_component": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "plane1": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "plane2": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "bins": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FieldMap.export_for_bdsim": {
            "name": "export_for_bdsim",
            "location": 451,
            "return": [
                "str",
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Text",
                    "int",
                    "Dict",
                    "Optional[Any]",
                    "str",
                    "Sequence[object]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/fieldmaps/__init__.py": {},
    "zgoubidoo-master/zgoubidoo/physics/coordinates.py": {
        "Coordinates.__getitem__": {
            "name": "__getitem__",
            "location": 38,
            "return": [
                "str",
                "List[str]",
                "List[List[Any]]",
                "List[Tuple[bool, str]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "Dict"
                ]
            }
        },
        "Coordinates.__len__": {
            "name": "__len__",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coordinates.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Coordinates.array": {
            "name": "array",
            "location": 48,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coordinates.list": {
            "name": "list",
            "location": 53,
            "return": [
                "List",
                "bool",
                "Callable[,bool]",
                "List[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/physics/field.py": {},
    "zgoubidoo-master/zgoubidoo/physics/orbit.py": {
        "find_closed_orbit": {
            "name": "find_closed_orbit",
            "location": 42,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "brho": [
                    "int",
                    "List[str]",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "dict",
                    "Dict[str, List[str]]",
                    "bool",
                    "str",
                    "list"
                ],
                "dpp": [
                    "float",
                    "bool",
                    "int"
                ],
                "guess": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "dict"
                ],
                "tolerance": [
                    "float",
                    "int",
                    "Sequence",
                    "numpy.ndarray",
                    "List[float]"
                ],
                "fit_method": [
                    "float",
                    "int",
                    "Sequence",
                    "numpy.ndarray",
                    "List[float]"
                ],
                "plane": [
                    "float",
                    "int",
                    "Sequence",
                    "numpy.ndarray",
                    "List[float]"
                ]
            }
        },
        "track_closed_orbit": {
            "name": "track_closed_orbit",
            "location": 105,
            "return": [
                "str",
                "dict",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "brho": [
                    "str",
                    "pandas._F",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/physics/results.py": {},
    "zgoubidoo-master/zgoubidoo/physics/srloss.py": {
        "srloss": {
            "name": "srloss",
            "location": 25,
            "return": [
                "SynchrotronRadiationLosses",
                "List[str]",
                "bool",
                "List[Mapping[str,Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "sequence": [
                    "Sequence[str]",
                    "str",
                    "bytearray"
                ],
                "bunch": [
                    "Optional[int]",
                    "Type",
                    "None",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "statistics": [
                    "int",
                    "float",
                    "Callable",
                    "str"
                ],
                "debug": [
                    "bool",
                    "int",
                    "str",
                    "Union[str,bool,None]",
                    "Optional[bool]"
                ]
            }
        }
    },
    "zgoubidoo-master/zgoubidoo/physics/track.py": {},
    "zgoubidoo-master/zgoubidoo/physics/twiss.py": {},
    "zgoubidoo-master/zgoubidoo/physics/__init__.py": {},
    "zgoubidoo-master/zgoubidoo/vis/matplotlib.py": {
        "ZgoubidooMatplotlibArtist.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ],
                "with_boxes": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]"
                ],
                "with_frames": [
                    "bool",
                    "int",
                    "Dict[str,Any]",
                    "Union[str,int]"
                ],
                "with_centers": [
                    "bool",
                    "int",
                    "float"
                ],
                "tracks_color": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.tracks_color": {
            "name": "tracks_color",
            "location": 58,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.ax": {
            "name": "ax",
            "location": 89,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "ax": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.ax2": {
            "name": "ax2",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubidooMatplotlibArtist.figure": {
            "name": "figure",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubidooMatplotlibArtist.init_plot": {
            "name": "init_plot",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "figsize": [
                    "Tuple[int]",
                    "int",
                    "bool",
                    "float"
                ],
                "subplots": [
                    "int"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.plot": {
            "name": "plot",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZgoubidooMatplotlibArtist.polarmagnet": {
            "name": "polarmagnet",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "magnet": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.cartesianmagnet": {
            "name": "cartesianmagnet",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "magnet": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "apertures": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.cartouche_drift": {
            "name": "cartouche_drift",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s_location": [
                    "int",
                    "str",
                    "Sequence[T]",
                    "bytes",
                    "Set[str]"
                ],
                "magnet": [
                    "int",
                    "str",
                    "Sequence[T]",
                    "bytes",
                    "Set[str]"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.cartouche_cartesianmagnet": {
            "name": "cartouche_cartesianmagnet",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s_location": [
                    "int",
                    "Set[str]"
                ],
                "magnet": [
                    "int",
                    "Set[str]"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.cartouche_quadrupole": {
            "name": "cartouche_quadrupole",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s_location": [
                    "int",
                    "Set[str]",
                    "str"
                ],
                "magnet": [
                    "int",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.cartouche_solenoid": {
            "name": "cartouche_solenoid",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s_location": [
                    "int",
                    "Set[str]"
                ],
                "magnet": [
                    "int",
                    "Set[str]"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.cartouche_cavite": {
            "name": "cartouche_cavite",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s_location": [
                    "int",
                    "Set[str]",
                    "str"
                ],
                "cavite": [
                    "int",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.tracks_cartesianmagnet": {
            "name": "tracks_cartesianmagnet",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "magnet": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "tracks": [
                    "float",
                    "int"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.tracks_polarmagnet": {
            "name": "tracks_polarmagnet",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "magnet": [
                    "float",
                    "numpy.ndarray"
                ],
                "tracks": [
                    "List[int]",
                    "float",
                    "int"
                ]
            }
        },
        "ZgoubidooMatplotlibArtist.polarmagnet.do_frame": {
            "name": "do_frame",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ZgoubidooMatplotlibArtist.polarmagnet.do_box": {
            "name": "do_box",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ZgoubidooMatplotlibArtist.cartesianmagnet.do_frame": {
            "name": "do_frame",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ZgoubidooMatplotlibArtist.cartesianmagnet.do_box": {
            "name": "do_box",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ZgoubidooMatplotlibArtist.cartesianmagnet.do_apertures": {
            "name": "do_apertures",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "zgoubidoo-master/zgoubidoo/vis/plotly.py": {
        "ZgoubidooPlotlyArtist.plot_cartouche": {
            "name": "plot_cartouche",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beamline": [
                    "str",
                    "List[int]"
                ],
                "vertical_position": [
                    "float",
                    "Sequence[cirq.Qid]",
                    "Union[str,bool,None]"
                ]
            }
        },
        "ZgoubidooPlotlyArtist.plot_beamline": {
            "name": "plot_beamline",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beamline": [
                    "str",
                    "Optional[Union[str,commands.Command]]",
                    "List",
                    "bytes",
                    "int",
                    "bool",
                    "Union[str,list]"
                ],
                "start": [
                    "int",
                    "Optional[Union[str,commands.Command]]",
                    "bool",
                    "Union[str,list]",
                    "bytes"
                ],
                "stop": [
                    "int",
                    "Optional[Union[str,commands.Command]]",
                    "bool",
                    "Union[str,list]",
                    "bytes"
                ],
                "with_drifts": [
                    "bool",
                    "str",
                    "List",
                    "Optional[str]"
                ],
                "with_magnet_poles": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ],
                "with_apertures": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ],
                "with_frames": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ],
                "points_in_polar_paths": [
                    "int",
                    "float",
                    "List",
                    "Dict",
                    "str"
                ],
                "opacity": [
                    "float",
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ],
                "reference_frame": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "ZgoubidooPlotlyArtist.plot_twiss": {
            "name": "plot_twiss",
            "location": 299,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Type",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "beamline": [
                    "Type",
                    "float",
                    "numpy.array"
                ],
                "twiss": [
                    "pandas.DataFrame",
                    "AbstractSet[int]",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "Callable[[numpy.ndarray], float]",
                    "Optional[int]"
                ],
                "twiss_madx": [
                    "None",
                    "List[numpy.ndarray]",
                    "Optional[pandas.DataFrame]",
                    "Optional[Any]"
                ],
                "beta": [
                    "bool",
                    "memoryview",
                    "str"
                ],
                "dispersion": [
                    "bool",
                    "memoryview",
                    "str"
                ],
                "dispersion_prime": [
                    "bool",
                    "memoryview",
                    "str"
                ],
                "alpha": [
                    "bool",
                    "memoryview",
                    "str"
                ],
                "mu": [
                    "bool",
                    "memoryview",
                    "str"
                ]
            }
        },
        "ZgoubidooPlotlyArtist.plot_beamline.add_svg_path": {
            "name": "add_svg_path",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "points": [
                    "List[str]",
                    "int",
                    "bool"
                ],
                "reference_frame": [
                    "Text",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "color": [
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ZgoubidooPlotlyArtist.plot_beamline.plot_frames": {
            "name": "plot_frames",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "zgoubidoo-master/zgoubidoo/vis/__init__.py": {}
}
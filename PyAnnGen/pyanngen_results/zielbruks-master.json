{
    "zielbruks-master/manage.py": {},
    "zielbruks-master/scheduler/admin.py": {},
    "zielbruks-master/scheduler/apps.py": {},
    "zielbruks-master/scheduler/calendar_util.py": {
        "get_start_date": {
            "name": "get_start_date",
            "location": 11,
            "return": [
                "int",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "lessons": [
                    "django.db.models.QuerySet",
                    "datetime.datetime",
                    "int",
                    "str"
                ]
            }
        },
        "generate_full_schedule_context": {
            "name": "generate_full_schedule_context",
            "location": 22,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "generate_conflicts_context": {
            "name": "generate_conflicts_context",
            "location": 50,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "generate_full_index_context_with_date": {
            "name": "generate_full_index_context_with_date",
            "location": 62,
            "return": [
                "Dict[(str, scheduler.forms.MassEditForm)]"
            ],
            "arguments": {
                "start_time": [
                    "int",
                    "Iterator[int]",
                    "Optional[Union[int, float]]",
                    "float"
                ]
            }
        },
        "generate_full_index_context": {
            "name": "generate_full_index_context",
            "location": 73,
            "return": [
                "Dict[(str, scheduler.forms.MassEditForm)]"
            ],
            "arguments": {}
        },
        "get_rooms_colors": {
            "name": "get_rooms_colors",
            "location": 83,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {}
        },
        "get_group_colors": {
            "name": "get_group_colors",
            "location": 89,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {}
        },
        "generate_context_for_conflicts_report": {
            "name": "generate_context_for_conflicts_report",
            "location": 95,
            "return": [
                "Dict[(str, Union[(int, list, _T1)])]"
            ],
            "arguments": {
                "past_conflicts": [
                    "Dict[str,Any]",
                    "float",
                    "str"
                ],
                "current_conflicts": [
                    "Dict[str,Any]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "zielbruks-master/scheduler/celery.py": {
        "debug_task": {
            "name": "debug_task",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "zielbruks-master/scheduler/conflicts_checker.py": {
        "are_overlapping": {
            "name": "are_overlapping",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "lesson1": [
                    "int"
                ],
                "lesson2": [
                    "int"
                ]
            }
        },
        "check_lesson": {
            "name": "check_lesson",
            "location": 24,
            "return": [
                "List[Tuple[(str, Any, Any, Any)]]"
            ],
            "arguments": {
                "index": [
                    "List",
                    "int",
                    "List[int]",
                    "bytes",
                    "bytearray",
                    "Sequence[int]"
                ],
                "lesson_list": [
                    "str",
                    "List[int]",
                    "int",
                    "bool",
                    "Dict[str, str]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "db_conflicts": {
            "name": "db_conflicts",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "conflicts_diff": {
            "name": "conflicts_diff",
            "location": 73,
            "return": [
                "Tuple[(_T1, list)]"
            ],
            "arguments": {
                "past_conflicts": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "current_conflicts": [
                    "str",
                    "Dict",
                    "Callable"
                ]
            }
        }
    },
    "zielbruks-master/scheduler/export_handlers.py": {
        "export_to_csv": {
            "name": "export_to_csv",
            "location": 9,
            "return": [
                "tempfile._TemporaryFileWrapper[bytes]"
            ],
            "arguments": {
                "start_time": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "end_time": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "export_to_excel": {
            "name": "export_to_excel",
            "location": 16,
            "return": [
                "tempfile._TemporaryFileWrapper[bytes]"
            ],
            "arguments": {
                "start_time": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "end_time": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_lessons": {
            "name": "get_lessons",
            "location": 23,
            "return": [
                "int",
                "zerver.models.Realm",
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "start_time": [
                    "int",
                    "str"
                ],
                "end_time": [
                    "int",
                    "str"
                ],
                "iscsv": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "zielbruks-master/scheduler/forms.py": {
        "EditForm.clean": {
            "name": "clean",
            "location": 59,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "MassEditForm.clean": {
            "name": "clean",
            "location": 90,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportForm.clean": {
            "name": "clean",
            "location": 121,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zielbruks-master/scheduler/import_handlers.py": {
        "parse_data": {
            "name": "parse_data",
            "location": 19,
            "return": [
                "Tuple[(int, list, list)]"
            ],
            "arguments": {
                "data": [
                    "Callable[str,str,float]",
                    "pandas.DataFrame",
                    "List[int]",
                    "bool",
                    "List[utils.models.Base]",
                    "Callable[[str,str],float]",
                    "Mapping",
                    "Mapping[str,Any]"
                ],
                "ext": [
                    "str",
                    "List",
                    "int"
                ]
            }
        },
        "import_csv": {
            "name": "import_csv",
            "location": 36,
            "return": [
                "Tuple[(int, list, list)]"
            ],
            "arguments": {
                "data": [
                    "pandas.DataFrame",
                    "str",
                    "List['PlotInfo']"
                ]
            }
        },
        "import_excel": {
            "name": "import_excel",
            "location": 96,
            "return": [
                "Tuple[(int, list, list)]"
            ],
            "arguments": {
                "data": [
                    "pandas.DataFrame",
                    "str",
                    "List['PlotInfo']"
                ]
            }
        },
        "check_types_csv": {
            "name": "check_types_csv",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "row": [
                    "Tuple",
                    "str",
                    "List[dict[str,str]]",
                    "List",
                    "Iterable[Tuple[str,str]]",
                    "Dict",
                    "models.Match",
                    "Type",
                    "List[Dict[str,str]]"
                ]
            }
        },
        "check_types_excel": {
            "name": "check_types_excel",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "row": [
                    "Tuple",
                    "Dict[str,Any]",
                    "Set[str]",
                    "Match",
                    "Dict"
                ]
            }
        },
        "import_students": {
            "name": "import_students",
            "location": 183,
            "return": [
                "Tuple[(int, list, list)]"
            ],
            "arguments": {
                "data": [
                    "pandas.DataFrame",
                    "int",
                    "numpy.ndarray",
                    "pandas.core.frame.DataFrame",
                    "List['PlotInfo']",
                    "dict"
                ]
            }
        },
        "students_check_types": {
            "name": "students_check_types",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "row": [
                    "int",
                    "Type",
                    "pandas.DataFrame",
                    "bool"
                ]
            }
        }
    },
    "zielbruks-master/scheduler/mailer.py": {
        "Mailer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_email": [
                    "Text",
                    "Tuple[int,int]",
                    "Dict",
                    "bool",
                    "bytes",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]",
                    "Dict[str,str]",
                    "str"
                ]
            }
        },
        "Mailer.send_messages": {
            "name": "send_messages",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str",
                    "bytes",
                    "int",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "template": [
                    "str",
                    "bytes",
                    "int",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "context": [
                    "str",
                    "bytes",
                    "int",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "to_emails": [
                    "str",
                    "bytes",
                    "int",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "Mailer.send_mail": {
            "name": "send_mail",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mail_messages": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Mailer.generate_messages": {
            "name": "generate_messages",
            "location": 30,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Mapping[str,Any]]",
                    "Mapping"
                ],
                "template": [
                    "str",
                    "int"
                ],
                "context": [
                    "str",
                    "bytes"
                ],
                "to_emails": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "zielbruks-master/scheduler/middleware.py": {
        "LoginRequiredMiddleware.get_exempt_urls": {
            "name": "get_exempt_urls",
            "location": 18,
            "return": [
                "List[Pattern]"
            ],
            "arguments": {}
        },
        "LoginRequiredMiddleware.process_request": {
            "name": "process_request",
            "location": 25,
            "return": [
                "HttpResponseRedirect",
                "Dict[str,Any]",
                "None",
                "Dict",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Union[dict,list]",
                    "Dict[str,Any]",
                    "Dict",
                    "http.MITMRequest",
                    "List"
                ]
            }
        }
    },
    "zielbruks-master/scheduler/models.py": {
        "color_from_id": {
            "name": "color_from_id",
            "location": 16,
            "return": [
                "Text",
                "str",
                "int"
            ],
            "arguments": {
                "numeric_id": [
                    "int",
                    "Sequence",
                    "str",
                    "list"
                ],
                "shuffle": [
                    "bool",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Professor.save": {
            "name": "save",
            "location": 32,
            "return": [
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Professor.clean": {
            "name": "clean",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Professor.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Professor.__eq__": {
            "name": "__eq__",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Room.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Room.__eq__": {
            "name": "__eq__",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Group.__str__": {
            "name": "__str__",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__eq__": {
            "name": "__eq__",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Lesson.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lesson.__eq__": {
            "name": "__eq__",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Student.save": {
            "name": "save",
            "location": 132,
            "return": [
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Student.__str__": {
            "name": "__str__",
            "location": 136,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conflict.__str__": {
            "name": "__str__",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conflict.__eq__": {
            "name": "__eq__",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Dict"
                ]
            }
        }
    },
    "zielbruks-master/scheduler/model_util.py": {
        "get_professor": {
            "name": "get_professor",
            "location": 5,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "paradigm.models.Overloaded"
                ],
                "surname": [
                    "str",
                    "Iterable[str]",
                    "paradigm.models.Overloaded"
                ]
            }
        },
        "get_room": {
            "name": "get_room",
            "location": 11,
            "return": [
                "str",
                "Tuple[Union[Any,Any]]",
                "bool"
            ],
            "arguments": {
                "number": [
                    "str",
                    "int",
                    "models.order.Order"
                ]
            }
        },
        "get_group": {
            "name": "get_group",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]",
                    "List[str]"
                ]
            }
        }
    },
    "zielbruks-master/scheduler/task.py": {
        "notify_professors": {
            "name": "notify_professors",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "zielbruks-master/scheduler/urls.py": {},
    "zielbruks-master/scheduler/views.py": {
        "login": {
            "name": "login",
            "location": 30,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "request": []
            }
        },
        "index": {
            "name": "index",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "index_specific": {
            "name": "index_specific",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "_request": [
                    "str",
                    "None"
                ],
                "date": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "upload_schedule": {
            "name": "upload_schedule",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "upload_students": {
            "name": "upload_students",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "show_conflicts": {
            "name": "show_conflicts",
            "location": 150,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "show_rooms_schedule": {
            "name": "show_rooms_schedule",
            "location": 157,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "show_professors_schedule": {
            "name": "show_professors_schedule",
            "location": 193,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "show_groups_schedule": {
            "name": "show_groups_schedule",
            "location": 230,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "show_schedule": {
            "name": "show_schedule",
            "location": 266,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "edit": {
            "name": "edit",
            "location": 272,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "lesson_id": [
                    "int"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 306,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "remove": {
            "name": "remove",
            "location": 338,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "lesson_id": [
                    "int"
                ]
            }
        },
        "is_ajax": {
            "name": "is_ajax",
            "location": 355,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "bytes"
                ]
            }
        },
        "delete_lessons": {
            "name": "delete_lessons",
            "location": 359,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "edit_lessons": {
            "name": "edit_lessons",
            "location": 374,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "professors": {
            "name": "professors",
            "location": 414,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "export": {
            "name": "export",
            "location": 451,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "view_students": {
            "name": "view_students",
            "location": 481,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "zielbruks-master/scheduler/__init__.py": {},
    "zielbruks-master/scheduler/migrations/0001_initial.py": {},
    "zielbruks-master/scheduler/migrations/__init__.py": {},
    "zielbruks-master/scheduler/templatetags/custom_filters.py": {
        "get_color_tag": {
            "name": "get_color_tag",
            "location": 8,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "counter": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Mapping[str, Any]",
                    "Sequence[int]"
                ]
            }
        },
        "get_danger_tag": {
            "name": "get_danger_tag",
            "location": 16,
            "return": [
                "Text",
                "str",
                "int",
                "bytes",
                "Tuple[int,int]"
            ],
            "arguments": {}
        }
    },
    "zielbruks-master/scheduler/templatetags/__init__.py": {},
    "zielbruks-master/scheduler/tests/test_conflicts.py": {
        "NoConflictsTestCase.test_clean_database": {
            "name": "test_clean_database",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoConflictsTestCase.test_database_with_no_conflicts": {
            "name": "test_database_with_no_conflicts",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlappingLessonsConflictsTestCase.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlappingLessonsConflictsTestCase.test_not_overlapping_lessons": {
            "name": "test_not_overlapping_lessons",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlappingLessonsConflictsTestCase.test_lesson_starts_and_ends_during_another": {
            "name": "test_lesson_starts_and_ends_during_another",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlappingLessonsConflictsTestCase.test_lesson_overlaps_another": {
            "name": "test_lesson_overlaps_another",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlappingConflictsTypeTestCase.setUp": {
            "name": "setUp",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlappingConflictsTypeTestCase.test_overlapping_professor": {
            "name": "test_overlapping_professor",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlappingConflictsTypeTestCase.test_overlapping_room": {
            "name": "test_overlapping_room",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlappingConflictsTypeTestCase.test_overlapping_group": {
            "name": "test_overlapping_group",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorrectnessOfAmountOfIncorrectDataListedTestCase.setUp": {
            "name": "setUp",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorrectnessOfAmountOfIncorrectDataListedTestCase.test_duplication_of_conflicts": {
            "name": "test_duplication_of_conflicts",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zielbruks-master/scheduler/tests/test_import.py": {
        "ImportHandlersTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "bool",
                    "str"
                ]
            }
        },
        "ImportHandlersTest.test_parse_data_extension": {
            "name": "test_parse_data_extension",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportHandlersTest.test_parse_data_length": {
            "name": "test_parse_data_length",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportHandlersTest.test_import_csv": {
            "name": "test_import_csv",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportHandlersTest.test_import_excel": {
            "name": "test_import_excel",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zielbruks-master/scheduler/tests/__init__.py": {},
    "zielbruks-master/zielbruks/urls.py": {},
    "zielbruks-master/zielbruks/wsgi.py": {},
    "zielbruks-master/zielbruks/settings/base.py": {},
    "zielbruks-master/zielbruks/settings/development.py": {},
    "zielbruks-master/zielbruks/settings/production.py": {},
    "zielbruks-master/zielbruks/settings/__init__.py": {}
}
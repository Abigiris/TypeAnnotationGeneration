{
    "zippy-master/setup.py": {},
    "zippy-master/docs/conf.py": {},
    "zippy-master/scripts/json_server.py": {
        "CORSRequestHandler.end_headers": {
            "name": "end_headers",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONLogRequestHandler.do_json": {
            "name": "do_json",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.do_GET": {
            "name": "do_GET",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zippy-master/scripts/utils.py": {
        "copy_example": {
            "name": "copy_example",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "topic": [
                    "str"
                ]
            }
        },
        "push_blob": {
            "name": "push_blob",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "pull_blob": {
            "name": "pull_blob",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "BinaryIO"
                ]
            }
        }
    },
    "zippy-master/scripts/__init__.py": {},
    "zippy-master/tests/conftest.py": {
        "config_env_file": {
            "name": "config_env_file",
            "location": 10,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "zippy-master/tests/test_hyperparams.py": {
        "yaml_config": {
            "name": "yaml_config",
            "location": 15,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "test_hyperparam_default": {
            "name": "test_hyperparam_default",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "yaml_config": [
                    "IO[str]"
                ]
            }
        },
        "test_hyperparam_with_config": {
            "name": "test_hyperparam_with_config",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "yaml_config": [
                    "IO[str]"
                ]
            }
        },
        "test_hyperparams_with_not_existing_config": {
            "name": "test_hyperparams_with_not_existing_config",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "yaml_config": [
                    "IO[str]"
                ]
            }
        },
        "test_hyperparams_dot_dict_accesses": {
            "name": "test_hyperparams_dot_dict_accesses",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "yaml_config": [
                    "IO[str]"
                ]
            }
        },
        "test_stream_open_hyperparams": {
            "name": "test_stream_open_hyperparams",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "yaml_config": [
                    "IO[str]"
                ]
            }
        },
        "test_not_passing_any_args_should_have_empty_data": {
            "name": "test_not_passing_any_args_should_have_empty_data",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_as_hyperparams": {
            "name": "test_json_as_hyperparams",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "zippy-master/tests/test_json_generator.py": {
        "output_stream": {
            "name": "output_stream",
            "location": 14,
            "return": [
                "",
                "typing.Generator[BytesIO]"
            ],
            "arguments": {}
        },
        "log_file": {
            "name": "log_file",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "single_log_file": {
            "name": "single_log_file",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "log_on_same_line": {
            "name": "log_on_same_line",
            "location": 68,
            "return": [
                "str",
                "Optional[\"Path\"]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "log_comma_separation_same_line": {
            "name": "log_comma_separation_same_line",
            "location": 77,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "empty_log_file": {
            "name": "empty_log_file",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_logfile": {
            "name": "test_logfile",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file": [
                    "str",
                    "bool",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "output_stream": [
                    "str"
                ]
            }
        },
        "test_empty_logfile": {
            "name": "test_empty_logfile",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_log_file": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "output_stream": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[Any], None]]",
                    "bool"
                ]
            }
        },
        "test_single_logfile": {
            "name": "test_single_logfile",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "single_log_file": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "output_stream": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[Any], None]]",
                    "bool"
                ]
            }
        },
        "test_logfile_log_entries_on_same_line": {
            "name": "test_logfile_log_entries_on_same_line",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "log_on_same_line": [
                    "str",
                    "bytes"
                ],
                "output_stream": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_logfile_log_entries_on_same_line_with_comma_separation": {
            "name": "test_logfile_log_entries_on_same_line_with_comma_separation",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "log_comma_separation_same_line": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "bytearray",
                    "Union[bytes, bytearray]",
                    "bytes"
                ],
                "output_stream": [
                    "str",
                    "Callable",
                    "IO[bytes]"
                ]
            }
        }
    },
    "zippy-master/tests/test_log_handler.py": {
        "config_file": {
            "name": "config_file",
            "location": 17,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_zippy_should_place_log_in_output_log_dir": {
            "name": "test_zippy_should_place_log_in_output_log_dir",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_a_rotating_log_handler": {
            "name": "test_is_a_rotating_log_handler",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_logger_positive": {
            "name": "test_get_logger_positive",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "pathlib.Path",
                    "pathlib.PosixPath"
                ]
            }
        },
        "test_get_logger_on_no_key_found": {
            "name": "test_get_logger_on_no_key_found",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "pathlib.Path",
                    "pathlib.PosixPath"
                ]
            }
        },
        "test_get_logger_on_logger_set_on_config": {
            "name": "test_get_logger_on_logger_set_on_config",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "config_env_file": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PosixPath"
                ]
            }
        }
    },
    "zippy-master/tests/test_parse_email.py": {
        "test_message_parsing": {
            "name": "test_message_parsing",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "zippy-master/tests/test_utils_config.py": {
        "test_get_config": {
            "name": "test_get_config",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "config_env_file": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_get_config_negative": {
            "name": "test_get_config_negative",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "config_env_file": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "zippy-master/tests/__init__.py": {},
    "zippy-master/tests/test_client/conftest.py": {
        "setup_file": {
            "name": "setup_file",
            "location": 11,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "zippy-master/tests/test_client/test_client_integration.py": {
        "logger": {
            "name": "logger",
            "location": 37,
            "return": [
                "int",
                "str",
                "bytearray"
            ],
            "arguments": {}
        },
        "config": {
            "name": "config",
            "location": 47,
            "return": [
                "",
                "typing.Generator[dict[typing.Text, typing.Union[int,typing.Text]]]"
            ],
            "arguments": {}
        },
        "imap_client": {
            "name": "imap_client",
            "location": 65,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Optional[Iterable[str]]",
                    "None"
                ],
                "logger": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Optional[Iterable[str]]",
                    "None"
                ]
            }
        },
        "create_required_folders": {
            "name": "create_required_folders",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "logged_in_client": [
                    "bool"
                ],
                "logger": [
                    "bool"
                ]
            }
        },
        "random_mail": {
            "name": "random_mail",
            "location": 82,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "logged_in_client": [
                    "str"
                ],
                "config": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "logged_in_client": {
            "name": "logged_in_client",
            "location": 109,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]"
                ],
                "logger": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "flagged_random_mail": {
            "name": "flagged_random_mail",
            "location": 126,
            "return": [
                "str",
                "int",
                "list[str]",
                "Optional[str]"
            ],
            "arguments": {
                "logged_in_client": [
                    "list[str]",
                    "logging.Logger",
                    "List[str]"
                ],
                "random_mail": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "random_folder": {
            "name": "random_folder",
            "location": 136,
            "return": [
                "",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "logged_in_client": [
                    "str"
                ]
            }
        },
        "teardown": {
            "name": "teardown",
            "location": 150,
            "return": [
                "",
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "logged_in_client": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "wait_till_mail_appears": {
            "name": "wait_till_mail_appears",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "uid": [
                    "str",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "str",
                    "Optional[\"ParcelMeasurements\"]",
                    "bool"
                ]
            }
        },
        "test_get_server_ssl_error": {
            "name": "test_get_server_ssl_error",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict"
                ],
                "logger": [
                    "dict",
                    "dict[, ]"
                ],
                "caplog": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_get_server_socket_error": {
            "name": "test_get_server_socket_error",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict"
                ],
                "logger": [
                    "dict",
                    "dict[, ]"
                ],
                "caplog": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "test_flag_happy_path": {
            "name": "test_flag_happy_path",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "logged_in_client": [
                    "dict",
                    "dict[, ]"
                ],
                "random_mail": [
                    "dict",
                    "dict[, ]"
                ],
                "logger": [],
                "caplog": []
            }
        },
        "test_flag_if_already_exists": {
            "name": "test_flag_if_already_exists",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "logged_in_client": [
                    "int",
                    "str"
                ],
                "flagged_random_mail": [
                    "int",
                    "str"
                ],
                "logger": [
                    "str",
                    "int",
                    "bool"
                ],
                "caplog": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_flag_if_already_exists_with_not_existing_mail_id": {
            "name": "test_flag_if_already_exists_with_not_existing_mail_id",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "logged_in_client": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "random_mail": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Optional[int]"
                ],
                "logger": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "caplog": [
                    "List[Callable]",
                    "str",
                    "list[typing.Callable[, ]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "teardown": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_create_folder_if_not_exists_happy_path": {
            "name": "test_create_folder_if_not_exists_happy_path",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "logged_in_client": [
                    "logging.Logger"
                ],
                "logger": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "teardown": [
                    "geven_socket3.socket"
                ],
                "caplog": []
            }
        },
        "test_create_folder_if_not_exists_already_exists": {
            "name": "test_create_folder_if_not_exists_already_exists",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "logged_in_client": [],
                "logger": [
                    "List[str]",
                    "str",
                    "list[str]"
                ],
                "caplog": []
            }
        },
        "test_email_shift": {
            "name": "test_email_shift",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "logged_in_client": [],
                "random_folder": [],
                "random_mail": [],
                "logger": [],
                "teardown": [],
                "caplog": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "test_email_shift_not_existing_folder": {
            "name": "test_email_shift_not_existing_folder",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "logged_in_client": [],
                "random_mail": [],
                "logger": [],
                "teardown": [],
                "caplog": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "test_process_mails_happy_path_important": {
            "name": "test_process_mails_happy_path_important",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "logged_in_client": [
                    "str"
                ],
                "random_mail": [],
                "teardown": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None"
                ],
                "logger": [
                    "str",
                    "mock.MagicMock"
                ]
            }
        },
        "test_process_mails_happy_path_urgent": {
            "name": "test_process_mails_happy_path_urgent",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "logged_in_client": [
                    "str"
                ],
                "random_mail": [],
                "teardown": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None"
                ],
                "logger": [
                    "str",
                    "mock.MagicMock"
                ]
            }
        },
        "test_process_mails_happy_path_processed_mark": {
            "name": "test_process_mails_happy_path_processed_mark",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "logged_in_client": [],
                "random_mail": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "test_process_mails_fetch_correct_message": {
            "name": "test_process_mails_fetch_correct_message",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "logged_in_client": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "random_mail": [
                    "str"
                ],
                "logger": [
                    "str"
                ]
            }
        },
        "test_retrieve_emails_with_wrong_credentials": {
            "name": "test_retrieve_emails_with_wrong_credentials",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "imap_client": [],
                "random_mail": [
                    "bool",
                    "Callable[[], int]",
                    "typing.Callable[[], int]"
                ],
                "logger": [],
                "caplog": []
            }
        },
        "test_retreive_emails_happy_path": {
            "name": "test_retreive_emails_happy_path",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "imap_client": [],
                "random_mail": [
                    "str",
                    "slice"
                ],
                "logger": [],
                "caplog": []
            }
        },
        "test_process_mails_happy_path_important.remove_message": {
            "name": "remove_message",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_process_mails_happy_path_urgent.remove_message": {
            "name": "remove_message",
            "location": 344,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "zippy-master/tests/test_client/test_client_main.py": {
        "test_email_auth_user_repr": {
            "name": "test_email_auth_user_repr",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_email_auth_user_default_args": {
            "name": "test_email_auth_user_default_args",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_empty_user": {
            "name": "test_get_empty_user",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_single_user_without_name": {
            "name": "test_get_single_user_without_name",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_single_user_with_name": {
            "name": "test_get_single_user_with_name",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_single_user_without_essential_values": {
            "name": "test_get_single_user_without_essential_values",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_multiple_user_without_error": {
            "name": "test_get_multiple_user_without_error",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_users_empty_config_raise_error": {
            "name": "test_get_users_empty_config_raise_error",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_with_logging": {
            "name": "test_with_logging",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_with_logging.test_func": {
            "name": "test_func",
            "location": 125,
            "return": [
                "tuple[int]",
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "w": [
                    "float",
                    "Dict[str, str]"
                ],
                "x": [
                    "float",
                    "Dict[str, str]"
                ],
                "y": [
                    "int",
                    "float",
                    "Dict[str, str]"
                ],
                "z": [
                    "int",
                    "float",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "zippy-master/zippy/__init__.py": {},
    "zippy-master/zippy/client/main.py": {
        "get_users": {
            "name": "get_users",
            "location": 64,
            "return": [
                "List[EmailAuthUser]"
            ],
            "arguments": {
                "client_config": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict",
                    "yacron.config.JobConfig",
                    "Optional[dict]",
                    "jumeaux.domain.config.vo.Config"
                ]
            }
        },
        "with_logging": {
            "name": "with_logging",
            "location": 75,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Optional[Callable]"
                ]
            }
        },
        "get_client": {
            "name": "get_client",
            "location": 96,
            "return": [
                "Callable",
                "IMAPClient"
            ],
            "arguments": {
                "config": [
                    "dict"
                ],
                "logger": [
                    "logging.Logger"
                ],
                "protocol": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "cmk.base.config.ConfigCache"
                ],
                "verify_cert": [
                    "bool"
                ]
            }
        },
        "create_folder_if_not_exists": {
            "name": "create_folder_if_not_exists",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "bytes",
                    "config.config.Settings"
                ],
                "folder": [
                    "str"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "shift_mail": {
            "name": "shift_mail",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "dict",
                    "Callable"
                ],
                "uid": [
                    "int"
                ],
                "source": [
                    "str"
                ],
                "destination": [
                    "str"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "mark_processed": {
            "name": "mark_processed",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "dict"
                ],
                "uid": [
                    "int"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "process_mail": {
            "name": "process_mail",
            "location": 175,
            "return": [
                "ProcessedMessage"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "logging.Logger"
                ],
                "uid": [
                    "int"
                ],
                "message_data": [
                    "dict"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "process_mails": {
            "name": "process_mails",
            "location": 217,
            "return": [
                "Dict[(int, ProcessedMessage)]"
            ],
            "arguments": {
                "client": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "uids": [
                    "List[int]"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "retrieve_new_emails": {
            "name": "retrieve_new_emails",
            "location": 229,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "client": [
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.Address"
                ],
                "user": [
                    "EmailAuthUser"
                ],
                "logger": [
                    "Optional[logging.Logger]"
                ]
            }
        },
        "online_train_all": {
            "name": "online_train_all",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "processed_messages": [
                    "Dict[(int, ProcessedMessage)]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 274,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[, ]",
                    "dict",
                    "virgene.config.Config",
                    "baseplate.lib.config.RawConfig"
                ],
                "user": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "client": [
                    "dict",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "logger": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "flask.config.Config",
                    "logging.Logger",
                    "Dict[str, Any]",
                    "logging.LoggerAdapter"
                ]
            }
        },
        "EmailAuthUser.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "with_logging.decorator_logger": {
            "name": "decorator_logger",
            "location": 80,
            "return": [
                "int",
                "bytearray",
                "Optional[str]",
                "IO"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "with_logging.decorator_logger.wrapper": {
            "name": "wrapper",
            "location": 82,
            "return": [
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "zippy-master/zippy/pipeline/data/parse_email.py": {
        "get_text_from_email": {
            "name": "get_text_from_email",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "get_from_message": {
            "name": "get_from_message",
            "location": 15,
            "return": [
                "Dict[(Any, Union[(bool, str, List[str])])]"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        }
    },
    "zippy-master/zippy/pipeline/model/rank_message.py": {
        "create_user_model": {
            "name": "create_user_model",
            "location": 35,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, int)]"
            ],
            "arguments": {
                "user": [
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "dict[str, list[]]",
                    "Dict[str, list]",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "get_sequence": {
            "name": "get_sequence",
            "location": 73,
            "return": [
                "str",
                "bool",
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "tokenizer": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "load_weights": {
            "name": "load_weights",
            "location": 81,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "user": [
                    "str"
                ]
            }
        },
        "get_weights": {
            "name": "get_weights",
            "location": 100,
            "return": [
                "int",
                "str",
                "bool",
                "OrderedDict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "search_term": [
                    "str",
                    "int",
                    "Union[tuple, list]",
                    "tuple[]",
                    "list[]"
                ],
                "weight_df": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "term": [
                    "bool",
                    "str",
                    "List[float]",
                    "dict"
                ]
            }
        },
        "get_weights_from_sender": {
            "name": "get_weights_from_sender",
            "location": 121,
            "return": [
                "int",
                "Dict[str, bool]",
                "Callable",
                "dict",
                "Exception"
            ],
            "arguments": {
                "message": [
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "from_weight": [
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "get_weights_from_thread": {
            "name": "get_weights_from_thread",
            "location": 130,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Callable",
                    "tensorflow.estimator.Estimator",
                    "float",
                    "Iterable[str]"
                ],
                "thread_weights": [
                    "typing.Mapping",
                    "bool",
                    "Mapping[str, Any]",
                    "str",
                    "pathlib.Path"
                ],
                "count_vector": [
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "get_weights_from_terms": {
            "name": "get_weights_from_terms",
            "location": 157,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "list[int]",
                    "List[int]",
                    "list[pathlib.Path]",
                    "List[pathlib.Path]",
                    "Optional[numpy.dtype]"
                ],
                "msg_term_weights": [
                    "str",
                    "bool",
                    "TextIO",
                    "typing.TextIO"
                ],
                "count_vector": []
            }
        },
        "calculate_rank": {
            "name": "calculate_rank",
            "location": 169,
            "return": [
                "list"
            ],
            "arguments": {
                "msg": [
                    "bytes",
                    "dict",
                    "Any",
                    "Optional[Union[Any, Any]]",
                    "Dict[str, Any]"
                ],
                "weights": [
                    "float",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "rank_message": {
            "name": "rank_message",
            "location": 217,
            "return": [
                "list"
            ],
            "arguments": {
                "message": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "zippy-master/zippy/pipeline/model/update_dataset.py": {
        "load_weights": {
            "name": "load_weights",
            "location": 24,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "user": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "update_from_weights": {
            "name": "update_from_weights",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Optional[Dict]"
                ],
                "from_weight": [
                    "Sequence[int]",
                    "Callable",
                    "pandas.DataFrame",
                    "Dict[str, numpy.ndarray]"
                ]
            }
        },
        "update_thread_senders_weights": {
            "name": "update_thread_senders_weights",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "float",
                    "int",
                    "mode.utils.imports.SymbolArg[Type[mode.SupervisorStrategyT]]",
                    "Iterable[T]"
                ],
                "thread_senders_weights": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Callable",
                    "Iterable[T]"
                ]
            }
        },
        "update_thread_weights": {
            "name": "update_thread_weights",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "Mapping[str, object]",
                    "bool"
                ],
                "thread_weights": [
                    "Counter",
                    "int",
                    "dict"
                ]
            }
        },
        "update_thread_terms_weights": {
            "name": "update_thread_terms_weights",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Mapping"
                ],
                "thread_term_weights": [
                    "dict",
                    "int",
                    "bool",
                    "str"
                ],
                "thread_weights": [
                    "bool",
                    "list[int]",
                    "List[int]",
                    "typing.Counter",
                    "Counter",
                    "int"
                ],
                "thread_tdm": [
                    "int",
                    "None",
                    "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[]",
                    "pandas.DataFrame",
                    "list"
                ]
            }
        },
        "update_msg_terms_weights": {
            "name": "update_msg_terms_weights",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Mapping"
                ],
                "msg_term_weights": [
                    "list[dict[str, typing.Any]]",
                    "pandas.DataFrame",
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[str, int]",
                    "int",
                    "raiden.utils.ChannelMap"
                ],
                "msg_tdm": [
                    "str",
                    "tuple[typing.Sequence[]]",
                    "raiden.utils.ChannelMap",
                    "raiden.utils.Tuple[raiden.utils.Tuple[raiden.utils.TokenAddress, raiden.utils.ProportionalFeeAmount], ...]",
                    "Tuple[Sequence]"
                ]
            }
        },
        "add_new_email": {
            "name": "add_new_email",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "rank_df": [
                    "str",
                    "bool",
                    "cmk.utils.type_defs.HostName"
                ],
                "rank": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "priority": [
                    "str"
                ],
                "intent": [
                    "str"
                ]
            }
        },
        "online_training": {
            "name": "online_training",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [],
                "rank": [
                    "str",
                    "int",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "priority": [
                    "str",
                    "int",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "intent": [
                    "str",
                    "int",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "zippy-master/zippy/utils/config.py": {
        "get_config": {
            "name": "get_config",
            "location": 8,
            "return": [
                "str",
                "dict[str, str]",
                "pathlib.Path",
                "dict[, ]",
                "List[str]",
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Optional[str]",
                    "None",
                    "tuple",
                    "tuple[]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "zippy-master/zippy/utils/json_generator.py": {
        "write_json_output": {
            "name": "write_json_output",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "input_stream": [
                    "float",
                    "str",
                    "bytes"
                ],
                "output_stream": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "zippy-master/zippy/utils/log_handler.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 27,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "ZippyDisplayFileLogHandler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "ZippyFileLogHandler.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "zippy-master/zippy/utils/params.py": {
        "HyperParams.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "Optional[str]"
                ],
                "stream": [
                    "Optional[IO[str]]"
                ],
                "config": [
                    "Optional[str]"
                ]
            }
        },
        "HyperParams.__getattr__": {
            "name": "__getattr__",
            "location": 49,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "HyperParams.__setattr__": {
            "name": "__setattr__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        },
        "HyperParams.__delattr__": {
            "name": "__delattr__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        }
    },
    "zippy-master/zippy/utils/__init__.py": {}
}
{
    "zulip-terminal-main/setup.py": {
        "long_description": {
            "name": "long_description",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "PyTest.initialize_options": {
            "name": "initialize_options",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyTest.run_tests": {
            "name": "run_tests",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zulip-terminal-main/tests/conftest.py": {
        "no_requests": {
            "name": "no_requests",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "no_asynch": {
            "name": "no_asynch",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "stream_button": {
            "name": "stream_button",
            "location": 46,
            "return": [
                "StreamButton"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "topic_button": {
            "name": "topic_button",
            "location": 68,
            "return": [
                "TopicButton"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "user_button": {
            "name": "user_button",
            "location": 85,
            "return": [
                "UserButton"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "msg_box": {
            "name": "msg_box",
            "location": 103,
            "return": [
                "MessageBox"
            ],
            "arguments": {
                "mocker": [],
                "messages_successful_response": []
            }
        },
        "users_fixture": {
            "name": "users_fixture",
            "location": 120,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,None,bool]]]"
            ],
            "arguments": {
                "logged_on_user": []
            }
        },
        "tidied_user_info_response": {
            "name": "tidied_user_info_response",
            "location": 153,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool,None]]"
            ],
            "arguments": {}
        },
        "_all_users_by_id": {
            "name": "_all_users_by_id",
            "location": 169,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "initial_data": []
            }
        },
        "_cross_realm_bots_by_id": {
            "name": "_cross_realm_bots_by_id",
            "location": 177,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "initial_data": []
            }
        },
        "user_groups_fixture": {
            "name": "user_groups_fixture",
            "location": 182,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,list[int]]]]"
            ],
            "arguments": {}
        },
        "logged_on_user": {
            "name": "logged_on_user",
            "location": 198,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Text]]"
            ],
            "arguments": {}
        },
        "general_stream": {
            "name": "general_stream",
            "location": 207,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int,list[int]]]"
            ],
            "arguments": {}
        },
        "secret_stream": {
            "name": "secret_stream",
            "location": 233,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int,list[int]]]"
            ],
            "arguments": {}
        },
        "web_public_stream": {
            "name": "web_public_stream",
            "location": 258,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int,list[int]]]"
            ],
            "arguments": {}
        },
        "streams_fixture": {
            "name": "streams_fixture",
            "location": 283,
            "return": [],
            "arguments": {
                "general_stream": [],
                "secret_stream": [],
                "web_public_stream": []
            }
        },
        "realm_emojis": {
            "name": "realm_emojis",
            "location": 316,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[bool,typing.Text]]]"
            ],
            "arguments": {}
        },
        "realm_emojis_data": {
            "name": "realm_emojis_data",
            "location": 349,
            "return": [
                "OrderedDict"
            ],
            "arguments": {}
        },
        "unicode_emojis": {
            "name": "unicode_emojis",
            "location": 360,
            "return": [
                "OrderedDict"
            ],
            "arguments": {}
        },
        "zulip_emoji": {
            "name": "zulip_emoji",
            "location": 386,
            "return": [
                "OrderedDict"
            ],
            "arguments": {}
        },
        "display_recipient_factory": {
            "name": "display_recipient_factory",
            "location": 397,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "recipient_details_list": []
            }
        },
        "msg_template_factory": {
            "name": "msg_template_factory",
            "location": 414,
            "return": [
                "zulipterminal.api_types.Message"
            ],
            "arguments": {
                "msg_id": [],
                "msg_type": [],
                "timestamp": []
            }
        },
        "stream_msg_template": {
            "name": "stream_msg_template",
            "location": 460,
            "return": [],
            "arguments": {}
        },
        "extra_stream_msg_template": {
            "name": "extra_stream_msg_template",
            "location": 468,
            "return": [],
            "arguments": {}
        },
        "pm_template": {
            "name": "pm_template",
            "location": 476,
            "return": [],
            "arguments": {}
        },
        "group_pm_template": {
            "name": "group_pm_template",
            "location": 482,
            "return": [],
            "arguments": {}
        },
        "private_message_fixture": {
            "name": "private_message_fixture",
            "location": 490,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "message_fixture": {
            "name": "message_fixture",
            "location": 498,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "messages_successful_response": {
            "name": "messages_successful_response",
            "location": 509,
            "return": [],
            "arguments": {
                "stream_msg_template": [],
                "pm_template": [],
                "group_pm_template": []
            }
        },
        "zulip_version": {
            "name": "zulip_version",
            "location": 535,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "message_history": {
            "name": "message_history",
            "location": 578,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "topics": {
            "name": "topics",
            "location": 586,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "mentioned_messages_combination": {
            "name": "mentioned_messages_combination",
            "location": 612,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "initial_data": {
            "name": "initial_data",
            "location": 620,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[bool,typing.Text]]],int,dict[typing.Text, typing.Union[int,list[dict[typing.Text, typing.Union[int,typing.Text,list[int]]]]]],dict[typing.Text, dict[typing.Text, dict[typing.Text, typing.Union[bool,typing.Text]]]],list[int]]]"
            ],
            "arguments": {
                "logged_on_user": [],
                "users_fixture": [],
                "streams_fixture": [],
                "realm_emojis": []
            }
        },
        "initial_index": {
            "name": "initial_index",
            "location": 803,
            "return": [],
            "arguments": {}
        },
        "empty_index": {
            "name": "empty_index",
            "location": 808,
            "return": [],
            "arguments": {
                "stream_msg_template": [],
                "pm_template": [],
                "group_pm_template": []
            }
        },
        "index_all_messages": {
            "name": "index_all_messages",
            "location": 837,
            "return": [],
            "arguments": {
                "empty_index": []
            }
        },
        "index_stream": {
            "name": "index_stream",
            "location": 847,
            "return": [],
            "arguments": {
                "empty_index": []
            }
        },
        "index_topic": {
            "name": "index_topic",
            "location": 858,
            "return": [],
            "arguments": {
                "empty_index": []
            }
        },
        "index_multiple_topic_msg": {
            "name": "index_multiple_topic_msg",
            "location": 869,
            "return": [],
            "arguments": {
                "empty_index": [],
                "extra_stream_msg_template": []
            }
        },
        "index_user": {
            "name": "index_user",
            "location": 887,
            "return": [],
            "arguments": {
                "empty_index": []
            }
        },
        "index_user_multiple": {
            "name": "index_user_multiple",
            "location": 900,
            "return": [],
            "arguments": {
                "empty_index": []
            }
        },
        "index_all_starred": {
            "name": "index_all_starred",
            "location": 923,
            "return": [],
            "arguments": {
                "empty_index": [],
                "request": []
            }
        },
        "index_all_mentions": {
            "name": "index_all_mentions",
            "location": 935,
            "return": [],
            "arguments": {
                "empty_index": [],
                "mentioned_messages_combination": []
            }
        },
        "index_search_messages": {
            "name": "index_search_messages",
            "location": 954,
            "return": [],
            "arguments": {
                "empty_index": []
            }
        },
        "user_profile": {
            "name": "user_profile",
            "location": 962,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Text]]"
            ],
            "arguments": {
                "logged_on_user": []
            }
        },
        "error_response": {
            "name": "error_response",
            "location": 978,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "user_dict": {
            "name": "user_dict",
            "location": 983,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "logged_on_user": []
            }
        },
        "user_id_email_dict": {
            "name": "user_id_email_dict",
            "location": 1046,
            "return": [
                "dict[int, typing.Text]"
            ],
            "arguments": {
                "logged_on_user": []
            }
        },
        "user_list": {
            "name": "user_list",
            "location": 1062,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "logged_on_user": []
            }
        },
        "streams": {
            "name": "streams",
            "location": 1127,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,int]]]"
            ],
            "arguments": {}
        },
        "user_id": {
            "name": "user_id",
            "location": 1172,
            "return": [],
            "arguments": {
                "logged_on_user": []
            }
        },
        "stream_dict": {
            "name": "stream_dict",
            "location": 1182,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "streams_fixture": []
            }
        },
        "processed_muted_topics": {
            "name": "processed_muted_topics",
            "location": 1202,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "classified_unread_counts": {
            "name": "classified_unread_counts",
            "location": 1210,
            "return": [
                "dict[typing.Text, typing.Union[int,dict[tuple[typing.Union[int,typing.Text]], int],dict[int, int],dict[set[int], int]]]"
            ],
            "arguments": {}
        },
        "mouse_scroll_event": {
            "name": "mouse_scroll_event",
            "location": 1247,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "navigation_key": {
            "name": "navigation_key",
            "location": 1258,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "widget_size": {
            "name": "widget_size",
            "location": 1267,
            "return": [],
            "arguments": {}
        },
        "widget_size._widget_size": {
            "name": "_widget_size",
            "location": 1272,
            "return": [
                "tuple[int]",
                "tuple[]"
            ],
            "arguments": {
                "widget": []
            }
        }
    },
    "zulip-terminal-main/tests/__init__.py": {},
    "zulip-terminal-main/tests/cli/test_run.py": {
        "test_in_color": {
            "name": "test_in_color",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "color": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "text": [
                    "typing.Text"
                ]
            }
        },
        "test_get_login_id": {
            "name": "test_get_login_id",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "json": [],
                "label": [
                    "str"
                ]
            }
        },
        "test_main_help": {
            "name": "test_main_help",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "options": [
                    "str"
                ]
            }
        },
        "minimal_zuliprc": {
            "name": "minimal_zuliprc",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_valid_zuliprc_but_no_connection": {
            "name": "test_valid_zuliprc_but_no_connection",
            "location": 115,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "capsys": [],
                "mocker": [],
                "minimal_zuliprc": [
                    "bool"
                ],
                "server_connection_error": [
                    "typing.Text"
                ]
            }
        },
        "test_warning_regarding_incomplete_theme": {
            "name": "test_warning_regarding_incomplete_theme",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "mocker": [],
                "minimal_zuliprc": [
                    "str",
                    "float",
                    "int",
                    "list[int]"
                ],
                "bad_theme": [
                    "float",
                    "bool"
                ],
                "expected_complete_incomplete_themes": [
                    "str",
                    "bool"
                ],
                "expected_warning": [
                    "str",
                    "int",
                    "typing.Sequence[int]"
                ],
                "server_connection_error": [
                    "typing.Text"
                ]
            }
        },
        "test_zt_version": {
            "name": "test_zt_version",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "options": [
                    "str"
                ]
            }
        },
        "test_parse_args_valid_autohide_option": {
            "name": "test_parse_args_valid_autohide_option",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "option": [
                    "list[str]"
                ],
                "autohide": [
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "test_main_multiple_autohide_options": {
            "name": "test_main_multiple_autohide_options",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "options": []
            }
        },
        "test__parse_args_valid_notify_option": {
            "name": "test__parse_args_valid_notify_option",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "option": [
                    "str",
                    "list[str]"
                ],
                "notify_option": [
                    "str"
                ]
            }
        },
        "test_main_multiple_notify_options": {
            "name": "test_main_multiple_notify_options",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "options": []
            }
        },
        "unreadable_dir": {
            "name": "unreadable_dir",
            "location": 288,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_main_cannot_write_zuliprc_given_good_credentials": {
            "name": "test_main_cannot_write_zuliprc_given_good_credentials",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "capsys": [],
                "mocker": [],
                "unreadable_dir": [
                    "str",
                    "None"
                ],
                "path_to_use": [
                    "str"
                ],
                "expected_exception": [
                    "str"
                ]
            }
        },
        "parameterized_zuliprc": {
            "name": "parameterized_zuliprc",
            "location": 344,
            "return": [],
            "arguments": {
                "tmp_path": [
                    "str",
                    "tuple[typing.Union[str,...]]",
                    "None"
                ]
            }
        },
        "test_successful_main_function_with_config": {
            "name": "test_successful_main_function_with_config",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "mocker": [],
                "parameterized_zuliprc": [
                    "str"
                ],
                "config_key": [
                    "int",
                    "str"
                ],
                "config_value": [
                    "int",
                    "str"
                ],
                "footlinks_output": [
                    "str"
                ]
            }
        },
        "test_main_error_with_invalid_zuliprc_options": {
            "name": "test_main_error_with_invalid_zuliprc_options",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "mocker": [],
                "parameterized_zuliprc": [],
                "zulip_config": [],
                "error_message": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_exit_with_error": {
            "name": "test_exit_with_error",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "error_code": [
                    "typing.Callable[, ]"
                ],
                "helper_text": [
                    "typing.Callable[, ]"
                ],
                "error_message": [
                    "typing.Text"
                ]
            }
        },
        "test__write_zuliprc__success": {
            "name": "test__write_zuliprc__success",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "None"
                ],
                "id": [
                    "typing.Text"
                ],
                "key": [
                    "typing.Text"
                ],
                "url": [
                    "typing.Text"
                ]
            }
        },
        "test__write_zuliprc__fail_file_exists": {
            "name": "test__write_zuliprc__fail_file_exists",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "minimal_zuliprc": [
                    "str",
                    "bool"
                ],
                "tmp_path": [
                    "str"
                ],
                "id": [
                    "typing.Text"
                ],
                "key": [
                    "typing.Text"
                ],
                "url": [
                    "typing.Text"
                ]
            }
        },
        "test_show_error_if_loading_zuliprc_with_open_permissions": {
            "name": "test_show_error_if_loading_zuliprc_with_open_permissions",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "minimal_zuliprc": [],
                "mode": [
                    "list[str]"
                ]
            }
        },
        "parameterized_zuliprc.func": {
            "name": "func",
            "location": 345,
            "return": [
                "str"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "zulip-terminal-main/tests/cli/__init__.py": {},
    "zulip-terminal-main/tests/config/test_color.py": {
        "test_color_properties": {
            "name": "test_color_properties",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "zulip-terminal-main/tests/config/test_keys.py": {
        "valid_command": {
            "name": "valid_command",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "invalid_command": {
            "name": "invalid_command",
            "location": 20,
            "return": [
                "int",
                "list",
                "float"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "test_keys_for_command": {
            "name": "test_keys_for_command",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_command": [
                    "str",
                    "Union[str,Iterable[str]]",
                    "Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_primary_key_for_command": {
            "name": "test_primary_key_for_command",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_command": [
                    "Dict[str,str]",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "test_keys_for_command_invalid_command": {
            "name": "test_keys_for_command_invalid_command",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_command": [
                    "str",
                    "pytest_mock.plugin.MockFixture",
                    "dss.config.Replica"
                ]
            }
        },
        "test_keys_for_command_identity": {
            "name": "test_keys_for_command_identity",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_command": [
                    "bytes",
                    "Dict[str,str]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "test_is_command_key_matching_keys": {
            "name": "test_is_command_key_matching_keys",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_command": [
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "test_is_command_key_nonmatching_keys": {
            "name": "test_is_command_key_nonmatching_keys",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_command": [
                    "bytes",
                    "Dict"
                ]
            }
        },
        "test_is_command_key_invalid_command": {
            "name": "test_is_command_key_invalid_command",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_command": [
                    "int",
                    "str"
                ]
            }
        },
        "test_HELP_is_not_allowed_as_tip": {
            "name": "test_HELP_is_not_allowed_as_tip",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_commands_for_random_tips": {
            "name": "test_commands_for_random_tips",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "pytest_mock.MockFixture"
                ]
            }
        },
        "test_updated_urwid_command_map": {
            "name": "test_updated_urwid_command_map",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "zulip-terminal-main/tests/config/test_themes.py": {
        "test_all_themes": {
            "name": "test_all_themes",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_builtin_theme_completeness": {
            "name": "test_builtin_theme_completeness",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "theme_name": [
                    "str"
                ]
            }
        },
        "test_complete_and_incomplete_themes": {
            "name": "test_complete_and_incomplete_themes",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_themefile": {
            "name": "test_parse_themefile",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict"
                ],
                "color_depth": [
                    "str",
                    "int",
                    "Iterable[tuple[Union[str,dict]]]",
                    "bool",
                    "Iterable[Tuple[str,dict]]"
                ],
                "expected_urwid_theme": [
                    "str",
                    "int",
                    "Iterable[tuple[Union[str,dict]]]",
                    "bool",
                    "Iterable[Tuple[str,dict]]"
                ]
            }
        },
        "test_add_pygments_style": {
            "name": "test_add_pygments_style",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]"
                ],
                "theme_meta": [
                    "str",
                    "int",
                    "Union[str,float]",
                    "bytes",
                    "float",
                    "Tuple[str,str,str]",
                    "Tuple[Union[str,str,str]]"
                ],
                "expected_styles": [
                    "str",
                    "List[tuple[Union[str,str]]]",
                    "bool",
                    "List[Tuple[str,str]]"
                ]
            }
        },
        "test_validate_colors": {
            "name": "test_validate_colors",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "theme_name": [
                    "str"
                ],
                "color_depth": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "zulip-terminal-main/tests/core/test_core.py": {
        "TestController.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestController.controller": {
            "name": "controller",
            "location": 37,
            "return": [
                "Controller"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestController.test_initialize_controller": {
            "name": "test_initialize_controller",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "int"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "TestController.test_initial_editor_mode": {
            "name": "test_initial_editor_mode",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "TestController.test_current_editor_error_if_no_editor": {
            "name": "test_current_editor_error_if_no_editor",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "TestController.test_editor_mode_entered_from_initial": {
            "name": "test_editor_mode_entered_from_initial",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": []
            }
        },
        "TestController.test_editor_mode_error_on_multiple_enter": {
            "name": "test_editor_mode_error_on_multiple_enter",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": []
            }
        },
        "TestController.test_editor_mode_exits_after_entering": {
            "name": "test_editor_mode_exits_after_entering",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": []
            }
        },
        "TestController.test_narrow_to_stream": {
            "name": "test_narrow_to_stream",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "index_stream": [
                    "str"
                ],
                "stream_id": [
                    "int"
                ],
                "stream_name": [
                    "typing.Text"
                ]
            }
        },
        "TestController.test_narrow_to_topic": {
            "name": "test_narrow_to_topic",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "index_multiple_topic_msg": [],
                "initial_narrow": [
                    "bool"
                ],
                "initial_stream_id": [],
                "anchor": [
                    "typing.Mapping"
                ],
                "expected_final_focus": [
                    "str"
                ],
                "stream_name": [
                    "typing.Text"
                ],
                "topic_name": [
                    "typing.Text"
                ],
                "stream_id": [
                    "int"
                ]
            }
        },
        "TestController.test_narrow_to_user": {
            "name": "test_narrow_to_user",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "index_user": [
                    "str"
                ],
                "user_email": [
                    "typing.Text"
                ],
                "user_id": [
                    "int"
                ]
            }
        },
        "TestController.test_narrow_to_all_messages": {
            "name": "test_narrow_to_all_messages",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "index_all_messages": [
                    "list[D]"
                ],
                "anchor": [
                    "int",
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "expected_final_focus_msg_id": [
                    "str",
                    "int"
                ]
            }
        },
        "TestController.test_narrow_to_all_pm": {
            "name": "test_narrow_to_all_pm",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "index_user": []
            }
        },
        "TestController.test_narrow_to_all_starred": {
            "name": "test_narrow_to_all_starred",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "index_all_starred": [
                    "list[D]"
                ]
            }
        },
        "TestController.test_narrow_to_all_mentions": {
            "name": "test_narrow_to_all_mentions",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "index_all_mentions": [
                    "list[D]"
                ]
            }
        },
        "TestController.test_copy_to_clipboard_no_exception": {
            "name": "test_copy_to_clipboard_no_exception",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text_to_copy": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "float"
                ],
                "pasted_text": [
                    "str"
                ],
                "expected_result": [
                    "bool",
                    "typing.Mapping",
                    "str",
                    "None",
                    "typing.Sequence[str]"
                ],
                "mocker": [],
                "controller": [],
                "text_category": [
                    "typing.Text"
                ]
            }
        },
        "TestController.test_copy_to_clipboard_exception": {
            "name": "test_copy_to_clipboard_exception",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "text_category": [
                    "typing.Text"
                ]
            }
        },
        "TestController.test_open_in_browser_success": {
            "name": "test_open_in_browser_success",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "url": [
                    "str"
                ]
            }
        },
        "TestController.test_open_in_browser_fail__no_browser_controller": {
            "name": "test_open_in_browser_fail__no_browser_controller",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": []
            }
        },
        "TestController.test_main": {
            "name": "test_main",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": []
            }
        },
        "TestController.test_stream_muting_confirmation_popup": {
            "name": "test_stream_muting_confirmation_popup",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "muted_streams": [
                    "str",
                    "list[str]",
                    "None",
                    "dict[str, int]"
                ],
                "action": [
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "stream_id": [
                    "int"
                ],
                "stream_name": [
                    "typing.Text"
                ]
            }
        },
        "TestController.test_search_message": {
            "name": "test_search_message",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_narrow": [
                    "bool"
                ],
                "final_narrow": [
                    "list[str]",
                    "bool",
                    "str",
                    "list[A]"
                ],
                "controller": [],
                "mocker": [],
                "msg_ids": [
                    "list[blurr.core.record.Record]",
                    "list[A]"
                ],
                "index_search_messages": [
                    "str"
                ]
            }
        },
        "TestController.test_maximum_popup_dimensions": {
            "name": "test_maximum_popup_dimensions",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "screen_size": [
                    "int",
                    "None",
                    "tuple[]",
                    "list[str]"
                ],
                "expected_popup_size": [
                    "str",
                    "int",
                    "set[str]"
                ]
            }
        },
        "TestController.test_show_typing_notification": {
            "name": "test_show_typing_notification",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "controller": [],
                "active_conversation_info": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "TestController.test_search_message.set_msg_ids": {
            "name": "set_msg_ids",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestController.test_show_typing_notification.mock_typing": {
            "name": "mock_typing",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "zulip-terminal-main/tests/core/__init__.py": {},
    "zulip-terminal-main/tests/emoji_data/test_emoji_data.py": {
        "test_generated_emoji_list_sorted": {
            "name": "test_generated_emoji_list_sorted",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unicode_emojis_fixture_sorted": {
            "name": "test_unicode_emojis_fixture_sorted",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "unicode_emojis": [
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "zulip-terminal-main/tests/helper/test_helper.py": {
        "test_index_messages_narrow_all_messages": {
            "name": "test_index_messages_narrow_all_messages",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "messages_successful_response": [
                    "str"
                ],
                "index_all_messages": [
                    "list[str]",
                    "str",
                    "typing.Callable[L, None]"
                ],
                "initial_index": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "test_index_messages_narrow_stream": {
            "name": "test_index_messages_narrow_stream",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "messages_successful_response": [],
                "index_stream": [
                    "typing.Callable[L, None]"
                ],
                "initial_index": [
                    "list[int]",
                    "int",
                    "str"
                ]
            }
        },
        "test_index_messages_narrow_topic": {
            "name": "test_index_messages_narrow_topic",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "messages_successful_response": [],
                "index_topic": [
                    "typing.Callable[L, None]"
                ],
                "initial_index": [
                    "list[int]",
                    "int",
                    "str"
                ]
            }
        },
        "test_index_messages_narrow_user": {
            "name": "test_index_messages_narrow_user",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "messages_successful_response": [],
                "index_user": [
                    "list[str]"
                ],
                "initial_index": [
                    "list[int]",
                    "float",
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_index_messages_narrow_user_multiple": {
            "name": "test_index_messages_narrow_user_multiple",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "messages_successful_response": [],
                "index_user_multiple": [
                    "int"
                ],
                "initial_index": [
                    "list[int]",
                    "float",
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_index_edited_message": {
            "name": "test_index_edited_message",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "messages_successful_response": [],
                "empty_index": [
                    "str"
                ],
                "edited_msgs": [
                    "dict[str, str]",
                    "dict[, ]",
                    "str"
                ],
                "initial_index": [
                    "list[int]",
                    "int",
                    "str"
                ]
            }
        },
        "test_index_starred": {
            "name": "test_index_starred",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "messages_successful_response": [],
                "empty_index": [
                    "str",
                    "dict[, ]"
                ],
                "msgs_with_stars": [
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "initial_index": [
                    "list[int]",
                    "int",
                    "str"
                ]
            }
        },
        "test_index_mentioned_messages": {
            "name": "test_index_mentioned_messages",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "messages_successful_response": [],
                "empty_index": [
                    "str",
                    "dict[, ]"
                ],
                "mentioned_messages_combination": [],
                "initial_index": [
                    "list[int]",
                    "int",
                    "str"
                ]
            }
        },
        "test_powerset": {
            "name": "test_powerset",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "map_func": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "expected_powerset": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_classify_unread_counts": {
            "name": "test_classify_unread_counts",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "initial_data": [
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]"
                ],
                "stream_dict": [
                    "int"
                ],
                "classified_unread_counts": [
                    "str",
                    "int",
                    "None",
                    "list[str]",
                    "dict[int, dict[, ]]"
                ],
                "muted_topics": [
                    "list[dict[str, typing.Any]]"
                ],
                "muted_streams": [
                    "list[]",
                    "str",
                    "bytes"
                ],
                "vary_in_unreads": [
                    "str",
                    "int",
                    "None",
                    "list[str]",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "test_color_formats": {
            "name": "test_color_formats",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "color": [
                    "str",
                    "int",
                    "dict[str, float]",
                    "list[]"
                ]
            }
        },
        "test_invalid_color_format": {
            "name": "test_invalid_color_format",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "dict[str, typing.Sequence[str]]"
                ],
                "color": [
                    "str"
                ]
            }
        },
        "test_display_error_if_present": {
            "name": "test_display_error_if_present",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "response": [
                    "str"
                ],
                "footer_updated": [
                    "bool",
                    "list[int]",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_notify_if_message_sent_outside_narrow": {
            "name": "test_notify_if_message_sent_outside_narrow",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "req": [
                    "int",
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "narrow": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "footer_updated": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "user_id_email_dict": [
                    "bool",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "test_hash_util_decode": {
            "name": "test_hash_util_decode",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "quoted_string": [
                    "str"
                ],
                "expected_unquoted_string": [
                    "int",
                    "str"
                ]
            }
        },
        "test_get_unused_fence": {
            "name": "test_get_unused_fence",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "message_content": [
                    "str",
                    "typing.Sequence[int]"
                ],
                "expected_fence": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_download_media": {
            "name": "test_download_media",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "media_path": [
                    "typing.Text"
                ],
                "url": [
                    "typing.Text"
                ]
            }
        },
        "test_process_media": {
            "name": "test_process_media",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "platform": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "download_media_called": [
                    "str",
                    "int"
                ],
                "show_media_called": [
                    "str"
                ],
                "tool": [],
                "modified_media_path": [],
                "media_path": [
                    "typing.Text"
                ],
                "link": [
                    "typing.Text"
                ]
            }
        },
        "test_process_media_empty_url": {
            "name": "test_process_media_empty_url",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "link": [
                    "typing.Text"
                ]
            }
        },
        "test_open_media": {
            "name": "test_open_media",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "returncode": [],
                "error": [],
                "tool": [
                    "typing.Text"
                ],
                "media_path": [
                    "typing.Text"
                ]
            }
        },
        "test_open_media_tool_exception": {
            "name": "test_open_media_tool_exception",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "media_path": [
                    "typing.Text"
                ],
                "tool": [
                    "typing.Text"
                ],
                "error": [
                    "list[typing.Union[typing.Text,tuple[typing.Text]]]"
                ]
            }
        }
    },
    "zulip-terminal-main/tests/helper/__init__.py": {},
    "zulip-terminal-main/tests/model/test_model.py": {
        "TestModel.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestModel.model": {
            "name": "model",
            "location": 43,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "initial_data": [
                    "dict[str, typing.Any]",
                    "int",
                    "list[str]"
                ],
                "user_profile": [
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "unicode_emojis": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "TestModel.test_init": {
            "name": "test_init",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "list[str]"
                ],
                "initial_data": [
                    "int",
                    "typing.Sequence[int]"
                ],
                "user_profile": [
                    "bool",
                    "str",
                    "None"
                ],
                "unicode_emojis": [
                    "dict[, ]"
                ],
                "realm_emojis_data": [
                    "dict[, ]"
                ],
                "zulip_emoji": [
                    "dict[, ]"
                ],
                "stream_dict": [
                    "str",
                    "dict[str, str]",
                    "dict[str, list[int]]",
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "TestModel.test_init_user_settings": {
            "name": "test_init_user_settings",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "initial_data": [],
                "sptn": [
                    "str",
                    "int",
                    "None"
                ],
                "expected_sptn_value": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TestModel.test_user_settings_expected_contents": {
            "name": "test_user_settings_expected_contents",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "TestModel.test_init_muted_topics": {
            "name": "test_init_muted_topics",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "initial_data": [],
                "server_response": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "bool"
                ],
                "locally_processed_data": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "float"
                ],
                "zulip_feature_level": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "TestModel.test_init_InvalidAPIKey_response": {
            "name": "test_init_InvalidAPIKey_response",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "initial_data": [
                    "bool"
                ]
            }
        },
        "TestModel.test_init_ZulipError_exception": {
            "name": "test_init_ZulipError_exception",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "initial_data": [],
                "exception_text": [
                    "typing.Text"
                ]
            }
        },
        "TestModel.test_register_initial_desired_events": {
            "name": "test_register_initial_desired_events",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "initial_data": [
                    "bytes"
                ]
            }
        },
        "TestModel.test_normalize_and_cache_message_retention_text": {
            "name": "test_normalize_and_cache_message_retention_text",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "stream_dict": [],
                "to_vary_in_stream_dict": [
                    "tuple[typing.Union[int,int]]"
                ],
                "realm_msg_retention_days": [
                    "typing.Callable[, ]"
                ],
                "feature_level": [
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "expect_msg_retention_text": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "TestModel.test_get_focus_in_current_narrow_individually": {
            "name": "test_get_focus_in_current_narrow_individually",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "None"
                ],
                "msg_id": [
                    "int",
                    "bytearray",
                    "str",
                    "float",
                    "None"
                ],
                "narrow": [
                    "int",
                    "str"
                ]
            }
        },
        "TestModel.test_set_focus_in_current_narrow": {
            "name": "test_set_focus_in_current_narrow",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "list[str]"
                ],
                "model": [],
                "narrow": [],
                "msg_id": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestModel.test_is_search_narrow": {
            "name": "test_is_search_narrow",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "narrow": [
                    "bool",
                    "str"
                ],
                "is_search_narrow": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestModel.test_set_narrow_bad_input": {
            "name": "test_set_narrow_bad_input",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "bad_args": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "TestModel.test_set_narrow_already_set": {
            "name": "test_set_narrow_already_set",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int"
                ],
                "narrow": [
                    "bool"
                ],
                "good_args": [
                    "float"
                ]
            }
        },
        "TestModel.test_set_narrow_not_already_set": {
            "name": "test_set_narrow_not_already_set",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "dict[, ]"
                ],
                "initial_narrow": [
                    "typing.Callable[list[], None]"
                ],
                "narrow": [
                    "float",
                    "str",
                    "None",
                    "int"
                ],
                "good_args": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "user_dict": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "stream_dict": [
                    "str",
                    "dict[str, list[int]]",
                    "bool",
                    "typing.Callable[str, bool]"
                ]
            }
        },
        "TestModel.test_get_message_ids_in_current_narrow": {
            "name": "test_get_message_ids_in_current_narrow",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ],
                "model": [
                    "int",
                    "dict[int, dict[, ]]"
                ],
                "narrow": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "index": [
                    "int",
                    "list[]"
                ],
                "current_ids": [
                    "str"
                ]
            }
        },
        "TestModel.test__fetch_topics_in_streams": {
            "name": "test__fetch_topics_in_streams",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "response": [
                    "bytes"
                ],
                "model": [],
                "return_value": [
                    "bytes"
                ],
                "expected_index": [
                    "str",
                    "None",
                    "list[]",
                    "list[tuple[typing.Union[int,str,str]]]",
                    "list[str]",
                    "int",
                    "list[int]"
                ]
            }
        },
        "TestModel.test_topics_in_stream": {
            "name": "test_topics_in_stream",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "topics_index": [
                    "int",
                    "float",
                    "str",
                    "typing.Mapping"
                ],
                "fetched": [
                    "str"
                ],
                "stream_id": [
                    "int"
                ]
            }
        },
        "TestModel.test_toggle_message_reaction_with_valid_emoji": {
            "name": "test_toggle_message_reaction_with_valid_emoji",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "user_key": [
                    "typing.Callable[, ]"
                ],
                "emoji_unit": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "existing_reactions": [
                    "str"
                ],
                "expected_method": [],
                "msg_id": [
                    "int"
                ]
            }
        },
        "TestModel.test_toggle_message_reaction_with_invalid_emoji": {
            "name": "test_toggle_message_reaction_with_invalid_emoji",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "TestModel.test_has_user_reacted_to_message": {
            "name": "test_has_user_reacted_to_message",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "emoji_code": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "reactions": [
                    "str",
                    "typing.Iterable[]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "expected_has_user_reacted": [
                    "bool",
                    "str"
                ],
                "user_id": [
                    "int"
                ],
                "message_id": [
                    "int"
                ]
            }
        },
        "TestModel.test_send_typing_status_by_user_ids": {
            "name": "test_send_typing_status_by_user_ids",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "status": [
                    "bool",
                    "str"
                ],
                "recipient_user_ids": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestModel.test_send_typing_status_with_no_recipients": {
            "name": "test_send_typing_status_with_no_recipients",
            "location": 727,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "status": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "recipient_user_ids": [
                    "list[]"
                ]
            }
        },
        "TestModel.test_send_typing_status_avoided_due_to_user_setting": {
            "name": "test_send_typing_status_avoided_due_to_user_setting",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "status": [
                    "int",
                    "list[int]"
                ],
                "recipient_user_ids": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "TestModel.test_send_private_message": {
            "name": "test_send_private_message",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [
                    "dict[str, typing.Any]",
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "recipients": [],
                "response": [
                    "int"
                ],
                "return_value": [],
                "content": [
                    "typing.Text"
                ]
            }
        },
        "TestModel.test_send_private_message_with_no_recipients": {
            "name": "test_send_private_message_with_no_recipients",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "content": [
                    "typing.Text"
                ],
                "recipients": [
                    "list[]"
                ]
            }
        },
        "TestModel.test_send_stream_message": {
            "name": "test_send_stream_message",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "response": [
                    "int"
                ],
                "return_value": [],
                "content": [
                    "typing.Text"
                ],
                "stream": [
                    "typing.Text"
                ],
                "topic": [
                    "typing.Text"
                ]
            }
        },
        "TestModel.test_update_private_message": {
            "name": "test_update_private_message",
            "location": 817,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "response": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict[str, str]"
                ],
                "return_value": [
                    "bytes",
                    "int"
                ],
                "content": [
                    "typing.Text"
                ],
                "msg_id": [
                    "int"
                ]
            }
        },
        "TestModel.test_update_stream_message": {
            "name": "test_update_stream_message",
            "location": 942,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "list[str]"
                ],
                "model": [],
                "response": [],
                "return_value": [
                    "bytes"
                ],
                "req": [],
                "old_topic": [
                    "int",
                    "list[float]",
                    "list[int]",
                    "float"
                ],
                "expected_report_success": [
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "old_stream_name": [
                    "typing.Text"
                ]
            }
        },
        "TestModel.test_success_get_messages": {
            "name": "test_success_get_messages",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "messages_successful_response": [],
                "index_all_messages": [
                    "str",
                    "typing.Mapping",
                    "dict[str, str]",
                    "None",
                    "bool"
                ],
                "initial_data": [
                    "dict[str, typing.Any]"
                ],
                "num_before": [
                    "int"
                ],
                "num_after": [
                    "int"
                ]
            }
        },
        "TestModel.test_modernize_message_response": {
            "name": "test_modernize_message_response",
            "location": 1037,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "messages": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "expected_messages_response": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "TestModel.test__store_content_length_restrictions": {
            "name": "test__store_content_length_restrictions",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "initial_data": [],
                "feature_level": [
                    "str",
                    "list[]",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "to_vary_in_initial_data": [
                    "dict[, ]"
                ]
            }
        },
        "TestModel.test_get_message_false_first_anchor": {
            "name": "test_get_message_false_first_anchor",
            "location": 1089,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "messages_successful_response": [],
                "index_all_messages": [
                    "str",
                    "bool",
                    "None",
                    "typing.Mapping"
                ],
                "initial_data": [
                    "dict[str, typing.Any]"
                ],
                "num_before": [
                    "int"
                ],
                "num_after": [
                    "int"
                ]
            }
        },
        "TestModel.test_fail_get_messages": {
            "name": "test_fail_get_messages",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "error_response": [
                    "bool",
                    "typing.Callable[, ]",
                    "list[]",
                    "str"
                ],
                "initial_data": [
                    "str"
                ],
                "num_before": [
                    "int"
                ],
                "num_after": [
                    "int"
                ]
            }
        },
        "TestModel.test_fetch_raw_message_content": {
            "name": "test_fetch_raw_message_content",
            "location": 1169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool"
                ],
                "model": [],
                "expected_raw_content": [
                    "bool",
                    "str"
                ],
                "response": [],
                "display_error_called": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "message_id": [
                    "int"
                ]
            }
        },
        "TestModel.test_toggle_stream_muted_status": {
            "name": "test_toggle_stream_muted_status",
            "location": 1196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "typing.Callable[, ]"
                ],
                "model": [],
                "initial_muted_streams": [
                    "bool"
                ],
                "value": [
                    "typing.Callable[, ]"
                ],
                "response": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "TestModel.test_stream_access_type": {
            "name": "test_stream_access_type",
            "location": 1211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "general_stream": [
                    "str"
                ],
                "secret_stream": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.IO"
                ],
                "web_public_stream": [
                    "str"
                ]
            }
        },
        "TestModel.test_toggle_message_star_status": {
            "name": "test_toggle_message_star_status",
            "location": 1228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "flags_before": [
                    "list[int]",
                    "bool",
                    "str"
                ],
                "expected_operator": [
                    "str",
                    "None",
                    "tuple[]"
                ]
            }
        },
        "TestModel.test_mark_message_ids_as_read": {
            "name": "test_mark_message_ids_as_read",
            "location": 1244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "mocker": []
            }
        },
        "TestModel.test_mark_message_ids_as_read_empty_message_view": {
            "name": "test_mark_message_ids_as_read_empty_message_view",
            "location": 1253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "TestModel.test__update_initial_data": {
            "name": "test__update_initial_data",
            "location": 1256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]"
                ],
                "initial_data": [
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "TestModel.test__update_initial_data_raises_exception": {
            "name": "test__update_initial_data_raises_exception",
            "location": 1259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "initial_data": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "TestModel.test__group_info_from_realm_user_groups": {
            "name": "test__group_info_from_realm_user_groups",
            "location": 1278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "user_groups_fixture": []
            }
        },
        "TestModel.test_get_user_info": {
            "name": "test_get_user_info",
            "location": 1345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "str"
                ],
                "mocker": [
                    "str",
                    "list[str]",
                    "bool",
                    "list[]"
                ],
                "_all_users_by_id": [
                    "bool",
                    "None",
                    "str"
                ],
                "user_dict": [
                    "str"
                ],
                "to_vary_in_each_user": [
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, str]]",
                    "dict[, ]",
                    "list[tuple[typing.Union[str,str]]]",
                    "dict[int, str]",
                    "dict[str, int]"
                ],
                "key": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, str]"
                ],
                "expected_value": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "TestModel.test_get_user_info_USER_NOT_FOUND": {
            "name": "test_get_user_info_USER_NOT_FOUND",
            "location": 1361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "typing.IO"
                ]
            }
        },
        "TestModel.test_get_user_info_sample_response": {
            "name": "test_get_user_info_sample_response",
            "location": 1364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "None"
                ],
                "_all_users_by_id": [
                    "int",
                    "str",
                    "None",
                    "set[int]"
                ],
                "tidied_user_info_response": [
                    "str"
                ]
            }
        },
        "TestModel.test_get_all_users": {
            "name": "test_get_all_users",
            "location": 1370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "initial_data": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "list[tuple[typing.Union[bytes,bytes]]]"
                ],
                "user_list": [
                    "int",
                    "None"
                ],
                "user_dict": [
                    "str"
                ],
                "user_id": [
                    "str",
                    "list[]",
                    "list[dict[str, str]]",
                    "list[dict[, ]]",
                    "bool",
                    "typing.MutableMapping"
                ]
            }
        },
        "TestModel.test__subscribe_to_streams": {
            "name": "test__subscribe_to_streams",
            "location": 1383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_data": [
                    "str",
                    "list[str]"
                ],
                "muted": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "visual_notification_enabled": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "model": []
            }
        },
        "TestModel.test__handle_message_event_with_Falsey_log": {
            "name": "test__handle_message_event_with_Falsey_log",
            "location": 1406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "message_fixture": []
            }
        },
        "TestModel.test__handle_message_event_with_valid_log": {
            "name": "test__handle_message_event_with_valid_log",
            "location": 1427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "message_fixture": []
            }
        },
        "TestModel.test__handle_message_event_with_flags": {
            "name": "test__handle_message_event_with_flags",
            "location": 1449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "message_fixture": []
            }
        },
        "TestModel.test__handle_message_event": {
            "name": "test__handle_message_event",
            "location": 1587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "user_profile": [
                    "str"
                ],
                "response": [],
                "narrow": [
                    "int",
                    "str"
                ],
                "recipients": [],
                "model": [],
                "log": [
                    "str"
                ]
            }
        },
        "TestModel.test__update_topic_index": {
            "name": "test__update_topic_index",
            "location": 1643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic_name": [
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "topic_order_initial": [
                    "int",
                    "list[str]"
                ],
                "topic_order_final": [
                    "int",
                    "str"
                ],
                "model": [],
                "mocker": []
            }
        },
        "TestModel.test_notify_users_calling_msg_type": {
            "name": "test_notify_users_calling_msg_type",
            "location": 1686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "message_fixture": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "vary_each_msg": [
                    "list[dict[str, typing.Any]]"
                ],
                "visual_notification_status": [
                    "dict[str, str]"
                ],
                "types_when_notify_called": [
                    "int",
                    "str",
                    "typing.Iterable[int]",
                    "float"
                ]
            }
        },
        "TestModel.test_notify_user_transformed_content": {
            "name": "test_notify_user_transformed_content",
            "location": 1753,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "list[str]"
                ],
                "message_fixture": [],
                "content": [
                    "str",
                    "list[typing.Union[int,typing.Any]]",
                    "list[typing.Union[int,str]]",
                    "int"
                ],
                "expected_notification_text": [
                    "str"
                ]
            }
        },
        "TestModel.test_notify_users_enabled": {
            "name": "test_notify_users_enabled",
            "location": 1771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "message_fixture": [],
                "notify_enabled": [
                    "str",
                    "int"
                ],
                "is_notify_called": [
                    "bool"
                ]
            }
        },
        "TestModel.test_notify_users_hides_PM_content_based_on_user_setting": {
            "name": "test_notify_users_hides_PM_content_based_on_user_setting",
            "location": 1785,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "private_message_fixture": [],
                "hide_content": [],
                "expected_content": []
            }
        },
        "TestModel.test__handle_update_message_event": {
            "name": "test__handle_update_message_event",
            "location": 2070,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [
                    "str",
                    "None"
                ],
                "event": [],
                "expected_index": [
                    "str",
                    "bool"
                ],
                "expected_times_messages_rerendered": [
                    "str",
                    "list[typing.Callable[, ]]"
                ],
                "topic_view_enabled": [
                    "int"
                ]
            }
        },
        "TestModel.test__update_rendered_view": {
            "name": "test__update_rendered_view",
            "location": 2137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "subject": [
                    "int",
                    "str"
                ],
                "narrow": [
                    "str",
                    "int"
                ],
                "new_log_len": [
                    "str",
                    "int"
                ],
                "msg_id": [
                    "int"
                ]
            }
        },
        "TestModel.test__update_rendered_view_change_narrow": {
            "name": "test__update_rendered_view_change_narrow",
            "location": 2174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "subject": [],
                "narrow": [
                    "str",
                    "int"
                ],
                "narrow_changed": [
                    "str",
                    "typing.Mapping",
                    "int"
                ],
                "msg_id": [
                    "int"
                ]
            }
        },
        "TestModel.reaction_event_factory": {
            "name": "reaction_event_factory",
            "location": 2193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModel.reaction_event_index_factory": {
            "name": "reaction_event_index_factory",
            "location": 2213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModel.test__handle_reaction_event_not_in_index": {
            "name": "test__handle_reaction_event_not_in_index",
            "location": 2250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "reaction_event_factory": [],
                "reaction_event_index_factory": [],
                "op": [],
                "unindexed_message_id": [
                    "int"
                ]
            }
        },
        "TestModel.test__handle_reaction_event_for_msg_in_index": {
            "name": "test__handle_reaction_event_for_msg_in_index",
            "location": 2286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "reaction_event_factory": [
                    "bool"
                ],
                "reaction_event_index_factory": [],
                "op": [
                    "bool"
                ],
                "expected_number_after": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "event_message_id": [
                    "int"
                ]
            }
        },
        "TestModel.update_message_flags_operation": {
            "name": "update_message_flags_operation",
            "location": 2322,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestModel.test_update_star_status_no_index": {
            "name": "test_update_star_status_no_index",
            "location": 2325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "update_message_flags_operation": [
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestModel.test_update_star_status_invalid_operation": {
            "name": "test_update_star_status_invalid_operation",
            "location": 2348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "update_message_flags_operation": [
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestModel.test_update_star_status": {
            "name": "test_update_star_status",
            "location": 2397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "event_op": [
                    "int",
                    "None",
                    "dict[str, int]",
                    "str"
                ],
                "event_message_ids": [],
                "indexed_ids": [
                    "str"
                ],
                "scaling": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "flags_before": [
                    "str"
                ],
                "flags_after": [
                    "int",
                    "bytearray",
                    "str"
                ],
                "update_message_flags_operation": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestModel.test_update_read_status": {
            "name": "test_update_read_status",
            "location": 2480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "event_op": [
                    "int",
                    "str",
                    "None"
                ],
                "event_message_ids": [
                    "tuple[typing.Union[int,str]]",
                    "list[int]",
                    "set[str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "indexed_ids": [
                    "bytes"
                ],
                "flags_before": [
                    "bytes"
                ],
                "flags_after": [
                    "int",
                    "bytearray",
                    "str"
                ],
                "update_message_flags_operation": [
                    "list[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestModel.test_toggle_stream_pinned_status": {
            "name": "test_toggle_stream_pinned_status",
            "location": 2539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "model": [],
                "pinned_streams": [
                    "bool",
                    "str"
                ],
                "pin_to_top": [
                    "int",
                    "str",
                    "None",
                    "dict[, ]",
                    "list[]"
                ],
                "stream_id": [
                    "int"
                ]
            }
        },
        "TestModel.test_toggle_stream_visual_notifications": {
            "name": "test_toggle_stream_visual_notifications",
            "location": 2567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "initial_visual_notified_streams": [
                    "str"
                ],
                "expected_new_value": [
                    "int",
                    "typing.Callable[, ]",
                    "list[int]"
                ],
                "response": [
                    "dict[typing.Text, typing.Text]"
                ],
                "stream_id": [
                    "int"
                ]
            }
        },
        "TestModel.test__handle_typing_event": {
            "name": "test__handle_typing_event",
            "location": 2732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [
                    "int",
                    "None"
                ],
                "narrow": [],
                "event": [],
                "is_notification_in_progress": [
                    "int",
                    "dict[, ]"
                ],
                "expected_active_conversation_info": [
                    "dict[str, typing.Any]",
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "dict[str, str]",
                    "list[str]"
                ],
                "expected_show_typing_notification": []
            }
        },
        "TestModel.test__handle_subscription_event_mute_streams": {
            "name": "test__handle_subscription_event_mute_streams",
            "location": 2788,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "mocker": [],
                "stream_button": [
                    "bool"
                ],
                "event": [],
                "final_muted_streams": [
                    "str"
                ]
            }
        },
        "TestModel.test__handle_subscription_event_pin_streams": {
            "name": "test__handle_subscription_event_pin_streams",
            "location": 2845,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "float"
                ],
                "mocker": [
                    "bool",
                    "list[str]"
                ],
                "stream_button": [
                    "dict[str, typing.Any]"
                ],
                "event": [],
                "expected_pinned_streams": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "expected_unpinned_streams": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "initial_pinned_streams": [
                    "list[dict[typing.Text, typing.Union[typing.Text,int]]]"
                ],
                "initial_unpinned_streams": [
                    "list[dict[typing.Text, typing.Union[typing.Text,int]]]"
                ]
            }
        },
        "TestModel.test__handle_subscription_event_visual_notifications": {
            "name": "test__handle_subscription_event_visual_notifications",
            "location": 2926,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "initial_visual_notified_streams": [
                    "str"
                ],
                "event": [],
                "final_visual_notified_streams": [
                    "str"
                ]
            }
        },
        "TestModel.test__handle_subscription_event_subscribers": {
            "name": "test__handle_subscription_event_subscribers",
            "location": 2993,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "str"
                ],
                "mocker": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "stream_dict": [],
                "event": [],
                "feature_level": [
                    "bool",
                    "str"
                ],
                "stream_id": [
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "expected_subscribers": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "tuple[int]"
                ]
            }
        },
        "TestModel.test__handle_subscription_event_subscribers_to_unsubscribed_streams": {
            "name": "test__handle_subscription_event_subscribers_to_unsubscribed_streams",
            "location": 3028,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "mocker": [
                    "bool"
                ],
                "stream_dict": [],
                "event": [],
                "feature_level": []
            }
        },
        "TestModel.test__handle_subscription_event_subscribers_multiple_users_one_stream": {
            "name": "test__handle_subscription_event_subscribers_multiple_users_one_stream",
            "location": 3056,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int"
                ],
                "mocker": [
                    "bool"
                ],
                "stream_dict": [],
                "event": [],
                "feature_level": [],
                "expected_subscribers": [
                    "int",
                    "str"
                ]
            }
        },
        "TestModel.test__handle_subscription_event_subscribers_one_user_multiple_streams": {
            "name": "test__handle_subscription_event_subscribers_one_user_multiple_streams",
            "location": 3086,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int"
                ],
                "mocker": [
                    "bool"
                ],
                "stream_dict": [],
                "event": [],
                "feature_level": [],
                "expected_subscribers": [
                    "int",
                    "str"
                ]
            }
        },
        "TestModel.test__handle_user_settings_event": {
            "name": "test__handle_user_settings_event",
            "location": 3102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "typing.Type"
                ],
                "model": [],
                "value": [
                    "str",
                    "typing.Callable[list[], None]"
                ]
            }
        },
        "TestModel.test_update_pm_content_in_desktop_notifications": {
            "name": "test_update_pm_content_in_desktop_notifications",
            "location": 3114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool"
                ],
                "model": [],
                "setting": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "TestModel.test_update_twenty_four_hour_format": {
            "name": "test_update_twenty_four_hour_format",
            "location": 3128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "setting": [
                    "str"
                ]
            }
        },
        "TestModel.test_is_muted_stream": {
            "name": "test_is_muted_stream",
            "location": 3159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "muted_streams": [
                    "str",
                    "int"
                ],
                "stream_id": [
                    "str",
                    "bool"
                ],
                "is_muted": [
                    "str",
                    "bool"
                ],
                "stream_dict": [
                    "str",
                    "bytes",
                    "bool",
                    "None"
                ],
                "model": [
                    "int"
                ]
            }
        },
        "TestModel.test_is_visual_notifications_enabled": {
            "name": "test_is_visual_notifications_enabled",
            "location": 3179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visual_notified_streams": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "stream_id": [
                    "int",
                    "None",
                    "str"
                ],
                "is_enabled": [
                    "int",
                    "None",
                    "str"
                ],
                "stream_dict": [
                    "str",
                    "bytes",
                    "bool",
                    "None"
                ],
                "model": [
                    "int"
                ]
            }
        },
        "TestModel.test_is_muted_topic": {
            "name": "test_is_muted_topic",
            "location": 3196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [],
                "is_muted": [],
                "stream_dict": [
                    "bool",
                    "dict[str, list[int]]",
                    "dict[str, str]"
                ],
                "model": [
                    "bool"
                ],
                "processed_muted_topics": [
                    "bool",
                    "str",
                    "tuple[typing.Union[list[str],str,None]]"
                ]
            }
        },
        "TestModel.test_is_user_subscribed_to_stream": {
            "name": "test_is_user_subscribed_to_stream",
            "location": 3217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "stream_dict": [
                    "str",
                    "int"
                ],
                "stream_id": [
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "expected_response": [
                    "typing.Callable[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "list[]"
                ]
            }
        },
        "TestModel.test_fetch_message_history_success": {
            "name": "test_fetch_message_history_success",
            "location": 3235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "model": [],
                "message_history": [
                    "dict[str, typing.Any]"
                ],
                "response": [],
                "message_id": [
                    "int"
                ]
            }
        },
        "TestModel.test_fetch_message_history_error": {
            "name": "test_fetch_message_history_error",
            "location": 3257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool"
                ],
                "model": [],
                "response": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "message_id": [
                    "int"
                ],
                "expected_return_value": [
                    "list[]"
                ]
            }
        },
        "TestModel.test_user_name_from_id_valid": {
            "name": "test_user_name_from_id_valid",
            "location": 3269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "user_dict": [
                    "str"
                ],
                "user_id": [
                    "int",
                    "str"
                ],
                "full_name": [
                    "str",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "TestModel.test_user_name_from_id_invalid": {
            "name": "test_user_name_from_id_invalid",
            "location": 3278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "user_id": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "TestModel.test_generate_all_emoji_data": {
            "name": "test_generate_all_emoji_data",
            "location": 3284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "dict[, ]"
                ],
                "model": [],
                "zulip_emoji": [
                    "bool"
                ],
                "unicode_emojis": [
                    "bool"
                ],
                "realm_emojis_data": [
                    "bool"
                ],
                "realm_emojis": [
                    "int",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "TestModel.test__handle_update_emoji_event": {
            "name": "test__handle_update_emoji_event",
            "location": 3362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "model": [],
                "realm_emojis": [],
                "emoji_should_be_active": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "expected_emoji_type": [
                    "typing.Callable[A, typing.Any]"
                ],
                "to_vary_in_realm_emoji": [
                    "str"
                ]
            }
        },
        "TestModel.raising_event": {
            "name": "raising_event",
            "location": 3389,
            "return": [],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestModel.test_poll_for_events__no_disconnect": {
            "name": "test_poll_for_events__no_disconnect",
            "location": 3395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "raising_event": []
            }
        },
        "TestModel.test_poll_for_events__reconnect_ok": {
            "name": "test_poll_for_events__reconnect_ok",
            "location": 3421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "model": [],
                "raising_event": [
                    "int"
                ],
                "register_return_value": []
            }
        },
        "TestModel.test__handle_update_message_event._set_topics_to_old_and_new": {
            "name": "_set_topics_to_old_and_new",
            "location": 2099,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "TestModel.reaction_event_factory._factory": {
            "name": "_factory",
            "location": 2194,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int,dict[typing.Text, typing.Union[typing.Text,int]]]]"
            ],
            "arguments": {}
        },
        "TestModel.reaction_event_index_factory._factory": {
            "name": "_factory",
            "location": 2222,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int,dict[typing.Text, typing.Union[typing.Text,int]]]]"
            ],
            "arguments": {
                "msgs": []
            }
        },
        "TestModel.test__handle_subscription_event_pin_streams.set_from_list_of_dict": {
            "name": "set_from_list_of_dict",
            "location": 2856,
            "return": [
                "set[]"
            ],
            "arguments": {
                "data": []
            }
        },
        "TestModel.raising_event.raiser": {
            "name": "raiser",
            "location": 3390,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "zulip-terminal-main/tests/model/__init__.py": {},
    "zulip-terminal-main/tests/platform_code/test_platform_code.py": {
        "test_notify": {
            "name": "test_notify",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "PLATFORM": [
                    "bool",
                    "float",
                    "Callable"
                ],
                "is_notification_sent": [
                    "bool",
                    "pytest_mock.MockFixture",
                    "int"
                ]
            }
        },
        "test_notify_quotes": {
            "name": "test_notify_quotes",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Callable",
                    "Callable[[str], None]"
                ],
                "PLATFORM": [
                    "Optional[str]",
                    "float",
                    "str",
                    "None"
                ],
                "cmd_length": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "title": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_successful_GUI_return_code": {
            "name": "test_successful_GUI_return_code",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "PLATFORM": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "expected_return_code": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "None"
                ]
            }
        },
        "test_normalized_file_path": {
            "name": "test_normalized_file_path",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int"
                ],
                "PLATFORM": [
                    "int"
                ],
                "expected_path": [],
                "path": [
                    "typing.Text"
                ]
            }
        }
    },
    "zulip-terminal-main/tests/server_url/test_server_url.py": {
        "test_encode_stream": {
            "name": "test_encode_stream",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "stream_id": [
                    "str",
                    "int"
                ],
                "stream_name": [
                    "str",
                    "int"
                ],
                "expected_encoded_string": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_near_message_url": {
            "name": "test_near_message_url",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "server_url": [
                    "str",
                    "Union[None,List[str],float,int,str]",
                    "None",
                    "List[str]",
                    "float",
                    "int"
                ],
                "msg": [
                    "str",
                    "Union[None,List[str],float,int,str]",
                    "None",
                    "List[str]",
                    "float",
                    "int"
                ],
                "expected_message_url": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "zulip-terminal-main/tests/ui/test_ui.py": {
        "TestView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestView.view": {
            "name": "view",
            "location": 32,
            "return": [
                "View"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestView.test_init": {
            "name": "test_init",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestView.test_left_column_view": {
            "name": "test_left_column_view",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "view": []
            }
        },
        "TestView.test_middle_column_view": {
            "name": "test_middle_column_view",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "mocker": []
            }
        },
        "TestView.test_right_column_view": {
            "name": "test_right_column_view",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "mocker": []
            }
        },
        "TestView.test_set_footer_text_same_test": {
            "name": "test_set_footer_text_same_test",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "mocker": [
                    "list[int]",
                    "str",
                    "dict[str, typing.Sequence[str]]"
                ],
                "text": [
                    "list[typing.Text]"
                ]
            }
        },
        "TestView.test_set_footer_text_default": {
            "name": "test_set_footer_text_default",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "mocker": []
            }
        },
        "TestView.test_set_footer_text_specific_text": {
            "name": "test_set_footer_text_specific_text",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "text": [
                    "typing.Text"
                ]
            }
        },
        "TestView.test_set_footer_text_with_duration": {
            "name": "test_set_footer_text_with_duration",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "mocker": [],
                "custom_text": [
                    "typing.Text"
                ],
                "duration": [
                    "float"
                ]
            }
        },
        "TestView.test_set_typeahead_footer": {
            "name": "test_set_typeahead_footer",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "view": [],
                "state": [
                    "str",
                    "dict[str, str]",
                    "int",
                    "bytes"
                ],
                "suggestions": [
                    "str",
                    "dict[str, str]",
                    "int",
                    "bytes"
                ],
                "truncated": [
                    "str",
                    "dict[str, str]",
                    "int",
                    "bytes"
                ],
                "footer_text": [
                    "int"
                ]
            }
        },
        "TestView.test_footer_view": {
            "name": "test_footer_view",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "typing.Mapping"
                ],
                "view": []
            }
        },
        "TestView.test_main_window": {
            "name": "test_main_window",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "monkeypatch": []
            }
        },
        "TestView.test_show_panel_methods": {
            "name": "test_show_panel_methods",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ],
                "visible": [
                    "bool",
                    "str"
                ],
                "autohide": [
                    "str"
                ],
                "test_method": []
            }
        },
        "TestView.test_keypress_normal_mode_navigation": {
            "name": "test_keypress_normal_mode_navigation",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "mocker": [],
                "widget_size": [
                    "int",
                    "bytes",
                    "float"
                ],
                "navigation_key": [
                    "bytes",
                    "int"
                ]
            }
        },
        "TestView.test_keypress_ALL_MENTIONS": {
            "name": "test_keypress_ALL_MENTIONS",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool"
                ],
                "mocker": [],
                "key": [],
                "widget_size": [
                    "int",
                    "float"
                ]
            }
        },
        "TestView.test_keypress_STREAM_MESSAGE": {
            "name": "test_keypress_STREAM_MESSAGE",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "mocker": [],
                "key": [
                    "list[dict[str, typing.Any]]"
                ],
                "autohide": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]"
                ],
                "widget_size": [
                    "int"
                ]
            }
        },
        "TestView.test_keypress_autohide_users": {
            "name": "test_keypress_autohide_users",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "mocker": [],
                "autohide": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]"
                ],
                "key": [
                    "dict[str, typing.Any]",
                    "list[bool]",
                    "tuple[]",
                    "bool",
                    "str",
                    "list[list[int]]"
                ],
                "widget_size": [
                    "int",
                    "float"
                ]
            }
        },
        "TestView.test_keypress_autohide_streams": {
            "name": "test_keypress_autohide_streams",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "mocker": [],
                "autohide": [
                    "str",
                    "None",
                    "int"
                ],
                "key": [
                    "str",
                    "list[str]",
                    "tuple[]"
                ],
                "widget_size": [
                    "int",
                    "float"
                ]
            }
        },
        "TestView.test_keypress_OPEN_DRAFT": {
            "name": "test_keypress_OPEN_DRAFT",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "mocker": [],
                "draft": [
                    "str"
                ],
                "key": [
                    "str",
                    "typing.Iterable[T]",
                    "bool"
                ],
                "autohide": [
                    "int",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "None"
                ],
                "widget_size": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "TestView.test_keypress_edit_mode": {
            "name": "test_keypress_edit_mode",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "mocker": [],
                "key": [
                    "str",
                    "Exception",
                    "None",
                    "list[bool]",
                    "dict[, ]",
                    "list[list[int]]",
                    "int"
                ],
                "widget_size": [
                    "float",
                    "bool"
                ]
            }
        },
        "TestView.test_main_window.just_set_message_view": {
            "name": "just_set_message_view",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zulip-terminal-main/tests/ui/test_ui_tools.py": {
        "compose_box_is_open": {
            "name": "compose_box_is_open",
            "location": 46,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "TestModListWalker.mod_walker": {
            "name": "mod_walker",
            "location": 52,
            "return": [
                "ModListWalker"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModListWalker.test_extend": {
            "name": "test_extend",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_items": [],
                "focus_position": [],
                "mod_walker": [],
                "mocker": []
            }
        },
        "TestModListWalker.test__set_focus": {
            "name": "test__set_focus",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod_walker": [],
                "mocker": []
            }
        },
        "TestModListWalker.test_set_focus": {
            "name": "test_set_focus",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod_walker": [],
                "mocker": []
            }
        },
        "TestMessageView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestMessageView.msg_view": {
            "name": "msg_view",
            "location": 87,
            "return": [
                "MessageView"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_box": []
            }
        },
        "TestMessageView.test_init": {
            "name": "test_init",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": [],
                "msg_box": []
            }
        },
        "TestMessageView.test_main_view": {
            "name": "test_main_view",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "narrow_focus_pos": [],
                "focus_msg": []
            }
        },
        "TestMessageView.test_load_old_messages_empty_log": {
            "name": "test_load_old_messages_empty_log",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": [],
                "ids_in_narrow": [],
                "messages_fetched": []
            }
        },
        "TestMessageView.test_load_old_messages_mocked_log": {
            "name": "test_load_old_messages_mocked_log",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": [],
                "top_id_in_narrow": [],
                "other_ids_in_narrow": [],
                "messages_fetched": []
            }
        },
        "TestMessageView.test_load_new_messages_empty_log": {
            "name": "test_load_new_messages_empty_log",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": [],
                "ids_in_narrow": []
            }
        },
        "TestMessageView.test_load_new_messages_mocked_log": {
            "name": "test_load_new_messages_mocked_log",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": [],
                "ids_in_narrow": []
            }
        },
        "TestMessageView.test_mouse_event": {
            "name": "test_mouse_event",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": [],
                "mouse_scroll_event": [],
                "widget_size": []
            }
        },
        "TestMessageView.test_keypress_GO_DOWN": {
            "name": "test_keypress_GO_DOWN",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestMessageView.test_keypress_GO_DOWN_exception": {
            "name": "test_keypress_GO_DOWN_exception",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": [],
                "key": [],
                "widget_size": [],
                "view_is_focused": []
            }
        },
        "TestMessageView.test_keypress_GO_UP": {
            "name": "test_keypress_GO_UP",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestMessageView.test_keypress_GO_UP_exception": {
            "name": "test_keypress_GO_UP_exception",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": [],
                "key": [],
                "widget_size": [],
                "view_is_focused": []
            }
        },
        "TestMessageView.test_read_message": {
            "name": "test_read_message",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_box": []
            }
        },
        "TestMessageView.test_message_calls_search_and_header_bar": {
            "name": "test_message_calls_search_and_header_bar",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": []
            }
        },
        "TestMessageView.test_read_message_no_msgw": {
            "name": "test_read_message_no_msgw",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_view": []
            }
        },
        "TestMessageView.test_read_message_in_explore_mode": {
            "name": "test_read_message_in_explore_mode",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_box": []
            }
        },
        "TestMessageView.test_read_message_search_narrow": {
            "name": "test_read_message_search_narrow",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_box": []
            }
        },
        "TestMessageView.test_read_message_last_unread_message_focused": {
            "name": "test_read_message_last_unread_message_focused",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "message_fixture": [],
                "empty_index": [],
                "msg_box": []
            }
        },
        "TestStreamsViewDivider.test_init": {
            "name": "test_init",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStreamsView.stream_view": {
            "name": "stream_view",
            "location": 493,
            "return": [
                "StreamsView"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestStreamsView.test_init": {
            "name": "test_init",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "stream_view": []
            }
        },
        "TestStreamsView.test_update_streams": {
            "name": "test_update_streams",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "stream_view": [],
                "new_text": [],
                "expected_log": [],
                "to_pin": []
            }
        },
        "TestStreamsView.test_mouse_event": {
            "name": "test_mouse_event",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "stream_view": [],
                "mouse_scroll_event": [],
                "widget_size": []
            }
        },
        "TestStreamsView.test_keypress_SEARCH_STREAMS": {
            "name": "test_keypress_SEARCH_STREAMS",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "stream_view": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestStreamsView.test_keypress_GO_BACK": {
            "name": "test_keypress_GO_BACK",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "stream_view": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestTopicsView.topic_view": {
            "name": "topic_view",
            "location": 606,
            "return": [
                "TopicsView"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "stream_button": []
            }
        },
        "TestTopicsView.test_init": {
            "name": "test_init",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "topic_view": []
            }
        },
        "TestTopicsView.test_update_topics": {
            "name": "test_update_topics",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "topic_view": [],
                "new_text": [],
                "expected_log": []
            }
        },
        "TestTopicsView.test_update_topics_list": {
            "name": "test_update_topics_list",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "topic_view": [],
                "topic_name": [],
                "topic_initial_log": [],
                "topic_final_log": []
            }
        },
        "TestTopicsView.test_keypress_SEARCH_TOPICS": {
            "name": "test_keypress_SEARCH_TOPICS",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "topic_view": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestTopicsView.test_keypress_GO_BACK": {
            "name": "test_keypress_GO_BACK",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "topic_view": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestTopicsView.test_mouse_event": {
            "name": "test_mouse_event",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "topic_view": [],
                "mouse_scroll_event": [],
                "widget_size": []
            }
        },
        "TestUsersView.user_view": {
            "name": "user_view",
            "location": 752,
            "return": [
                "UsersView"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestUsersView.test_mouse_event": {
            "name": "test_mouse_event",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "user_view": [],
                "mouse_scroll_event": [],
                "widget_size": []
            }
        },
        "TestUsersView.test_mouse_event_left_click": {
            "name": "test_mouse_event_left_click",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "user_view": [],
                "widget_size": [],
                "compose_box_is_open": []
            }
        },
        "TestUsersView.test_mouse_event_invalid": {
            "name": "test_mouse_event_invalid",
            "location": 799,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_view": [],
                "event": [],
                "button": [],
                "widget_size": []
            }
        },
        "TestMiddleColumnView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestMiddleColumnView.mid_col_view": {
            "name": "mid_col_view",
            "location": 821,
            "return": [
                "MiddleColumnView"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleColumnView.test_init": {
            "name": "test_init",
            "location": 824,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": []
            }
        },
        "TestMiddleColumnView.test_get_next_unread_topic": {
            "name": "test_get_next_unread_topic",
            "location": 835,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": []
            }
        },
        "TestMiddleColumnView.test_get_next_unread_topic_again": {
            "name": "test_get_next_unread_topic_again",
            "location": 841,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": []
            }
        },
        "TestMiddleColumnView.test_get_next_unread_topic_no_unread": {
            "name": "test_get_next_unread_topic_no_unread",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": []
            }
        },
        "TestMiddleColumnView.test_get_next_unread_pm": {
            "name": "test_get_next_unread_pm",
            "location": 854,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": []
            }
        },
        "TestMiddleColumnView.test_get_next_unread_pm_again": {
            "name": "test_get_next_unread_pm_again",
            "location": 860,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": []
            }
        },
        "TestMiddleColumnView.test_get_next_unread_pm_no_unread": {
            "name": "test_get_next_unread_pm_no_unread",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": []
            }
        },
        "TestMiddleColumnView.test_keypress_focus_header": {
            "name": "test_keypress_focus_header",
            "location": 874,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": [],
                "mocker": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestMiddleColumnView.test_keypress_SEARCH_MESSAGES": {
            "name": "test_keypress_SEARCH_MESSAGES",
            "location": 881,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": [],
                "mocker": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestMiddleColumnView.test_keypress_REPLY_MESSAGE": {
            "name": "test_keypress_REPLY_MESSAGE",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": [],
                "mocker": [],
                "widget_size": [],
                "reply_message_key": []
            }
        },
        "TestMiddleColumnView.test_keypress_STREAM_MESSAGE": {
            "name": "test_keypress_STREAM_MESSAGE",
            "location": 910,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": [],
                "mocker": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestMiddleColumnView.test_keypress_REPLY_AUTHOR": {
            "name": "test_keypress_REPLY_AUTHOR",
            "location": 924,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": [],
                "mocker": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestMiddleColumnView.test_keypress_NEXT_UNREAD_TOPIC_stream": {
            "name": "test_keypress_NEXT_UNREAD_TOPIC_stream",
            "location": 938,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": [],
                "mocker": [],
                "widget_size": [],
                "key": []
            }
        },
        "TestMiddleColumnView.test_keypress_NEXT_UNREAD_TOPIC_no_stream": {
            "name": "test_keypress_NEXT_UNREAD_TOPIC_no_stream",
            "location": 956,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": [],
                "mocker": [],
                "widget_size": [],
                "key": []
            }
        },
        "TestMiddleColumnView.test_keypress_NEXT_UNREAD_PM_stream": {
            "name": "test_keypress_NEXT_UNREAD_PM_stream",
            "location": 967,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": [],
                "mocker": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestMiddleColumnView.test_keypress_NEXT_UNREAD_PM_no_pm": {
            "name": "test_keypress_NEXT_UNREAD_PM_no_pm",
            "location": 983,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": [],
                "mocker": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestMiddleColumnView.test_keypress_PRIVATE_MESSAGE": {
            "name": "test_keypress_PRIVATE_MESSAGE",
            "location": 994,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid_col_view": [],
                "mocker": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestRightColumnView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestRightColumnView.right_col_view": {
            "name": "right_col_view",
            "location": 1022,
            "return": [
                "RightColumnView"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestRightColumnView.test_init": {
            "name": "test_init",
            "location": 1026,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "right_col_view": []
            }
        },
        "TestRightColumnView.test_update_user_list_editor_mode": {
            "name": "test_update_user_list_editor_mode",
            "location": 1037,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "right_col_view": []
            }
        },
        "TestRightColumnView.test_update_user_list": {
            "name": "test_update_user_list",
            "location": 1053,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "right_col_view": [],
                "mocker": [],
                "search_string": [],
                "assert_list": [],
                "match_return_value": []
            }
        },
        "TestRightColumnView.test_update_user_presence": {
            "name": "test_update_user_presence",
            "location": 1068,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "right_col_view": [],
                "mocker": [],
                "user_list": []
            }
        },
        "TestRightColumnView.test_users_view": {
            "name": "test_users_view",
            "location": 1094,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [],
                "users_btn_len": [],
                "editor_mode": [],
                "status": [],
                "mocker": []
            }
        },
        "TestRightColumnView.test_keypress_SEARCH_PEOPLE": {
            "name": "test_keypress_SEARCH_PEOPLE",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "right_col_view": [],
                "mocker": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestRightColumnView.test_keypress_GO_BACK": {
            "name": "test_keypress_GO_BACK",
            "location": 1129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "right_col_view": [],
                "mocker": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestLeftColumnView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 1146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestLeftColumnView.test_menu_view": {
            "name": "test_menu_view",
            "location": 1172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestLeftColumnView.test_streams_view": {
            "name": "test_streams_view",
            "location": 1190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "streams": [],
                "pinned": []
            }
        },
        "TestLeftColumnView.test_topics_view": {
            "name": "test_topics_view",
            "location": 1217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "stream_button": []
            }
        },
        "TestTabView.tab_view": {
            "name": "tab_view",
            "location": 1247,
            "return": [
                "TabView"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTabView.test_tab_render": {
            "name": "test_tab_render",
            "location": 1268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tab_view": [],
                "TAB_WIDTH": [],
                "TAB_HEIGHT": [],
                "expected_output": []
            }
        },
        "TestMessageBox.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 1275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "initial_index": []
            }
        },
        "TestMessageBox.test_init": {
            "name": "test_init",
            "location": 1286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "message_type": [],
                "set_fields": []
            }
        },
        "TestMessageBox.test_init_fails_with_bad_message_type": {
            "name": "test_init_fails_with_bad_message_type",
            "location": 1309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageBox.test_private_message_to_self": {
            "name": "test_private_message_to_self",
            "location": 1315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestMessageBox.test_soup2markup": {
            "name": "test_soup2markup",
            "location": 1910,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [],
                "expected_markup": [],
                "mocker": []
            }
        },
        "TestMessageBox.test_main_view": {
            "name": "test_main_view",
            "location": 1992,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "message": [],
                "last_message": []
            }
        },
        "TestMessageBox.test_main_view_renders_slash_me": {
            "name": "test_main_view_renders_slash_me",
            "location": 2027,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "message": [],
                "content": [],
                "is_me_message": []
            }
        },
        "TestMessageBox.test_main_view_generates_stream_header": {
            "name": "test_main_view_generates_stream_header",
            "location": 2069,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "message": [],
                "to_vary_in_last_message": []
            }
        },
        "TestMessageBox.test_main_view_generates_PM_header": {
            "name": "test_main_view_generates_PM_header",
            "location": 2126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "message": [],
                "to_vary_in_last_message": []
            }
        },
        "TestMessageBox.test_msg_generates_search_and_header_bar": {
            "name": "test_msg_generates_search_and_header_bar",
            "location": 2188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "messages_successful_response": [],
                "msg_type": [],
                "msg_narrow": [],
                "assert_header_bar": [],
                "assert_search_bar": []
            }
        },
        "TestMessageBox.test_main_view_content_header_without_header": {
            "name": "test_main_view_content_header_without_header",
            "location": 2255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "message": [],
                "expected_header": [],
                "current_year": [],
                "starred_msg": [],
                "to_vary_in_last_message": []
            }
        },
        "TestMessageBox.test_main_view_compact_output": {
            "name": "test_main_view_compact_output",
            "location": 2317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "message_fixture": [],
                "to_vary_in_each_message": []
            }
        },
        "TestMessageBox.test_main_view_generates_EDITED_label": {
            "name": "test_main_view_generates_EDITED_label",
            "location": 2327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "messages_successful_response": []
            }
        },
        "TestMessageBox.test_update_message_author_status": {
            "name": "test_update_message_author_status",
            "location": 2351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_fixture": [],
                "update_required": [],
                "to_vary_in_last_message": []
            }
        },
        "TestMessageBox.test_keypress_STREAM_MESSAGE": {
            "name": "test_keypress_STREAM_MESSAGE",
            "location": 2386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_box": [],
                "widget_size": [],
                "narrow": [],
                "expect_to_prefill": [],
                "key": []
            }
        },
        "TestMessageBox.test_keypress_EDIT_MESSAGE": {
            "name": "test_keypress_EDIT_MESSAGE",
            "location": 2518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "message_fixture": [],
                "widget_size": [],
                "to_vary_in_each_message": [],
                "realm_editing_allowed": [],
                "msg_body_edit_limit": [],
                "expect_msg_body_edit_enabled": [],
                "expect_editing_to_succeed": [],
                "expect_footer_text": [],
                "key": []
            }
        },
        "TestMessageBox.test_transform_content": {
            "name": "test_transform_content",
            "location": 2729,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "raw_html": [],
                "expected_content": []
            }
        },
        "TestMessageBox.test_reactions_view": {
            "name": "test_reactions_view",
            "location": 2953,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_fixture": [],
                "to_vary_in_each_message": [],
                "expected_text": [],
                "expected_attributes": []
            }
        },
        "TestMessageBox.test_footlinks_view": {
            "name": "test_footlinks_view",
            "location": 3062,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_links": [],
                "expected_text": [],
                "expected_attrib": [],
                "expected_footlinks_width": []
            }
        },
        "TestMessageBox.test_footlinks_limit": {
            "name": "test_footlinks_limit",
            "location": 3088,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maximum_footlinks": [],
                "expected_instance": []
            }
        },
        "TestMessageBox.test_mouse_event_left_click": {
            "name": "test_mouse_event_left_click",
            "location": 3107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_box": [],
                "key": [],
                "widget_size": [],
                "compose_box_is_open": []
            }
        }
    },
    "zulip-terminal-main/tests/ui/test_utils.py": {
        "test_is_muted": {
            "name": "test_is_muted",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "msg": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "pytest_mock.MockFixture"
                ],
                "narrow": [
                    "bool",
                    "List[str]",
                    "int",
                    "raiden.utils.PaymentWithFeeAmount"
                ],
                "muted_streams": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "pytest_mock.MockFixture"
                ],
                "is_muted_topic_return_value": [
                    "str",
                    "metrics_backend.utils.Address",
                    "int",
                    "None",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "muted": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_create_msg_box_list": {
            "name": "test_create_msg_box_list",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "narrow": [
                    "int",
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "messages": [
                    "int",
                    "List[str]",
                    "raiden.utils.TokenNetworkID",
                    "telethon.tl.custom.Message",
                    "bool"
                ],
                "focus_msg_id": [
                    "int",
                    "List[str]",
                    "raiden.utils.TokenNetworkID",
                    "telethon.tl.custom.Message",
                    "bool"
                ],
                "muted": [],
                "unsubscribed": [
                    "List[str]",
                    "pytest_mock.MockFixture",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "len_w_list": [
                    "int"
                ]
            }
        }
    },
    "zulip-terminal-main/tests/ui/__init__.py": {},
    "zulip-terminal-main/tests/ui_tools/test_boxes.py": {
        "TestWriteBox.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "initial_index": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestWriteBox.write_box": {
            "name": "write_box",
            "location": 36,
            "return": [
                "WriteBox"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "users_fixture": [
                    "str",
                    "list[str]"
                ],
                "user_groups_fixture": [
                    "list[str]"
                ],
                "streams_fixture": [],
                "unicode_emojis": [],
                "user_dict": [
                    "str"
                ]
            }
        },
        "TestWriteBox.test_init": {
            "name": "test_init",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [
                    "bool"
                ]
            }
        },
        "TestWriteBox.test_not_calling_typing_method_without_recipients": {
            "name": "test_not_calling_typing_method_without_recipients",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "write_box": []
            }
        },
        "TestWriteBox.test_generic_autocomplete_stream_and_topic": {
            "name": "test_generic_autocomplete_stream_and_topic",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "text": [
                    "typing.Callable[A, typing.Any]",
                    "bool"
                ],
                "state": [
                    "typing.Callable[A, typing.Any]",
                    "bool"
                ],
                "is_valid_stream": [
                    "typing.Callable[, ]"
                ],
                "required_typeahead": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Type"
                ],
                "topics": [
                    "str"
                ]
            }
        },
        "TestWriteBox.test_not_calling_typing_method_to_oneself": {
            "name": "test_not_calling_typing_method_to_oneself",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "write_box": [],
                "expect_method_called": [],
                "logged_on_user": [],
                "user_ids": [
                    "typing.Callable[, ]"
                ],
                "typing_recipient_user_ids": [],
                "user_id_email_dict": [
                    "typing.Callable[list[], None]"
                ]
            }
        },
        "TestWriteBox.test_not_calling_send_private_message_without_recipients": {
            "name": "test_not_calling_send_private_message_without_recipients",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "float"
                ],
                "mocker": [],
                "write_box": [],
                "widget_size": [
                    "int",
                    "float"
                ]
            }
        },
        "TestWriteBox.test__compose_attributes_reset_for_private_compose": {
            "name": "test__compose_attributes_reset_for_private_compose",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float"
                ],
                "mocker": [],
                "write_box": [],
                "widget_size": [
                    "int",
                    "str",
                    "list[int]",
                    "tuple[typing.Union[str,str,str]]",
                    "list[dict[str, typing.Any]]"
                ],
                "user_id_email_dict": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestWriteBox.test__compose_attributes_reset_for_stream_compose": {
            "name": "test__compose_attributes_reset_for_stream_compose",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "str",
                    "float"
                ],
                "mocker": [],
                "write_box": [],
                "widget_size": [
                    "int",
                    "float"
                ]
            }
        },
        "TestWriteBox.test_tidying_recipients_on_keypresses": {
            "name": "test_tidying_recipients_on_keypresses",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "write_box": [],
                "widget_size": [
                    "int",
                    "float",
                    "bytes"
                ],
                "key": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "None",
                    "bytearray"
                ],
                "raw_recipients": [],
                "tidied_recipients": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "TestWriteBox.test_footer_notification_on_invalid_recipients": {
            "name": "test_footer_notification_on_invalid_recipients",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "key": [
                    "int",
                    "str"
                ],
                "mocker": [],
                "widget_size": [
                    "int"
                ],
                "raw_recipients": [],
                "invalid_recipients": [
                    "str"
                ]
            }
        },
        "TestWriteBox.test_update_recipients": {
            "name": "test_update_recipients",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "header": [
                    "str",
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "expected_recipient_emails": [
                    "str",
                    "int"
                ],
                "expected_recipient_user_ids": [
                    "int",
                    "str",
                    "set[int]",
                    "None"
                ]
            }
        },
        "TestWriteBox.test_generic_autocomplete_no_prefix": {
            "name": "test_generic_autocomplete_no_prefix",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "text": [
                    "float"
                ],
                "state": [
                    "int",
                    "str"
                ]
            }
        },
        "TestWriteBox.test_generic_autocomplete_set_footer": {
            "name": "test_generic_autocomplete_set_footer",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "write_box": [],
                "state": [
                    "typing.Type",
                    "str"
                ],
                "footer_text": [
                    "int",
                    "str",
                    "None"
                ],
                "text": [
                    "str",
                    "None"
                ]
            }
        },
        "TestWriteBox.test_generic_autocomplete_mentions": {
            "name": "test_generic_autocomplete_mentions",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "text": [
                    "tuple[]",
                    "typing.IO",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "required_typeahead": [
                    "bool",
                    "str"
                ],
                "state": [
                    "tuple[]",
                    "typing.IO",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "TestWriteBox.test_generic_autocomplete_mentions_subscribers": {
            "name": "test_generic_autocomplete_mentions_subscribers",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "text": [
                    "tuple[]",
                    "typing.IO",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "required_typeahead": [
                    "bool",
                    "str"
                ],
                "state": [
                    "tuple[]",
                    "typing.IO",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "recipients": [
                    "int",
                    "str"
                ]
            }
        },
        "TestWriteBox.test_generic_autocomplete_user_mentions": {
            "name": "test_generic_autocomplete_user_mentions",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "mocker": [],
                "text": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected_distinct_prefix": [
                    "str"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "TestWriteBox.test_generic_autocomplete_streams": {
            "name": "test_generic_autocomplete_streams",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "text": [
                    "int",
                    "tuple[]",
                    "dict[, ]"
                ],
                "state": [
                    "int",
                    "tuple[]",
                    "dict[, ]"
                ],
                "required_typeahead": [
                    "typing.Callable[, ]"
                ],
                "to_pin": [
                    "str"
                ]
            }
        },
        "TestWriteBox.test_generic_autocomplete_emojis": {
            "name": "test_generic_autocomplete_emojis",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "text": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "state": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "required_typeahead": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "TestWriteBox.test__to_box_autocomplete": {
            "name": "test__to_box_autocomplete",
            "location": 895,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "write_box": [],
                "text": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "matching_users": [
                    "int",
                    "typing.MutableMapping",
                    "str",
                    "tuple[]"
                ],
                "matching_users_info": [
                    "int",
                    "typing.MutableMapping",
                    "str",
                    "tuple[]"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "TestWriteBox.test__to_box_autocomplete_with_spaces": {
            "name": "test__to_box_autocomplete_with_spaces",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "text": [],
                "expected_text": [
                    "str",
                    "float",
                    "None"
                ],
                "widget_size": [
                    "int",
                    "str",
                    "typing.Callable[_, None]",
                    "float"
                ],
                "user_id_email_dict": [
                    "int",
                    "str"
                ]
            }
        },
        "TestWriteBox.test__to_box_autocomplete_with_multiple_recipients": {
            "name": "test__to_box_autocomplete_with_multiple_recipients",
            "location": 1013,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "write_box": [],
                "text": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "matching_users": [
                    "int",
                    "typing.MutableMapping",
                    "str",
                    "tuple[]"
                ],
                "matching_users_info": [
                    "int",
                    "typing.MutableMapping",
                    "str",
                    "tuple[]"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "TestWriteBox.test__stream_box_autocomplete": {
            "name": "test__stream_box_autocomplete",
            "location": 1089,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "write_box": [],
                "text": [
                    "float",
                    "dict[str, typing.Any]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "state": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "to_pin": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "matching_streams": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestWriteBox.test__set_stream_write_box_style_markers": {
            "name": "test__set_stream_write_box_style_markers",
            "location": 1132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "stream_id": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "stream_name": [
                    "str",
                    "int",
                    "typing.TextIO",
                    "float",
                    "None",
                    "typing.Callable[, ]"
                ],
                "is_valid_stream": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "stream_access_type": [
                    "str",
                    "int"
                ],
                "expected_marker": [
                    "str",
                    "int"
                ],
                "stream_dict": [
                    "str",
                    "None",
                    "bool"
                ],
                "expected_color": [
                    "str",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "TestWriteBox.test__stream_box_autocomplete_with_spaces": {
            "name": "test__stream_box_autocomplete_with_spaces",
            "location": 1165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "write_box": [],
                "widget_size": [
                    "int",
                    "bytes",
                    "list[str]",
                    "float",
                    "str"
                ],
                "text": [],
                "expected_text": [
                    "str"
                ]
            }
        },
        "TestWriteBox.test__topic_box_autocomplete": {
            "name": "test__topic_box_autocomplete",
            "location": 1197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "write_box": [],
                "text": [
                    "int",
                    "str"
                ],
                "topics": [
                    "str"
                ],
                "matching_topics": [],
                "state": [
                    "int"
                ]
            }
        },
        "TestWriteBox.test__topic_box_autocomplete_with_spaces": {
            "name": "test__topic_box_autocomplete_with_spaces",
            "location": 1222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "write_box": [],
                "widget_size": [
                    "int",
                    "bytes",
                    "list[str]",
                    "float",
                    "str"
                ],
                "text": [],
                "expected_text": [
                    "int",
                    "list[str]",
                    "dict[, ]"
                ],
                "topics": [
                    "str"
                ]
            }
        },
        "TestWriteBox.test__process_typeaheads": {
            "name": "test__process_typeaheads",
            "location": 1262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "suggestions": [
                    "str",
                    "list[float]"
                ],
                "state": [
                    "bool",
                    "None",
                    "bytes",
                    "str"
                ],
                "expected_state": [
                    "int",
                    "None",
                    "list[]"
                ],
                "expected_typeahead": [
                    "int",
                    "dict[, ]"
                ],
                "is_truncated": [
                    "int",
                    "None",
                    "list[]"
                ],
                "mocker": []
            }
        },
        "TestWriteBox.test_keypress_SEND_MESSAGE_no_topic": {
            "name": "test_keypress_SEND_MESSAGE_no_topic",
            "location": 1305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "write_box": [],
                "msg_edit_state": [
                    "tuple[typing.Union[int,int]]"
                ],
                "topic_entered_by_user": [
                    "int",
                    "float"
                ],
                "topic_sent_to_server": [],
                "key": [
                    "bool",
                    "list[float]"
                ],
                "widget_size": [
                    "list[float]",
                    "float",
                    "int"
                ],
                "propagate_mode": [
                    "typing.Text"
                ]
            }
        },
        "TestWriteBox.test_keypress_typeahead_mode_autocomplete_key": {
            "name": "test_keypress_typeahead_mode_autocomplete_key",
            "location": 1354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "widget_size": [
                    "int",
                    "float"
                ],
                "current_typeahead_mode": [
                    "str",
                    "None",
                    "bool"
                ],
                "expected_typeahead_mode": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "expect_footer_was_reset": [
                    "bool"
                ],
                "key": [
                    "str",
                    "list[float]",
                    "typing.Mapping",
                    "float"
                ]
            }
        },
        "TestWriteBox.test_keypress_CYCLE_COMPOSE_FOCUS": {
            "name": "test_keypress_CYCLE_COMPOSE_FOCUS",
            "location": 1498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "tab_key": [
                    "int",
                    "list[int]",
                    "str"
                ],
                "initial_focus_name": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Iterator"
                ],
                "expected_focus_name": [
                    "str",
                    "int",
                    "None"
                ],
                "initial_focus_col_name": [
                    "str",
                    "tuple[]",
                    "int"
                ],
                "expected_focus_col_name": [
                    "str",
                    "int",
                    "float",
                    "tuple[]"
                ],
                "box_type": [
                    "bool",
                    "str",
                    "None"
                ],
                "msg_body_edit_enabled": [
                    "str",
                    "bool"
                ],
                "message_being_edited": [
                    "bool",
                    "str",
                    "None"
                ],
                "widget_size": [
                    "bool",
                    "str",
                    "None"
                ],
                "mocker": [],
                "stream_id": [
                    "int"
                ]
            }
        },
        "TestWriteBox.test_keypress_MARKDOWN_HELP": {
            "name": "test_keypress_MARKDOWN_HELP",
            "location": 1552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "key": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "list[str]"
                ],
                "widget_size": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "TestWriteBox.test_write_box_header_contents": {
            "name": "test_write_box_header_contents",
            "location": 1574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": [],
                "expected_box_size": [
                    "int",
                    "str",
                    "bytes",
                    "list[int]"
                ],
                "mocker": [],
                "msg_type": [
                    "typing.Type",
                    "typing.Sequence[int]",
                    "str",
                    "int",
                    "None"
                ],
                "user_id_email_dict": [
                    "str",
                    "int",
                    "list[str]",
                    "typing.Mapping"
                ]
            }
        },
        "TestPanelSearchBox.panel_search_box": {
            "name": "panel_search_box",
            "location": 1599,
            "return": [
                "PanelSearchBox"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestPanelSearchBox.test_init": {
            "name": "test_init",
            "location": 1606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "panel_search_box": [
                    "str",
                    "int"
                ]
            }
        },
        "TestPanelSearchBox.test_reset_search_text": {
            "name": "test_reset_search_text",
            "location": 1611,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "panel_search_box": []
            }
        },
        "TestPanelSearchBox.test_valid_char": {
            "name": "test_valid_char",
            "location": 1636,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "panel_search_box": [],
                "search_text": [
                    "str",
                    "bool"
                ],
                "entered_string": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "expected_result": [
                    "dict[, ]",
                    "str",
                    "bytes",
                    "typing.Mapping",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestPanelSearchBox.test_keypress_ENTER": {
            "name": "test_keypress_ENTER",
            "location": 1653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "panel_search_box": [],
                "widget_size": [
                    "bool",
                    "list[str]",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "enter_key": [
                    "str",
                    "None"
                ],
                "log": [
                    "str",
                    "Exception"
                ],
                "expect_body_focus_set": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestPanelSearchBox.test_keypress_GO_BACK": {
            "name": "test_keypress_GO_BACK",
            "location": 1692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "panel_search_box": [],
                "back_key": [
                    "str",
                    "typing.Any",
                    "None"
                ],
                "widget_size": [
                    "bool",
                    "float",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "TestWriteBox.test_keypress_CYCLE_COMPOSE_FOCUS.focus_val": {
            "name": "focus_val",
            "location": 1528,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "zulip-terminal-main/tests/ui_tools/test_buttons.py": {
        "TestTopButton.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestTopButton.top_button": {
            "name": "top_button",
            "location": 40,
            "return": [
                "TopButton"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestTopButton.test_init": {
            "name": "test_init",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "top_button": []
            }
        },
        "TestTopButton.test_update_count": {
            "name": "test_update_count",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "top_button": [],
                "old_count": [],
                "new_count": [],
                "new_count_str": [],
                "text_color": []
            }
        },
        "TestTopButton.test_update_widget": {
            "name": "test_update_widget",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "top_button": [],
                "prefix": [],
                "expected_prefix": [],
                "text_color": [],
                "count_text": [],
                "expected_suffix": []
            }
        },
        "TestStarredButton.test_count_style_init_argument_value": {
            "name": "test_count_style_init_argument_value",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "count": [
                    "int"
                ]
            }
        },
        "TestStreamButton.test_keypress_ENTER_TOGGLE_TOPIC": {
            "name": "test_keypress_ENTER_TOGGLE_TOPIC",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "stream_button": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestStreamButton.test_keypress_TOGGLE_MUTE_STREAM": {
            "name": "test_keypress_TOGGLE_MUTE_STREAM",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "key": [],
                "widget_size": [],
                "stream_button": [],
                "stream_id": [
                    "int"
                ],
                "stream_name": [
                    "typing.Text"
                ]
            }
        },
        "TestUserButton.test_activate_called_once_on_keypress": {
            "name": "test_activate_called_once_on_keypress",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "enter_key": [],
                "widget_size": [],
                "caption": [
                    "typing.Text"
                ],
                "email": [
                    "typing.Text"
                ],
                "user_id": [
                    "int"
                ]
            }
        },
        "TestUserButton.test_keypress_USER_INFO": {
            "name": "test_keypress_USER_INFO",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "user_button": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestEmojiButton.test_init_calls_top_button": {
            "name": "test_init_calls_top_button",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "emoji_unit": [],
                "to_vary_in_message": [],
                "message_fixture": [],
                "count": []
            }
        },
        "TestEmojiButton.test_keypress_emoji_button": {
            "name": "test_keypress_emoji_button",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "key": [],
                "emoji": [],
                "has_user_reacted": [],
                "is_selected_final": [],
                "widget_size": [],
                "message_fixture": [],
                "expected_reaction_count": []
            }
        },
        "TestTopicButton.test_init_calls_top_button": {
            "name": "test_init_calls_top_button",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "count": [],
                "title": [],
                "stream_id": [],
                "stream_name": [],
                "is_resolved": []
            }
        },
        "TestTopicButton.test_init_calls_mark_muted": {
            "name": "test_init_calls_mark_muted",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "stream_name": [],
                "title": [],
                "is_muted_topic_return_value": [],
                "is_muted_called": []
            }
        },
        "TestTopicButton.test_keypress_EXIT_TOGGLE_TOPIC": {
            "name": "test_keypress_EXIT_TOGGLE_TOPIC",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "topic_button": [],
                "key": [],
                "widget_size": []
            }
        },
        "TestMessageLinkButton.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestMessageLinkButton.message_link_button": {
            "name": "message_link_button",
            "location": 443,
            "return": [
                "zulipterminal.ui_tools.buttons.MessageLinkButton"
            ],
            "arguments": {
                "self": [],
                "caption": [
                    "typing.Text"
                ],
                "link": [
                    "typing.Text"
                ],
                "display_attr": [
                    "None"
                ]
            }
        },
        "TestMessageLinkButton.test_init": {
            "name": "test_init",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestMessageLinkButton.test_update_widget": {
            "name": "test_update_widget",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "caption": [],
                "expected_cursor_position": [],
                "display_attr": [
                    "None"
                ]
            }
        },
        "TestMessageLinkButton.test_handle_link": {
            "name": "test_handle_link",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "link": [],
                "handle_narrow_link_called": [],
                "process_media_called": []
            }
        },
        "TestMessageLinkButton.test__decode_stream_data": {
            "name": "test__decode_stream_data",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_data": [],
                "expected_response": []
            }
        },
        "TestMessageLinkButton.test__decode_message_id": {
            "name": "test__decode_message_id",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_id": [],
                "expected_return_value": []
            }
        },
        "TestMessageLinkButton.test__parse_narrow_link": {
            "name": "test__parse_narrow_link",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [],
                "expected_parsed_link": []
            }
        },
        "TestMessageLinkButton.test__validate_narrow_link": {
            "name": "test__validate_narrow_link",
            "location": 768,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_dict": [],
                "parsed_link": [],
                "is_user_subscribed_to_stream": [],
                "is_valid_stream": [],
                "topics_in_stream": [],
                "expected_error": []
            }
        },
        "TestMessageLinkButton.test__validate_and_patch_stream_data": {
            "name": "test__validate_and_patch_stream_data",
            "location": 853,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_dict": [],
                "parsed_link": [],
                "is_user_subscribed_to_stream": [],
                "is_valid_stream": [],
                "stream_id_from_name_return_value": [],
                "expected_parsed_link": [],
                "expected_error": []
            }
        },
        "TestMessageLinkButton.test__switch_narrow_to": {
            "name": "test__switch_narrow_to",
            "location": 925,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_link": [],
                "narrow_to_stream_called": [],
                "narrow_to_topic_called": []
            }
        },
        "TestMessageLinkButton.test_handle_narrow_link": {
            "name": "test_handle_narrow_link",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "error": [],
                "report_error_called": [],
                "_switch_narrow_to_called": [],
                "exit_popup_called": []
            }
        }
    },
    "zulip-terminal-main/tests/ui_tools/test_popups.py": {
        "TestPopUpConfirmationView.popup_view": {
            "name": "popup_view",
            "location": 46,
            "return": [
                "PopUpConfirmationView"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestPopUpConfirmationView.test_init": {
            "name": "test_init",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "popup_view": []
            }
        },
        "TestPopUpConfirmationView.test_exit_popup_yes": {
            "name": "test_exit_popup_yes",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "popup_view": []
            }
        },
        "TestPopUpConfirmationView.test_exit_popup_no": {
            "name": "test_exit_popup_no",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "popup_view": []
            }
        },
        "TestPopUpConfirmationView.test_exit_popup_GO_BACK": {
            "name": "test_exit_popup_GO_BACK",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "popup_view": [],
                "key": [
                    "str",
                    "bool",
                    "None"
                ],
                "widget_size": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "TestPopUpView.pop_up_view_autouse": {
            "name": "pop_up_view_autouse",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestPopUpView.test_init": {
            "name": "test_init",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestPopUpView.test_keypress_GO_BACK": {
            "name": "test_keypress_GO_BACK",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "dict[str, int]",
                    "dict[tuple[typing.Union[int,int]], str]",
                    "str",
                    "None"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestPopUpView.test_keypress_command_key": {
            "name": "test_keypress_command_key",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "widget_size": [
                    "int",
                    "list[float]"
                ]
            }
        },
        "TestPopUpView.test_keypress_navigation": {
            "name": "test_keypress_navigation",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "navigation_key": [
                    "int",
                    "str",
                    "set[str]",
                    "float"
                ],
                "widget_size": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "TestAboutView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestAboutView.test_keypress_exit_popup": {
            "name": "test_keypress_exit_popup",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Iterator"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestAboutView.test_keypress_exit_popup_invalid_key": {
            "name": "test_keypress_exit_popup_invalid_key",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget_size": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TestAboutView.test_feature_level_content": {
            "name": "test_feature_level_content",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "zulip_version": [
                    "str"
                ]
            }
        },
        "TestUserInfoView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "tidied_user_info_response": [
                    "str",
                    "dict[str, bytes]",
                    "None",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "TestUserInfoView.test__fetch_user_data": {
            "name": "test__fetch_user_data",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "set[str]",
                    "typing.Callable[, ]"
                ],
                "to_vary_in_each_user": [
                    "bool",
                    "dict[str, typing.Any]",
                    "set[]"
                ],
                "expected_key": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "expected_value": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "TestUserInfoView.test__fetch_user_data_USER_NOT_FOUND": {
            "name": "test__fetch_user_data_USER_NOT_FOUND",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestUserInfoView.test_keypress_exit_popup": {
            "name": "test_keypress_exit_popup",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "TestUserInfoView.test_keypress_exit_popup_invalid_key": {
            "name": "test_keypress_exit_popup_invalid_key",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget_size": [
                    "str",
                    "None"
                ]
            }
        },
        "TestFullRenderedMsgView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_box": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "TestFullRenderedMsgView.test_init": {
            "name": "test_init",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg_box": []
            }
        },
        "TestFullRenderedMsgView.test_keypress_exit_popup": {
            "name": "test_keypress_exit_popup",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestFullRenderedMsgView.test_keypress_exit_popup_invalid_key": {
            "name": "test_keypress_exit_popup_invalid_key",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget_size": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TestFullRenderedMsgView.test_keypress_show_msg_info": {
            "name": "test_keypress_show_msg_info",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "int"
                ]
            }
        },
        "TestFullRawMsgView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "msg_box": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "TestFullRawMsgView.test_init": {
            "name": "test_init",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg_box": []
            }
        },
        "TestFullRawMsgView.test_keypress_exit_popup": {
            "name": "test_keypress_exit_popup",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestFullRawMsgView.test_keypress_exit_popup_invalid_key": {
            "name": "test_keypress_exit_popup_invalid_key",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget_size": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TestFullRawMsgView.test_keypress_show_msg_info": {
            "name": "test_keypress_show_msg_info",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "int"
                ]
            }
        },
        "TestEditHistoryView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestEditHistoryView.test_init": {
            "name": "test_init",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEditHistoryView.test_keypress_exit_popup": {
            "name": "test_keypress_exit_popup",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestEditHistoryView.test_keypress_exit_popup_invalid_key": {
            "name": "test_keypress_exit_popup_invalid_key",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget_size": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TestEditHistoryView.test_keypress_show_msg_info": {
            "name": "test_keypress_show_msg_info",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "int"
                ]
            }
        },
        "TestEditHistoryView.test__make_edit_block": {
            "name": "test__make_edit_block",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "snapshot": [
                    "bool",
                    "None"
                ],
                "user_id": [
                    "int",
                    "None",
                    "list['Request']",
                    "str"
                ],
                "user_name_from_id_called": [
                    "int",
                    "None",
                    "dict[str, str]",
                    "typing.Any"
                ],
                "tag": [
                    "typing.Text"
                ]
            }
        },
        "TestEditHistoryView.test__get_author_prefix": {
            "name": "test__get_author_prefix",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "to_vary_in_snapshot": [
                    "typing.Mapping",
                    "dict[, ]",
                    "dict[str, str]",
                    "dict[str, list[typing.Any]]"
                ],
                "tag": [
                    "str"
                ],
                "expected_author_prefix": [
                    "int",
                    "float"
                ]
            }
        },
        "TestEditModeView.edit_mode_view": {
            "name": "edit_mode_view",
            "location": 737,
            "return": [
                "EditModeView"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "request": []
            }
        },
        "TestEditModeView.test_init": {
            "name": "test_init",
            "location": 746,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit_mode_view": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[..., str]"
                ]
            }
        },
        "TestEditModeView.test_select_edit_mode": {
            "name": "test_select_edit_mode",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit_mode_view": [
                    "str"
                ],
                "widget_size": [
                    "bool",
                    "float",
                    "tuple[typing.Union[int,int,int]]",
                    "tuple[typing.Union[float,float]]",
                    "bytes",
                    "list[list[int]]"
                ],
                "index_in_widgets": [
                    "str",
                    "int",
                    "None",
                    "tuple[]"
                ],
                "mode": [
                    "str",
                    "int"
                ],
                "key": [
                    "bool",
                    "str",
                    "dict[tuple[typing.Union[int,int]], int]"
                ]
            }
        },
        "TestMarkdownHelpView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestMarkdownHelpView.test_keypress_any_key": {
            "name": "test_keypress_any_key",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget_size": [
                    "str",
                    "int"
                ]
            }
        },
        "TestMarkdownHelpView.test_keypress_exit_popup": {
            "name": "test_keypress_exit_popup",
            "location": 805,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestHelpView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 817,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestHelpView.test_keypress_any_key": {
            "name": "test_keypress_any_key",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget_size": [
                    "str",
                    "int"
                ]
            }
        },
        "TestHelpView.test_keypress_exit_popup": {
            "name": "test_keypress_exit_popup",
            "location": 836,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "dict[str, int]",
                    "dict[tuple[typing.Union[int,int]], str]",
                    "str",
                    "None"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestMsgInfoView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "message_fixture": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "TestMsgInfoView.test_init": {
            "name": "test_init",
            "location": 873,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_fixture": [
                    "str"
                ]
            }
        },
        "TestMsgInfoView.test_keypress_any_key": {
            "name": "test_keypress_any_key",
            "location": 879,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget_size": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestMsgInfoView.test_keypress_edit_history": {
            "name": "test_keypress_edit_history",
            "location": 902,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_fixture": [
                    "dict[, ]",
                    "list[int]",
                    "dict[str, typing.Any]",
                    "str",
                    "int"
                ],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "bool",
                    "float"
                ],
                "realm_allow_edit_history": [
                    "int",
                    "str",
                    "None"
                ],
                "edited_message_id": [
                    "bool"
                ]
            }
        },
        "TestMsgInfoView.test_keypress_full_rendered_message": {
            "name": "test_keypress_full_rendered_message",
            "location": 939,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_fixture": [
                    "dict[, ]",
                    "str",
                    "bool",
                    "typing.Sequence[object]",
                    "list[int]"
                ],
                "key": [
                    "str",
                    "int"
                ],
                "widget_size": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int,int]]",
                    "str"
                ]
            }
        },
        "TestMsgInfoView.test_keypress_full_raw_message": {
            "name": "test_keypress_full_raw_message",
            "location": 965,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_fixture": [
                    "dict[, ]",
                    "str",
                    "bool",
                    "typing.Sequence[object]",
                    "list[int]"
                ],
                "key": [
                    "str",
                    "int"
                ],
                "widget_size": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int,int]]",
                    "str"
                ]
            }
        },
        "TestMsgInfoView.test_keypress_exit_popup": {
            "name": "test_keypress_exit_popup",
            "location": 993,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestMsgInfoView.test_keypress_view_in_browser": {
            "name": "test_keypress_view_in_browser",
            "location": 1001,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "widget_size": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "key": [
                    "int",
                    "str"
                ]
            }
        },
        "TestMsgInfoView.test_height_noreactions": {
            "name": "test_height_noreactions",
            "location": 1015,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMsgInfoView.test_height_reactions": {
            "name": "test_height_reactions",
            "location": 1073,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_fixture": [
                    "dict[str, typing.Any]"
                ],
                "to_vary_in_each_message": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestMsgInfoView.test_create_link_buttons": {
            "name": "test_create_link_buttons",
            "location": 1122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_link": [],
                "expected_text": [],
                "expected_attr_map": [
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]",
                    "typing.Mapping",
                    "typing.Match"
                ],
                "expected_focus_map": [],
                "expected_link_width": [
                    "int",
                    "float"
                ]
            }
        },
        "TestStreamInfoView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 1143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "general_stream": [
                    "bytes",
                    "str"
                ]
            }
        },
        "TestStreamInfoView.test_keypress_any_key": {
            "name": "test_keypress_any_key",
            "location": 1164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget_size": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestStreamInfoView.test_keypress_stream_members": {
            "name": "test_keypress_stream_members",
            "location": 1173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "str",
                    "int"
                ]
            }
        },
        "TestStreamInfoView.test_popup_height": {
            "name": "test_popup_height",
            "location": 1269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "general_stream": [],
                "to_vary_in_stream_data": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "float"
                ],
                "cached_message_retention_text": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "server_feature_level": [
                    "list[int]",
                    "str",
                    "typing.Sequence[float]",
                    "int"
                ],
                "expected_height": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "TestStreamInfoView.test_keypress_copy_stream_email": {
            "name": "test_keypress_copy_stream_email",
            "location": 1291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "str",
                    "int"
                ]
            }
        },
        "TestStreamInfoView.test_markup_descrption": {
            "name": "test_markup_descrption",
            "location": 1327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rendered_description": [
                    "str",
                    "None",
                    "tuple[str]",
                    "bool"
                ],
                "expected_markup": [
                    "int"
                ]
            }
        },
        "TestStreamInfoView.test_footlinks": {
            "name": "test_footlinks",
            "location": 1361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_links": [
                    "int"
                ],
                "expected_text": [
                    "str",
                    "int",
                    "None"
                ],
                "expected_attrib": [
                    "str",
                    "int"
                ],
                "expected_footlinks_width": [
                    "int",
                    "float"
                ]
            }
        },
        "TestStreamInfoView.test_keypress_exit_popup": {
            "name": "test_keypress_exit_popup",
            "location": 1382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "str",
                    "int"
                ]
            }
        },
        "TestStreamInfoView.test_checkbox_toggle_mute_stream": {
            "name": "test_checkbox_toggle_mute_stream",
            "location": 1390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "typing.Callable[..., None]",
                    "list[dict[str, float]]"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestStreamInfoView.test_checkbox_toggle_pin_stream": {
            "name": "test_checkbox_toggle_pin_stream",
            "location": 1403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "typing.Callable[..., None]",
                    "list[dict[str, float]]"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestStreamInfoView.test_checkbox_toggle_visual_notification": {
            "name": "test_checkbox_toggle_visual_notification",
            "location": 1416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestStreamMembersView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 1433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestStreamMembersView.test_keypress_exit_popup": {
            "name": "test_keypress_exit_popup",
            "location": 1447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "TestEmojiPickerView.mock_external_classes": {
            "name": "mock_external_classes",
            "location": 1460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "message_fixture": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "TestEmojiPickerView.test_update_emoji_list": {
            "name": "test_update_emoji_list",
            "location": 1510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emoji_units": [
                    "str",
                    "bool"
                ],
                "search_string": [],
                "assert_list": [
                    "str",
                    "bool",
                    "typing.Iterable[int]"
                ]
            }
        },
        "TestEmojiPickerView.test_mouse_event": {
            "name": "test_mouse_event",
            "location": 1534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "widget_size": [],
                "event": [],
                "button": [],
                "keypress": []
            }
        },
        "TestEmojiPickerView.test_keypress_search_emoji": {
            "name": "test_keypress_search_emoji",
            "location": 1549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestEmojiPickerView.test_keypress_exit_called": {
            "name": "test_keypress_exit_called",
            "location": 1562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "widget_size": [
                    "int",
                    "list[str]"
                ]
            }
        }
    },
    "zulip-terminal-main/tests/ui_tools/__init__.py": {},
    "zulip-terminal-main/tools/generate_hotkeys.py": {},
    "zulip-terminal-main/tools/gitlint-extra-rules.py": {
        "EndsWithDot.validate": {
            "name": "validate",
            "location": 11,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "AreaFormatting.validate": {
            "name": "validate",
            "location": 26,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "AreaFormatting.validate.deny_capital_text": {
            "name": "deny_capital_text",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "zulip-terminal-main/tools/lister.py": {
        "get_ftype": {
            "name": "get_ftype",
            "location": 12,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "fpath": [
                    "str",
                    "int"
                ],
                "use_shebang": [
                    "bool",
                    "str"
                ]
            }
        },
        "list_files": {
            "name": "list_files",
            "location": 34,
            "return": [
                "Union[(List[Union[(bytearray, bytes, int, memoryview, str, os.PathLike[Union[(bytearray, bytes, memoryview, str)]])]], collections.defaultdict[(str, Any)])]"
            ],
            "arguments": {
                "targets": [
                    "List",
                    "int",
                    "List[float]",
                    "str",
                    "bool"
                ],
                "ftypes": [
                    "List",
                    "List[str]",
                    "str",
                    "Set[str]",
                    "List[int]"
                ],
                "use_shebang": [
                    "bool",
                    "str",
                    "Optional[Tuple[int,int]]"
                ],
                "modified_only": [
                    "bool",
                    "str",
                    "int"
                ],
                "exclude": [
                    "List",
                    "str",
                    "Union[str,dict]"
                ],
                "group_by_ftype": [
                    "bool",
                    "int",
                    "List[int]",
                    "Tuple"
                ],
                "extless_only": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "zulip-terminal-main/tools/python_tools.py": {},
    "zulip-terminal-main/zulipterminal/api_types.py": {},
    "zulip-terminal-main/zulipterminal/core.py": {
        "Controller.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.raise_exception_in_main_thread": {
            "name": "raise_exception_in_main_thread",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_info": []
            }
        },
        "Controller.is_in_editor_mode": {
            "name": "is_in_editor_mode",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.enter_editor_mode_with": {
            "name": "enter_editor_mode_with",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "editor": []
            }
        },
        "Controller.exit_editor_mode": {
            "name": "exit_editor_mode",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.current_editor": {
            "name": "current_editor",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.show_loading": {
            "name": "show_loading",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.capture_stdout": {
            "name": "capture_stdout",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.restore_stdout": {
            "name": "restore_stdout",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.update_screen": {
            "name": "update_screen",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller._draw_screen": {
            "name": "_draw_screen",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.maximum_popup_dimensions": {
            "name": "maximum_popup_dimensions",
            "location": 190,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.show_pop_up": {
            "name": "show_pop_up",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_show": [],
                "style": []
            }
        },
        "Controller.is_any_popup_open": {
            "name": "is_any_popup_open",
            "location": 255,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.exit_popup": {
            "name": "exit_popup",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.show_help": {
            "name": "show_help",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.show_markdown_help": {
            "name": "show_markdown_help",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.show_topic_edit_mode": {
            "name": "show_topic_edit_mode",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "button": []
            }
        },
        "Controller.show_msg_info": {
            "name": "show_msg_info",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "topic_links": [],
                "message_links": [],
                "time_mentions": []
            }
        },
        "Controller.show_emoji_picker": {
            "name": "show_emoji_picker",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Controller.show_stream_info": {
            "name": "show_stream_info",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Controller.show_stream_members": {
            "name": "show_stream_members",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Controller.popup_with_message": {
            "name": "popup_with_message",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "width": []
            }
        },
        "Controller.show_about": {
            "name": "show_about",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.show_user_info": {
            "name": "show_user_info",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Controller.show_full_rendered_message": {
            "name": "show_full_rendered_message",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "topic_links": [],
                "message_links": [],
                "time_mentions": []
            }
        },
        "Controller.show_full_raw_message": {
            "name": "show_full_raw_message",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "topic_links": [],
                "message_links": [],
                "time_mentions": []
            }
        },
        "Controller.show_edit_history": {
            "name": "show_edit_history",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "topic_links": [],
                "message_links": [],
                "time_mentions": []
            }
        },
        "Controller.open_in_browser": {
            "name": "open_in_browser",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Controller.show_typing_notification": {
            "name": "show_typing_notification",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.report_error": {
            "name": "report_error",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "duration": [
                    "int"
                ]
            }
        },
        "Controller.report_success": {
            "name": "report_success",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "duration": [
                    "int"
                ]
            }
        },
        "Controller.report_warning": {
            "name": "report_warning",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "duration": [
                    "int"
                ]
            }
        },
        "Controller.show_media_confirmation_popup": {
            "name": "show_media_confirmation_popup",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "tool": [],
                "media_path": []
            }
        },
        "Controller.search_messages": {
            "name": "search_messages",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Controller.save_draft_confirmation_popup": {
            "name": "save_draft_confirmation_popup",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "draft": []
            }
        },
        "Controller.stream_muting_confirmation_popup": {
            "name": "stream_muting_confirmation_popup",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [],
                "stream_name": []
            }
        },
        "Controller.copy_to_clipboard": {
            "name": "copy_to_clipboard",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "text_category": []
            }
        },
        "Controller._narrow_to": {
            "name": "_narrow_to",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anchor": []
            }
        },
        "Controller.narrow_to_stream": {
            "name": "narrow_to_stream",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.narrow_to_topic": {
            "name": "narrow_to_topic",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.narrow_to_user": {
            "name": "narrow_to_user",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.narrow_to_all_messages": {
            "name": "narrow_to_all_messages",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.narrow_to_all_pm": {
            "name": "narrow_to_all_pm",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.narrow_to_all_starred": {
            "name": "narrow_to_all_starred",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.narrow_to_all_mentions": {
            "name": "narrow_to_all_mentions",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.deregister_client": {
            "name": "deregister_client",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.exit_handler": {
            "name": "exit_handler",
            "location": 629,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "signum": [],
                "frame": []
            }
        },
        "Controller._raise_exception": {
            "name": "_raise_exception",
            "location": 633,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.main": {
            "name": "main",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.show_loading.spinning_cursor": {
            "name": "spinning_cursor",
            "location": 142,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "Controller.maximum_popup_dimensions.clamp": {
            "name": "clamp",
            "location": 202,
            "return": [],
            "arguments": {
                "n": [],
                "minn": [],
                "maxn": []
            }
        }
    },
    "zulip-terminal-main/zulipterminal/helper.py": {
        "asynch": {
            "name": "asynch",
            "location": 125,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "_set_count_in_model": {
            "name": "_set_count_in_model",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "new_count": [
                    "int",
                    "list[Message]",
                    "str",
                    "list[]",
                    "dict[, ]",
                    "typing.Sequence[typing.Any]",
                    "typing.Type",
                    "typing.Callable[, ]"
                ],
                "changed_messages": [
                    "list[Message]",
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "unread_counts": []
            }
        },
        "_set_count_in_view": {
            "name": "_set_count_in_view",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "controller": [
                    "int",
                    "dict[, ]"
                ],
                "new_count": [],
                "changed_messages": [
                    "list[Message]",
                    "tuple[]"
                ],
                "unread_counts": [
                    "bytes"
                ]
            }
        },
        "set_count": {
            "name": "set_count",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "id_list": [
                    "list[C]",
                    "list[str]",
                    "set[int]"
                ],
                "controller": [],
                "new_count": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "index_messages": {
            "name": "index_messages",
            "location": 270,
            "return": [
                "_T2@@"
            ],
            "arguments": {
                "messages": [
                    "list[Message]"
                ],
                "model": [],
                "index": [
                    "_T2@@"
                ]
            }
        },
        "classify_unread_counts": {
            "name": "classify_unread_counts",
            "location": 449,
            "return": [
                "UnreadCounts"
            ],
            "arguments": {
                "model": [
                    "str"
                ]
            }
        },
        "match_user": {
            "name": "match_user",
            "location": 501,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "str",
                    "list[str]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "match_user_name_and_email": {
            "name": "match_user_name_and_email",
            "location": 517,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "str",
                    "list[list[typing.Any]]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "match_emoji": {
            "name": "match_emoji",
            "location": 534,
            "return": [
                "Any"
            ],
            "arguments": {
                "emoji": [
                    "str",
                    "None"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "match_topics": {
            "name": "match_topics",
            "location": 542,
            "return": [
                "list"
            ],
            "arguments": {
                "topic_names": [
                    "str",
                    "list[str]",
                    "set[str]"
                ],
                "search_text": [
                    "str"
                ]
            }
        },
        "match_stream": {
            "name": "match_stream",
            "location": 551,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "search_text": [
                    "str"
                ],
                "pinned_streams": [
                    "str",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "match_group": {
            "name": "match_group",
            "location": 609,
            "return": [
                "Any"
            ],
            "arguments": {
                "group_name": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "format_string": {
            "name": "format_string",
            "location": 617,
            "return": [
                "list"
            ],
            "arguments": {
                "names": [
                    "str",
                    "list[str]"
                ],
                "wrapping_text": [
                    "str"
                ]
            }
        },
        "powerset": {
            "name": "powerset",
            "location": 624,
            "return": [
                "list"
            ],
            "arguments": {
                "iterable": [
                    "list[]",
                    "list[typing.Union[str,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes]]",
                    "bytes"
                ],
                "map_func": [
                    "set[]"
                ]
            }
        },
        "canonicalize_color": {
            "name": "canonicalize_color",
            "location": 636,
            "return": [
                "str"
            ],
            "arguments": {
                "color": [
                    "str"
                ]
            }
        },
        "display_error_if_present": {
            "name": "display_error_if_present",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "tuple[typing.Union[str,int]]"
                ],
                "controller": []
            }
        },
        "check_narrow_and_notify": {
            "name": "check_narrow_and_notify",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "outer_narrow": [
                    "int"
                ],
                "inner_narrow": [
                    "int"
                ],
                "controller": []
            }
        },
        "notify_if_message_sent_outside_narrow": {
            "name": "notify_if_message_sent_outside_narrow",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "controller": [
                    "dict[str, typing.Any]",
                    "dict[int, typing.Any]",
                    "int",
                    "None"
                ]
            }
        },
        "hash_util_decode": {
            "name": "hash_util_decode",
            "location": 695,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "get_unused_fence": {
            "name": "get_unused_fence",
            "location": 705,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str",
                    "list[str]",
                    "list[typing.Optional[str]]"
                ]
            }
        },
        "suppress_output": {
            "name": "suppress_output",
            "location": 721,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "process_media": {
            "name": "process_media",
            "location": 740,
            "return": [
                "None"
            ],
            "arguments": {
                "controller": [],
                "link": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "download_media": {
            "name": "download_media",
            "location": 770,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "controller": [],
                "url": [],
                "show_download_status": [
                    "bool",
                    "str",
                    "list[int]"
                ]
            }
        },
        "open_media": {
            "name": "open_media",
            "location": 799,
            "return": [
                "None"
            ],
            "arguments": {
                "controller": [],
                "tool": [
                    "str",
                    "typing.Any",
                    "None"
                ],
                "media_path": [
                    "str"
                ]
            }
        },
        "asynch.wrapper": {
            "name": "wrapper",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "_set_count_in_model.update_unreads": {
            "name": "update_unreads",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "unreads": [],
                "key": []
            }
        }
    },
    "zulip-terminal-main/zulipterminal/model.py": {
        "sort_streams": {
            "name": "sort_streams",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "streams": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "Model.user_settings": {
            "name": "user_settings",
            "location": 226,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.message_retention_days_response": {
            "name": "message_retention_days_response",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "days": [],
                "org_default": []
            }
        },
        "Model.normalize_and_cache_message_retention_text": {
            "name": "normalize_and_cache_message_retention_text",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.get_focus_in_current_narrow": {
            "name": "get_focus_in_current_narrow",
            "location": 261,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.set_focus_in_current_narrow": {
            "name": "set_focus_in_current_narrow",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "focus_message": []
            }
        },
        "Model.is_search_narrow": {
            "name": "is_search_narrow",
            "location": 271,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.set_narrow": {
            "name": "set_narrow",
            "location": 278,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.set_search_narrow": {
            "name": "set_search_narrow",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_query": []
            }
        },
        "Model.unset_search_narrow": {
            "name": "unset_search_narrow",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.get_message_ids_in_current_narrow": {
            "name": "get_message_ids_in_current_narrow",
            "location": 337,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.current_narrow_contains_message": {
            "name": "current_narrow_contains_message",
            "location": 363,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Model._notify_server_of_presence": {
            "name": "_notify_server_of_presence",
            "location": 402,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._start_presence_updates": {
            "name": "_start_presence_updates",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.toggle_message_reaction": {
            "name": "toggle_message_reaction",
            "location": 433,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "reaction_to_toggle": []
            }
        },
        "Model.has_user_reacted_to_message": {
            "name": "has_user_reacted_to_message",
            "location": 464,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Model.session_draft_message": {
            "name": "session_draft_message",
            "location": 480,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.save_draft": {
            "name": "save_draft",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "draft": []
            }
        },
        "Model.toggle_message_star_status": {
            "name": "toggle_message_star_status",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Model.mark_message_ids_as_read": {
            "name": "mark_message_ids_as_read",
            "location": 498,
            "return": [],
            "arguments": {
                "self": [],
                "id_list": []
            }
        },
        "Model.send_typing_status_by_user_ids": {
            "name": "send_typing_status_by_user_ids",
            "location": 511,
            "return": [],
            "arguments": {
                "self": [],
                "recipient_user_ids": []
            }
        },
        "Model.send_private_message": {
            "name": "send_private_message",
            "location": 523,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "recipients": [],
                "content": []
            }
        },
        "Model.send_stream_message": {
            "name": "send_stream_message",
            "location": 539,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "stream": [],
                "topic": [],
                "content": []
            }
        },
        "Model.update_private_message": {
            "name": "update_private_message",
            "location": 553,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "msg_id": [],
                "content": []
            }
        },
        "Model.update_stream_message": {
            "name": "update_stream_message",
            "location": 562,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "topic": [],
                "message_id": [],
                "propagate_mode": [],
                "content": []
            }
        },
        "Model.generate_all_emoji_data": {
            "name": "generate_all_emoji_data",
            "location": 612,
            "return": [
                "Tuple[(collections.OrderedDict[(Any, Union[(zulipterminal.helper.EmojiData, Dict[(str, Any)])])], list)]"
            ],
            "arguments": {
                "self": [],
                "custom_emoji": []
            }
        },
        "Model.get_messages": {
            "name": "get_messages",
            "location": 644,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._store_content_length_restrictions": {
            "name": "_store_content_length_restrictions",
            "location": 685,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.modernize_message_response": {
            "name": "modernize_message_response",
            "location": 702,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "message": [
                    "_T0@@"
                ]
            }
        },
        "Model.fetch_message_history": {
            "name": "fetch_message_history",
            "location": 729,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "message_id": []
            }
        },
        "Model.fetch_raw_message_content": {
            "name": "fetch_raw_message_content",
            "location": 741,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "message_id": []
            }
        },
        "Model._fetch_topics_in_streams": {
            "name": "_fetch_topics_in_streams",
            "location": 752,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "stream_list": []
            }
        },
        "Model.topics_in_stream": {
            "name": "topics_in_stream",
            "location": 769,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Model.exception_safe_result": {
            "name": "exception_safe_result",
            "location": 779,
            "return": [
                "Any"
            ],
            "arguments": {
                "future": []
            }
        },
        "Model.is_muted_stream": {
            "name": "is_muted_stream",
            "location": 785,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Model.is_muted_topic": {
            "name": "is_muted_topic",
            "location": 788,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stream_id": [],
                "topic": []
            }
        },
        "Model._fetch_initial_data": {
            "name": "_fetch_initial_data",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.get_other_subscribers_in_stream": {
            "name": "get_other_subscribers_in_stream",
            "location": 831,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "stream_id": [],
                "stream_name": []
            }
        },
        "Model.get_user_info": {
            "name": "get_user_info",
            "location": 853,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Model.get_all_users": {
            "name": "get_all_users",
            "location": 905,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.user_name_from_id": {
            "name": "user_name_from_id",
            "location": 1028,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Model._subscribe_to_streams": {
            "name": "_subscribe_to_streams",
            "location": 1039,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscriptions": []
            }
        },
        "Model._group_info_from_realm_user_groups": {
            "name": "_group_info_from_realm_user_groups",
            "location": 1085,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "groups": []
            }
        },
        "Model.toggle_stream_muted_status": {
            "name": "toggle_stream_muted_status",
            "location": 1104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Model.stream_id_from_name": {
            "name": "stream_id_from_name",
            "location": 1116,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "stream_name": []
            }
        },
        "Model.stream_access_type": {
            "name": "stream_access_type",
            "location": 1122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Model.is_pinned_stream": {
            "name": "is_pinned_stream",
            "location": 1132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Model.toggle_stream_pinned_status": {
            "name": "toggle_stream_pinned_status",
            "location": 1135,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Model.is_visual_notifications_enabled": {
            "name": "is_visual_notifications_enabled",
            "location": 1146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Model.toggle_stream_visual_notifications": {
            "name": "toggle_stream_visual_notifications",
            "location": 1152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Model.is_user_subscribed_to_stream": {
            "name": "is_user_subscribed_to_stream",
            "location": 1163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Model._handle_subscription_event": {
            "name": "_handle_subscription_event",
            "location": 1166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Model._handle_typing_event": {
            "name": "_handle_typing_event",
            "location": 1243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Model.is_valid_private_recipient": {
            "name": "is_valid_private_recipient",
            "location": 1279,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "recipient_email": [],
                "recipient_name": []
            }
        },
        "Model.is_valid_stream": {
            "name": "is_valid_stream",
            "location": 1289,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stream_name": []
            }
        },
        "Model.notify_user": {
            "name": "notify_user",
            "location": 1295,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Model._handle_message_event": {
            "name": "_handle_message_event",
            "location": 1356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Model._update_topic_index": {
            "name": "_update_topic_index",
            "location": 1436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [],
                "topic_name": []
            }
        },
        "Model._handle_update_message_event": {
            "name": "_handle_update_message_event",
            "location": 1454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Model._handle_reaction_event": {
            "name": "_handle_reaction_event",
            "location": 1517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Model._handle_update_message_flags_event": {
            "name": "_handle_update_message_flags_event",
            "location": 1547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Model.formatted_local_time": {
            "name": "formatted_local_time",
            "location": 1605,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "timestamp": []
            }
        },
        "Model._handle_update_emoji_event": {
            "name": "_handle_update_emoji_event",
            "location": 1620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Model._update_rendered_view": {
            "name": "_update_rendered_view",
            "location": 1632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg_id": []
            }
        },
        "Model._handle_user_settings_event": {
            "name": "_handle_user_settings_event",
            "location": 1688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Model._handle_update_global_notifications_event": {
            "name": "_handle_update_global_notifications_event",
            "location": 1700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Model._handle_update_display_settings_event": {
            "name": "_handle_update_display_settings_event",
            "location": 1706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Model._register_desired_events": {
            "name": "_register_desired_events",
            "location": 1723,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.poll_for_events": {
            "name": "poll_for_events",
            "location": 1749,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model._subscribe_to_streams.make_reduced_stream_data": {
            "name": "make_reduced_stream_data",
            "location": 1040,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "Model._handle_subscription_event.get_stream_by_id": {
            "name": "get_stream_by_id",
            "location": 1173,
            "return": [],
            "arguments": {
                "streams": [],
                "stream_id": []
            }
        }
    },
    "zulip-terminal-main/zulipterminal/platform_code.py": {
        "notify": {
            "name": "notify",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "title": [
                    "str",
                    "Tuple",
                    "List[str]",
                    "AnyStr",
                    "int"
                ],
                "text": [
                    "str",
                    "Tuple",
                    "List[str]",
                    "AnyStr",
                    "int"
                ]
            }
        },
        "successful_GUI_return_code": {
            "name": "successful_GUI_return_code",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "normalized_file_path": {
            "name": "normalized_file_path",
            "location": 71,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "zulip-terminal-main/zulipterminal/server_url.py": {
        "hash_util_encode": {
            "name": "hash_util_encode",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "encode_stream": {
            "name": "encode_stream",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "stream_id": [
                    "int",
                    "str",
                    "bytes"
                ],
                "stream_name": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "near_stream_message_url": {
            "name": "near_stream_message_url",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "server_url": [
                    "str",
                    "int"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "near_pm_message_url": {
            "name": "near_pm_message_url",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "server_url": [
                    "str",
                    "int"
                ],
                "message": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "near_message_url": {
            "name": "near_message_url",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "server_url": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "zulip-terminal-main/zulipterminal/ui.py": {
        "View.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "View.left_column_view": {
            "name": "left_column_view",
            "location": 48,
            "return": [
                "Tuple[(zulipterminal.ui_tools.views.LeftColumnView, zulipterminal.ui_tools.views.TabView)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.middle_column_view": {
            "name": "middle_column_view",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.right_column_view": {
            "name": "right_column_view",
            "location": 69,
            "return": [
                "Tuple[(Any, zulipterminal.ui_tools.views.TabView)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.get_random_help": {
            "name": "get_random_help",
            "location": 87,
            "return": [
                "List[Union[(str, Tuple[(str, str)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.set_footer_text": {
            "name": "set_footer_text",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text_list": [
                    "None"
                ],
                "style": [
                    "typing.Text"
                ],
                "duration": [
                    "None"
                ]
            }
        },
        "View.set_typeahead_footer": {
            "name": "set_typeahead_footer",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suggestions": [],
                "state": [],
                "is_truncated": []
            }
        },
        "View.footer_view": {
            "name": "footer_view",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.main_window": {
            "name": "main_window",
            "location": 144,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.show_left_panel": {
            "name": "show_left_panel",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.show_right_panel": {
            "name": "show_right_panel",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.keypress": {
            "name": "keypress",
            "location": 236,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "View.mouse_event": {
            "name": "mouse_event",
            "location": 314,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "event": [],
                "button": [],
                "col": [],
                "row": [],
                "focus": []
            }
        },
        "Screen.write": {
            "name": "write",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "zulip-terminal-main/zulipterminal/unicode_emojis.py": {},
    "zulip-terminal-main/zulipterminal/urwid_types.py": {},
    "zulip-terminal-main/zulipterminal/version.py": {},
    "zulip-terminal-main/zulipterminal/__init__.py": {},
    "zulip-terminal-main/zulipterminal/cli/run.py": {
        "in_color": {
            "name": "in_color",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "color": [],
                "text": [
                    "str"
                ]
            }
        },
        "exit_with_error": {
            "name": "exit_with_error",
            "location": 68,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "error_message": [
                    "str",
                    "bool",
                    "typing.Callable[[], T]"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 77,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "argv": [
                    "list[str]",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "styled_input": {
            "name": "styled_input",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "label": [
                    "str",
                    "int",
                    "tuple[]"
                ]
            }
        },
        "get_login_id": {
            "name": "get_login_id",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "realm_url": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_api_key": {
            "name": "get_api_key",
            "location": 194,
            "return": [
                "Tuple[(requests.models.Response, Any)]"
            ],
            "arguments": {
                "realm_url": [
                    "str",
                    "int"
                ]
            }
        },
        "fetch_zuliprc": {
            "name": "fetch_zuliprc",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "zuliprc_path": [
                    "str"
                ]
            }
        },
        "_write_zuliprc": {
            "name": "_write_zuliprc",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "to_path": [
                    "str",
                    "list[str]",
                    "float",
                    "None"
                ]
            }
        },
        "parse_zuliprc": {
            "name": "parse_zuliprc",
            "location": 266,
            "return": [
                "Dict[(str, Tuple[(str, str)])]"
            ],
            "arguments": {
                "zuliprc_str": [
                    "str",
                    "int"
                ]
            }
        },
        "list_themes": {
            "name": "list_themes",
            "location": 322,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 336,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "options": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "zulip-terminal-main/zulipterminal/cli/__init__.py": {},
    "zulip-terminal-main/zulipterminal/config/color.py": {
        "color_properties": {
            "name": "color_properties",
            "location": 55,
            "return": [
                "Type[enum.Enum]"
            ],
            "arguments": {
                "colors": [
                    "List[tuple[Union[Any,Any]]]",
                    "List[Tuple[Any,Any]]",
                    "List[tuple]",
                    "Iterable[int]"
                ]
            }
        }
    },
    "zulip-terminal-main/zulipterminal/config/keys.py": {
        "is_command_key": {
            "name": "is_command_key",
            "location": 424,
            "return": [
                "bool"
            ],
            "arguments": {
                "command": [
                    "int",
                    "str",
                    "bytes",
                    "None"
                ],
                "key": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "keys_for_command": {
            "name": "keys_for_command",
            "location": 435,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "primary_key_for_command": {
            "name": "primary_key_for_command",
            "location": 445,
            "return": [
                "str"
            ],
            "arguments": {
                "command": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "commands_for_random_tips": {
            "name": "commands_for_random_tips",
            "location": 452,
            "return": [
                "List[Dict[(str, Union[(bool, str, List[str])])]]"
            ],
            "arguments": {}
        }
    },
    "zulip-terminal-main/zulipterminal/config/markdown_examples.py": {},
    "zulip-terminal-main/zulipterminal/config/regexes.py": {},
    "zulip-terminal-main/zulipterminal/config/symbols.py": {},
    "zulip-terminal-main/zulipterminal/config/themes.py": {
        "all_themes": {
            "name": "all_themes",
            "location": 132,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "aliased_themes": {
            "name": "aliased_themes",
            "location": 136,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "complete_and_incomplete_themes": {
            "name": "complete_and_incomplete_themes",
            "location": 140,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {}
        },
        "generate_theme": {
            "name": "generate_theme",
            "location": 153,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "theme_name": [
                    "str",
                    "float",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "color_depth": [
                    "str"
                ]
            }
        },
        "validate_colors": {
            "name": "validate_colors",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "theme_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "color_depth": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Any",
                    "int",
                    "Iterable[float]",
                    "Callable",
                    "Optional[Callable]"
                ]
            }
        },
        "parse_themefile": {
            "name": "parse_themefile",
            "location": 191,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "theme_styles": [
                    "Dict",
                    "Dict[Tuple[int,...],float]",
                    "Dict[tuple[Union[int,...]],float]"
                ],
                "color_depth": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "add_pygments_style": {
            "name": "add_pygments_style",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "theme_meta": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "urwid_theme": [
                    "List[dict]",
                    "List[list]",
                    "List[Dict]",
                    "int"
                ]
            }
        }
    },
    "zulip-terminal-main/zulipterminal/config/ui_mappings.py": {},
    "zulip-terminal-main/zulipterminal/config/ui_sizes.py": {},
    "zulip-terminal-main/zulipterminal/config/__init__.py": {},
    "zulip-terminal-main/zulipterminal/scripts/render_symbols.py": {
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "zulip-terminal-main/zulipterminal/scripts/__init__.py": {},
    "zulip-terminal-main/zulipterminal/themes/colors_gruvbox.py": {},
    "zulip-terminal-main/zulipterminal/themes/gruvbox_dark.py": {},
    "zulip-terminal-main/zulipterminal/themes/gruvbox_light.py": {},
    "zulip-terminal-main/zulipterminal/themes/zt_blue.py": {},
    "zulip-terminal-main/zulipterminal/themes/zt_dark.py": {},
    "zulip-terminal-main/zulipterminal/themes/zt_light.py": {},
    "zulip-terminal-main/zulipterminal/themes/__init__.py": {},
    "zulip-terminal-main/zulipterminal/ui_tools/boxes.py": {
        "WriteBox.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": []
            }
        },
        "WriteBox._set_compose_attributes_to_defaults": {
            "name": "_set_compose_attributes_to_defaults",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteBox.main_view": {
            "name": "main_view",
            "location": 148,
            "return": [
                "Optional[List[nothing]]"
            ],
            "arguments": {
                "self": [],
                "new": []
            }
        },
        "WriteBox.set_editor_mode": {
            "name": "set_editor_mode",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteBox._set_regular_and_typing_recipient_user_ids": {
            "name": "_set_regular_and_typing_recipient_user_ids",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id_list": []
            }
        },
        "WriteBox.send_stop_typing_status": {
            "name": "send_stop_typing_status",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteBox.private_box_view": {
            "name": "private_box_view",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteBox.update_recipients": {
            "name": "update_recipients",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write_box": []
            }
        },
        "WriteBox._tidy_valid_recipients_and_notify_invalid_ones": {
            "name": "_tidy_valid_recipients_and_notify_invalid_ones",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "write_box": []
            }
        },
        "WriteBox._setup_common_stream_compose": {
            "name": "_setup_common_stream_compose",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [],
                "caption": [],
                "title": []
            }
        },
        "WriteBox.stream_box_view": {
            "name": "stream_box_view",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [],
                "caption": [
                    "typing.Text"
                ],
                "title": [
                    "typing.Text"
                ]
            }
        },
        "WriteBox.stream_box_edit_view": {
            "name": "stream_box_edit_view",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [],
                "caption": [
                    "typing.Text"
                ],
                "title": [
                    "typing.Text"
                ]
            }
        },
        "WriteBox._set_stream_write_box_style": {
            "name": "_set_stream_write_box_style",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [],
                "new_text": []
            }
        },
        "WriteBox._to_box_autocomplete": {
            "name": "_to_box_autocomplete",
            "location": 442,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "state": []
            }
        },
        "WriteBox._topic_box_autocomplete": {
            "name": "_topic_box_autocomplete",
            "location": 465,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "state": []
            }
        },
        "WriteBox._stream_box_autocomplete": {
            "name": "_stream_box_autocomplete",
            "location": 473,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "state": []
            }
        },
        "WriteBox.generic_autocomplete": {
            "name": "generic_autocomplete",
            "location": 488,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "state": []
            }
        },
        "WriteBox._process_typeaheads": {
            "name": "_process_typeaheads",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typeaheads": [],
                "state": [],
                "suggestions": []
            }
        },
        "WriteBox.autocomplete_mentions": {
            "name": "autocomplete_mentions",
            "location": 559,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "prefix_string": []
            }
        },
        "WriteBox.autocomplete_users": {
            "name": "autocomplete_users",
            "location": 573,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "prefix_string": []
            }
        },
        "WriteBox.autocomplete_groups": {
            "name": "autocomplete_groups",
            "location": 615,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "prefix_string": []
            }
        },
        "WriteBox.autocomplete_streams": {
            "name": "autocomplete_streams",
            "location": 629,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "prefix_string": []
            }
        },
        "WriteBox.autocomplete_stream_and_topic": {
            "name": "autocomplete_stream_and_topic",
            "location": 644,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "prefix_string": []
            }
        },
        "WriteBox.validate_and_patch_autocomplete_stream_and_topic": {
            "name": "validate_and_patch_autocomplete_stream_and_topic",
            "location": 663,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "autocomplete_map": [],
                "prefix_indices": []
            }
        },
        "WriteBox.autocomplete_emojis": {
            "name": "autocomplete_emojis",
            "location": 698,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "prefix_string": []
            }
        },
        "WriteBox.keypress": {
            "name": "keypress",
            "location": 707,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "MessageBox.__init__": {
            "name": "__init__",
            "location": 910,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "model": [],
                "last_message": []
            }
        },
        "MessageBox.need_recipient_header": {
            "name": "need_recipient_header",
            "location": 975,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox._is_private_message_to_self": {
            "name": "_is_private_message_to_self",
            "location": 1007,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.stream_header": {
            "name": "stream_header",
            "location": 1014,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.private_header": {
            "name": "private_header",
            "location": 1036,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.top_header_bar": {
            "name": "top_header_bar",
            "location": 1052,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "message_view": []
            }
        },
        "MessageBox.top_search_bar": {
            "name": "top_search_bar",
            "location": 1058,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.reactions_view": {
            "name": "reactions_view",
            "location": 1111,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "reactions": []
            }
        },
        "MessageBox.footlinks_view": {
            "name": "footlinks_view",
            "location": 1162,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "message_links": []
            }
        },
        "MessageBox.soup2markup": {
            "name": "soup2markup",
            "location": 1219,
            "return": [
                "Tuple[(list, Any, Any)]"
            ],
            "arguments": {
                "cls": [],
                "soup": [],
                "metadata": []
            }
        },
        "MessageBox.main_view": {
            "name": "main_view",
            "location": 1482,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.update_message_author_status": {
            "name": "update_message_author_status",
            "location": 1643,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.transform_content": {
            "name": "transform_content",
            "location": 1664,
            "return": [
                "Tuple[(Tuple[(None, list)], Any, Any)]"
            ],
            "arguments": {
                "cls": [],
                "content": [],
                "server_url": []
            }
        },
        "MessageBox.indent_quoted_content": {
            "name": "indent_quoted_content",
            "location": 1687,
            "return": [
                "int"
            ],
            "arguments": {
                "soup": [],
                "padding_char": []
            }
        },
        "MessageBox.selectable": {
            "name": "selectable",
            "location": 1738,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBox.mouse_event": {
            "name": "mouse_event",
            "location": 1743,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "event": [],
                "button": [],
                "col": [],
                "row": [],
                "focus": []
            }
        },
        "MessageBox.keypress": {
            "name": "keypress",
            "location": 1755,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": [
                    "_T1@@"
                ]
            }
        },
        "SearchBox.__init__": {
            "name": "__init__",
            "location": 1980,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "SearchBox.main_view": {
            "name": "main_view",
            "location": 1984,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchBox.keypress": {
            "name": "keypress",
            "location": 2012,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "PanelSearchBox.__init__": {
            "name": "__init__",
            "location": 2036,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "panel_view": [],
                "search_command": [],
                "update_function": []
            }
        },
        "PanelSearchBox.reset_search_text": {
            "name": "reset_search_text",
            "location": 2048,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PanelSearchBox.valid_char": {
            "name": "valid_char",
            "location": 2052,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ch": []
            }
        },
        "PanelSearchBox.keypress": {
            "name": "keypress",
            "location": 2066,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "WriteBox.private_box_view.on_type_send_status": {
            "name": "on_type_send_status",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "edit": [],
                "new_edit_text": []
            }
        },
        "WriteBox.private_box_view.track_idleness_and_update_status": {
            "name": "track_idleness_and_update_status",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "zulip-terminal-main/zulipterminal/ui_tools/buttons.py": {
        "TopButton.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopButton.update_count": {
            "name": "update_count",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "str"
                ],
                "text_color": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "TopButton.update_widget": {
            "name": "update_widget",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count_text": [
                    "str"
                ],
                "text_color": [
                    "str",
                    "None",
                    "int",
                    "list[typing.Any]",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "TopButton.activate": {
            "name": "activate",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "TopButton.keypress": {
            "name": "keypress",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "str"
                ],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "HomeButton.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PMButton.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionedButton.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StarredButton.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamButton.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamButton.mark_muted": {
            "name": "mark_muted",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamButton.mark_unmuted": {
            "name": "mark_unmuted",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unread_count": [
                    "int",
                    "float"
                ]
            }
        },
        "StreamButton.keypress": {
            "name": "keypress",
            "location": 215,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "str"
                ],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "UserButton.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserButton._narrow_with_compose": {
            "name": "_narrow_with_compose",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserButton.keypress": {
            "name": "keypress",
            "location": 269,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "str"
                ],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TopicButton.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicButton.mark_muted": {
            "name": "mark_muted",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicButton.keypress": {
            "name": "keypress",
            "location": 321,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "str"
                ],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "EmojiButton.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmojiButton._has_user_reacted_to_msg": {
            "name": "_has_user_reacted_to_msg",
            "location": 357,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmojiButton.get_update_widget_text": {
            "name": "get_update_widget_text",
            "location": 362,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_reacted": [
                    "str",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "EmojiButton.mouse_event": {
            "name": "mouse_event",
            "location": 367,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "bytes",
                    "None",
                    "int",
                    "typing.Iterable[]"
                ],
                "event": [
                    "int",
                    "str"
                ],
                "button": [
                    "int",
                    "str"
                ],
                "col": [
                    "int",
                    "str"
                ],
                "row": [
                    "int",
                    "str"
                ],
                "focus": [
                    "int",
                    "str"
                ]
            }
        },
        "EmojiButton.update_emoji_button": {
            "name": "update_emoji_button",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageLinkButton.__init__": {
            "name": "__init__",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageLinkButton.update_widget": {
            "name": "update_widget",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caption": [],
                "display_attr": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "MessageLinkButton.handle_link": {
            "name": "handle_link",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageLinkButton._decode_stream_data": {
            "name": "_decode_stream_data",
            "location": 436,
            "return": [
                "DecodedStream"
            ],
            "arguments": {
                "encoded_stream_data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MessageLinkButton._decode_message_id": {
            "name": "_decode_message_id",
            "location": 453,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "message_id": []
            }
        },
        "MessageLinkButton._parse_narrow_link": {
            "name": "_parse_narrow_link",
            "location": 463,
            "return": [
                "Union[(ParsedNarrowLink, dict)]"
            ],
            "arguments": {
                "cls": [],
                "link": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "MessageLinkButton._validate_and_patch_stream_data": {
            "name": "_validate_and_patch_stream_data",
            "location": 519,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parsed_link": [
                    "str"
                ]
            }
        },
        "MessageLinkButton._validate_narrow_link": {
            "name": "_validate_narrow_link",
            "location": 549,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parsed_link": []
            }
        },
        "MessageLinkButton._switch_narrow_to": {
            "name": "_switch_narrow_to",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_link": [
                    "str"
                ]
            }
        },
        "MessageLinkButton.handle_narrow_link": {
            "name": "handle_narrow_link",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditModeButton.__init__": {
            "name": "__init__",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditModeButton.set_selected_mode": {
            "name": "set_selected_mode",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ]
            }
        }
    },
    "zulip-terminal-main/zulipterminal/ui_tools/tables.py": {
        "parse_html_table": {
            "name": "parse_html_table",
            "location": 4,
            "return": [
                "Tuple[(list, List[list])]"
            ],
            "arguments": {
                "table_element": []
            }
        },
        "pad_row_strip": {
            "name": "pad_row_strip",
            "location": 35,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "row_strip": [
                    "_T0@@"
                ],
                "fill_char": [
                    "typing.Text"
                ],
                "fill_width": [
                    "int"
                ]
            }
        },
        "row_with_styled_content": {
            "name": "row_with_styled_content",
            "location": 72,
            "return": [
                "list"
            ],
            "arguments": {
                "row": [],
                "column_alignments": [],
                "column_widths": [],
                "vertical_bar": [],
                "row_style": [
                    "None"
                ]
            }
        },
        "row_with_only_border": {
            "name": "row_with_only_border",
            "location": 95,
            "return": [
                "list"
            ],
            "arguments": {
                "lcorner": [],
                "line": [],
                "connector": [],
                "rcorner": [],
                "column_widths": [],
                "newline": [
                    "bool"
                ]
            }
        },
        "render_table": {
            "name": "render_table",
            "location": 117,
            "return": [
                "list"
            ],
            "arguments": {
                "table_element": []
            }
        }
    },
    "zulip-terminal-main/zulipterminal/ui_tools/utils.py": {
        "create_msg_box_list": {
            "name": "create_msg_box_list",
            "location": 9,
            "return": [
                "list"
            ],
            "arguments": {
                "model": [
                    "int"
                ],
                "messages": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "is_muted": {
            "name": "is_muted",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "zulipterminal.helper.Message",
                    "Type[T]"
                ],
                "model": [
                    "Type[T]",
                    "zulipterminal.helper.Message",
                    "str",
                    "int"
                ]
            }
        },
        "is_unsubscribed_message": {
            "name": "is_unsubscribed_message",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "zulipterminal.helper.Message",
                    "int",
                    "Optional[str]"
                ],
                "model": [
                    "zulipterminal.helper.Message",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "zulip-terminal-main/zulipterminal/ui_tools/views.py": {
        "ModListWalker.set_focus": {
            "name": "set_focus",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": []
            }
        },
        "ModListWalker._set_focus": {
            "name": "_set_focus",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ModListWalker.extend": {
            "name": "extend",
            "location": 87,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "items": [],
                "focus_position": [
                    "None"
                ]
            }
        },
        "MessageView.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "view": []
            }
        },
        "MessageView.main_view": {
            "name": "main_view",
            "location": 114,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageView.load_old_messages": {
            "name": "load_old_messages",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anchor": []
            }
        },
        "MessageView.load_new_messages": {
            "name": "load_new_messages",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anchor": []
            }
        },
        "MessageView.mouse_event": {
            "name": "mouse_event",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "event": [],
                "button": [],
                "col": [],
                "row": [],
                "focus": []
            }
        },
        "MessageView.keypress": {
            "name": "keypress",
            "location": 186,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "MessageView.update_search_box_narrow": {
            "name": "update_search_box_narrow",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_view": []
            }
        },
        "MessageView.read_message": {
            "name": "read_message",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "StreamsViewDivider.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamsView.__init__": {
            "name": "__init__",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "streams_btn_list": [],
                "view": []
            }
        },
        "StreamsView.update_streams": {
            "name": "update_streams",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_box": [],
                "new_text": []
            }
        },
        "StreamsView.mouse_event": {
            "name": "mouse_event",
            "location": 374,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "event": [],
                "button": [],
                "col": [],
                "row": [],
                "focus": []
            }
        },
        "StreamsView.keypress": {
            "name": "keypress",
            "location": 388,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "TopicsView.__init__": {
            "name": "__init__",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topics_btn_list": [],
                "view": [],
                "stream_button": []
            }
        },
        "TopicsView.update_topics": {
            "name": "update_topics",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_box": [],
                "new_text": []
            }
        },
        "TopicsView.update_topics_list": {
            "name": "update_topics_list",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_id": [],
                "topic_name": [],
                "sender_id": []
            }
        },
        "TopicsView.mouse_event": {
            "name": "mouse_event",
            "location": 487,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "event": [],
                "button": [],
                "col": [],
                "row": [],
                "focus": []
            }
        },
        "TopicsView.keypress": {
            "name": "keypress",
            "location": 501,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "UsersView.__init__": {
            "name": "__init__",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "users_btn_list": []
            }
        },
        "UsersView.mouse_event": {
            "name": "mouse_event",
            "location": 527,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "event": [],
                "button": [],
                "col": [],
                "row": [],
                "focus": []
            }
        },
        "MiddleColumnView.__init__": {
            "name": "__init__",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [],
                "model": [],
                "write_box": [],
                "search_box": []
            }
        },
        "MiddleColumnView.get_next_unread_topic": {
            "name": "get_next_unread_topic",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MiddleColumnView.get_next_unread_pm": {
            "name": "get_next_unread_pm",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MiddleColumnView.update_message_list_status_markers": {
            "name": "update_message_list_status_markers",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MiddleColumnView.keypress": {
            "name": "keypress",
            "location": 594,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "RightColumnView.__init__": {
            "name": "__init__",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": []
            }
        },
        "RightColumnView.update_user_list": {
            "name": "update_user_list",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_box": [
                    "None"
                ],
                "new_text": [
                    "None"
                ],
                "user_list": [
                    "None"
                ]
            }
        },
        "RightColumnView.users_view": {
            "name": "users_view",
            "location": 737,
            "return": [
                "UsersView"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "None"
                ]
            }
        },
        "RightColumnView.keypress": {
            "name": "keypress",
            "location": 771,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "LeftColumnView.__init__": {
            "name": "__init__",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": []
            }
        },
        "LeftColumnView.menu_view": {
            "name": "menu_view",
            "location": 807,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeftColumnView.streams_view": {
            "name": "streams_view",
            "location": 833,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeftColumnView.topics_view": {
            "name": "topics_view",
            "location": 879,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "stream_button": []
            }
        },
        "LeftColumnView.is_in_topic_view_with_stream_id": {
            "name": "is_in_topic_view_with_stream_id",
            "location": 911,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "LeftColumnView.update_stream_view": {
            "name": "update_stream_view",
            "location": 917,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeftColumnView.show_stream_view": {
            "name": "show_stream_view",
            "location": 922,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeftColumnView.show_topic_view": {
            "name": "show_topic_view",
            "location": 926,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_button": []
            }
        },
        "LeftColumnView.keypress": {
            "name": "keypress",
            "location": 933,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "TabView.__init__": {
            "name": "__init__",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "PopUpView.__init__": {
            "name": "__init__",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "body": [],
                "command": [],
                "requested_width": [],
                "title": [],
                "header": [
                    "None"
                ],
                "footer": [
                    "None"
                ]
            }
        },
        "PopUpView.calculate_popup_height": {
            "name": "calculate_popup_height",
            "location": 995,
            "return": [
                "bool"
            ],
            "arguments": {
                "body": [],
                "header": [],
                "footer": [],
                "popup_width": []
            }
        },
        "PopUpView.calculate_table_widths": {
            "name": "calculate_table_widths",
            "location": 1012,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "contents": [],
                "title_len": [],
                "dividechars": [
                    "int"
                ]
            }
        },
        "PopUpView.make_table_with_categories": {
            "name": "make_table_with_categories",
            "location": 1050,
            "return": [
                "list"
            ],
            "arguments": {
                "contents": [],
                "column_widths": [],
                "dividechars": [
                    "int"
                ]
            }
        },
        "PopUpView.keypress": {
            "name": "keypress",
            "location": 1076,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "NoticeView.__init__": {
            "name": "__init__",
            "location": 1084,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "notice_text": [],
                "width": [],
                "title": []
            }
        },
        "AboutView.__init__": {
            "name": "__init__",
            "location": 1096,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "title": []
            }
        },
        "UserInfoView.__init__": {
            "name": "__init__",
            "location": 1137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "user_id": [],
                "title": []
            }
        },
        "UserInfoView._fetch_user_data": {
            "name": "_fetch_user_data",
            "location": 1154,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "controller": [],
                "user_id": []
            }
        },
        "HelpView.__init__": {
            "name": "__init__",
            "location": 1203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "title": []
            }
        },
        "MarkdownHelpView.__init__": {
            "name": "__init__",
            "location": 1225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "title": []
            }
        },
        "PopUpConfirmationView.__init__": {
            "name": "__init__",
            "location": 1263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "question": [],
                "success_callback": [],
                "location": [
                    "typing.Text"
                ]
            }
        },
        "PopUpConfirmationView.exit_popup_yes": {
            "name": "exit_popup_yes",
            "location": 1305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PopUpConfirmationView.exit_popup_no": {
            "name": "exit_popup_no",
            "location": 1309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PopUpConfirmationView.keypress": {
            "name": "keypress",
            "location": 1312,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "StreamInfoView.__init__": {
            "name": "__init__",
            "location": 1319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "stream_id": []
            }
        },
        "StreamInfoView.toggle_mute_status": {
            "name": "toggle_mute_status",
            "location": 1478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "button": [],
                "new_state": []
            }
        },
        "StreamInfoView.toggle_pinned_status": {
            "name": "toggle_pinned_status",
            "location": 1481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "button": [],
                "new_state": []
            }
        },
        "StreamInfoView.toggle_visual_notification": {
            "name": "toggle_visual_notification",
            "location": 1484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "button": [],
                "new_state": []
            }
        },
        "StreamInfoView.keypress": {
            "name": "keypress",
            "location": 1487,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "StreamMembersView.__init__": {
            "name": "__init__",
            "location": 1496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "stream_id": []
            }
        },
        "StreamMembersView.keypress": {
            "name": "keypress",
            "location": 1515,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "MsgInfoView.__init__": {
            "name": "__init__",
            "location": 1523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "msg": [],
                "title": [],
                "topic_links": [],
                "message_links": [],
                "time_mentions": []
            }
        },
        "MsgInfoView.create_link_buttons": {
            "name": "create_link_buttons",
            "location": 1640,
            "return": [
                "Tuple[(List[zulipterminal.ui_tools.buttons.MessageLinkButton], int)]"
            ],
            "arguments": {
                "controller": [],
                "links": []
            }
        },
        "MsgInfoView.keypress": {
            "name": "keypress",
            "location": 1666,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "EditModeView.__init__": {
            "name": "__init__",
            "location": 1697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "button": []
            }
        },
        "EditModeView.set_selected_mode": {
            "name": "set_selected_mode",
            "location": 1711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "button": [],
                "new_state": [],
                "mode": []
            }
        },
        "EditModeView.add_radio_button": {
            "name": "add_radio_button",
            "location": 1715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "EditModeView.keypress": {
            "name": "keypress",
            "location": 1722,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "EditHistoryView.__init__": {
            "name": "__init__",
            "location": 1733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "message": [],
                "topic_links": [],
                "message_links": [],
                "time_mentions": [],
                "title": []
            }
        },
        "EditHistoryView._make_edit_block": {
            "name": "_make_edit_block",
            "location": 1775,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "snapshot": [],
                "tag": []
            }
        },
        "EditHistoryView._get_author_prefix": {
            "name": "_get_author_prefix",
            "location": 1812,
            "return": [
                "str"
            ],
            "arguments": {
                "snapshot": [],
                "tag": []
            }
        },
        "EditHistoryView.keypress": {
            "name": "keypress",
            "location": 1838,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "FullRenderedMsgView.__init__": {
            "name": "__init__",
            "location": 1851,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "message": [],
                "topic_links": [],
                "message_links": [],
                "time_mentions": [],
                "title": []
            }
        },
        "FullRenderedMsgView.keypress": {
            "name": "keypress",
            "location": 1880,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "FullRawMsgView.__init__": {
            "name": "__init__",
            "location": 1895,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "message": [],
                "topic_links": [],
                "message_links": [],
                "time_mentions": [],
                "title": []
            }
        },
        "FullRawMsgView.keypress": {
            "name": "keypress",
            "location": 1932,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        },
        "EmojiPickerView.__init__": {
            "name": "__init__",
            "location": 1949,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "title": [],
                "emoji_units": [],
                "message": [],
                "view": []
            }
        },
        "EmojiPickerView.update_emoji_list": {
            "name": "update_emoji_list",
            "location": 1993,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_box": [
                    "None"
                ],
                "new_text": [
                    "None"
                ],
                "emoji_list": [
                    "None"
                ]
            }
        },
        "EmojiPickerView.is_selected_emoji": {
            "name": "is_selected_emoji",
            "location": 2037,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "emoji_name": []
            }
        },
        "EmojiPickerView.add_or_remove_selected_emoji": {
            "name": "add_or_remove_selected_emoji",
            "location": 2040,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emoji_code": [],
                "emoji_name": []
            }
        },
        "EmojiPickerView.count_reactions": {
            "name": "count_reactions",
            "location": 2046,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "emoji_code": []
            }
        },
        "EmojiPickerView.generate_emoji_buttons": {
            "name": "generate_emoji_buttons",
            "location": 2053,
            "return": [
                "List[zulipterminal.ui_tools.buttons.EmojiButton]"
            ],
            "arguments": {
                "self": [],
                "emoji_units": []
            }
        },
        "EmojiPickerView.mouse_event": {
            "name": "mouse_event",
            "location": 2072,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "event": [],
                "button": [],
                "col": [],
                "row": [],
                "focus": []
            }
        },
        "EmojiPickerView.keypress": {
            "name": "keypress",
            "location": 2087,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "key": []
            }
        }
    },
    "zulip-terminal-main/zulipterminal/ui_tools/__init__.py": {}
}
{
    "apriori.contains_all_subsets": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "apriori.apriori": {
        "return": [
            "List[List[int]]"
        ],
        "arguments": [
            [],
            []
        ]
    },
    "armpy.set_to_string": {
        "return": [
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.str",
                    "datasetreader.DatasetReader",
                    "builtins.list[argparse.ArgumentParser]"
                ]
            ]
        ]
    },
    "armpy.float_between_0_and_1": {
        "return": [
            [
                "builtins.float"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.str",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "armpy.float_gteq_1": {
        "return": [
            [
                "builtins.float"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.str",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "armpy.main": {
        "return": [],
        "arguments": []
    },
    "datasetreader.DatasetReader.__init__": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "datasetreader.DatasetReader.__iter__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "datasetreader.DatasetReader.__iter__.tokenize": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "datasetreader.DatasetReader.__iter__.itemize": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "fptree.path_to_root": {
        "return": [
            "List[int]"
        ],
        "arguments": [
            [
                "FPNode"
            ]
        ]
    },
    "fptree.construct_conditional_tree": {
        "return": [
            "FPTree"
        ],
        "arguments": [
            [
                "FPTree"
            ],
            [
                "int"
            ]
        ]
    },
    "fptree.fp_growth": {
        "return": [
            "None"
        ],
        "arguments": [
            [
                "FPTree"
            ],
            [
                "int"
            ],
            [
                "List[int]"
            ],
            [
                "int"
            ],
            [
                "List[List[int]]"
            ],
            [
                "Dict[(Tuple[(int, ...)], int)]"
            ]
        ]
    },
    "fptree.mine_fp_tree": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "fptree.sort_transaction": {
        "return": [
            [
                "builtins.list[builtins.int]",
                "builtins.list[builtins.str]",
                "builtins.list[builtins.object]"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.str",
                    "datasetreader.DatasetReader",
                    "builtins.list[argparse.ArgumentParser]"
                ]
            ],
            [
                [
                    "builtins.str",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "fptree.count_item_frequency_in": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "fptree.construct_initial_tree": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "fptree.FPNode.__init__": {
        "return": [],
        "arguments": [
            [],
            [],
            [],
            []
        ]
    },
    "fptree.FPNode.is_root": {
        "return": [
            "bool"
        ],
        "arguments": [
            []
        ]
    },
    "fptree.FPNode.__str__": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            []
        ]
    },
    "fptree.FPNode.__repr__": {
        "return": [
            "str"
        ],
        "arguments": [
            []
        ]
    },
    "fptree.FPTree.__init__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "fptree.FPTree.insert": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            [
                "Iterator[int]"
            ],
            [
                "int"
            ]
        ]
    },
    "fptree.FPTree.__str__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "generaterules.split_out": {
        "return": [
            "Tuple[(List[int], List[int])]"
        ],
        "arguments": [
            [
                "int"
            ],
            [
                "List[int]"
            ]
        ]
    },
    "generaterules.calc_stats": {
        "return": [
            "Tuple[(float, float)]",
            [
                "Tuple[Any, builtins.float]"
            ]
        ],
        "arguments": [
            [
                "float",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ],
            [
                "List[int]",
                [
                    "builtins.object"
                ]
            ],
            [
                "List[int]",
                [
                    "builtins.object"
                ]
            ],
            [
                "Callable[([List[int]], float)]",
                [
                    "Any"
                ]
            ]
        ]
    },
    "generaterules.is_sorted": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.list[datetime.date]",
                    "builtins.str",
                    "builtins.list[builtins.bytes]"
                ]
            ]
        ]
    },
    "generaterules.prefix_match_len": {
        "return": [
            "int",
            [
                "builtins.int"
            ]
        ],
        "arguments": [
            [
                "List[int]",
                [
                    "builtins.str",
                    "builtins.list[argparse.ArgumentParser]",
                    "builtins.list[argparse.Namespace]"
                ]
            ],
            [
                "List[int]",
                [
                    "builtins.str",
                    "builtins.list[argparse.ArgumentParser]",
                    "builtins.list[argparse.Namespace]"
                ]
            ]
        ]
    },
    "generaterules.generate_rules_for_itemset": {
        "return": [
            "List[Tuple[(List[int], List[int], float, float, float)]]"
        ],
        "arguments": [
            [
                "List[int]"
            ],
            [
                "Callable[([List[int]], float)]"
            ],
            [
                "float"
            ],
            [
                "float"
            ]
        ]
    },
    "generaterules.generate_rules": {
        "return": [
            "List[Tuple[(List[int], List[int], float, float, float)]]"
        ],
        "arguments": [
            [
                "List[List[int]]"
            ],
            [
                "Dict[(Tuple[(int, ...)], int)]"
            ],
            [
                "int"
            ],
            [
                "float"
            ],
            [
                "float"
            ]
        ]
    },
    "generaterules.generate_rules.calculate_support": {
        "return": [
            "float"
        ],
        "arguments": [
            [
                "List[int]"
            ]
        ]
    },
    "index.InvertedIndex.__init__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "index.InvertedIndex.add": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "index.InvertedIndex.load": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "index.InvertedIndex.load_csv": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "index.InvertedIndex.items": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "index.InvertedIndex.count": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "index.InvertedIndex.support": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "item.item_id": {
        "return": [
            "int",
            [
                "builtins.int"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "item.item_str": {
        "return": [
            "str",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "item.ItemSet": {
        "return": [
            "FrozenSet[int]",
            [
                "builtins.frozenset[Any]"
            ]
        ],
        "arguments": [
            [
                "List[str]",
                [
                    "builtins.str",
                    "datasetreader.DatasetReader",
                    "builtins.list[argparse.ArgumentParser]"
                ]
            ]
        ]
    },
    "test_apriori.test_apriori": {
        "return": [],
        "arguments": []
    },
    "test_apriori.test_apriori.itemize": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test_apriori.test_apriori.deitemize": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test_fptree.test_basic_sanity": {
        "return": [],
        "arguments": []
    },
    "test_fptree.test_stress": {
        "return": [],
        "arguments": []
    },
    "test_index.test_InvertedIndex": {
        "return": [],
        "arguments": []
    },
    "test_types.test_types": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": []
    }
}
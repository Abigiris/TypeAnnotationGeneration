{
    "cloud_blobstore.gs.CatchTimeouts": {
        "return": [
            [
                "def (*args: Any, **kwargs: Any) -> Any"
            ]
        ],
        "arguments": [
            [
                [
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ]
        ]
    },
    "cloud_blobstore.gs.CatchTimeouts.wrapped": {
        "return": [],
        "arguments": []
    },
    "cloud_blobstore.gs.GSPagedIter.__init__": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            [
                "Bucket"
            ]
        ]
    },
    "cloud_blobstore.gs.GSPagedIter.get_api_response": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "cloud_blobstore.gs.GSPagedIter.get_listing_from_response": {
        "return": [
            [
                "typing.Generator[None, None, Tuple[Any, builtins.dict[Any, cloud_blobstore.BlobMetadataField]]]"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ]
        ]
    },
    "cloud_blobstore.gs.GSPagedIter.get_next_token_from_response": {
        "return": [
            [
                "Any"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.__init__": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            []
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.compute_cloud_checksum": {
        "return": [
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [
                [
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.from_auth_credentials": {
        "return": [
            "'GSBlobStore'",
            [
                "Any"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore._ensure_bucket_loaded": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore._get_blob_obj": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.list": {
        "return": [
            "typing.Iterator[str]"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.list_v2": {
        "return": [
            "typing.Iterable[typing.Tuple[(str, dict)]]"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "int"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.generate_presigned_GET_url": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.upload_file_handle": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "typing.BinaryIO"
            ],
            [
                "str"
            ],
            [
                "dict"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.delete": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.get": {
        "return": [
            "bytes"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.get_cloud_checksum": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.get_content_type": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.get_copy_token": {
        "return": [
            "typing.Any"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.get_creation_date": {
        "return": [
            "datetime.datetime"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.get_last_modified_date": {
        "return": [
            "datetime.datetime"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.get_user_metadata": {
        "return": [
            "typing.Dict[(str, str)]"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.get_size": {
        "return": [
            "int"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.copy": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "typing.Any"
            ]
        ]
    },
    "cloud_blobstore.gs.GSBlobStore.check_bucket_exists": {
        "return": [
            "bool"
        ],
        "arguments": [
            [],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.CatchTimeouts": {
        "return": [
            [
                "def (*args: Any, **kwargs: Any) -> Any"
            ]
        ],
        "arguments": [
            [
                [
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ]
        ]
    },
    "cloud_blobstore.s3.CatchTimeouts.wrapped": {
        "return": [],
        "arguments": []
    },
    "cloud_blobstore.s3.S3PagedIter.__init__": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3PagedIter.get_api_response": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "cloud_blobstore.s3.S3PagedIter.get_listing_from_response": {
        "return": [
            [
                "Any"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler",
                    "builtins.dict[argparse.ArgumentParser, builtins.str]"
                ]
            ]
        ]
    },
    "cloud_blobstore.s3.S3PagedIter.get_next_token_from_response": {
        "return": [
            [
                "<partial None>"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler",
                    "builtins.dict[builtins.object, builtins.object]"
                ]
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.__init__": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            []
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.compute_cloud_checksum": {
        "return": [
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [
                [
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.from_environment": {
        "return": [
            [
                "Any"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.list": {
        "return": [
            "typing.Iterator[str]",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.list_v2": {
        "return": [
            "typing.Iterable[typing.Tuple[(str, dict)]]",
            [
                "cloud_blobstore.s3.S3PagedIter"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.str",
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ],
            [
                "str",
                [
                    "builtins.str",
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ],
            [
                "str",
                [
                    "builtins.str",
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ],
            [
                "str",
                [
                    "builtins.str",
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ],
            [
                "int",
                [
                    "builtins.int",
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.generate_presigned_GET_url": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore._generate_presigned_url": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.upload_file_handle": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "typing.BinaryIO"
            ],
            [
                "str"
            ],
            [
                "dict"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.delete": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.get": {
        "return": [
            "bytes"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.get_all_metadata": {
        "return": [
            "dict"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.get_content_type": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.get_copy_token": {
        "return": [
            "typing.Any",
            [
                "builtins.object"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.get_cloud_checksum": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.get_creation_date": {
        "return": [
            "datetime"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.get_last_modified_date": {
        "return": [
            "datetime"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.get_user_metadata": {
        "return": [
            "typing.Dict[(str, str)]"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.copy": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "typing.Any"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.get_size": {
        "return": [
            "int"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.find_next_missing_parts": {
        "return": [
            "typing.Sequence[int]"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "int"
            ],
            [
                "int"
            ],
            [
                "int"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.check_bucket_exists": {
        "return": [
            "bool"
        ],
        "arguments": [
            [],
            [
                "str"
            ]
        ]
    },
    "cloud_blobstore.s3.S3BlobStore.get_bucket_region": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            []
        ]
    },
    "cloud_blobstore.__init__.PagedIter.get_api_response": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.PagedIter.get_listing_from_response": {
        "return": [
            "typing.Iterable[typing.Tuple[(str, dict)]]",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.PagedIter.get_next_token_from_response": {
        "return": [
            "str",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.PagedIter.__iter__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "cloud_blobstore.__init__.BlobStore.__init__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "cloud_blobstore.__init__.BlobStore.list": {
        "return": [
            "typing.Iterator[str]",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.list_v2": {
        "return": [
            "typing.Iterable[typing.Tuple[(str, dict)]]",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "int",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.generate_presigned_GET_url": {
        "return": [
            "str",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.dict[builtins.object, builtins.str]"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.upload_file_handle": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "typing.BinaryIO",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "dict",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.delete": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.get": {
        "return": [
            "bytes",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "socket.socket",
                    "builtins.object",
                    "builtins.str"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.get_cloud_checksum": {
        "return": [
            "str",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.get_content_type": {
        "return": [
            "str",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.get_copy_token": {
        "return": [
            "typing.Any",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.get_creation_date": {
        "return": [
            "datetime",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.get_last_modified_date": {
        "return": [
            "datetime",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.get_user_metadata": {
        "return": [
            "typing.Dict[(str, str)]",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.get_size": {
        "return": [
            "int",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.copy": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "str",
                [
                    "builtins.object"
                ]
            ],
            [
                "typing.Any",
                [
                    "builtins.dict[builtins.object, builtins.str]"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.check_bucket_exists": {
        "return": [
            "bool",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "cloud_blobstore.__init__.BlobStore.get_bucket_region": {
        "return": [
            "str",
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "scripts.find_missing_wheels.build_wheel": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.str"
                ]
            ],
            [
                [
                    "builtins.str",
                    "builtins.bytes",
                    "test_gsblobstore.Session@66"
                ]
            ]
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.test_get_metadata": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.test_get_content_type": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.test_get_last_modified_date": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testList": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testListV2": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testListV2Continuation": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests._testListV2Continuation": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.object",
                    "builtins.str",
                    "builtins.int"
                ]
            ],
            [
                [
                    "builtins.int",
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ]
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testGetPresignedUrl": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testUploadFileHandle": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testGet": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testGetSize": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testContentDisposition": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testCopy": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testCopyTokenMatching": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testCopyTokenNotMatching": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.testDelete": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.blobstore_common_tests.BlobStoreTests.test_check_bucket_exists": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.test_gsblobstore.TestGSBlobStore.setUp": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_gsblobstore.TestGSBlobStore.tearDown": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.test_gsblobstore.TestGSBlobStore.test_get_checksum": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_gsblobstore.TestGSBlobStore.test_get_creation_date": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_gsblobstore.TestGSBlobStore.test_read_timeout": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_gsblobstore.TestGSBlobStore.test_connect_timeout": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_gsblobstore.TestGSBlobStore.test_get_blob_obj": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_gsblobstore.TestGSBlobStore._get_handle_with_timeouts": {
        "return": [],
        "arguments": [
            [],
            [],
            []
        ]
    },
    "tests.test_gsblobstore.TestGSBlobStore._get_handle_with_timeouts.Session.request": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.unused_tcp_port": {
        "return": [],
        "arguments": []
    },
    "tests.test_s3blobstore.TestS3BlobStore.setUp": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.TestS3BlobStore.tearDown": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.TestS3BlobStore.test_get_checksum": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.TestS3BlobStore.test_get_creation_date": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.TestS3BlobStore.find_next_missing_parts_test_case": {
        "return": [],
        "arguments": [
            [],
            [],
            []
        ]
    },
    "tests.test_s3blobstore.TestS3BlobStore.test_find_next_missing_parts_simple": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.TestS3BlobStore.test_find_next_missing_parts_multiple_requests": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.TestS3BlobStore.test_get_bucket_region": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.TestS3BlobStore.test_read_timeout": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.TestS3BlobStore.test_connect_timeout": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.ProxyConnectServer.__init__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.ProxyConnectServer.server_activate": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.ProxyConnectServer.start": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "tests.test_s3blobstore.ProxyConnectServer.close": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_s3blobstore.ProxyConnectServer.start.eternity": {
        "return": [],
        "arguments": []
    },
    "tests.test_s3blobstore.ProxyConnectServer.start.LazyRequestHandler.do_CONNECT": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.fixtures.cloud_uploader.get_s3_chunk_size": {
        "return": [
            "int",
            [
                "builtins.int",
                "builtins.float"
            ]
        ],
        "arguments": [
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "test_gsblobstore.Session@66"
                ]
            ]
        ]
    },
    "tests.fixtures.cloud_uploader.Uploader.__init__": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            [
                "str"
            ]
        ]
    },
    "tests.fixtures.cloud_uploader.Uploader.reset": {
        "return": [
            "None",
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.fixtures.cloud_uploader.Uploader.upload_file": {
        "return": [
            "None",
            [
                "Any"
            ]
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "typing.Dict[(str, str)]"
            ]
        ]
    },
    "tests.fixtures.cloud_uploader.S3Uploader.__init__": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "tests.fixtures.cloud_uploader.S3Uploader.reset": {
        "return": [
            "None"
        ],
        "arguments": [
            []
        ]
    },
    "tests.fixtures.cloud_uploader.S3Uploader.upload_file": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "typing.Dict[(str, str)]"
            ],
            [
                "typing.Dict[(str, str)]"
            ]
        ]
    },
    "tests.fixtures.cloud_uploader.GSUploader.__init__": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ]
        ]
    },
    "tests.fixtures.cloud_uploader.GSUploader.reset": {
        "return": [
            "None"
        ],
        "arguments": [
            []
        ]
    },
    "tests.fixtures.cloud_uploader.GSUploader.upload_file": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "str"
            ],
            [
                "typing.Dict[(str, str)]"
            ]
        ]
    },
    "tests.fixtures.populate_lib.upload": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Uploader",
                [
                    "fixtures.cloud_uploader.Uploader",
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ]
        ]
    },
    "tests.fixtures.populate_lib.populate": {
        "return": [],
        "arguments": [
            [
                "typing.Optional[str]"
            ],
            [
                "typing.Optional[str]"
            ]
        ]
    },
    "tests.infra.server.SilentHandler.log_message": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "tests.infra.server.ThreadedLocalServer.__init__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.infra.server.ThreadedLocalServer.start": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.infra.server.ThreadedLocalServer.run": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.infra.server.ThreadedLocalServer._make_call": {
        "return": [],
        "arguments": [
            [],
            [],
            []
        ]
    },
    "tests.infra.server.ThreadedLocalServer.__getattr__": {
        "return": [
            [
                "def (path: Any, **kwargs: Any) -> Any"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.str",
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ]
        ]
    },
    "tests.infra.server.ThreadedLocalServer.shutdown": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.infra.server.ThreadedLocalServer.__getattr__.result": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.infra.__init__.get_env": {
        "return": [
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.str",
                    "test_gsblobstore.Session@66",
                    "infra.server.SilentHandler"
                ]
            ]
        ]
    },
    "tests.infra.__init__.generate_test_key": {
        "return": [
            "str",
            [
                "builtins.str"
            ]
        ],
        "arguments": []
    }
}
{
    "setup.get_version": {
        "return": [
            [
                "builtins.str",
                "Any"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.str",
                    "builtins.bytes"
                ]
            ]
        ]
    },
    "setup.get_packages": {
        "return": [
            [
                "builtins.list[builtins.bytes]",
                "builtins.list[builtins.str]"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.str",
                    "builtins.bytes"
                ]
            ]
        ]
    },
    "dependency.core.is_context_manager": {
        "return": [
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "type",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "dependency.core.provides_parameterized_type": {
        "return": [
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "typing.Callable",
                [
                    "examples.web_framework.App",
                    "dependency.core.InjectedFunction"
                ]
            ]
        ]
    },
    "dependency.core.get_key": {
        "return": [
            "str",
            [
                "builtins.str",
                "Any"
            ]
        ],
        "arguments": [
            [
                "typing.Union[(type, None)]",
                [
                    "Any"
                ]
            ],
            [
                "typing.Optional[str]",
                [
                    "examples.web_framework.QueryParams",
                    "builtins.object",
                    "builtins.str"
                ]
            ],
            [
                [
                    "builtins.dict[builtins.str, examples.web_framework.App]",
                    "builtins.str",
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ]
            ]
        ]
    },
    "dependency.core.create_step": {
        "return": [
            "Step",
            [
                "dependency.core.Step"
            ]
        ],
        "arguments": [
            [
                "typing.Callable",
                [
                    "examples.web_framework.App",
                    "dependency.core.InjectedFunction"
                ]
            ],
            [
                "typing.Optional[type]",
                [
                    "builtins.object"
                ]
            ],
            [
                "typing.Optional[str]",
                [
                    "builtins.object"
                ]
            ],
            [
                "typing.Set[type]",
                [
                    "builtins.dict[builtins.str, examples.web_framework.App]",
                    "builtins.str",
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ]
            ]
        ]
    },
    "dependency.core.create_steps": {
        "return": [
            "typing.List[Step]",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "typing.Callable",
                [
                    "Any"
                ]
            ],
            [
                "typing.Optional[type]",
                [
                    "Any"
                ]
            ],
            [
                "typing.Optional[str]",
                [
                    "Any"
                ]
            ],
            [
                "typing.Dict[(type, typing.Callable)]",
                [
                    "Any"
                ]
            ],
            [
                "typing.Set[type]",
                [
                    "Any"
                ]
            ],
            [
                "typing.Set[str]",
                [
                    "Any"
                ]
            ]
        ]
    },
    "dependency.core.InjectedFunction.__init__": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            [
                "typing.List[Step]"
            ],
            [
                "typing.Dict[(str, type)]"
            ]
        ]
    },
    "dependency.core.InjectedFunction.__call__": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "dependency.core.InjectedFunction.__repr__": {
        "return": [
            "str"
        ],
        "arguments": [
            []
        ]
    },
    "dependency.core.InjectedFunction._step_repr": {
        "return": [
            "typing.Tuple[(str, int)]",
            [
                "Tuple[builtins.int, builtins.str]"
            ]
        ],
        "arguments": [
            [],
            [
                "Step",
                [
                    "Any"
                ]
            ],
            [
                "int",
                [
                    "builtins.int"
                ]
            ],
            [
                "bool",
                [
                    "builtins.object",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "dependency.core.Injector.__init__": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            [
                "typing.Dict[(type, typing.Callable)]"
            ],
            [
                "typing.Dict[(str, type)]"
            ]
        ]
    },
    "dependency.core.Injector.add_provider": {
        "return": [
            "None"
        ],
        "arguments": [
            [],
            [
                "typing.Callable"
            ]
        ]
    },
    "dependency.core.Injector.inject": {
        "return": [
            "InjectedFunction"
        ],
        "arguments": [
            [],
            [
                "typing.Callable"
            ]
        ]
    },
    "dependency.wrappers._get_default_injector": {
        "return": [
            "dependency.Injector",
            [
                "<partial None>"
            ]
        ],
        "arguments": []
    },
    "dependency.wrappers.set_required_state": {
        "return": [
            "None",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "typing.Dict[(str, type)]",
                [
                    "builtins.object",
                    "builtins.str",
                    "builtins.int"
                ]
            ]
        ]
    },
    "dependency.wrappers.add_provider": {
        "return": [
            "None",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "typing.Callable",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "dependency.wrappers.inject": {
        "return": [
            "dependency.InjectedFunction",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "typing.Callable",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "examples.test_framework.run_tests": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": []
    },
    "examples.web_framework.get_request": {
        "return": [
            "Request",
            [
                "werkzeug.wrappers.request.Request"
            ]
        ],
        "arguments": [
            [
                "Environ",
                [
                    "werkzeug.datastructures.headers.EnvironHeaders",
                    "examples.web_framework.QueryParams",
                    "werkzeug.datastructures.structures.ImmutableMultiDict[Any, Any]"
                ]
            ]
        ]
    },
    "examples.web_framework.get_method": {
        "return": [
            "Method",
            [
                "examples.web_framework.Method"
            ]
        ],
        "arguments": [
            [
                "Environ",
                [
                    "werkzeug.datastructures.headers.EnvironHeaders",
                    "examples.web_framework.QueryParams",
                    "werkzeug.datastructures.structures.ImmutableMultiDict[Any, Any]"
                ]
            ]
        ]
    },
    "examples.web_framework.get_path": {
        "return": [
            "Path",
            [
                "examples.web_framework.Path"
            ]
        ],
        "arguments": [
            [
                "Environ",
                [
                    "werkzeug.datastructures.headers.EnvironHeaders",
                    "examples.web_framework.QueryParams",
                    "werkzeug.datastructures.structures.ImmutableMultiDict[Any, Any]"
                ]
            ]
        ]
    },
    "examples.web_framework.get_headers": {
        "return": [
            "Headers",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Environ",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "examples.web_framework.get_header": {
        "return": [
            "Header",
            [
                "examples.web_framework.Header"
            ]
        ],
        "arguments": [
            [
                "dependency.ParamName",
                [
                    "builtins.str"
                ]
            ],
            [
                "Headers",
                [
                    "werkzeug.datastructures.headers.EnvironHeaders",
                    "examples.web_framework.QueryParams",
                    "werkzeug.datastructures.structures.ImmutableMultiDict[Any, Any]"
                ]
            ]
        ]
    },
    "examples.web_framework.get_queryparams": {
        "return": [
            "QueryParams",
            [
                "examples.web_framework.QueryParams"
            ]
        ],
        "arguments": [
            [
                "Environ",
                [
                    "werkzeug.datastructures.headers.EnvironHeaders",
                    "examples.web_framework.QueryParams",
                    "builtins.dict[builtins.object, builtins.object]"
                ]
            ]
        ]
    },
    "examples.web_framework.get_queryparam": {
        "return": [
            "QueryParam",
            [
                "examples.web_framework.QueryParam"
            ]
        ],
        "arguments": [
            [
                "dependency.ParamName",
                [
                    "builtins.object"
                ]
            ],
            [
                "QueryParams",
                [
                    "examples.web_framework.QueryParams",
                    "werkzeug.datastructures.structures.ImmutableMultiDict[Any, Any]"
                ]
            ]
        ]
    },
    "examples.web_framework.get_url_arg": {
        "return": [
            "URLArg",
            [
                "builtins.object",
                "Any",
                "None"
            ]
        ],
        "arguments": [
            [
                "dependency.ParamName",
                [
                    "builtins.object"
                ]
            ],
            [
                "URLArgs",
                [
                    "examples.web_framework.QueryParams",
                    "builtins.dict[builtins.object, builtins.object]",
                    "werkzeug.datastructures.structures.ImmutableMultiDict[Any, Any]"
                ]
            ]
        ]
    },
    "examples.web_framework.App.__init__": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "examples.web_framework.App.__call__": {
        "return": [],
        "arguments": [
            [],
            [],
            []
        ]
    },
    "examples.web_framework.App.run": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.str"
                ]
            ],
            [
                [
                    "builtins.int"
                ]
            ]
        ]
    },
    "tests.test_dependancy.test_injection": {
        "return": [],
        "arguments": []
    },
    "tests.test_dependancy.test_wrappers": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": []
    },
    "tests.test_dependancy.test_context_manager": {
        "return": [],
        "arguments": []
    },
    "tests.test_dependancy.test_param_name": {
        "return": [],
        "arguments": []
    },
    "tests.test_dependancy.test_injection.get_method": {
        "return": [
            "Method"
        ],
        "arguments": [
            [
                "Environ"
            ]
        ]
    },
    "tests.test_dependancy.test_injection.get_headers": {
        "return": [
            "Headers"
        ],
        "arguments": [
            [
                "Environ"
            ]
        ]
    },
    "tests.test_dependancy.test_injection.echo_method_and_headers": {
        "return": [],
        "arguments": [
            [
                "Method"
            ],
            [
                "Headers"
            ]
        ]
    },
    "tests.test_dependancy.test_wrappers.get_method": {
        "return": [
            "Method"
        ],
        "arguments": [
            [
                "Environ"
            ]
        ]
    },
    "tests.test_dependancy.test_wrappers.get_headers": {
        "return": [
            "Headers"
        ],
        "arguments": [
            [
                "Environ"
            ]
        ]
    },
    "tests.test_dependancy.test_wrappers.echo_method_and_headers": {
        "return": [],
        "arguments": [
            [
                "Method"
            ],
            [
                "Headers"
            ]
        ]
    },
    "tests.test_dependancy.test_context_manager.do_something": {
        "return": [],
        "arguments": [
            [
                "Session"
            ]
        ]
    },
    "tests.test_dependancy.test_param_name.get_lookup": {
        "return": [],
        "arguments": [
            [
                "dependency.ParamName"
            ],
            [
                "Lookups"
            ]
        ]
    },
    "tests.test_dependancy.test_param_name.make_lookups": {
        "return": [],
        "arguments": [
            [
                "Lookup"
            ],
            [
                "Lookup"
            ]
        ]
    },
    "tests.test_dependancy.test_context_manager.Session.__init__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_dependancy.test_context_manager.Session.__enter__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "tests.test_dependancy.test_context_manager.Session.__exit__": {
        "return": [],
        "arguments": [
            []
        ]
    }
}
{
    "tasks.venv": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ],
            [
                [
                    "builtins.object",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "tasks.test": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "tasks.type": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "tasks.lint": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "tasks.isort": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "tasks.cover": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "tasks.format": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "tasks.docs": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "tasks.hook": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "tasks.clean": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "tasks.build": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "tasks.deploy": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "tasks.commit": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "funpy.fn.copy": {
        "return": [
            "X@@",
            [
                "builtins.object"
            ]
        ],
        "arguments": [
            [
                "X@@",
                [
                    "builtins.object"
                ]
            ],
            [
                "bool",
                [
                    "builtins.object",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "funpy.fn.copies": {
        "return": [
            "Iterable[X]",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "X@@",
                [
                    "builtins.object"
                ]
            ],
            [
                "int",
                [
                    "builtins.int"
                ]
            ],
            [
                "bool",
                [
                    "builtins.object",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "funpy.fn.flip": {
        "return": [
            "Callable[(..., Y)]",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Callable[(..., Y)]",
                [
                    "Any"
                ]
            ]
        ]
    },
    "funpy.fn.partialfp": {
        "return": [
            "Callable[(..., Y)]",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Callable[(..., Y)]"
            ]
        ]
    },
    "funpy.fn.ident": {
        "return": [
            "X@@",
            [
                "builtins.object"
            ]
        ],
        "arguments": [
            [
                "X@@",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.fn.constantly": {
        "return": [
            "Callable[(..., X)]",
            [
                "def (*_: Any, **__: Any) -> Any"
            ]
        ],
        "arguments": [
            [
                "X@@",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.fn.compose": {
        "return": [
            "Callable[(..., Y)]",
            [
                "def (*args: Any, **kwargs: Any) -> Any"
            ]
        ],
        "arguments": [
            [
                "Callable[([Z], Y)]",
                [
                    "Any"
                ]
            ],
            [
                "Callable[(..., Z)]",
                [
                    "Any"
                ]
            ]
        ]
    },
    "funpy.fn.comp": {
        "return": [
            "Callable"
        ],
        "arguments": []
    },
    "funpy.fn.juxt": {
        "return": [
            "Callable[(..., tuple)]"
        ],
        "arguments": []
    },
    "funpy.fn.pre": {
        "return": [
            "Callable[(..., Y)]",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Callable[(..., Y)]",
                [
                    "Any"
                ]
            ],
            [
                "Callable[([tuple, dict], None)]",
                [
                    "def (*values: builtins.object, *, sep: Union[None, builtins.str] =, end: Union[None, builtins.str] =, file: Union[None, _typeshed.SupportsWrite[builtins.str]] =, flush: builtins.bool =)"
                ]
            ]
        ]
    },
    "funpy.fn.post": {
        "return": [
            "Callable[(..., Y)]",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Callable[(..., Y)]",
                [
                    "Any"
                ]
            ],
            [
                "Callable[([tuple, dict, Y], None)]",
                [
                    "def (*values: builtins.object, *, sep: Union[None, builtins.str] =, end: Union[None, builtins.str] =, file: Union[None, _typeshed.SupportsWrite[builtins.str]] =, flush: builtins.bool =)"
                ]
            ]
        ]
    },
    "funpy.fn.fnil": {
        "return": [
            "Callable[(..., Y)]",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Callable[(..., Y)]",
                [
                    "Any"
                ]
            ],
            [
                "X@@",
                [
                    "Any"
                ]
            ]
        ]
    },
    "funpy.fn.safe": {
        "return": [
            "Callable[(..., Union[(Y, Z)])]",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Callable[(..., Y)]",
                [
                    "Any"
                ]
            ],
            [
                "Z@@",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.fn.pure": {
        "return": [
            "Callable",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Callable[(..., None)]",
                [
                    "Any"
                ]
            ],
            [
                "bool",
                [
                    "builtins.object",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "funpy.fn.fluent": {
        "return": [
            "Callable",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Callable[(..., None)]",
                [
                    "Any"
                ]
            ]
        ]
    },
    "funpy.fn.complement": {
        "return": [
            "Predicate",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Predicate",
                [
                    "Any"
                ]
            ]
        ]
    },
    "funpy.fn.flip.wrapped": {
        "return": [],
        "arguments": []
    },
    "funpy.fn.constantly.constant": {
        "return": [],
        "arguments": []
    },
    "funpy.fn.compose.composed": {
        "return": [],
        "arguments": []
    },
    "funpy.fn.juxt.juxted": {
        "return": [],
        "arguments": []
    },
    "funpy.fn.pre.wrapped": {
        "return": [],
        "arguments": []
    },
    "funpy.fn.post.wrapped": {
        "return": [],
        "arguments": []
    },
    "funpy.fn.fnil.wrapped": {
        "return": [],
        "arguments": [
            [
                "X@@"
            ]
        ]
    },
    "funpy.fn.safe.wrapped": {
        "return": [],
        "arguments": []
    },
    "funpy.fn.pure.wrapped": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "funpy.fn.fluent.wrapped": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "funpy.fn.complement.wrapped": {
        "return": [],
        "arguments": []
    },
    "funpy.io.slurp": {
        "return": [
            "AnyStr",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Path",
                [
                    "builtins.str",
                    "builtins.int",
                    "builtins.bytes"
                ]
            ],
            [
                "Mode",
                [
                    "builtins.str"
                ]
            ]
        ]
    },
    "funpy.io.spit": {
        "return": [
            "None",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Path",
                [
                    "builtins.str",
                    "builtins.int",
                    "builtins.bytes"
                ]
            ],
            [
                "AnyStr",
                [
                    "builtins.object"
                ]
            ],
            [
                "Mode",
                [
                    "builtins.str"
                ]
            ]
        ]
    },
    "funpy.io.interact": {
        "return": [
            "Iterator[AnyStr]",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Callable[([AnyStr], AnyStr)]",
                [
                    "Any"
                ]
            ],
            [
                "Iterable[Path]",
                [
                    "builtins.str",
                    "builtins.bytes",
                    "builtins.list[builtins.bytes]"
                ]
            ],
            [
                "Mode",
                [
                    "builtins.str"
                ]
            ]
        ]
    },
    "funpy.io.unnl": {
        "return": [
            "Iterator[str]",
            [
                "typing.Generator[None, None, builtins.str]"
            ]
        ],
        "arguments": [
            [
                "Iterable[str]",
                [
                    "builtins.str",
                    "builtins.list[builtins.str]"
                ]
            ]
        ]
    },
    "funpy.io.unbl": {
        "return": [
            "Iterator[str]",
            [
                "typing.Generator[None, None, builtins.int]",
                "typing.Generator[None, None, builtins.object]",
                "typing.Generator[None, None, builtins.str]"
            ]
        ],
        "arguments": [
            [
                "Iterable[str]",
                [
                    "builtins.str",
                    "builtins.list[builtins.int]",
                    "builtins.list[builtins.object]"
                ]
            ]
        ]
    },
    "funpy.io.words": {
        "return": [
            "Iterator[str]",
            [
                "typing.Generator[None, None, builtins.bytes]",
                "typing.Generator[None, None, builtins.str]"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.str",
                    "builtins.bytes"
                ]
            ]
        ]
    },
    "funpy.io.unwords": {
        "return": [
            "str",
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [
                "Iterable[str]",
                [
                    "builtins.str",
                    "builtins.list[builtins.str]"
                ]
            ]
        ]
    },
    "funpy.io.lines": {
        "return": [
            "Iterator[str]",
            [
                "typing.Generator[None, None, builtins.bytes]",
                "typing.Generator[None, None, builtins.str]"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.str",
                    "builtins.bytes"
                ]
            ]
        ]
    },
    "funpy.io.unlines": {
        "return": [
            "str",
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [
                "Iterable[str]",
                [
                    "builtins.str",
                    "builtins.list[builtins.str]"
                ]
            ]
        ]
    },
    "funpy.it.mapcat": {
        "return": [
            "Iterator"
        ],
        "arguments": [
            [
                "Callable"
            ]
        ]
    },
    "funpy.it.mapevery": {
        "return": [
            "Iterator"
        ],
        "arguments": [
            [
                "Callable"
            ],
            [
                "int"
            ]
        ]
    },
    "funpy.it.replace": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.int]",
                    "builtins.list[builtins.object]"
                ]
            ],
            [
                "dict",
                [
                    "builtins.object"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.slide": {
        "return": [
            "Iterator[tuple]",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.bytes]",
                    "builtins.list[builtins.float]"
                ]
            ],
            [
                "int",
                [
                    "builtins.int",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.it.split": {
        "return": [
            "Tuple[(Iterator, Iterator)]",
            [
                "Tuple[Any, Any]"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.int]",
                    "builtins.list[builtins.object]"
                ]
            ],
            [
                "int",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.splitby": {
        "return": [
            "Tuple[(Iterator, Iterator)]",
            [
                "Tuple[Any, Any]"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.bytes]",
                    "builtins.list[builtins.float]"
                ]
            ],
            [
                "fn.Predicate",
                [
                    "builtins.object",
                    "def (builtins.object =) -> builtins.bool"
                ]
            ]
        ]
    },
    "funpy.it.chunk": {
        "return": [
            "Iterator[tuple]",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.it.chunkby": {
        "return": [
            "Iterator[tuple]",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "fn.Predicate",
                [
                    "builtins.object",
                    "def (builtins.object =) -> builtins.bool"
                ]
            ]
        ]
    },
    "funpy.it.chunkall": {
        "return": [
            "Iterator[tuple]",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.it.grouped": {
        "return": [
            "Iterator[Tuple[(Any, tuple)]]",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.bytes]",
                    "builtins.list[builtins.float]"
                ]
            ],
            [
                "Callable",
                [
                    "def (x: Any) -> Any"
                ]
            ]
        ]
    },
    "funpy.it.groupkv": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.bytes]",
                    "builtins.list[builtins.str]"
                ]
            ]
        ]
    },
    "funpy.it.member": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.int]",
                    "builtins.list[builtins.object]"
                ]
            ],
            [
                "Container",
                [
                    "builtins.str",
                    "builtins.list[builtins.int]",
                    "builtins.list[builtins.object]"
                ]
            ]
        ]
    },
    "funpy.it.locate": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "fn.Predicate",
                [
                    "def (builtins.object =) -> builtins.bool"
                ]
            ]
        ]
    },
    "funpy.it.dedupe": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.bytes]",
                    "builtins.list[builtins.float]"
                ]
            ],
            [
                "Callable",
                [
                    "def (x: Any) -> Any"
                ]
            ]
        ]
    },
    "funpy.it.distinct": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.bytes]",
                    "builtins.list[builtins.float]"
                ]
            ],
            [
                "Callable",
                [
                    "def (x: Any) -> Any"
                ]
            ]
        ]
    },
    "funpy.it.len": {
        "return": [
            "int",
            [
                "<partial None>"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.mult": {
        "return": [
            "Any",
            [
                "builtins.object",
                "builtins.int",
                "builtins.float"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.int]",
                    "builtins.list[builtins.object]"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "funpy.it.contains": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.int]",
                    "builtins.list[builtins.object]"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.quantify": {
        "return": [
            "int",
            [
                "Any",
                "builtins.int"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "fn.Predicate",
                [
                    "builtins.object",
                    "def (builtins.object =) -> builtins.bool"
                ]
            ]
        ]
    },
    "funpy.it.consume": {
        "return": [
            "None",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.int]",
                    "builtins.list[builtins.object]"
                ]
            ]
        ]
    },
    "funpy.it.nth": {
        "return": [
            "Optional[Any]",
            [
                "Any",
                "builtins.object"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.first": {
        "return": [
            "Optional[Any]",
            [
                "Any",
                "builtins.object"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.second": {
        "return": [
            "Optional[Any]",
            [
                "Any",
                "builtins.object"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.third": {
        "return": [
            "Optional[Any]",
            [
                "Any",
                "builtins.object"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.last": {
        "return": [
            "Optional[Any]",
            [
                "<partial None>",
                "builtins.object"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.int]",
                    "builtins.list[builtins.object]"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.butlast": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.bytes]",
                    "builtins.list[builtins.float]"
                ]
            ]
        ]
    },
    "funpy.it.sub": {
        "return": [
            "Iterator",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "int",
                [
                    "builtins.object"
                ]
            ],
            [
                "int",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.rest": {
        "return": [
            "Iterator",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object",
                    "builtins.str",
                    "builtins.int"
                ]
            ]
        ]
    },
    "funpy.it.take": {
        "return": [
            "Iterator",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object",
                    "builtins.str",
                    "builtins.int"
                ]
            ],
            [
                "int",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.takenth": {
        "return": [
            "Iterator",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "int",
                [
                    "builtins.object"
                ]
            ],
            [
                "int",
                [
                    "builtins.object",
                    "builtins.int",
                    "builtins.float"
                ]
            ],
            [
                "int",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.takelast": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.bytes]",
                    "builtins.list[builtins.float]"
                ]
            ],
            [
                "int",
                [
                    "builtins.int",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.it.drop": {
        "return": [
            "Iterator",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object",
                    "builtins.str",
                    "builtins.int"
                ]
            ],
            [
                "int",
                [
                    "builtins.object",
                    "builtins.str",
                    "builtins.int"
                ]
            ]
        ]
    },
    "funpy.it.dropnth": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.it.droplast": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.bytes]",
                    "builtins.list[builtins.float]"
                ]
            ],
            [
                "int",
                [
                    "builtins.int",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.it.find": {
        "return": [
            "Optional[Any]",
            [
                "builtins.object"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.bytes]",
                    "builtins.list[builtins.float]"
                ]
            ],
            [
                "fn.Predicate",
                [
                    "def (builtins.object =) -> builtins.bool"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.pad": {
        "return": [
            "Iterator",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.cons": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.conj": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.object"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.iterate": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Callable",
                [
                    "Any"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.iterwith": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Any",
                [
                    "Any"
                ]
            ]
        ]
    },
    "funpy.it.tabulate": {
        "return": [
            "Iterator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Callable",
                [
                    "builtins.object"
                ]
            ],
            [
                "int",
                [
                    "builtins.object",
                    "builtins.int",
                    "builtins.float"
                ]
            ],
            [
                "int",
                [
                    "builtins.object",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "funpy.it.interleave": {
        "return": [
            "Iterator"
        ],
        "arguments": []
    },
    "funpy.it.interchange": {
        "return": [
            "Iterator"
        ],
        "arguments": []
    },
    "funpy.it.interpose": {
        "return": [
            "Iterator",
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                "Iterable",
                [
                    "builtins.str",
                    "builtins.list[builtins.int]",
                    "builtins.list[builtins.object]"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.it.slide.window": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "funpy.op.dec": {
        "return": [
            "int",
            [
                "builtins.int",
                "builtins.float"
            ]
        ],
        "arguments": [
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.op.inc": {
        "return": [
            "int",
            [
                "builtins.int",
                "builtins.float"
            ]
        ],
        "arguments": [
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.op.isneg": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.op.iszero": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "int",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.op.ispos": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.op.isodd": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.op.iseven": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "funpy.op.issome": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.op.isnone": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.op.isfalse": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.op.notin": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "Container",
                [
                    "builtins.list[builtins.int]",
                    "builtins.list[builtins.object]",
                    "builtins.list[builtins.str]"
                ]
            ],
            [
                "Any",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "funpy.op.isempty": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "Sized",
                [
                    "builtins.str",
                    "typing.Sized",
                    "builtins.list[builtins.int]"
                ]
            ]
        ]
    },
    "funpy.op.notempty": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "Sized",
                [
                    "builtins.str",
                    "typing.Sized",
                    "builtins.list[Any]"
                ]
            ]
        ]
    },
    "funpy.pp.pmap": {
        "return": [
            "Iterable"
        ],
        "arguments": [
            [
                "Callable"
            ]
        ]
    },
    "funpy.pp.mapreduce": {
        "return": [
            "Iterable"
        ],
        "arguments": [
            [
                "Callable"
            ],
            [
                "Callable"
            ]
        ]
    }
}
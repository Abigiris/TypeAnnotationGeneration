{
    "meld.app.cli.cli": {
        "return": [],
        "arguments": [
            [],
            [],
            [],
            []
        ]
    },
    "meld.app.config.config_class.Config.__init__": {
        "return": [],
        "arguments": [
            [],
            [
                "_TypePath"
            ]
        ]
    },
    "meld.app.config.config_class.Config.path": {
        "return": [],
        "arguments": [
            [],
            [
                "_TypePath"
            ]
        ]
    },
    "meld.app.config.config_class.Config._get_loader": {
        "return": [
            "Callable",
            [
                "builtins.function"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.str"
                ]
            ]
        ]
    },
    "meld.app.config.config_class.Config.load": {
        "return": [
            "dict"
        ],
        "arguments": [
            []
        ]
    },
    "meld.app.config.find._find_config_in_folder": {
        "return": [
            "str",
            [
                "pathlib.Path"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.str",
                    "pathlib.Path"
                ]
            ]
        ]
    },
    "meld.app.config.find._generate_base_config": {
        "return": [
            "str",
            [
                "pathlib.Path"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.str"
                ]
            ]
        ]
    },
    "meld.app.config.find.find_config_path": {
        "return": [
            "str",
            [
                "pathlib.Path"
            ]
        ],
        "arguments": []
    },
    "meld.app.config.load.load_json": {
        "return": [
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.str",
                    "builtins.int",
                    "builtins.bytes"
                ]
            ]
        ]
    },
    "meld.app.config.load.load_python": {
        "return": [
            [
                "Any"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ],
            [
                [
                    "builtins.str"
                ]
            ]
        ]
    },
    "meld.app.utils.plugins.get_plugin_with_attr": {
        "return": [
            "Generator",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.str"
                ]
            ]
        ]
    },
    "meld.database.classes.Column.__init__": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "Union[(None, type)]"
            ],
            [
                "bool"
            ],
            [
                "bool"
            ],
            [
                "Any"
            ],
            [
                "bool"
            ],
            [
                "bool"
            ]
        ]
    },
    "meld.database.classes.Column.db_type": {
        "return": [],
        "arguments": [
            [],
            [
                "Union[(None, type)]"
            ]
        ]
    },
    "meld.database.classes.Column._create": {
        "return": [
            "str"
        ],
        "arguments": [
            []
        ]
    },
    "meld.database.classes.Table.__init__": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "List[Column]"
            ]
        ]
    },
    "meld.database.classes.Table.name": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ]
        ]
    },
    "meld.database.classes.Table.columns": {
        "return": [],
        "arguments": [
            [],
            [
                "List[Column]"
            ]
        ]
    },
    "meld.database.classes.Table._create_query": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            [
                "bool"
            ]
        ]
    },
    "meld.database.classes.Table.create": {
        "return": [],
        "arguments": [
            [],
            [
                "Union[(sqlite3.Connection, sqlite3.Cursor)]"
            ],
            [
                "bool"
            ]
        ]
    },
    "meld.database.classes.Database.__init__": {
        "return": [],
        "arguments": [
            [],
            [
                "Union[(str, Path)]"
            ],
            [
                "List[Table]"
            ]
        ]
    },
    "meld.database.classes.Database.path": {
        "return": [],
        "arguments": [
            [],
            [
                "Union[(str, Path)]"
            ]
        ]
    },
    "meld.database.classes.Database.createTables": {
        "return": [],
        "arguments": [
            [],
            [
                "Union[(sqlite3.Connection, sqlite3.Cursor)]"
            ],
            [
                "bool"
            ]
        ]
    },
    "meld.database.database._get_builtin_tables": {
        "return": [
            [
                "builtins.list[Any]"
            ]
        ],
        "arguments": []
    },
    "meld.database.database.Database.__init__": {
        "return": [],
        "arguments": [
            [],
            [
                "_TypePath"
            ]
        ]
    },
    "meld.database.database.Database.init_tables": {
        "return": [],
        "arguments": [
            [],
            [
                "sqlite3.Cursor"
            ],
            [
                "bool"
            ]
        ]
    },
    "meld.plugins.config.cli.config": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": []
    },
    "meld.plugins.config.cli.show": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "meld.plugins.config.cli.path": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "Any"
                ]
            ]
        ]
    },
    "meld.plugins.config.show.show": {
        "return": [],
        "arguments": [
            [
                "Union[(dict, Config)]"
            ],
            []
        ]
    },
    "meld.plugins.import_.cli.cli": {
        "return": [],
        "arguments": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    "meld.plugins.import_.main.main": {
        "return": [],
        "arguments": [
            [
                "List[Union[(Path, str)]]"
            ],
            [
                "Database"
            ],
            [
                "str"
            ],
            [
                "Optional[int]"
            ],
            [
                "Optional[str]"
            ],
            [
                "List[str]"
            ],
            [
                "bool"
            ]
        ]
    },
    "meld.plugins.import_.photos.generatePhotoList": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Iterable[PathType]",
                [
                    "Any"
                ]
            ],
            [
                "List[str]",
                [
                    "builtins.list[builtins.object]",
                    "builtins.list[builtins.str]"
                ]
            ],
            [
                "bool",
                [
                    "builtins.object",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "meld.plugins.import_.photos.isSupportedImage": {
        "return": [
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "PathType",
                [
                    "builtins.str"
                ]
            ],
            [
                "List[str]",
                [
                    "builtins.list[builtins.object]",
                    "builtins.list[builtins.str]"
                ]
            ]
        ]
    },
    "meld.plugins.import_.photos.Photo.__init__": {
        "return": [],
        "arguments": [
            [],
            [
                "PathType"
            ]
        ]
    },
    "meld.plugins.import_.photos.Photo._insert_data": {
        "return": [
            "dict"
        ],
        "arguments": [
            [],
            [
                "Optional[int]"
            ]
        ]
    },
    "meld.plugins.import_.photos.Photo._insert_qry": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            [
                "Optional[int]"
            ]
        ]
    },
    "meld.plugins.import_.photos.Photo._insert_debug_qry": {
        "return": [
            "str"
        ],
        "arguments": [
            [],
            [
                "Optional[int]"
            ]
        ]
    },
    "meld.plugins.import_.photos.Photo.insert": {
        "return": [],
        "arguments": [
            [],
            [
                "Union[(sqlite3.Connection, sqlite3.Cursor)]"
            ],
            [
                "Optional[int]"
            ]
        ]
    },
    "meld.plugins.import_.photos.PhotoSet.__init__": {
        "return": [],
        "arguments": [
            [],
            [
                "str"
            ],
            [
                "int"
            ],
            [
                "List[Photo]"
            ],
            [
                "Optional[str]"
            ]
        ]
    },
    "meld.plugins.import_.photos.PhotoSet._insert_data": {
        "return": [
            "dict"
        ],
        "arguments": [
            []
        ]
    },
    "meld.plugins.import_.photos.PhotoSet._insert_qry": {
        "return": [
            "str"
        ],
        "arguments": [
            []
        ]
    },
    "meld.plugins.import_.photos.PhotoSet._insert_debug_qry": {
        "return": [
            "str"
        ],
        "arguments": [
            []
        ]
    },
    "meld.plugins.import_.photos.PhotoSet.insert": {
        "return": [],
        "arguments": [
            [],
            [
                "Union[(sqlite3.Connection, sqlite3.Cursor)]"
            ]
        ]
    },
    "meld.plugins.import_.photos.PhotoSet.addPhoto": {
        "return": [],
        "arguments": [
            [],
            [
                "Photo"
            ]
        ]
    },
    "meld.plugins.import_.utils.deleteForbiddenCharacters.deleteForbiddenCharacters": {
        "return": [
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.str",
                    "builtins.list[builtins.str]"
                ]
            ]
        ]
    },
    "meld.plugins.move.cli.move": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.object"
                ]
            ],
            [
                [
                    "builtins.object"
                ]
            ],
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "meld.plugins.move.main.main": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": []
    },
    "meld.plugins.plugins.cli.cli": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": []
    },
    "meld.plugins.plugins.cli.list_": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "meld.plugins.plugins.list_.main": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.object",
                    "builtins.str"
                ]
            ]
        ]
    },
    "meld.plugins.version.cli.version": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": []
    },
    "meld.plugins.version.main.main": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": []
    },
    "meld.plugins._template.cli.cli": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.object"
                ]
            ],
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "meld.plugins._template.main.main": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": []
    },
    "meld.utils.import_from_path._isPackage": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "Path",
                [
                    "Any"
                ]
            ],
            [
                "bool",
                [
                    "builtins.object",
                    "builtins.int",
                    "builtins.float"
                ]
            ]
        ]
    },
    "meld.utils.import_from_path._isModule": {
        "return": [
            "bool",
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                "Path",
                [
                    "pathlib.Path"
                ]
            ],
            [
                "bool",
                [
                    "builtins.bool"
                ]
            ]
        ]
    },
    "meld.utils.import_from_path.loadModulesFromDir": {
        "return": [
            "List[ModuleType]",
            [
                "builtins.list[types.ModuleType]"
            ]
        ],
        "arguments": [
            [
                "Union[(str, Path)]",
                [
                    "pathlib.Path",
                    "builtins.str"
                ]
            ]
        ]
    },
    "test.app.config.test_base_config.BaseConfig.testConfigIsDict": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_base_config.ConfigSettingDatabase.testConfigHasKeyDatabase": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_base_config.ConfigSettingDatabase.testDatabaseNameIsStr": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigLoader.testPythonExt": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigLoader.testJSONExt": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigLoader.testUnsupportedExtension": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigConstructor.setUpClass": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigConstructor.tearDownClass": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigConstructor.setUp": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigConstructor.assertHasAttr": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.object"
                ]
            ],
            [
                [
                    "builtins.str"
                ]
            ],
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "test.app.config.test_class.ConfigConstructor.testHasPathAttribute": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigConstructor.testHasExtAttribute": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigConstructor.testHasContentAttribute": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigConstructor.testPathAttributeIsPathlibPath": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigConstructor.testExtAttributeIsStr": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigConstructor.testContentAttributeIsDict": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_class.ConfigConstructor.testContentShouldBeLoaded": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find._isPosix": {
        "return": [
            [
                "builtins.bool"
            ]
        ],
        "arguments": []
    },
    "test.app.config.test_find.FindConfigInFolder.setUpClass": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.FindConfigInFolder.tearDownClass": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.FindConfigInFolder.tearDown": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.FindConfigInFolder.testOnlyJSONInUserFolder": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.FindConfigInFolder.testReturnTypeIsPath": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.FindConfigInFolder.testOnlyPyInUserFolder": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.FindConfigInFolder.testMultipleConfigInUserFolder": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.FindConfigInFolder.testOnlyJSONInAppFolder": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.FindConfigInFolder.testOnlyPyInAppFolder": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.FindConfigInFolder.testMultipleConfigInAppFolder": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.FindConfigInFolder.testNoConfigInAnyFolder": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.FindConfigInFolder.testJSONConfigInAllFolders": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.GenerateBaseConfig.tearDown": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.GenerateBaseConfig.testNoErrors": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.GenerateBaseConfig.testConfigExt": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.GenerateBaseConfig.testReadConfig": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_find.GenerateBaseConfig.testConfigContent": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_loader.JSONConfig.setUp": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_loader.JSONConfig.tearDown": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_loader.JSONConfig.testPathIsString": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_loader.JSONConfig.testPathIsPathlibPath": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_loader.PythonConfig.setUp": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_loader.PythonConfig.tearDown": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_loader.PythonConfig.testPathIsString": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_loader.PythonConfig.testPathIsPathlibPath": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.app.config.test_loader.PythonConfig.testDifferentVarName": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.ColumnConstructor.testBaseCase": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.ColumnCreateQuery.testColumnCreate": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.ColumnCreateQuery.testColumnCreatePrimaryKey": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.ColumnCreateQuery.testColumnCreateNotNull": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.ColumnCreateQuery.testColumnCreateUnique": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.ColumnCreateQuery.testColumnCreateAutoincrement": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.ColumnCreateQuery.testColumnCreateDefault": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.TableConstructor.testBaseCase": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.TableConstructor.testColumnsNotListWrapped": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.TableConstructor.testColumnsEmptyList": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.TableCreateQuery.testSingleColumn": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.TableCreateQuery.testSingleColumnIfNotExist": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.TableCreateQuery.testMultiColumn": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.TableCreateQuery.testMultiColumnIfNotExists": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.database.test_classes.DatabaseConstructor.testBaseCase": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.plugins.test_version.captured_output": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": []
    },
    "test.plugins.test_version.Main.testConsoleOutput": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.plugins.test_version.CLI.testCLI": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_app_data.isPosix": {
        "return": [
            [
                "builtins.bool"
            ]
        ],
        "arguments": []
    },
    "test.utils.test_app_data.PosixAppDataDir.setUp": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.utils.test_app_data.PosixAppDataDir.tearDown": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.utils.test_app_data.PosixAppDataDir.testType": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_app_data.PosixAppDataDir.testPath": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_app_data.PosixAppDataDir.testMkdir": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_app_data.WindowsAppDataDir.setUp": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.utils.test_app_data.WindowsAppDataDir.tearDown": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "test.utils.test_app_data.WindowsAppDataDir.testType": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_app_data.WindowsAppDataDir.testPath": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_app_data.WindowsAppDataDir.testMkdir": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_logger.isPosix": {
        "return": [
            [
                "builtins.bool"
            ]
        ],
        "arguments": []
    },
    "test.utils.test_logger.PosixLogDir.testType": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_logger.PosixLogDir.testPath": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_logger.PosixLogDir.testmkdir": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_logger.StreamHandler.testFormatter": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_logger.FileHandler.testFormatter": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_logger.FileHandler.testFilePath": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_logger.FileHandler.testLogLevel": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_logger.Logger.testHandlersSet": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    },
    "test.utils.test_logger.Logger.testFirstHandler": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            []
        ]
    }
}
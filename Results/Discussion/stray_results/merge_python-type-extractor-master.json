{
    "py_codegen.plugins.typescript.Converter.TypescriptConverter.__init__": {
        "return": [],
        "arguments": [
            [],
            [
                "TypeExtractor"
            ]
        ]
    },
    "py_codegen.plugins.typescript.Converter.TypescriptConverter.get_identifier": {
        "return": [
            "str",
            [
                "builtins.str",
                "Any"
            ]
        ],
        "arguments": [
            [],
            [
                "NodeType",
                [
                    "builtins.dict[builtins.str, py_codegen.type_extractor.nodes.BaseNodeType.BaseNodeType]",
                    "builtins.str",
                    "builtins.int"
                ]
            ]
        ]
    },
    "py_codegen.plugins.typescript.Converter.TypescriptConverter.run": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "py_codegen.plugins.typescript.Converter.TypescriptConverter.__convert_builtin": {
        "return": [
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [],
            [
                "type",
                [
                    "builtins.object",
                    "builtins.type"
                ]
            ]
        ]
    },
    "py_codegen.plugins.typescript.Converter.TypescriptConverter.__convert_node_dict": {
        "return": [
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [],
            [
                "Dict[(str, NodeType)]",
                [
                    "builtins.dict[builtins.bool, builtins.str]",
                    "builtins.dict[builtins.bytes, builtins.str]",
                    "builtins.dict[builtins.float, builtins.str]"
                ]
            ],
            [
                "str",
                [
                    "builtins.object",
                    "builtins.str"
                ]
            ]
        ]
    },
    "py_codegen.plugins.typescript.Converter.TypescriptConverter.convert_class_found": {
        "return": [
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [],
            [
                "ClassFound",
                [
                    "Any"
                ]
            ]
        ]
    },
    "py_codegen.plugins.typescript.Converter.TypescriptConverter.convert_functions_found": {
        "return": [
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [],
            [
                "FunctionFound",
                [
                    "Any"
                ]
            ]
        ]
    },
    "py_codegen.plugins.typescript.Converter.TypescriptConverter.convert_typed_dict_found": {
        "return": [
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [],
            [
                "TypedDictFound",
                [
                    "Any"
                ]
            ]
        ]
    },
    "py_codegen.plugins.typescript.__tests__.test_classes_with_union_field.test_typescript_converter_classes_with_union_field": {
        "return": [],
        "arguments": []
    },
    "py_codegen.test_fixtures.func_not_annotated.func_not_annotated": {
        "return": [
            [
                "None"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.test_fixtures.func_return_none.func_return_nullable": {
        "return": [
            "None",
            [
                "None"
            ]
        ],
        "arguments": [
            [
                "Optional[str]",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.test_fixtures.func_with_builtin_type_args.func_with_builtin_args": {
        "return": [
            "int",
            [
                "builtins.int",
                "builtins.float"
            ]
        ],
        "arguments": [
            [
                "int",
                [
                    "builtins.int",
                    "builtins.float",
                    "builtins.bool"
                ]
            ]
        ]
    },
    "py_codegen.test_fixtures.func_with_dict.func_with_dict": {
        "return": [
            "Dict[(str, int)]",
            [
                "builtins.object"
            ]
        ],
        "arguments": [
            [
                "Dict[(str, int)]",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.test_fixtures.func_with_list.func_with_list": {
        "return": [
            "List[str]",
            [
                "builtins.object"
            ]
        ],
        "arguments": [
            [
                "List[str]",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.test_fixtures.func_with_typed_dict.func_with_typed_dict": {
        "return": [
            "OutputType",
            [
                "builtins.dict[builtins.object, builtins.str]"
            ]
        ],
        "arguments": [
            [
                "NestedTypedDict",
                [
                    "Any"
                ]
            ]
        ]
    },
    "py_codegen.test_fixtures.func_with_typed_dict.SomeClass.__init__": {
        "return": [],
        "arguments": [
            [],
            [
                "int"
            ]
        ]
    },
    "py_codegen.type_extractor.mock_type_extractor.MockTypeExtractor.__init__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "py_codegen.type_extractor.mock_type_extractor.MockTypeExtractor.add_function": {
        "return": [
            [
                "def (func: Any) -> Any"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.mock_type_extractor.MockTypeExtractor.add_class": {
        "return": [
            [
                "def (_class: Any) -> Any"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.mock_type_extractor.MockTypeExtractor.add_function.add_function_decoration": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "py_codegen.type_extractor.mock_type_extractor.MockTypeExtractor.add_class.add_class_decoration": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "py_codegen.type_extractor.type_extractor.is_builtin": {
        "return": [
            [
                "builtins.bool"
            ]
        ],
        "arguments": [
            [
                [
                    "builtins.object",
                    "builtins.str",
                    "builtins.int"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.__init__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.add_function": {
        "return": [
            [
                "def (func: Any) -> Any"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.__process_params": {
        "return": [],
        "arguments": [
            [],
            [
                "Dict[(str, Union[(type, None)])]"
            ],
            [
                "List[str]"
            ]
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.__process_param": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.__process_dict": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.__process_list": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.__process_union": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.__to_class_found": {
        "return": [],
        "arguments": [
            [],
            []
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.__to_function_found": {
        "return": [
            "FunctionFound"
        ],
        "arguments": [
            [],
            [
                "Callable"
            ]
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.__add_class_found": {
        "return": [],
        "arguments": [
            [],
            [
                "ClassFound"
            ]
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.add_class": {
        "return": [
            [
                "def (_class: Any) -> Any"
            ]
        ],
        "arguments": [
            [],
            [
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.add_function.add_function_decoration": {
        "return": [],
        "arguments": [
            [
                "Callable"
            ]
        ]
    },
    "py_codegen.type_extractor.type_extractor.TypeExtractor.add_class.add_class_decoration": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "py_codegen.type_extractor.errors.DuplicateNameFound.DuplicateNameFound.__init__": {
        "return": [],
        "arguments": [
            [],
            [
                "NodeType"
            ],
            [
                "NodeType"
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.ClassFound.set_fields_extra": {
        "return": [
            [
                "def (class_found: Any, extra: Any) -> Any"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.ClassFound.get_fields_extra": {
        "return": [
            "Callable[([ClassFound], Optional[Dict[(str, Any)]])]",
            [
                "def (class_found: Any) -> Any"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.ClassFound.set_fields_extra.__set_fields_extra": {
        "return": [],
        "arguments": [
            [
                "ClassFound"
            ],
            [
                "Dict[(str, Any)]"
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.ClassFound.get_fields_extra.__get_fields_extra": {
        "return": [],
        "arguments": [
            [
                "ClassFound"
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.FunctionFound.set_params_extra": {
        "return": [
            [
                "def (func_found: Any, extra: Any) -> Any"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.FunctionFound.get_params_extra": {
        "return": [
            "Callable[([FunctionFound], Optional[Dict[(str, Any)]])]",
            [
                "def (func_found: Any) -> Any"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.FunctionFound.set_return_type_extra": {
        "return": [
            "Callable[([FunctionFound, Any], None)]",
            [
                "def (func_found: Any, extra: Any) -> Any"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.FunctionFound.get_return_type_extra": {
        "return": [
            "Callable[([FunctionFound], Optional[Any])]",
            [
                "def (func_found: Any) -> Any"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.object"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.FunctionFound.set_params_extra.__set_fields_extra": {
        "return": [],
        "arguments": [
            [
                "FunctionFound"
            ],
            [
                "Dict[(str, Any)]"
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.FunctionFound.get_params_extra.__get_params_extra": {
        "return": [],
        "arguments": [
            [
                "FunctionFound"
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.FunctionFound.set_return_type_extra.__set_return_type_extra": {
        "return": [],
        "arguments": [
            [
                "FunctionFound"
            ],
            [
                "Any"
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.FunctionFound.get_return_type_extra.__get_return_type_extra": {
        "return": [],
        "arguments": [
            [
                "FunctionFound"
            ]
        ]
    },
    "py_codegen.type_extractor.nodes.UnknownFound.INTERNAL___UnknownFound.__new__": {
        "return": [],
        "arguments": [
            []
        ]
    },
    "py_codegen.type_extractor.nodes.utils.strip_margin.strip_margin": {
        "return": [
            "str",
            [
                "builtins.str"
            ]
        ],
        "arguments": [
            [
                "str",
                [
                    "builtins.str",
                    "builtins.bytes"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.__tests__.test_class_with_union_field.test_class_with_union_field": {
        "return": [],
        "arguments": []
    },
    "py_codegen.type_extractor.__tests__.test_func_not_annotated.test_func_not_annotated": {
        "return": [],
        "arguments": []
    },
    "py_codegen.type_extractor.__tests__.test_func_with_arg_class.test_func_with_arg_class": {
        "return": [],
        "arguments": []
    },
    "py_codegen.type_extractor.__tests__.test_func_with_arg_class.test_func_with_arg_class.func_with_arg_class": {
        "return": [
            "ArgClass"
        ],
        "arguments": [
            [
                "ArgClass"
            ]
        ]
    },
    "py_codegen.type_extractor.__tests__.test_func_with_builtin_type_args.test_func_with_builtin_type_args": {
        "return": [],
        "arguments": []
    },
    "py_codegen.type_extractor.__tests__.test_func_with_dict.test_func_with_dict": {
        "return": [],
        "arguments": []
    },
    "py_codegen.type_extractor.__tests__.test_func_with_list.test_func_with_list": {
        "return": [],
        "arguments": []
    },
    "py_codegen.type_extractor.__tests__.test_func_with_nested_arg_class.test_func_with_nested_arg_class": {
        "return": [],
        "arguments": []
    },
    "py_codegen.type_extractor.__tests__.test_func_with_nested_arg_class.test_func_with_nested_arg_class.func_with_nested_arg_class": {
        "return": [
            "ParentClass"
        ],
        "arguments": [
            [
                "ParentClass"
            ]
        ]
    },
    "py_codegen.type_extractor.__tests__.test_func_with_typed_dict.test_func_with_typed_dict": {
        "return": [],
        "arguments": []
    },
    "py_codegen.type_extractor.__tests__.test_various_classes.test_various_classes": {
        "return": [],
        "arguments": []
    },
    "py_codegen.type_extractor.__tests__.utils.traverse": {
        "return": [
            [
                "py_codegen.type_extractor.nodes.ClassFound.ClassFound",
                "Any",
                "py_codegen.type_extractor.nodes.FunctionFound.FunctionFound",
                "builtins.bool",
                "py_codegen.type_extractor.nodes.TypedDictFound.TypedDictFound",
                "py_codegen.type_extractor.nodes.TypeOR.TypeOR",
                "py_codegen.type_extractor.nodes.ClassFound.ClassFound",
                "Any",
                "py_codegen.type_extractor.nodes.FunctionFound.FunctionFound",
                "builtins.bool",
                "py_codegen.type_extractor.nodes.TypeOR.TypeOR",
                "py_codegen.type_extractor.nodes.ClassFound.ClassFound",
                "Any",
                "py_codegen.type_extractor.nodes.FunctionFound.FunctionFound",
                "builtins.bool",
                "py_codegen.type_extractor.nodes.TypedDictFound.TypedDictFound"
            ]
        ],
        "arguments": [
            [
                "NodeType",
                [
                    "builtins.dict[builtins.str, py_codegen.type_extractor.nodes.BaseNodeType.BaseNodeType]",
                    "builtins.str",
                    "builtins.int"
                ]
            ],
            [
                "traverse_func_type",
                [
                    "Overload(def (node: builtins.bool) -> Union[Any, builtins.bool, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: builtins.bytes) -> Union[Any, builtins.bytes, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: builtins.dict[builtins.object, builtins.object]) -> Union[Any, builtins.dict[builtins.object, builtins.object], py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: builtins.float) -> Union[Any, builtins.float, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: builtins.int) -> Union[Any, builtins.int, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: builtins.list[builtins.int]) -> Union[Any, builtins.list[builtins.int], py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: builtins.list[builtins.object]) -> Union[Any, builtins.list[builtins.object], py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: builtins.list[builtins.str]) -> Union[Any, builtins.list[builtins.str], py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: builtins.set[builtins.object]) -> Union[Any, builtins.set[builtins.object], py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: builtins.str) -> Union[Any, builtins.str, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.plugins.typescript.Converter.TypescriptConverter) -> Union[Any, py_codegen.plugins.typescript.Converter.TypescriptConverter, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.test_fixtures.func_with_typed_dict.SomeClass) -> Union[Any, py_codegen.test_fixtures.func_with_typed_dict.SomeClass, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.test_fixtures.union_type_class.ClassWithUnionField) -> Union[Any, py_codegen.test_fixtures.union_type_class.ClassWithUnionField, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.test_fixtures.various_classes.SomeDataClass) -> Union[Any, py_codegen.test_fixtures.various_classes.SomeDataClass, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.test_fixtures.various_classes.SomeNamedTuple) -> Union[Any, py_codegen.test_fixtures.various_classes.SomeNamedTuple, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.test_fixtures.various_classes.SomeNormalClass) -> Union[Any, py_codegen.test_fixtures.various_classes.SomeNormalClass, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.type_extractor.__tests__.test_func_with_arg_class.ArgClass@7) -> Union[Any, py_codegen.type_extractor.__tests__.test_func_with_arg_class.ArgClass@7, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.type_extractor.__tests__.test_func_with_nested_arg_class.ChildClass@10) -> Union[Any, py_codegen.type_extractor.__tests__.test_func_with_nested_arg_class.ChildClass@10, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.type_extractor.__tests__.test_func_with_nested_arg_class.ParentClass@13) -> Union[Any, py_codegen.type_extractor.__tests__.test_func_with_nested_arg_class.ParentClass@13, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.type_extractor.mock_type_extractor.MockTypeExtractor) -> Union[Any, py_codegen.type_extractor.mock_type_extractor.MockTypeExtractor, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.type_extractor.nodes.BaseNodeType.BaseNodeType) -> Union[Any, py_codegen.type_extractor.nodes.BaseNodeType.BaseNodeType, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.type_extractor.nodes.DictFound.DictFound) -> Union[Any, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.DictFound.DictFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound], def (node: py_codegen.type_extractor.nodes.ListFound.ListFound) -> Union[Any, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound, py_codegen.type_extractor.nodes.ListFound.ListFound], def (node: py_codegen.type_extractor.nodes.NoneNode.NoneNode) -> Union[Any, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound, py_codegen.type_extractor.nodes.NoneNode.NoneNode], def (node: py_codegen.type_extractor.nodes.TypeOR.TypeOR) -> Union[Any, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound, py_codegen.type_extractor.nodes.TypeOR.TypeOR], def (node: py_codegen.type_extractor.nodes.TypedDictFound.TypedDictFound) -> Union[Any, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound, py_codegen.type_extractor.nodes.TypedDictFound.TypedDictFound], def (node: py_codegen.type_extractor.type_extractor.TypeExtractor) -> Union[Any, py_codegen.type_extractor.nodes.ClassFound.ClassFound, py_codegen.type_extractor.nodes.FunctionFound.FunctionFound, py_codegen.type_extractor.type_extractor.TypeExtractor])"
                ]
            ]
        ]
    },
    "py_codegen.type_extractor.__tests__.utils.cleanup": {
        "return": [
            [
                "py_codegen.type_extractor.nodes.ClassFound.ClassFound",
                "Any",
                "py_codegen.type_extractor.nodes.FunctionFound.FunctionFound",
                "builtins.bool",
                "py_codegen.type_extractor.nodes.ClassFound.ClassFound",
                "Any",
                "py_codegen.type_extractor.nodes.FunctionFound.FunctionFound",
                "builtins.bytes",
                "py_codegen.type_extractor.nodes.ClassFound.ClassFound",
                "Any",
                "py_codegen.type_extractor.nodes.FunctionFound.FunctionFound",
                "builtins.dict[builtins.object, builtins.object]"
            ]
        ],
        "arguments": [
            [
                "NodeType",
                [
                    "py_codegen.type_extractor.nodes.BaseNodeType.BaseNodeType",
                    "builtins.str",
                    "builtins.int"
                ]
            ]
        ]
    }
}
{
    "python-type-extractor-master/setup.py": {},
    "python-type-extractor-master/py_codegen/__init__.py": {},
    "python-type-extractor-master/py_codegen/plugins/__init__.py": {},
    "python-type-extractor-master/py_codegen/plugins/typescript/Converter.py": {
        "TypescriptConverter.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TypescriptConverter.get_identifier": {
            "name": "get_identifier",
            "location": 33,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[mypy.nodes.Node]",
                    "py_type_extractor.type_extractor.nodes.BaseNodeType.NodeType"
                ]
            }
        },
        "TypescriptConverter.run": {
            "name": "run",
            "location": 59,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypescriptConverter.__convert_builtin": {
            "name": "__convert_builtin",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "int"
                ]
            }
        },
        "TypescriptConverter.__convert_node_dict": {
            "name": "__convert_node_dict",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node_dict": [
                    "dict",
                    "Dict[str, float]",
                    "Dict[int, Dict[str, Any]]",
                    "Dict[str, str]",
                    "Dict[str, py_type_extractor.type_extractor.nodes.BaseNodeType.NodeType]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "ending": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TypescriptConverter.convert_class_found": {
            "name": "convert_class_found",
            "location": 88,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "class_found": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "TypescriptConverter.convert_functions_found": {
            "name": "convert_functions_found",
            "location": 95,
            "return": [
                "str",
                "Callable[..., T]",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": [],
                "function_found": []
            }
        },
        "TypescriptConverter.convert_typed_dict_found": {
            "name": "convert_typed_dict_found",
            "location": 102,
            "return": [
                "str",
                "Type",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "typed_dict_found": [
                    "int",
                    "mypy.nodes.TypeInfo",
                    "str"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/plugins/typescript/__init__.py": {},
    "python-type-extractor-master/py_codegen/plugins/typescript/__tests__/test_classes_with_union_field.py": {
        "test_typescript_converter_classes_with_union_field": {
            "name": "test_typescript_converter_classes_with_union_field",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "python-type-extractor-master/py_codegen/plugins/typescript/__tests__/__init__.py": {},
    "python-type-extractor-master/py_codegen/test_fixtures/func_not_annotated.py": {
        "func_not_annotated": {
            "name": "func_not_annotated",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "arg1": [
                    "Optional[str]",
                    "Optional[Callable]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/test_fixtures/func_return_none.py": {
        "func_return_nullable": {
            "name": "func_return_nullable",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "some_input": [
                    "str",
                    "IO[str]",
                    "int",
                    "Optional[bool]"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/test_fixtures/func_with_builtin_type_args.py": {
        "func_with_builtin_args": {
            "name": "func_with_builtin_args",
            "location": 1,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "bool",
                    "Callable[[Any], T]",
                    "Type[T]"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/test_fixtures/func_with_dict.py": {
        "func_with_dict": {
            "name": "func_with_dict",
            "location": 4,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "input": [
                    "Dict[str, int]",
                    "bool",
                    "str",
                    "List[str]",
                    "Callable[[], object]"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/test_fixtures/func_with_list.py": {
        "func_with_list": {
            "name": "func_with_list",
            "location": 4,
            "return": [
                "bool",
                "List[int]",
                "Sequence[int]",
                "int"
            ],
            "arguments": {
                "input": [
                    "List[str]",
                    "str",
                    "List[Tuple[Any, Any]]",
                    "bool",
                    "int",
                    "Union[str, Dict[str, str]]"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/test_fixtures/func_with_typed_dict.py": {
        "func_with_typed_dict": {
            "name": "func_with_typed_dict",
            "location": 23,
            "return": [
                "str",
                "bool",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "input": [
                    "str",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "SomeClass.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/test_fixtures/union_type_class.py": {},
    "python-type-extractor-master/py_codegen/test_fixtures/various_classes.py": {},
    "python-type-extractor-master/py_codegen/test_fixtures/__init__.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/mock_type_extractor.py": {
        "MockTypeExtractor.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTypeExtractor.add_function": {
            "name": "add_function",
            "location": 7,
            "return": [
                "Iterable[Any]"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Type",
                    "Type[Exception]",
                    "str"
                ]
            }
        },
        "MockTypeExtractor.add_class": {
            "name": "add_class",
            "location": 12,
            "return": [
                "bool",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Type",
                    "type"
                ]
            }
        },
        "MockTypeExtractor.add_function.add_function_decoration": {
            "name": "add_function_decoration",
            "location": 8,
            "return": [
                "List[str]",
                "\"Project\"",
                "str"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "Callable",
                    "Callable[[], Any]"
                ]
            }
        },
        "MockTypeExtractor.add_class.add_class_decoration": {
            "name": "add_class_decoration",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "_class": [
                    "str",
                    "Callable",
                    "list"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/type_extractor.py": {
        "is_builtin": {
            "name": "is_builtin",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "something": [
                    "str",
                    "int"
                ]
            }
        },
        "TypeExtractor.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeExtractor.add_function": {
            "name": "add_function",
            "location": 38,
            "return": [
                "Optional[Dict[mypy.nodes.Expression, mypy.types.Type]]",
                "mypy.nodes.ClassDef",
                "Iterable[Any]"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Type",
                    "Type[Exception]",
                    "str"
                ]
            }
        },
        "TypeExtractor.__process_params": {
            "name": "__process_params",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "param_names_list": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "list"
                ]
            }
        },
        "TypeExtractor.__process_param": {
            "name": "__process_param",
            "location": 70,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "dict",
                    "str",
                    "Awaitable"
                ]
            }
        },
        "TypeExtractor.__process_dict": {
            "name": "__process_dict",
            "location": 119,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]",
                "bytes",
                "Optional[Dict[str, str]]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "dict_typ": [
                    "int",
                    "Dict[str, Any]",
                    "Type[object]"
                ]
            }
        },
        "TypeExtractor.__process_list": {
            "name": "__process_list",
            "location": 127,
            "return": [
                "str",
                "List[int]",
                "List[Dict]",
                "Optional[Type]"
            ],
            "arguments": {
                "self": [],
                "list_typ": [
                    "List[str]",
                    "bool",
                    "float",
                    "Tuple[List[Any], List[str]]",
                    "dict",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "TypeExtractor.__process_union": {
            "name": "__process_union",
            "location": 131,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "type",
                "Dict[str, str]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TypeExtractor.__to_class_found": {
            "name": "__to_class_found",
            "location": 141,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "_class": [
                    "List[str]",
                    "Dict[str, mypy.nodes.MypyFile]"
                ]
            }
        },
        "TypeExtractor.__to_function_found": {
            "name": "__to_function_found",
            "location": 157,
            "return": [
                "bool",
                "Optional[mypy.nodes.TypeInfo]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Type",
                    "mypy.nodes.NameExpr"
                ]
            }
        },
        "TypeExtractor.__add_class_found": {
            "name": "__add_class_found",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "class_found": [
                    "Pattern[str]",
                    "str",
                    "Sequence",
                    "list",
                    "Union[Set[int], List[int], Dict[int, Any]]"
                ]
            }
        },
        "TypeExtractor.add_class": {
            "name": "add_class",
            "location": 178,
            "return": [
                "bool",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Type",
                    "type"
                ]
            }
        },
        "TypeExtractor.add_function.add_function_decoration": {
            "name": "add_function_decoration",
            "location": 39,
            "return": [
                "List[str]",
                "\"Project\"",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Iterable[bytes]"
                ]
            }
        },
        "TypeExtractor.add_class.add_class_decoration": {
            "name": "add_class_decoration",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "_class": [
                    "str",
                    "type"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/__init__.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/errors/DuplicateNameFound.py": {
        "DuplicateNameFound.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "found1": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "found2": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/errors/__init__.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/nodes/BaseNodeType.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/nodes/ClassFound.py": {
        "set_fields_extra": {
            "name": "set_fields_extra",
            "location": 22,
            "return": [
                "List[int]",
                "List[type]",
                "str",
                "bool",
                "int",
                "set"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "get_fields_extra": {
            "name": "get_fields_extra",
            "location": 35,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Any]",
                "Type[T]"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "Sequence[int]",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "set_fields_extra.__set_fields_extra": {
            "name": "__set_fields_extra",
            "location": 23,
            "return": [
                "BaseException",
                "Callable[..., Awaitable]",
                "str"
            ],
            "arguments": {
                "class_found": [
                    "str",
                    "bool"
                ],
                "extra": [
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "get_fields_extra.__get_fields_extra": {
            "name": "__get_fields_extra",
            "location": 38,
            "return": [
                "Optional[str]",
                "List[Callable]",
                "mypy.nodes.Lvalue",
                "str"
            ],
            "arguments": {
                "class_found": [
                    "Dict[str, Any]",
                    "Dict[str, Union[str, Set]]"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/nodes/DictFound.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/nodes/FunctionFound.py": {
        "set_params_extra": {
            "name": "set_params_extra",
            "location": 19,
            "return": [
                "Set[str]",
                "str",
                "bool",
                "set",
                "List[type]",
                "int"
            ],
            "arguments": {
                "namespace": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "get_params_extra": {
            "name": "get_params_extra",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "namespace": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "set_return_type_extra": {
            "name": "set_return_type_extra",
            "location": 42,
            "return": [
                "str",
                "dict",
                "Set[str]",
                "Union[str, 'Type']",
                "Type[T]"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "List[Tuple[Any, Any]]",
                    "bool",
                    "int"
                ]
            }
        },
        "get_return_type_extra": {
            "name": "get_return_type_extra",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "set_params_extra.__set_fields_extra": {
            "name": "__set_fields_extra",
            "location": 20,
            "return": [
                "str",
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {
                "func_found": [
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "bool"
                ],
                "extra": [
                    "Optional[bool]",
                    "\"Sequence\"",
                    "\"Alternate\"",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_params_extra.__get_params_extra": {
            "name": "__get_params_extra",
            "location": 36,
            "return": [
                "str",
                "float",
                "int",
                "bool",
                "Dict[str, Dict[str, Any]]",
                "Set[str]"
            ],
            "arguments": {
                "func_found": [
                    "Dict[Tuple[int, int], int]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "set_return_type_extra.__set_return_type_extra": {
            "name": "__set_return_type_extra",
            "location": 45,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, int]"
            ],
            "arguments": {
                "func_found": [
                    "bool",
                    "int"
                ],
                "extra": [
                    "dict",
                    "\"Sequence\"",
                    "\"Alternate\"",
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_return_type_extra.__get_return_type_extra": {
            "name": "__get_return_type_extra",
            "location": 58,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "func_found": [
                    "Dict[str, Any]",
                    "Set[str]",
                    "dict"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/nodes/ListFound.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/nodes/NoneNode.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/nodes/TypedDictFound.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/nodes/TypeOR.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/nodes/UnknownFound.py": {
        "INTERNAL___UnknownFound.__new__": {
            "name": "__new__",
            "location": 9,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Type[T]",
                    "Type",
                    "Exception"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/nodes/__init__.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/nodes/utils/strip_margin.py": {
        "strip_margin": {
            "name": "strip_margin",
            "location": 4,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/nodes/utils/__init__.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/test_circular_dep_classes.py": {},
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/test_class_with_union_field.py": {
        "test_class_with_union_field": {
            "name": "test_class_with_union_field",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/test_func_not_annotated.py": {
        "test_func_not_annotated": {
            "name": "test_func_not_annotated",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/test_func_with_arg_class.py": {
        "test_func_with_arg_class": {
            "name": "test_func_with_arg_class",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_func_with_arg_class.func_with_arg_class": {
            "name": "func_with_arg_class",
            "location": 12,
            "return": [
                "bool",
                "float",
                "Set[str]",
                "int",
                "\"Pipeline\""
            ],
            "arguments": {
                "a": [
                    "bool",
                    "Dict[str, bool]",
                    "Callable[..., T]"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/test_func_with_builtin_type_args.py": {
        "test_func_with_builtin_type_args": {
            "name": "test_func_with_builtin_type_args",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/test_func_with_dict.py": {
        "test_func_with_dict": {
            "name": "test_func_with_dict",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/test_func_with_list.py": {
        "test_func_with_list": {
            "name": "test_func_with_list",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/test_func_with_nested_arg_class.py": {
        "test_func_with_nested_arg_class": {
            "name": "test_func_with_nested_arg_class",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_func_with_nested_arg_class.func_with_nested_arg_class": {
            "name": "func_with_nested_arg_class",
            "location": 19,
            "return": [
                "bool",
                "Set[str]",
                "int",
                "mypy.nodes.TypeInfo",
                "\"Pipeline\""
            ],
            "arguments": {
                "a": [
                    "bool",
                    "mypy.nodes.Node",
                    "Dict[str, bool]"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/test_func_with_typed_dict.py": {
        "test_func_with_typed_dict": {
            "name": "test_func_with_typed_dict",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/test_various_classes.py": {
        "test_various_classes": {
            "name": "test_various_classes",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/utils.py": {
        "traverse": {
            "name": "traverse",
            "location": 17,
            "return": [
                "float",
                "SupportsInt",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "node": [
                    "mypy.nodes.Block",
                    "Callable",
                    "List[\"Block\"]",
                    "Sequence[str]"
                ],
                "func": [
                    "mypy.nodes.Block",
                    "Type['DataclassT']",
                    "Sequence[str]",
                    "bool",
                    "list",
                    "str"
                ]
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "dict",
                    "yaml.nodes.MappingNode",
                    "str",
                    "py_type_extractor.type_extractor.nodes.BaseNodeType.NodeType"
                ]
            }
        }
    },
    "python-type-extractor-master/py_codegen/type_extractor/__tests__/__init__.py": {}
}